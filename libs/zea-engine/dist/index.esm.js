const l=function(){if(!globalThis.navigator)return{isMobileDevice:!1,isIOSDevice:!1,browserName:"Node",webGLSupported:!1,gpuDesc:null,deviceCategory:"High"};const l=null!=(navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Pixel/i)||navigator.userAgent.match(/Windows Phone/i)),F=function(){const l=navigator.userAgent;let F,U,c,s=navigator.appName,B=""+parseFloat(navigator.appVersion),d=parseInt(navigator.appVersion,10);return navigator.brave?(s="Brave",U=l.indexOf("Chrome"),B=l.substring(U+7,l.indexOf(" ",U+7))):-1!=(U=l.indexOf("Opera"))?(s="Opera",B=l.substring(U+6),-1!=(U=l.indexOf("Version"))&&(B=l.substring(U+8))):-1!=(U=l.indexOf("MSIE"))?(s="Microsoft Internet Explorer",B=l.substring(U+5)):-1!=(U=l.indexOf("Edge"))?(s="Edge",B=l.substring(U+4)):-1!=(U=l.indexOf("Chrome"))?(s="Chrome",B=l.substring(U+7,l.indexOf(" ",U+7))):-1!=(U=l.indexOf("Safari"))?(s="Safari",B=l.substring(U+7),-1!=(U=l.indexOf("Version"))&&(B=l.substring(U+8))):-1!=(U=l.indexOf("Firefox"))?(s="Firefox",B=l.substring(U+8)):(F=l.lastIndexOf(" ")+1)<(U=l.lastIndexOf("/"))&&(s=l.substring(F,U),B=l.substring(U+1),s.toLowerCase()==s.toUpperCase()&&(s=navigator.appName)),-1!=(c=B.indexOf(";"))&&(B=B.substring(0,c)),-1!=(c=B.indexOf(" "))&&(B=B.substring(0,c)),d=parseInt(""+B,10),isNaN(d)&&(B=""+parseFloat(navigator.appVersion),d=parseInt(navigator.appVersion,10)),{browserName:s,fullVersion:B,majorVersion:d,appName:navigator.appName,userAgent:navigator.userAgent}}(),U=function(){let l,F;try{l=document.createElement("canvas").getContext("webgl")}catch(l){}if(!l)return;try{F=document.createElement("canvas").getContext("webgl2")}catch(l){}const U=l.getExtension("WEBGL_debug_renderer_info");if(!U)return console.warn("Unable to determine GPU Info:"),{vendor:"Unknown",renderer:"Unknown",gpuVendor:"Unknown",maxTextureSize:"Unknown",supportsWebGL2:null!=F};const c=l.getParameter(U.UNMASKED_VENDOR_WEBGL),s=l.getParameter(U.UNMASKED_RENDERER_WEBGL),B=l.getParameter(l.MAX_TEXTURE_SIZE);let d;return s.match(/NVIDIA/i)?d="NVidia":s.match(/AMD/i)||s.match(/Radeon/i)?d="AMD":s.match(/Intel/i)?d="Intel":s.match(/Mali/i)?d="ARM":s.match(/Adreno/i)?d="Adreno":console.warn("Unable to determine GPU vendor:",s),{vendor:c,renderer:s,gpuVendor:d,maxTextureSize:B,supportsWebGL2:null!=F}}();let c="Low";if(U)if(l)c="Low";else{const l=U.renderer.replace(/[()]/g,"").split(" ");if("NVidia"==U.gpuVendor){const F=l.indexOf("GTX");if(-1!=F){const U=l[F+1];if(U.endsWith("M")){c=parseInt(U.substring(0,U.length-2))>=900?"Medium":"Low"}else{c=parseInt(U)>=1030?"High":"Medium"}}else c=-1!=l.indexOf("TITAN")||-1!=l.indexOf("Quadro")?"High":"Low"}else if("AMD"==U.gpuVendor){const F=l.indexOf("Radeon");if(-1!=F){const U=l.indexOf("RX");if(-1!=U)if("Vega"==l[U+1])c="High";else{const F=l[U+1];let s;F.endsWith("X")?(s=parseInt(F.substring(0,F.length-2)),c="High"):s=parseInt(F),c=s>=480?"High":"Medium"}else if("Pro"==l[F+1]){c=parseInt(l[U+1])>=450?"Medium":"Low"}else if("Sky"==l[F+1]){c=parseInt(l[U+1])>=700?"Medium":"Low"}else c="Low"}else c=-1!=l.indexOf("FirePro")||-1!=l.indexOf("Quadro")?"High":"Low"}else("Adreno"==U.gpuVendor||"Intel"==U.gpuVendor)&&(c="Low")}return{isMobileDevice:l,isIOSDevice:null!=(navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)),browserName:F.browserName,fullVersion:F.fullVersion,majorVersion:F.majorVersion,appName:F.appName,userAgent:F.userAgent,webGLSupported:null!=U,gpuDesc:U,deviceCategory:c}}();globalThis.ZeaSystemDesc||(globalThis.ZeaSystemDesc=l);const F=0,U=1,c=2,s=3,B=4,d=5,i=6;class Q{static radToDeg(l){return l/(Math.PI/180)}static degToRad(l){return l*(Math.PI/180)}static isNumeric(l){return!isNaN(parseFloat(l))&&isFinite(l)}static randomInt(l,F){return l=Math.ceil(l),F=Math.floor(F),Math.floor(Math.random()*(F-l))+l}static lerp(l,F,U){return l+U*(F-l)}static clamp(l,F,U){return Math.min(Math.max(l,F),U)}static nearestPow2(l){return Math.pow(2,Math.round(Math.log(l)/Math.log(2)))}static nearestPow10(l){return Math.pow(10,Math.round(Math.log10(l)/Math.log10(10)))}static nextPow2(l){let F=0;for(;l>0;)F++,l>>=1;return 1<<F}static fract(l){return 0==l?0:l<0?l>-1?-l:-l%Math.floor(-l):l<1?l:l%Math.floor(l)}static remap(l,F,U,c,s){return c+(l-F)/(U-F)*(s-c)}static smoothStep(l,F,U){const c=this.clamp((U-l)/(F-l),0,1);return c*c*(3-2*c)}static linStep(l,F,U){return this.clamp((U-l)/(F-l),0,1)}static decode16BitFloatFrom2xUInt8(l){const F=l[0],U=(120&F)>>3;let c=0==U?0:2048;const s=c+((7&F)<<8)+l[1];c=0==U?1:0;return(128&F?1:-1)*s*Math.pow(2,U+c-16)}static encode16BitFloatInto2xUInt8(l){const F=new Uint8Array(2),U=l>=0?128:0;l=Math.abs(l);let c,s=15,B=1024;for(let F=15;F>0;F--)l<B&&(B/=2,s--);c=0==s?l/B/2:(l-B)/B;const d=Math.round(2048*c),i=d/256,Q=d-256*i;return F[0]=U+8*s+i,F[1]=Q,l>=2048&&(F[0]=255),F}static encode16BitFloat(l){const F=new Float32Array(1);F[0]=l;return(l=>{let F=l>>16&32768,U=l>>12&2047;const c=l>>23&255;return c<103?F:c>142?(F|=31744,F|=(255==c?0:1)&&8388607&l,F):c<113?(U|=2048,F|=(U>>114-c)+(U>>113-c&1),F):(F|=c-112<<10|U>>1,F+=1&U,F)})(new Int32Array(F.buffer)[0])}static decode16BitFloat(l){const F=(32768&l)>>15,U=(31744&l)>>10,c=1023&l;return 0==U?(F?-1:1)*Math.pow(2,-14)*(c/Math.pow(2,10)):31==U?c?NaN:1/0*(F?-1:1):(F?-1:1)*Math.pow(2,U-15)*(1+c/Math.pow(2,10))}static convertFloat32ArrayToUInt16Array(l){const F=new Uint16Array(l.length),U=new Int32Array(l.buffer),c=l=>{let F=l>>16&32768,U=l>>12&2047;const c=l>>23&255;return c<103?F:c>142?(F|=31744,F|=(255==c?0:1)&&8388607&l,F):c<113?(U|=2048,F|=(U>>114-c)+(U>>113-c&1),F):(F|=c-112<<10|U>>1,F+=1&U,F)};for(let s=0;s<l.length;s++)F[s]=c(U[s]);return F}}let t={},I={},V=[];const e={register:(l,F)=>{if(t[l])throw new Error(`There's a class registered with '${l}' name`);t[l]={blueprint:F,callbacks:[]};const U=V.length;V.push(F),I[U]=l},getBlueprint:l=>{if(t[l])return t[l].blueprint;throw new Error(l+" blueprint is not registered")},getBlueprintName:l=>{let F=l,U=l;"object"==typeof l&&(F=l.constructor,U=F.name);const c=V.indexOf(F);if(c>=0&&I[c])return I[c];throw new Error(U+" blueprint is not registered")},constructClass:(l,...F)=>{const U=t[l];if(!U)throw new Error(l+" blueprint is not registered");return new U.blueprint(...F)},flush:()=>{t={},I={},V=[]}};e.register("UInt8",0),e.register("SInt8",1),e.register("UInt16",2),e.register("SInt16",3),e.register("UInt32",4),e.register("SInt32",5),e.register("Float32",6);class X{static replaceAll(l,F,U){return l.replace(new RegExp(F,"g"),U)}static stringifyJSONWithFixedPrecision(l,F=0,U=5){return JSON.stringify(l,(l,F)=>F&&F.toFixed?Number(F.toFixed(U)):F,F)}static hashStr(l){let F,U,c,s=0;if(0===l.length)return s;for(F=0,c=l.length;F<c;F++)U=l.charCodeAt(F),s=(s<<5)-s+U,s|=0;return Math.abs(s)}}class g{isValid(){for(const l of this.__data)if(l==1/0||isNaN(l))return!1;return!0}static createFromFloat32Buffer(l,F){throw new Error("Not yet implemented for this type:"+this.constructor.name)}static createFromBuffer(l,F){throw new Error("Not yet implemented for this type:"+this.constructor.name)}static numElements(){throw new Error("Not yet implemented for this type:"+this.constructor.name)}asArray(){return this.__data}toString(){return X.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){throw new Error("Not yet implemented for this type:"+this.constructor.name)}}class a extends g{constructor(l=0,F=0){if(super(),l instanceof Float32Array||l instanceof Uint32Array||l instanceof Int32Array)this.__data=l;else if(l instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const U=l,c=F;this.__data=new Float32Array(U,c,2)}else null!=l&&"object"==typeof l?(this.__data=new Float32Array(2),this.fromJSON(l)):(this.__data=new Float32Array(2),this.__data[0]=l,this.__data[1]=F)}get x(){return this.__data[0]}set x(l){this.__data[0]=l}get y(){return this.__data[1]}set y(l){this.__data[1]=l}set(l,F){this.__data[0]=l,this.__data[1]=F}setFromOther(l){this.x=l.x,this.y=l.y}equal(l){return console.warn("Deprecated. Use #isEqual instead."),this.isEqual(l)}isEqual(l){return this.x==l.x&&this.y==l.y}notEquals(l){return console.warn("Deprecated. Use #notEqual instead."),this.notEqual(l)}notEqual(l){return this.x!=l.x&&this.y!=l.y}approxEqual(l,F=Number.EPSILON){return Math.abs(this.x-l.x)<F&&Math.abs(this.y-l.y)<F}add(l){return new a(this.x+l.x,this.y+l.y)}addInPlace(l){this.x+=l.x,this.y+=l.y}subtract(l){return new a(this.x-l.x,this.y-l.y)}subtractInPlace(l){return this.x-=l.x,this.y-=l.y,this}scale(l){return new a(this.x*l,this.y*l)}scaleInPlace(l){this.x*=l,this.y*=l}invert(){return new a(1/this.x,1/this.y)}invertInPlace(){return this.x=1/this.x,this.y=1/this.y,this}multiply(l){return new a(this.x*l.x,this.y*l.y)}multiplyInPlace(l){this.x*=l.x,this.y*=l.y}lengthSquared(){const l=this.__data[0],F=this.__data[1];return l*l+F*F}length(){return Math.sqrt(this.lengthSquared())}distanceTo(l){const F=this.__data[0]-l.x,U=this.__data[1]-l.y;return Math.sqrt(F*F+U*U)}normalize(){const l=this.__data[0],F=this.__data[1];let U=l*l+F*F;return U<Number.EPSILON?new a:(U=1/Math.sqrt(U),new a(l*U,F*U))}normalizeInPlace(){const l=this.__data[0],F=this.__data[1];let U=l*l+F*F;U<Number.EPSILON||(U=1/Math.sqrt(U),this.set(l*U,F*U))}dot(l){return this.x*l.x+this.y*l.y}cross(l){return this.x*l.y-this.y*l.x}angleTo(l){const F=this.normalize().dot(l.normalize());return F>1?0:F<-1?Math.PI:Math.acos(F)}signedAngleTo(l){const F=this.angleTo(l);return this.cross(l)<0?-F:F}rotate(l){const F=Math.cos(l),U=Math.sin(l);return new a(this.x*F-this.y*U,this.x*U+this.y*F)}lerp(l,F){const U=this.x,c=this.y;return new a(U+F*(l.x-U),c+F*(l.y-c))}setRandomDir(l=1){const F=2*Math.random()*Math.PI;return this.__data[0]=Math.cos(F)*zScale,this.__data[1]=Math.sin(F)*zScale,this}setRandom(l=1){return this.__data[0]=Math.random()*l,this.__data[1]=Math.random()*l,this}clone(){return new a(this.__data[0],this.__data[1])}asArray(){return this.__data}static create(...l){return new a(...l)}static createFromFloat32Buffer(l,F=0){return console.warn("Deprecated, use #createFromBuffer instead"),this.createFromBuffer(l,4*F)}static createFromBuffer(l,F){return new a(new Float32Array(l,F,2))}static createFromFloat32Array(l){return new a(l)}static numElements(){return 2}toJSON(){return{x:this.x,y:this.y}}fromJSON(l){this.x=l.x,this.y=l.y}readBinary(l){this.x=l.loadFloat32(),this.y=l.loadFloat32()}}e.register("Vec2",a);class Z extends g{constructor(l=0,F=0,U=0){if(super(),l instanceof Float32Array||l instanceof Uint32Array)this.__data=l;else if(l instanceof ArrayBuffer){console.warn("deprecated, please use new Vec3(new Float32Array(buffer, byteOffset, 3))");const U=l,c=F;this.__data=new Float32Array(U,c,3)}else null!=l&&"object"==typeof l?(this.__data=new Float32Array(3),this.fromJSON(l)):(this.__data=new Float32Array(3),this.__data[0]=l,this.__data[1]=F,this.__data[2]=U)}get x(){return this.__data[0]}set x(l){this.__data[0]=l}get y(){return this.__data[1]}set y(l){this.__data[1]=l}get z(){return this.__data[2]}set z(l){this.__data[2]=l}get xy(){return new a(this.__data[0],this.__data[1])}get yz(){return new a(this.__data[1],this.__data[2])}set(l,F,U){this.x=l,this.y=void 0!==F?F:l,this.z=void 0!==U?U:l}setDataArray(l){this.__data=l}setFromOther(l){this.x=l.x,this.y=l.y,this.z=l.z}isNull(){return Math.abs(this.x)<Number.EPSILON&&Math.abs(this.y)<Number.EPSILON&&Math.abs(this.z)<Number.EPSILON}is111(){return Math.abs(1-this.x)<Number.EPSILON&&Math.abs(1-this.y)<Number.EPSILON&&Math.abs(1-this.z)<Number.EPSILON}equal(l){return console.warn("Deprecated. Use #isEqual instead."),this.equals(l)}isEqual(l){return this.x==l.x&&this.y==l.y&&this.z==l.z}notEquals(l){return console.warn("Deprecated. Use #notEqual instead."),this.notEqual(l)}notEqual(l){return this.x!=l.x&&this.y!=l.y&&this.z!=l.z}approxEqual(l,F=Number.EPSILON){return Math.abs(this.x-l.x)<F&&Math.abs(this.y-l.y)<F&&Math.abs(this.z-l.z)<F}add(l){return new Z(this.x+l.x,this.y+l.y,this.z+l.z)}addInPlace(l){this.x+=l.x,this.y+=l.y,this.z+=l.z}subtract(l){return new Z(this.x-l.x,this.y-l.y,this.z-l.z)}subtractInPlace(l){this.x-=l.x,this.y-=l.y,this.z-=l.z}multiply(l){return new Z(this.x*l.x,this.y*l.y,this.z*l.z)}multiplyInPlace(l){this.x*=l.x,this.y*=l.y,this.z*=l.z}divide(l){return new Z(this.x/l.x,this.y/l.y,this.z/l.z)}divideInPlace(l){this.x/=l.x,this.y/=l.y,this.z/=l.z}scale(l){return new Z(this.x*l,this.y*l,this.z*l)}scaleInPlace(l){this.x*=l,this.y*=l,this.z*=l}negate(){return new Z(-this.x,-this.y,-this.z)}inverse(){return new Z(1/this.x,1/this.y,1/this.z)}lengthSquared(){const l=this.__data[0],F=this.__data[1],U=this.__data[2];return l*l+F*F+U*U}length(){return Math.sqrt(this.lengthSquared())}distanceTo(l){const F=this.__data[0]-l.x,U=this.__data[1]-l.y,c=this.__data[2]-l.z;return Math.sqrt(F*F+U*U+c*c)}normalize(){let l=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];return l<Number.EPSILON?new Z:(l=1/Math.sqrt(l),new Z(this.__data[0]*l,this.__data[1]*l,this.__data[2]*l))}normalizeInPlace(){let l=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(l<Number.EPSILON)return;l=Math.sqrt(l);const F=1/l;return this.__data[0]*=F,this.__data[1]*=F,this.__data[2]*=F,l}resize(l){const F=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(F<Number.EPSILON)return;const U=l/Math.sqrt(F);return new Z(this.__data[0]*U,this.__data[1]*U,this.__data[2]*U)}resizeInPlace(l){const F=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(F<Number.EPSILON)return;const U=l/Math.sqrt(F);this.__data[0]*=U,this.__data[1]*=U,this.__data[2]*=U}dot(l){return this.x*l.x+this.y*l.y+this.z*l.z}cross(l){const F=this.x,U=this.y,c=this.z,s=l.x,B=l.y,d=l.z;return new Z(U*d-c*B,c*s-F*d,F*B-U*s)}angleTo(l){const F=this.dot(l);return F>1?0:Math.acos(F)}lerp(l,F){const U=this.x,c=this.y,s=this.z;return new Z(U+F*(l.x-U),c+F*(l.y-c),s+F*(l.z-s))}abs(){return new Z(Math.abs(this.x),Math.abs(this.y),Math.abs(this.z))}setRandomDir(l=1){const F=2*Math.random()*Math.PI,U=2*Math.random()-1,c=Math.sqrt(1-U*U)*l;return this.__data[0]=Math.cos(F)*c,this.__data[1]=Math.sin(F)*c,this.__data[2]=U*l,this}setRandom(l=1){return this.__data[0]=(Math.random()-.5)*l,this.__data[1]=(Math.random()-.5)*l,this.__data[2]=(Math.random()-.5)*l,this}clone(){return new Z(this.__data[0],this.__data[1],this.__data[2])}asArray(){return this.__data}static create(...l){return new Z(...l)}static createFromJSON(l){const F=new Z;return F.fromJSON(l),F}static createFromFloat32Buffer(l,F=0){return console.warn("Deprecated, use #createFromBuffer instead"),this.createFromBuffer(l,4*F)}static createFromBuffer(l,F){return new Z(new Float32Array(l,F,3))}static createFromFloat32Array(l){return new Z(l)}static numElements(){return 3}toJSON(){return{x:this.x,y:this.y,z:this.z}}fromJSON(l){this.x=l.x,this.y=l.y,this.z=l.z}readBinary(l){this.x=l.loadFloat32(),this.y=l.loadFloat32(),this.z=l.loadFloat32()}}e.register("Vec3",Z);class x extends g{constructor(l=0,F=0,U=0,c=0){if(super(),l instanceof Float32Array||l instanceof Uint32Array)this.__data=l;else if(l instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const U=l,c=F;this.__data=new Float32Array(U,c,4)}else null!=l&&"object"==typeof l?(this.__data=new Float32Array(4),this.fromJSON(l)):(this.__data=new Float32Array(4),this.__data[0]=l,this.__data[1]=F,this.__data[2]=U,this.__data[3]=c)}get x(){return this.__data[0]}set x(l){this.__data[0]=l}get y(){return this.__data[1]}set y(l){this.__data[1]=l}get z(){return this.__data[2]}set z(l){this.__data[2]=l}get t(){return this.__data[3]}set t(l){this.__data[3]=l}get xyz(){return new Z(this.__data[0],this.__data[1],this.__data[2])}set(l,F,U,c){this.x=l,this.y=F,this.z=U,this.t=c}setFromOther(l){this.x=l.x,this.y=l.y,this.z=l.z,this.t=l.t}equal(l){return console.warn("Deprecated. Use #isEqual instead."),this.isEqual(l)}isEqual(l){return this.x==l.x&&this.y==l.y&&this.z==l.z&&this.t==l.t}notEquals(l){return console.warn("Deprecated. Use #notEqual instead."),this.notEqual(l)}notEqual(l){return this.x!=l.x&&this.y!=l.y&&this.z!=l.z&&this.t!=l.t}approxEqual(l,F=Number.EPSILON){return Math.abs(this.x-l.x)<F&&Math.abs(this.y-l.y)<F&&Math.abs(this.z-l.z)<F&&Math.abs(this.t-l.t)<F}add(l){return new x(this.x+l.x,this.y+l.y,this.z+l.z,this.t+l.t)}addInPlace(l){this.x+=l.x,this.y+=l.y,this.z+=l.z,this.t+=l.t}subtract(l){return new x(this.x-l.x,this.y-l.y,this.z-l.z,this.t-l.t)}subtractInPlace(l){this.x-=l.x,this.y-=l.y,this.z-=l.z,this.t-=l.t}multiply(l){return new x(this.x*l.x,this.y*l.y,this.z*l.z,this.t*l.t)}multiplyInPlace(l){this.x*=l.x,this.y*=l.y,this.z*=l.z,this.t*=l.t}divide(l){return new x(this.x/l.x,this.y/l.y,this.z/l.z,this.t/l.t)}divideInPlace(l){this.x/=l.x,this.y/=l.y,this.z/=l.z,this.t/=l.t}scale(l){return new x(this.x*l,this.y*l,this.z*l,this.t*l)}scaleInPlace(l){this.set(this.x*l,this.y*l,this.z*l,this.t*l)}length(){const l=this.__data[0],F=this.__data[1],U=this.__data[2],c=this.__data[2];return Math.sqrt(l*l+F*F+U*U+c*c)}lengthSquared(){const l=this.__data[0],F=this.__data[1],U=this.__data[2],c=this.__data[3];return l*l+F*F+U*U+c*c}normalize(){const l=this.__data[0],F=this.__data[1],U=this.__data[2],c=this.__data[3];let s=l*l+F*F+U*U+c*c;return s<Number.EPSILON?new x:(s=1/Math.sqrt(s),new x(l*s,F*s,U*s))}normalizeInPlace(){const l=this.__data[0],F=this.__data[1],U=this.__data[2],c=this.__data[3];let s=l*l+F*F+U*U+c*c;s<Number.EPSILON||(s=1/Math.sqrt(s),this.set(l*s,F*s,U*s,c*s))}dot(l){return this.x*l.x+this.y*l.y+this.z*l.z+this.t*b.t}cross(l){const F=this.x,U=this.y,c=this.z,s=this.t,B=l.x,d=l.y,i=l.z,Q=l.t;return new x(U*i-c*d,c*Q-s*i,s*B-F*Q,F*d-U*B)}angleTo(l){const F=this.normalize(),U=l.normalize(),c=F.dot(U);return c>1?0:Math.acos(c)}lerp(l,F){const U=this.x,c=this.y,s=this.z;return at=this.t,new x(U+F*(l.x-U),c+F*(l.y-c),s+F*(l.z-s),at+F*(l.t-at))}random(l=1){const F=2*glMatrix.RANDOM()*Math.PI,U=2*glMatrix.RANDOM()-1,c=Math.sqrt(1-U*U)*l;return out[0]=Math.cos(F)*c,out[1]=Math.sin(F)*c,out[2]=U*l,out}clone(){return new x(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}toVec3(){return new Z(this.__data[0],this.__data[1],this.__data[2])}asArray(){return this.__data}static create(...l){return new Z(...l)}static createFromFloat32Buffer(l,F=0){return console.warn("Deprecated, use #createFromBuffer instead"),new x(new Float32Array(l,4*F,4))}static createFromBuffer(l,F){return new x(new Float32Array(l,F,4))}static numElements(){return 4}toJSON(){return{x:this.x,y:this.y,z:this.z,t:this.t}}fromJSON(l){this.x=l.x,this.y=l.y,this.z=l.z,this.t=l.t}readBinary(l){this.x=l.loadFloat32(),this.y=l.loadFloat32(),this.z=l.loadFloat32(),this.t=l.loadFloat32()}}e.register("Vec4",x);class G extends g{constructor(l=0,F=0,U=0,c=255){if(super(),l instanceof Uint8Array)this.__data=l;else if(l instanceof ArrayBuffer){const U=l,c=F;this.__data=new Uint8Array(U,c,4)}else this.__data=new Uint8Array(4),"string"==typeof l?l.startsWith("#")?this.setFromHex(l):this.setFromCSSColorName(l):(this.__data[0]=l,this.__data[1]=F,this.__data[2]=U,this.__data[3]=c)}get r(){return this.__data[0]}set r(l){this.__data[0]=l}get g(){return this.__data[1]}set g(l){this.__data[1]=l}get b(){return this.__data[2]}set b(l){this.__data[2]=l}get a(){return this.__data[3]}set a(l){this.__data[3]=l}set(l,F,U,c=255){this.r=l,this.g=F,this.b=U,this.a=c}setFromOther(l){this.r=l.r,this.g=l.g,this.b=l.b,this.a=l.a}setFromArray(l){this.r=l[0],this.g=l[1],this.b=l[2],this.a=4==l.length?l[3]:1}setFromHex(l){const F=function(l){const F=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(l);return F?{r:parseInt(F[1],16),g:parseInt(F[2],16),b:parseInt(F[3],16)}:null}(l);F?this.set(F.r,F.g,F.b):console.warn("Invalid hex code:"+l)}setFromCSSColorName(l){l.startsWith("#")?this.setFromHex(l):this.setFromHex((l=>{const F={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4","indianred ":"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};return void 0!==F[l.toLowerCase()]&&F[l.toLowerCase()]})(l))}toHex(){function l(l){const F=l.toString(16);return 1==F.length?"0"+F:F}return"#"+l(this.r)+l(this.g)+l(this.b)}equal(l){return this.r==l.r&&this.g==l.g&&this.b==l.b&&this.a==l.a}notEquals(l){return this.r!=l.r&&this.g!=l.g&&this.b!=l.b&&this.a!=l.a}approxEqual(l,F=Number.EPSILON){return Math.abs(this.r-l.r)<F&&Math.abs(this.g-l.g)<F&&Math.abs(this.b-l.b)<F&&Math.abs(this.a-l.a)<F}add(l){return new G(this.r+l.r,this.g+l.g,this.b+l.b,this.a+l.a)}subtract(l){return new G(this.r-l.r,this.g-l.g,this.b-l.b,this.a-l.a)}scale(l){return new G(this.r*l,this.g*l,this.b*l,this.a*l)}scaleInPlace(l){this.r*=l,this.g*=l,this.b*=l,this.a*=l}applyGamma(l){this.set(Math.pow(this.r,l),Math.pow(this.g,l),Math.pow(this.b,l),this.a)}toLinear(l=2.2){return new G(Math.pow(this.r,l),Math.pow(this.g,l),Math.pow(this.b,l),this.a)}toGamma(l=2.2){return new G(Math.pow(this.r,1/l),Math.pow(this.g,1/l),Math.pow(this.b,1/l),this.a)}luminance(){return.2126*this.r+.7152*this.g+.0722*this.b}lerp(l,F){const U=this.r,c=this.g,s=this.b,B=this.a;return new G(U+F*(l.r-U),c+F*(l.g-c),s+F*(l.b-s),B+F*(l.a-B))}static random(l=0,F=!1){return l>0?new G(l+Math.random()*(1-l),l+Math.random()*(1-l),l+Math.random()*(1-l),F?l+Math.random()*(1-l):1):l<0?new G(Math.random()*(1+l),Math.random()*(1+l),Math.random()*(1+l),F?Math.random()*(1+l):1):new G(Math.random(),Math.random(),Math.random(),F?Math.random():1)}clone(){return new G(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}asArray(){return this.__data}as3ComponentArray(){return[this.__data[0],this.__data[1],this.__data[2]]}static create(...l){return new G(...l)}static createFromFloat32Buffer(l,F=0){return console.warn("Deprecated, use #createFromBuffer instead"),this.createFromBuffer(l,4*F)}static createFromBuffer(l,F){return new G(new Uint8Array(l,F,4))}static numElements(){return 4}toJSON(){return{r:this.r,g:this.g,b:this.b,a:this.a}}fromJSON(l){this.r=l.r,this.g=l.g,this.b=l.b,this.a=l.a}toCSSString(){return"rgba("+Math.round(255*this.r)+", "+Math.round(255*this.g)+", "+Math.round(255*this.b)+", "+this.a+")"}}e.register("RGBA",G);class R extends g{constructor(l=0,F=0,U=0,c=1){if(super(),l instanceof Float32Array)this.__data=l;else if(l instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const U=l,c=F;this.__data=new Float32Array(U,c,4)}else this.__data=new Float32Array(4),"string"==typeof l?l.startsWith("#")?this.setFromHex(l):this.setFromCSSColorName(l):(this.__data[0]=l,this.__data[1]=F,this.__data[2]=U,this.__data[3]=c)}get r(){return this.__data[0]}set r(l){this.__data[0]=l}get g(){return this.__data[1]}set g(l){this.__data[1]=l}get b(){return this.__data[2]}set b(l){this.__data[2]=l}get a(){return this.__data[3]}set a(l){this.__data[3]=l}set(l,F,U,c=1){this.r=l,this.g=F,this.b=U,this.a=c}setFromOther(l){this.r=l.r,this.g=l.g,this.b=l.b,this.a=l.a}setFromScalarArray(l){this.r=l[0],this.g=l[1],this.b=l[2],this.a=4==l.length?l[3]:1}getAsRGBArray(){return[255*this.r,255*this.g,255*this.b]}getAsRGBDict(){return{r:255*this.r,g:255*this.g,b:255*this.b}}setFromRGB(l,F,U,c){this.r=l/255,this.g=F/255,this.b=U/255,this.a=c?c/255:1}setFromRGBArray(l){this.r=l[0]/255,this.g=l[1]/255,this.b=l[2]/255,this.a=4==l.length?l[3]/255:1}setFromRGBDict(l){this.r=l.r/255,this.g=l.g/255,this.b=l.b/255,this.a=4==l.a?l.a/255:1}setFromHex(l){const F=function(l){const F=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(l);return F?{r:parseInt(F[1],16),g:parseInt(F[2],16),b:parseInt(F[3],16)}:null}(l);F?this.setFromRGB(F.r,F.g,F.b):console.warn("Invalid hex code:"+l)}setFromCSSColorName(l){l.startsWith("#")?this.setFromHex(l):this.setFromHex((l=>{const F={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4","indianred ":"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};return void 0!==F[l.toLowerCase()]&&F[l.toLowerCase()]})(l))}toHex(){function l(l){const F=Math.round(255*l).toString(16);return 1==F.length?"0"+F:F}return"#"+l(this.r)+l(this.g)+l(this.b)}equal(l){return this.r==l.r&&this.g==l.g&&this.b==l.b&&this.a==l.a}notEquals(l){return this.r!=l.r&&this.g!=l.g&&this.b!=l.b&&this.a!=l.a}approxEqual(l,F=Number.EPSILON){return Math.abs(this.r-l.r)<F&&Math.abs(this.g-l.g)<F&&Math.abs(this.b-l.b)<F&&Math.abs(this.a-l.a)<F}add(l){return new R(this.r+l.r,this.g+l.g,this.b+l.b,this.a+l.a)}subtract(l){return new R(this.r-l.r,this.g-l.g,this.b-l.b,this.a-l.a)}scale(l){return new R(this.r*l,this.g*l,this.b*l,this.a*l)}scaleInPlace(l){this.r*=l,this.g*=l,this.b*=l,this.a*=l}applyGamma(l){this.set(Math.pow(this.r,l),Math.pow(this.g,l),Math.pow(this.b,l),this.a)}toLinear(l=2.2){return new R(Math.pow(this.r,l),Math.pow(this.g,l),Math.pow(this.b,l),this.a)}toGamma(l=2.2){return new R(Math.pow(this.r,1/l),Math.pow(this.g,1/l),Math.pow(this.b,1/l),this.a)}luminance(){return.2126*this.r+.7152*this.g+.0722*this.b}lerp(l,F){const U=this.r,c=this.g,s=this.b,B=this.a;return new R(U+F*(l.r-U),c+F*(l.g-c),s+F*(l.b-s),B+F*(l.a-B))}static random(l=0,F=!1){return l>0?new R(l+Math.random()*(1-l),l+Math.random()*(1-l),l+Math.random()*(1-l),F?l+Math.random()*(1-l):1):l<0?new R(Math.random()*(1+l),Math.random()*(1+l),Math.random()*(1+l),F?Math.random()*(1+l):1):new R(Math.random(),Math.random(),Math.random(),F?Math.random():1)}clone(){return new R(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}asArray(){return this.__data}as3ComponentArray(){return[this.__data[0],this.__data[1],this.__data[2]]}static create(...l){return new R(...l)}static createFromFloat32Buffer(l,F=0){return console.warn("Deprecated, use #createFromBuffer instead"),this.createFromBuffer(l,4*F)}static createFromBuffer(l,F){return new R(new Float32Array(l,F,4))}static numElements(){return 4}toJSON(){return{r:this.r,g:this.g,b:this.b,a:this.a}}fromJSON(l){this.r=l.r,this.g=l.g,this.b=l.b,this.a=l.a}readBinary(l){this.r=l.loadFloat32(),this.g=l.loadFloat32(),this.b=l.loadFloat32(),this.a=l.loadFloat32()}toCSSString(){return"rgba("+Math.round(255*this.r)+", "+Math.round(255*this.g)+", "+Math.round(255*this.b)+", "+this.a+")"}}e.register("Color",R);class y extends g{constructor(l=0,F=0,U=0,c=0){if(super(),isNaN(c))switch(c){case"XYZ":this.order=0;break;case"YZX":this.order=1;break;case"ZXY":this.order=2;break;case"XZY":this.order=3;break;case"ZYX":this.order=4;break;case"YXZ":this.order=5;break;default:throw new Error("Invalid Euler Angles Order:"+c)}else this.order=c;if(l instanceof ArrayBuffer){const U=l,c=F;this.__data=new Float32Array(U,c,4)}else this.__data=new Float32Array(3),this.__data[0]=l,this.__data[1]=F,this.__data[2]=U}get x(){return this.__data[0]}set x(l){this.__data[0]=l}get y(){return this.__data[1]}set y(l){this.__data[1]=l}get z(){return this.__data[2]}set z(l){this.__data[2]=l}set(l,F,U){this.__data[0]=l,this.__data[1]=F,this.__data[2]=U}}e.register("EulerAngles",y);class m extends g{constructor(l=1,F=0,U=0,c=0,s=1,B=0,d=0,i=0,Q=1){if(super(),l instanceof Float32Array||l instanceof Uint32Array)this.__data=l;else if(l instanceof ArrayBuffer){console.warn("Deprecated, please use new Vec3(new Float32Array(buffer, byteOffset, 9))");const U=l,c=F;this.__data=new Float32Array(U,c,9)}else this.__data=new Float32Array(9),this.set(l,F,U,c,s,B,d,i,Q)}get m00(){return this.__data[0]}set m00(l){this.__data[0]=l}get m01(){return this.__data[1]}set m01(l){this.__data[1]=l}get m02(){return this.__data[2]}set m02(l){this.__data[2]=l}get m10(){return this.__data[3]}set m10(l){this.__data[3]=l}get m11(){return this.__data[4]}set m11(l){this.__data[4]=l}get m12(){return this.__data[5]}set m12(l){this.__data[5]=l}get m20(){return this.__data[6]}set m20(l){this.__data[6]=l}get m21(){return this.__data[7]}set m21(l){this.__data[7]=l}get m22(){return this.__data[8]}set m22(l){this.__data[8]=l}get xAxis(){return Z.createFromBuffer(this.__data.buffer,0)}set xAxis(l){this.xAxis.set(l.x,l.y,l.z)}get yAxis(){return Z.createFromBuffer(this.__data.buffer,12)}set yAxis(l){this.yAxis.set(l.x,l.y,l.z)}get zAxis(){return Z.createFromBuffer(this.__data.buffer,24)}set zAxis(l){this.zAxis.set(l.x,l.y,l.z)}set(l=1,F=0,U=0,c=0,s=1,B=0,d=0,i=0,Q=1){this.__data[0]=l,this.__data[1]=F,this.__data[2]=U,this.__data[3]=c,this.__data[4]=s,this.__data[5]=B,this.__data[6]=d,this.__data[7]=i,this.__data[8]=Q}setIdentity(){this.set()}setFromMat(l){this.__data[0]=l.m00,this.__data[1]=l.m01,this.__data[2]=l.m02,this.__data[3]=l.m10,this.__data[4]=l.m11,this.__data[5]=l.m12,this.__data[6]=l.m20,this.__data[7]=l.m21,this.__data[8]=l.m22}setFromDirectionAndUpvector(l,F){const U=l,c=U.length();if(c<Number.EPSILON)return void this.setIdentity();U.scaleInPlace(1/c);const s=F.cross(U),B=s.length();B>Number.EPSILON&&s.scaleInPlace(1/B);const d=U.cross(s),i=d.length();i>Number.EPSILON&&d.scaleInPlace(1/i),this.set(s.x,s.y,s.z,d.x,d.y,d.z,U.x,U.y,U.z)}inverse(){const l=this.__data[0],F=this.__data[1],U=this.__data[2],c=this.__data[3],s=this.__data[4],B=this.__data[5],d=this.__data[6],i=this.__data[7],Q=this.__data[8],t=Q*s-B*i,I=-Q*c+B*d,V=i*c-s*d,e=l*t+F*I+U*V;return e?(e=1/e,new m(t*e,(-Q*F+U*i)*e,(B*F-U*s)*e,I*e,(Q*l-U*d)*e,(-B*l+U*c)*e,V*e,(-i*l+F*d)*e,(s*l-F*c)*e)):(console.warn("Unable to invert Mat3"),null)}invertInPlace(){const l=this.__data[0],F=this.__data[1],U=this.__data[2],c=this.__data[3],s=this.__data[4],B=this.__data[5],d=this.__data[6],i=this.__data[7],Q=this.__data[8],t=Q*s-B*i,I=-Q*c+B*d,V=i*c-s*d,e=l*t+F*I+U*V;return e?(e=1/e,this.set(t*e,(-Q*F+U*i)*e,(B*F-U*s)*e,I*e,(Q*l-U*d)*e,(-B*l+U*c)*e,V*e,(-i*l+F*d)*e,(s*l-F*c)*e),!0):(console.warn("Unable to invert Mat3"),!1)}transpose(){return m(this.__data[0],this.__data[3],this.__data[6],this.__data[1],this.__data[4],this.__data[7],this.__data[2],this.__data[5],this.__data[8])}transposeInPlace(){const l=this.__data[1],F=this.__data[2],U=this.__data[5];this.__data[1]=this.__data[3],this.__data[2]=this.__data[6],this.__data[3]=l,this.__data[5]=this.__data[7],this.__data[6]=F,this.__data[7]=U}transformVec3(l){return new Z(this.__data[0]*l.x+this.__data[1]*l.y+this.__data[2]*l.z,this.__data[3]*l.x+this.__data[4]*l.y+this.__data[5]*l.z,this.__data[6]*l.x+this.__data[7]*l.y+this.__data[8]*l.z)}clone(){return new m(this.__data[0],this.__data[1],this.__data[2],this.__data[3],this.__data[4],this.__data[5],this.__data[6],this.__data[7],this.__data[8],this.__data[9])}static create(...l){return new m(...l)}static createFromFloat32Buffer(l,F=0){return console.warn("Deprecated, use #createFromBuffer instead"),this.createFromBuffer(l,4*F)}static createFromBuffer(l,F){return new m(new Float32Array(l,F,9))}readBinary(l){this.__data=l.loadFloat32Array(9)}toJSON(){return this.__data}fromJSON(l){this.__data=new Float32Array(l)}toString(){return this.toJSON().toString()}}e.register("Mat3",m);class L extends g{constructor(l=1,F=0,U=0,c=0,s=0,B=1,d=0,i=0,Q=0,t=0,I=1,V=0,e=0,X=0,g=0,a=1){if(super(),l instanceof Float32Array)this.__data=l;else if(l instanceof ArrayBuffer){const U=l,c=F;this.__data=new Float32Array(U,c,16)}else this.__data=new Float32Array(16),this.set(l,F,U,c,s,B,d,i,Q,t,I,V,e,X,g,a)}get m00(){return this.__data[0]}set m00(l){this.__data[0]=l}get m01(){return this.__data[1]}set m01(l){this.__data[1]=l}get m02(){return this.__data[2]}set m02(l){this.__data[2]=l}get m03(){return this.__data[3]}set m03(l){this.__data[3]=l}get m10(){return this.__data[4]}set m10(l){this.__data[4]=l}get m11(){return this.__data[5]}set m11(l){this.__data[5]=l}get m12(){return this.__data[6]}set m12(l){this.__data[6]=l}get m13(){return this.__data[7]}set m13(l){this.__data[7]=l}get m20(){return this.__data[8]}set m20(l){this.__data[8]=l}get m21(){return this.__data[9]}set m21(l){this.__data[9]=l}get m22(){return this.__data[10]}set m22(l){this.__data[10]=l}get m23(){return this.__data[11]}set m23(l){this.__data[11]=l}get m30(){return this.__data[12]}set m30(l){this.__data[12]=l}get m31(){return this.__data[13]}set m31(l){this.__data[13]=l}get m32(){return this.__data[14]}set m32(l){this.__data[14]=l}get m33(){return this.__data[15]}set m33(l){this.__data[15]=l}get xAxis(){return Z.createFromBuffer(this.__data.buffer,0)}set xAxis(l){this.xAxis.set(l.x,l.y,l.z)}get yAxis(){return Z.createFromBuffer(this.__data.buffer,16)}set yAxis(l){this.yAxis.set(l.x,l.y,l.z)}get zAxis(){return Z.createFromBuffer(this.__data.buffer,32)}set zAxis(l){this.zAxis.set(l.x,l.y,l.z)}get translation(){return Z.createFromBuffer(this.__data.buffer,48)}set translation(l){this.translation.set(l.x,l.y,l.z)}set(l=1,F=0,U=0,c=0,s=0,B=1,d=0,i=0,Q=0,t=0,I=1,V=0,e=0,X=0,g=0,a=1){this.__data[0]=l,this.__data[1]=F,this.__data[2]=U,this.__data[3]=c,this.__data[4]=s,this.__data[5]=B,this.__data[6]=d,this.__data[7]=i,this.__data[8]=Q,this.__data[9]=t,this.__data[10]=I,this.__data[11]=V,this.__data[12]=e,this.__data[13]=X,this.__data[14]=g,this.__data[15]=a}setIdentity(){this.set()}setDataArray(l){this.__data=l}setFromMat4(l){this.__data[0]=l.m00,this.__data[1]=l.m01,this.__data[2]=l.m02,this.__data[3]=l.m03,this.__data[4]=l.m10,this.__data[5]=l.m11,this.__data[6]=l.m12,this.__data[7]=l.m13,this.__data[8]=l.m20,this.__data[9]=l.m21,this.__data[10]=l.m22,this.__data[11]=l.m23,this.__data[12]=l.m30,this.__data[13]=l.m31,this.__data[14]=l.m32,this.__data[15]=l.m33}toMat3(l){return new m(this.__data[0],this.__data[1],this.__data[2],this.__data[4],this.__data[5],this.__data[6],this.__data[8],this.__data[9],this.__data[10])}transposeInPlace(){const l=this.__data[1],F=this.__data[2],U=this.__data[3],c=this.__data[6],s=this.__data[7],B=this.__data[11];this.__data[1]=this.__data[4],this.__data[2]=this.__data[8],this.__data[3]=this.__data[12],this.__data[4]=l,this.__data[6]=this.__data[9],this.__data[7]=this.__data[13],this.__data[8]=F,this.__data[9]=c,this.__data[11]=this.__data[14],this.__data[12]=U,this.__data[13]=s,this.__data[14]=B}transpose(){return new L(this.__data[0],this.__data[4],this.__data[8],this.__data[12],this.__data[1],this.__data[5],this.__data[9],this.__data[13],this.__data[2],this.__data[6],this.__data[10],this.__data[14],this.__data[3],this.__data[7],this.__data[11],this.__data[15])}inverse(){const l=this.__data[0],F=this.__data[1],U=this.__data[2],c=this.__data[3],s=this.__data[4],B=this.__data[5],d=this.__data[6],i=this.__data[7],Q=this.__data[8],t=this.__data[9],I=this.__data[10],V=this.__data[11],e=this.__data[12],X=this.__data[13],g=this.__data[14],a=this.__data[15],b=l*B-F*s,Z=l*d-U*s,x=l*i-c*s,G=F*d-U*B,R=F*i-c*B,y=U*i-c*d,m=Q*X-t*e,n=Q*g-I*e,C=Q*a-V*e,h=t*g-I*X,u=t*a-V*X,S=I*a-V*g;let o=b*S-Z*u+x*h+G*C-R*n+y*m;return o?(o=1/o,new L((B*S-d*u+i*h)*o,(U*u-F*S-c*h)*o,(X*y-g*R+a*G)*o,(I*R-t*y-V*G)*o,(d*C-s*S-i*n)*o,(l*S-U*C+c*n)*o,(g*x-e*y-a*Z)*o,(Q*y-I*x+V*Z)*o,(s*u-B*C+i*m)*o,(F*C-l*u-c*m)*o,(e*R-X*x+a*b)*o,(t*x-Q*R-V*b)*o,(B*n-s*h-d*m)*o,(l*h-F*n+U*m)*o,(X*Z-e*G-g*b)*o,(Q*G-t*Z+I*b)*o)):(console.warn("Unable to invert Mat4"),null)}invertInPlace(){const l=this.__data[0],F=this.__data[1],U=this.__data[2],c=this.__data[3],s=this.__data[4],B=this.__data[5],d=this.__data[6],i=this.__data[7],Q=this.__data[8],t=this.__data[9],I=this.__data[10],V=this.__data[11],e=this.__data[12],X=this.__data[13],g=this.__data[14],a=this.__data[15],b=l*B-F*s,Z=l*d-U*s,x=l*i-c*s,G=F*d-U*B,R=F*i-c*B,y=U*i-c*d,m=Q*X-t*e,L=Q*g-I*e,n=Q*a-V*e,C=t*g-I*X,h=t*a-V*X,u=I*a-V*g;let S=b*u-Z*h+x*C+G*n-R*L+y*m;return S?(S=1/S,this.set((B*u-d*h+i*C)*S,(U*h-F*u-c*C)*S,(X*y-g*R+a*G)*S,(I*R-t*y-V*G)*S,(d*n-s*u-i*L)*S,(l*u-U*n+c*L)*S,(g*x-e*y-a*Z)*S,(Q*y-I*x+V*Z)*S,(s*h-B*n+i*m)*S,(F*n-l*h-c*m)*S,(e*R-X*x+a*b)*S,(t*x-Q*R-V*b)*S,(B*L-s*C-d*m)*S,(l*C-F*L+U*m)*S,(X*Z-e*G-g*b)*S,(Q*G-t*Z+I*b)*S),!0):(console.warn("Unable to invert Mat4"),!1)}setInverse(l){const F=l.__data[0],U=l.__data[1],c=l.__data[2],s=l.__data[3],B=l.__data[4],d=l.__data[5],i=l.__data[6],Q=l.__data[7],t=l.__data[8],I=l.__data[9],V=l.__data[10],e=l.__data[11],X=l.__data[12],g=l.__data[13],a=l.__data[14],b=l.__data[15],Z=F*d-U*B,x=F*i-c*B,G=F*Q-s*B,R=U*i-c*d,y=U*Q-s*d,m=c*Q-s*i,L=t*g-I*X,n=t*a-V*X,C=t*b-e*X,h=I*a-V*g,u=I*b-e*g,S=V*b-e*a;let o=Z*S-x*u+G*h+R*C-y*n+m*L;if(!o)throw new Error("Unable to invert Mat4");o=1/o,this.set((d*S-i*u+Q*h)*o,(c*u-U*S-s*h)*o,(g*m-a*y+b*R)*o,(V*y-I*m-e*R)*o,(i*C-B*S-Q*n)*o,(F*S-c*C+s*n)*o,(a*G-X*m-b*x)*o,(t*m-V*G+e*x)*o,(B*u-d*C+Q*L)*o,(U*C-F*u-s*L)*o,(X*y-g*G+b*Z)*o,(I*G-t*y-e*Z)*o,(d*n-B*h-i*L)*o,(F*h-U*n+c*L)*o,(g*x-X*R-a*Z)*o,(t*R-I*x+V*Z)*o)}multiply(l){const F=this.__data[0],U=this.__data[1],c=this.__data[2],s=this.__data[3],B=this.__data[4],d=this.__data[5],i=this.__data[6],Q=this.__data[7],t=this.__data[8],I=this.__data[9],V=this.__data[10],e=this.__data[11],X=this.__data[12],g=this.__data[13],a=this.__data[14],b=this.__data[15],Z=l.asArray();let x=Z[0],G=Z[1],R=Z[2],y=Z[3];const m=new L;return m.m00=x*F+G*B+R*t+y*X,m.m01=x*U+G*d+R*I+y*g,m.m02=x*c+G*i+R*V+y*a,m.m03=x*s+G*Q+R*e+y*b,x=Z[4],G=Z[5],R=Z[6],y=Z[7],m.m10=x*F+G*B+R*t+y*X,m.m11=x*U+G*d+R*I+y*g,m.m12=x*c+G*i+R*V+y*a,m.m13=x*s+G*Q+R*e+y*b,x=Z[8],G=Z[9],R=Z[10],y=Z[11],m.m20=x*F+G*B+R*t+y*X,m.m21=x*U+G*d+R*I+y*g,m.m22=x*c+G*i+R*V+y*a,m.m23=x*s+G*Q+R*e+y*b,x=Z[12],G=Z[13],R=Z[14],y=Z[15],m.m30=x*F+G*B+R*t+y*X,m.m31=x*U+G*d+R*I+y*g,m.m32=x*c+G*i+R*V+y*a,m.m33=x*s+G*Q+R*e+y*b,m}multiplyInPlace(l){const F=this.asArray(),U=F[0],c=F[1],s=F[2],B=F[3],d=F[4],i=F[5],Q=F[6],t=F[7],I=F[8],V=F[9],e=F[10],X=F[11],g=F[12],a=F[13],b=F[14],Z=F[15],x=l.asArray();let G=x[0],R=x[1],y=x[2],m=x[3];return this.m00=G*U+R*d+y*I+m*g,this.m01=G*c+R*i+y*V+m*a,this.m02=G*s+R*Q+y*e+m*b,this.m03=G*B+R*t+y*X+m*Z,G=x[4],R=x[5],y=x[6],m=x[7],this.m10=G*U+R*d+y*I+m*g,this.m11=G*c+R*i+y*V+m*a,this.m12=G*s+R*Q+y*e+m*b,this.m13=G*B+R*t+y*X+m*Z,G=x[8],R=x[9],y=x[10],m=x[11],this.m20=G*U+R*d+y*I+m*g,this.m21=G*c+R*i+y*V+m*a,this.m22=G*s+R*Q+y*e+m*b,this.m23=G*B+R*t+y*X+m*Z,G=x[12],R=x[13],y=x[14],m=x[15],this.m30=G*U+R*d+y*I+m*g,this.m31=G*c+R*i+y*V+m*a,this.m32=G*s+R*Q+y*e+m*b,this.m33=G*B+R*t+y*X+m*Z,this}postmultiplyInPlace(l){const F=l.asArray(),U=F[0],c=F[1],s=F[2],B=F[3],d=F[4],i=F[5],Q=F[6],t=F[7],I=F[8],V=F[9],e=F[10],X=F[11],g=F[12],a=F[13],b=F[14],Z=F[15],x=this.asArray();let G=x[0],R=x[1],y=x[2],m=x[3];return this.m00=G*U+R*d+y*I+m*g,this.m01=G*c+R*i+y*V+m*a,this.m02=G*s+R*Q+y*e+m*b,this.m03=G*B+R*t+y*X+m*Z,G=x[4],R=x[5],y=x[6],m=x[7],this.m10=G*U+R*d+y*I+m*g,this.m11=G*c+R*i+y*V+m*a,this.m12=G*s+R*Q+y*e+m*b,this.m13=G*B+R*t+y*X+m*Z,G=x[8],R=x[9],y=x[10],m=x[11],this.m20=G*U+R*d+y*I+m*g,this.m21=G*c+R*i+y*V+m*a,this.m22=G*s+R*Q+y*e+m*b,this.m23=G*B+R*t+y*X+m*Z,G=x[12],R=x[13],y=x[14],m=x[15],this.m30=G*U+R*d+y*I+m*g,this.m31=G*c+R*i+y*V+m*a,this.m32=G*s+R*Q+y*e+m*b,this.m33=G*B+R*t+y*X+m*Z,this}translateInPlace(l){const F=this.__data,U=l.x,c=l.y,s=l.z;return F[12]=F[0]*U+F[4]*c+F[8]*s+F[12],F[13]=F[1]*U+F[5]*c+F[9]*s+F[13],F[14]=F[2]*U+F[6]*c+F[10]*s+F[14],F[15]=F[3]*U+F[7]*c+F[11]*s+F[15],this}setLookAt(l,F,U){const c=l.subtract(F),s=c.length();if(s<Number.EPSILON)return void this.setIdentity();c.scaleInPlace(1/s);const B=U.cross(c),d=B.length();d>Number.EPSILON&&B.scaleInPlace(1/d);const i=c.cross(B),Q=i.length();Q>Number.EPSILON&&i.scaleInPlace(1/Q),this.set(B.x,B.y,B.z,0,i.x,i.y,i.z,0,c.x,c.y,c.z,0,l.x,l.y,l.z,1)}setRotation(l,F){const U=l.length();if(Math.abs(U)<Number.EPSILON)return null;const c=l.x/U,s=l.y/U,B=l.z/U,d=Math.sin(F),i=Math.cos(F),Q=1-i,t=this.__data;return t[0]=c*c*Q+i,t[1]=s*c*Q+B*d,t[2]=B*c*Q-s*d,t[3]=0,t[4]=c*s*Q-B*d,t[5]=s*s*Q+i,t[6]=B*s*Q+c*d,t[7]=0,t[8]=c*B*Q+s*d,t[9]=s*B*Q-c*d,t[10]=B*B*Q+i,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}setXRotation(l){const F=Math.sin(l),U=Math.cos(l),c=this.__data;return c[0]=1,c[1]=0,c[2]=0,c[3]=0,c[4]=0,c[5]=U,c[6]=F,c[7]=0,c[8]=0,c[9]=-F,c[10]=U,c[11]=0,c[12]=0,c[13]=0,c[14]=0,c[15]=1,this}setYRotation(l){const F=Math.sin(l),U=Math.cos(l),c=this.__data;return c[0]=U,c[1]=0,c[2]=-F,c[3]=0,c[4]=0,c[5]=1,c[6]=0,c[7]=0,c[8]=F,c[9]=0,c[10]=U,c[11]=0,c[12]=0,c[13]=0,c[14]=0,c[15]=1,this}setZRotation(l){const F=Math.sin(l),U=Math.cos(l),c=this.__data;return c[0]=U,c[1]=F,c[2]=0,c[3]=0,c[4]=-F,c[5]=U,c[6]=0,c[7]=0,c[8]=0,c[9]=0,c[10]=1,c[11]=0,c[12]=0,c[13]=0,c[14]=0,c[15]=1,this}transformVec4(l){const F=this.__data,U=l.x,c=l.y,s=l.z,B=l.t;return new Vec4(F[0]*U+F[4]*c+F[8]*s+F[12]*B,F[1]*U+F[5]*c+F[9]*s+F[13]*B,F[2]*U+F[6]*c+F[10]*s+F[14]*B,F[3]*U+F[7]*c+F[11]*s+F[15]*B)}transformVec3(l){const F=this.__data,U=l.x,c=l.y,s=l.z;return new Z(F[0]*U+F[4]*c+F[8]*s+F[12],F[1]*U+F[5]*c+F[9]*s+F[13],F[2]*U+F[6]*c+F[10]*s+F[14])}rotateVec3(l){const F=this.__data,U=l.x,c=l.y,s=l.z;return new Z(F[0]*U+F[4]*c+F[8]*s,F[1]*U+F[5]*c+F[9]*s,F[2]*U+F[6]*c+F[10]*s)}setPerspectiveMatrix(l,F,U,c){const s=Math.tan(.5*Math.PI-.5*l),B=1/(U-c);this.set(s/F,0,0,0,0,s,0,0,0,0,(U+c)*B,-1,0,0,U*c*B*2,0)}setOrthographicMatrix(l,F,U,c,s,B){const d=1/(l-F),i=1/(U-c),Q=1/(s-B);this.set(-2*d,0,0,0,0,-2*i,0,0,0,0,2*Q,0,(l+F)*d,(c+U)*i,(B+s)*Q,1)}setScale(l,F,U){l instanceof Z?this.set(l.x,0,0,0,0,l.y,0,0,0,0,l.z,0,0,0,0,1):this.set(l,0,0,0,0,F,0,0,0,0,U,0,0,0,0,1)}setFromMat3x4Array(l){this.set(l[0],l[1],l[2],0,l[3],l[4],l[5],0,l[6],l[7],l[8],0,l[9],l[10],l[11],1)}static createFromFloat32Buffer(l,F=0){return console.warn("Deprecated, use #createFromBuffer instead"),this.createFromBuffer(l,4*F)}static createFromBuffer(l,F){return new L(new Float32Array(l,F,16))}clone(){return new L(this.__data[0],this.__data[1],this.__data[2],this.__data[3],this.__data[4],this.__data[5],this.__data[6],this.__data[7],this.__data[8],this.__data[9],this.__data[10],this.__data[11],this.__data[12],this.__data[13],this.__data[14],this.__data[15])}static create(...l){return new L(...l)}toJSON(){return this.__data}fromJSON(l){this.__data=new Float32Array(l)}readBinary(l){this.__data=l.loadFloat32Array(16)}}e.register("Mat4",L);class n extends g{constructor(l=0,F=0,U=0,c=1){if(super(),l instanceof Float32Array)this.__data=l;else if(l instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const U=l,c=F;this.__data=new Float32Array(U,c,4)}else if(this.__data=new Float32Array(4),"object"==typeof l){this.__data[0]=0,this.__data[1]=0,this.__data[2]=0,this.__data[3]=1;for(const F in l)Array.isArray(l[F])?this[F].call(this,...l[F]):this[F].call(this,l[F])}else this.__data[0]=l,this.__data[1]=F,this.__data[2]=U,this.__data[3]=c}get x(){return this.__data[0]}set x(l){this.__data[0]=l}get y(){return this.__data[1]}set y(l){this.__data[1]=l}get z(){return this.__data[2]}set z(l){this.__data[2]=l}get w(){return this.__data[3]}set w(l){this.__data[3]=l}set(l,F,U,c){this.__data[0]=l,this.__data[1]=F,this.__data[2]=U,this.__data[3]=c}setDataArray(l){this.__data=l}setFromOther(l){this.__data[0]=l.x,this.__data[1]=l.y,this.__data[2]=l.z,this.__data[3]=l.w}setFromEulerAngles(l){const F=new Z;switch(l.order){case 0:F.set(l.x,-l.y,l.z);break;case 1:F.set(l.y,-l.z,l.x);break;case 2:F.set(l.z,-l.x,l.y);break;case 3:F.set(l.x,l.z,l.y);break;case 4:F.set(l.z,l.y,l.x);break;case 5:F.set(l.y,l.x,l.z);break;default:throw new Error("sdrty")}const U=.5*F.x,c=.5*F.y,s=.5*F.z,B=Math.cos(U),d=Math.cos(c),i=Math.cos(s),Q=Math.sin(U),t=Math.sin(c),I=Math.sin(s),V=B*i,e=B*I,X=Q*i,g=Q*I,a=d*X-t*e,b=d*g+t*V,x=d*e-t*X;switch(this.w=d*V+t*g,l.order){case 0:this.x=a,this.y=-b,this.z=x;break;case 1:this.x=x,this.y=a,this.z=-b;break;case 2:this.x=-b,this.y=x,this.z=a;break;case 3:this.x=a,this.y=x,this.z=b;break;case 4:this.x=x,this.y=b,this.z=a;break;case 5:this.x=b,this.y=a,this.z=x;break;default:throw new Error("sdrty")}}toEulerAngles(l){const F=new Z;switch(l){case 0:F.set(this.z,this.x,this.y);break;case 1:F.set(this.x,this.y,this.z);break;case 2:F.set(this.y,this.z,this.x);break;case 3:F.set(this.y,-this.x,this.z);break;case 4:F.set(this.x,-this.z,this.y);break;case 5:F.set(this.z,-this.y,this.x);break;default:throw new Error("Invalid rotation order:"+l)}const U=new Z,c=F.x*F.y+F.z*this.w;if(c>.49999)U.y=2*Math.atan2(F.x,this.w),U.z=.5*Math.PI,U.x=0;else if(c<-.49999)U.y=-2*Math.atan2(F.x,this.w),U.z=-.5*Math.PI,U.x=0;else{const l=F.x*F.x,s=F.y*F.y,B=F.z*F.z;U.y=Math.atan2(2*F.y*this.w-2*F.x*F.z,1-2*s-2*B),U.z=Math.asin(2*c),U.x=Math.atan2(2*F.x*this.w-2*F.y*F.z,1-2*l-2*B)}switch(l){case 0:return new y(U.y,U.z,U.x,l);case 1:return new y(U.x,U.y,U.z,l);case 2:return new y(U.z,U.x,U.y,l);case 3:return new y(-U.y,U.x,U.z,l);case 4:return new y(U.x,U.z,-U.y,l);case 5:return new y(U.z,-U.y,U.x,l)}}setFromAxisAndAngle(l,F){const U=F/2,c=l.normalize().scale(Math.sin(U));this.set(c.x,c.y,c.z,Math.cos(U))}setFromDirectionAndUpvector(l,F){const U=new m;U.setFromDirectionAndUpvector(l,F),this.setFromMat3(U)}setFrom2Vectors(l,F){const U=l.cross(F),c=l.dot(F),s=Math.sqrt(2*(1+c));this.set(U.x/s,U.y/s,U.z/s,s/2),this.normalizeInPlace()}setFromMat3(l){const F=l.__data[0]+l.__data[4]+l.__data[8];let U;if(F>0)U=Math.sqrt(F+1),this.__data[3]=.5*U,U=.5/U,this.__data[0]=(l.__data[5]-l.__data[7])*U,this.__data[1]=(l.__data[6]-l.__data[2])*U,this.__data[2]=(l.__data[1]-l.__data[3])*U;else{let F=0;l.__data[4]>l.__data[0]&&(F=1),l.__data[8]>l.__data[3*F+F]&&(F=2);const c=(F+1)%3,s=(F+2)%3;U=Math.sqrt(l.__data[3*F+F]-l.__data[3*c+c]-l.__data[3*s+s]+1),this.__data[F]=.5*U,U=.5/U,this.__data[3]=(l.__data[3*c+s]-l.__data[3*s+c])*U,this.__data[c]=(l.__data[3*c+F]+l.__data[3*F+c])*U,this.__data[s]=(l.__data[3*s+F]+l.__data[3*F+s])*U}this.normalizeInPlace()}setFromMat4(l){const F=l.__data[0]+l.__data[5]+l.__data[10];let U;if(F>0)U=Math.sqrt(F+1),this.__data[3]=.5*U,U=.5/U,this.__data[0]=(l.__data[6]-l.__data[9])*U,this.__data[1]=(l.__data[8]-l.__data[2])*U,this.__data[2]=(l.__data[1]-l.__data[4])*U;else{let F=0;l.__data[5]>l.__data[0]&&(F=1),l.__data[10]>l.__data[4*F+F]&&(F=2);const c=(F+1)%3,s=(F+2)%3;U=Math.sqrt(l.__data[4*F+F]-l.__data[4*c+c]-l.__data[4*s+s]+1),this.__data[F]=.5*U,U=.5/U,this.__data[3]=(l.__data[4*c+s]-l.__data[4*s+c])*U,this.__data[c]=(l.__data[4*c+F]+l.__data[4*F+c])*U,this.__data[s]=(l.__data[4*s+F]+l.__data[4*F+s])*U}this.normalizeInPlace()}isIdentity(){return this.getAngle()<Number.EPSILON}getAngle(){return 2*Math.acos(this.w)}equal(l){return this.x==l.x&&this.y==l.y&&this.z==l.z&&this.w==l.w}notEquals(l){return this.x!=l.x&&this.y!=l.y&&this.z!=l.z&&this.w!=l.w}approxEqual(l,F=Number.EPSILON){return Math.abs(this.x-l.x)<F&&Math.abs(this.y-l.y)<F&&Math.abs(this.z-l.z)<F&&Math.abs(this.w-l.w)<F}add(l){return new n(this.x+l.x,this.y+l.y,this.z+l.z,this.w+l.w)}addInPlace(l){this.x+=l.x,this.y+=l.y,this.z+=l.z,this.w+=l.w}subtract(l){return new n(this.x-l.x,this.y-l.y,this.z-l.z,this.w-l.w)}scale(l){return new n(this.x*l,this.y*l,this.z*l,this.w*l)}scaleInPlace(l){this.x*=l,this.y*=l,this.z*=l,this.w*=l}length(){const l=this.__data[0],F=this.__data[1],U=this.__data[2],c=this.__data[3];return Math.sqrt(l*l+F*F+U*U+c*c)}lengthSquared(){const l=this.__data[0],F=this.__data[1],U=this.__data[2],c=this.__data[3];return l*l+F*F+U*U+c*c}normalize(){const l=this.__data[0],F=this.__data[1],U=this.__data[2],c=this.__data[3];let s=l*l+F*F+U*U+c*c;return s<Number.EPSILON?new n:(s=1/Math.sqrt(s),new n(l*s,F*s,U*s))}normalizeInPlace(){const l=this.__data[0],F=this.__data[1],U=this.__data[2],c=this.__data[3];let s=l*l+F*F+U*U+c*c;s<Number.EPSILON||(s=1/Math.sqrt(s),this.set(l*s,F*s,U*s,c*s))}dot(l){return this.x*l.x+this.y*l.y+this.z*l.z+this.w*l.w}cross(l){const F=this.x,U=this.y,c=this.z,s=this.w,B=l.x,d=l.y,i=l.z,Q=l.w;return new n(U*i-c*d,c*Q-s*i,s*B-F*Q,F*d-U*B)}conjugate(){return new n(-this.x,-this.y,-this.z,this.w)}inverse(){return this.conjugate()}alignWith(l){this.dot(l)<0&&this.set(-this.x,-this.y,-this.z,-this.w)}multiply(l){const F=this.__data[0],U=this.__data[1],c=this.__data[2],s=this.__data[3],B=l.__data[0],d=l.__data[1],i=l.__data[2],Q=l.__data[3];return new n(F*Q+s*B+U*i-c*d,U*Q+s*d+c*B-F*i,c*Q+s*i+F*d-U*B,s*Q-F*B-U*d-c*i)}multiplyInPlace(l){const F=this.__data[0],U=this.__data[1],c=this.__data[2],s=this.__data[3],B=l.__data[0],d=l.__data[1],i=l.__data[2],Q=l.__data[3];this.set(F*Q+s*B+U*i-c*d,U*Q+s*d+c*B-F*i,c*Q+s*i+F*d-U*B,s*Q-F*B-U*d-c*i)}rotateVec3(l){const F=new n(l.x,l.y,l.z,0),U=this.multiply(F).multiply(this.conjugate());return new Z(U.x,U.y,U.z)}rotateX(l){l*=.5;const F=this.x,U=this.y,c=this.z,s=this.w,B=Math.sin(l),d=Math.cos(l);this.x=F*d+s*B,this.y=U*d+c*B,this.z=c*d-U*B,this.w=s*d-F*B}rotateY(l){l*=.5;const F=this.x,U=this.y,c=this.z,s=this.w,B=Math.sin(l),d=Math.cos(l);this.x=F*d-c*B,this.y=U*d+s*B,this.z=c*d+F*B,this.w=s*d-U*B}rotateZ(l){l*=.5;const F=this.x,U=this.y,c=this.z,s=this.w,B=Math.sin(l),d=Math.cos(l);this.x=F*d+U*B,this.y=U*d-F*B,this.z=c*d+s*B,this.w=s*d-c*B}toMat3(){const l=this.x,F=this.y,U=this.z,c=this.w,s=l+l,B=F+F,d=U+U,i=l*s,Q=F*s,t=F*B,I=U*s,V=U*B,e=U*d,X=c*s,g=c*B,a=c*d,b=new m;return b.__data[0]=1-t-e,b.__data[3]=Q-a,b.__data[6]=I+g,b.__data[1]=Q+a,b.__data[4]=1-i-e,b.__data[7]=V-X,b.__data[2]=I-g,b.__data[5]=V+X,b.__data[8]=1-i-t,b}getXaxis(){const l=this.x*this.y,F=this.x*this.z,U=this.y*this.y,c=this.y*this.w,s=this.z*this.z,B=this.z*this.w;return new Z(1-2*(s+U),2*(l+B),2*(F-c))}getYaxis(){const l=this.x*this.x,F=this.x*this.y,U=this.x*this.w,c=this.y*this.z,s=this.z*this.z,B=this.z*this.w;return new Z(2*(F-B),1-2*(s+l),2*(c+U))}getZaxis(){const l=this.x*this.x,F=this.x*this.z,U=this.x*this.w,c=this.y*this.y,s=this.y*this.z,B=this.y*this.w;new Z;return new Z(2*(B+F),2*(s-U),1-2*(c+l))}mirror(l){switch(l){case 0:return new n(this.z,this.w,this.x,this.y);case 1:return new n(-this.w,this.z,this.y,-this.x);case 2:return new n(this.x,this.y,this.z,-this.w)}}toMat4(){const l=this.x,F=this.y,U=this.z,c=this.w,s=l+l,B=F+F,d=U+U,i=l*s,Q=F*s,t=F*B,I=U*s,V=U*B,e=U*d,X=c*s,g=c*B,a=c*d,b=new L;return b.__data[0]=1-t-e,b.__data[4]=Q-a,b.__data[8]=I+g,b.__data[1]=Q+a,b.__data[5]=1-i-e,b.__data[9]=V-X,b.__data[2]=I-g,b.__data[6]=V+X,b.__data[10]=1-i-t,b}lerp(l,F){const U=new n(this.x+F*(l.x-this.x),this.y+F*(l.y-this.y),this.z+F*(l.z-this.z),this.w+F*(l.w-this.w));return U.normalizeInPlace(),U}static create(...l){return new n(...l)}static createFromFloat32Buffer(l,F=0){return console.warn("Deprecated, use #createFromBuffer instead"),this.createFromBuffer(l,4*F)}static createFromBuffer(l,F){return new n(new Float32Array(l,F,4))}static numElements(){return 4}clone(){return new n(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}toJSON(){return{x:this.x,y:this.y,z:this.z,w:this.w}}fromJSON(l){this.__data[0]=l.x,this.__data[1]=l.y,this.__data[2]=l.z,this.__data[3]=l.w,this.normalizeInPlace()}readBinary(l){this.x=l.loadFloat32(),this.y=l.loadFloat32(),this.z=l.loadFloat32(),this.w=l.loadFloat32()}}e.register("Quat",n);class C{constructor(l,F){this.start=l instanceof Z?l:new Z,this.dir=F instanceof Z?F:new Z}closestPoint(l){const F=l.subtract(this.start).dot(this.dir);if(F<Number.EPSILON)return this.start;const U=F/this.dir.dot(this.dir);return this.start.add(this.dir.scale(U))}pointAtDist(l){return this.start.add(this.dir.scale(l))}intersectRayVector(l){const F=this.dir,U=l.dir,c=this.start.subtract(l.start),s=F.dot(F),B=F.dot(U),d=U.dot(U),i=F.dot(c),Q=U.dot(c);if(0==s&&0==d)return this.start.distanceTo(l.start);if(0==s)return l.closestPoint(this.start);if(0==d)return this.closestPoint(l.start);const t=s*d-B*B;let I,V;return t<.001?(I=0,V=B>d?i/B:Q/d):(I=(B*Q-d*i)/t,V=(s*Q-B*i)/t),[I,V]}intersectRayPlane(l){const F=this.start.subtract(l.start),U=l.dir.dot(this.dir),c=-l.dir.dot(F);if(Math.abs(U)<Number.PRECISION)return-1;const s=c/U;return s<-Number.PRECISION?-1:s}clone(){return new C(this.start.clone(),this.dir.clone())}static create(...l){return new C(...l)}toJSON(){return{start:this.start,dir:this.dir}}fromJSON(l){this.start.fromJSON(l.start),this.dir.fromJSON(l.dir)}toString(){return X.stringifyJSONWithFixedPrecision(this.toJSON())}}e.register("Ray",C);new Z(1,1,1);class h{constructor(l,F,U){if(l instanceof Float32Array)this.setFromFloat32Array(l);else{if(l instanceof Z)this.tr=l;else{if(l instanceof n&&null==F&&null==U)return this.tr=new Z,this.ori=l,void(this.sc=new Z(1,1,1));this.tr=new Z}this.ori=F instanceof n?F:new n,this.sc=U instanceof Z?U:new Z(1,1,1)}}set(l,F,U){this.tr=l,this.ori=F,U instanceof Z&&(this.sc=U)}setFromOther(l){this.tr=l.tr,this.ori=l.ori,this.sc=l.sc}isIdentity(){return this.tr.isNull()&&this.ori.isIdentity()&&this.sc.is111()}isEqual(l){return this.tr.isEqual(l.tr)&&this.ori.isEqual(l.ori)&&this.sc.isEqual(l.sc)}approxEqual(l,F=Number.EPSILON){return(!l.tr||this.tr.approxEqual(l.tr,F))&&(!l.ori||this.ori.approxEqual(l.ori,F))&&(!l.sc||this.sc.approxEqual(l.sc,F))}setLookAt(l,F,U){const c=l.subtract(F);if(c.length()<Number.EPSILON)throw new Error("Invalid dir");this.ori.setFromDirectionAndUpvector(c,U),this.tr=l}multiply(l){let F=this.sc;this.sc.x==this.sc.y&&this.sc.x==this.sc.z||(F=l.ori.rotateVec3(this.sc),Math.sign(F.x)!=Math.sign(this.sc.x)&&(F.x=-F.x),Math.sign(F.y)!=Math.sign(this.sc.y)&&(F.y=-F.y),Math.sign(F.z)!=Math.sign(this.sc.z)&&(F.z=-F.z));return new h(this.tr.add(this.ori.rotateVec3(F.multiply(l.tr))),this.ori.multiply(l.ori),F.multiply(l.sc))}inverse(){const l=new h;return l.ori=this.ori.inverse(),this.sc.x!=this.sc.y||this.sc.x!=this.sc.z?(l.sc=l.ori.rotateVec3(this.sc),Math.sign(l.sc.x)!=Math.sign(this.sc.x)&&(l.sc.x=-l.sc.x),Math.sign(l.sc.y)!=Math.sign(this.sc.y)&&(l.sc.y=-l.sc.y),Math.sign(l.sc.z)!=Math.sign(this.sc.z)&&(l.sc.z=-l.sc.z)):l.sc=this.sc.inverse(),l.tr=l.ori.rotateVec3(this.tr.negate().multiply(l.sc)),l}transformVec3(l){return this.tr.add(this.ori.rotateVec3(this.sc.multiply(l)))}toMat4(){const l=new L(this.sc.x,0,0,0,0,this.sc.y,0,0,0,0,this.sc.z,0,0,0,0,1),F=this.ori.toMat4(),U=new L;return U.translation=this.tr,U.multiply(F).multiply(l)}fromMat4(l){this.tr=l.translation,this.ori.setFromMat4(l)}setFromFloat32Array(l){if(7==l.length)return this.tr=new Z(l.buffer,l.byteOffset),this.ori=new n(l.buffer,l.byteOffset+12),void(this.sc=new Z(1,1,1));if(8!=l.length)return 10==l.length?(this.tr=new Z(l.buffer,l.byteOffset),this.ori=new n(l.buffer,l.byteOffset+12),void(this.sc=new Z(l.buffer,l.byteOffset+21))):void 0;{this.tr=new Z(l.buffer,l.byteOffset),this.ori=new n(l.buffer,l.byteOffset+12);const F=l[7];this.sc=new Z(F,F,F)}}clone(){return new h(this.tr.clone(),this.ori.clone(),this.sc.clone())}static create(...l){return new h(...l)}toJSON(){const l={tr:this.tr.toJSON(),ori:this.ori.toJSON()};return this.sc.is111()||(l.sc=this.sc.toJSON()),l}fromJSON(l){this.tr.fromJSON(l.tr),this.ori.fromJSON(l.ori),l.sc&&this.sc.fromJSON(l.sc)}readBinary(l){this.tr.readBinary(l),this.ori.readBinary(l),this.sc.readBinary(l)}toString(){return X.stringifyJSONWithFixedPrecision(this.toJSON())}}e.register("Xfo",h);class u{constructor(l,F){this.p0=l instanceof a?l:new a(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),this.p1=F instanceof a?F:new a(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY)}set(l,F){this.p0=l,this.p1=F}reset(){this.p0.x=Number.POSITIVE_INFINITY,this.p1.x=Number.NEGATIVE_INFINITY,this.p0.y=Number.POSITIVE_INFINITY,this.p1.y=Number.NEGATIVE_INFINITY}isValid(){return this.p0.x!=Number.POSITIVE_INFINITY&&this.p1.x!=Number.NEGATIVE_INFINITY&&this.p0.y!=Number.POSITIVE_INFINITY&&this.p1.y!=Number.NEGATIVE_INFINITY}addPoint(l){(this.p0.x==Number.POSITIVE_INFINITY||l.x<this.p0.x)&&(this.p0.x=l.x),(this.p0.y==Number.POSITIVE_INFINITY||l.y<this.p0.y)&&(this.p0.y=l.y),(this.p1.y==Number.NEGATIVE_INFINITY||l.x>this.p1.x)&&(this.p1.x=l.x),(this.p1.y==Number.NEGATIVE_INFINITY||l.y>this.p1.y)&&(this.p1.y=l.y)}size(){return this.p1.subtract(this.p0)}diagonal(){return this.p1.subtract(this.p0)}center(){const l=this.p1.subtract(this.p0);return l.scaleInPlace(.5),l.addInPlace(this.p0),l}static create(...l){return new u(...l)}toJSON(){return{p0:this.p0.toJSON(),p1:this.p1.toJSON()}}toString(){return X.stringifyJSONWithFixedPrecision(this.toJSON())}}e.register("Box2",u);class S extends g{constructor(l,F=0){super(),this.pos=l instanceof Z?l:new Z,this.radius=F}clone(){return new Sphere(this.pos.clone(),this.radius)}intersectsBox(l){return l.intersectsSphere(this)}toJSON(){return{pos:this.pos.toJSON(),radius:this.radius}}toString(){return X.stringifyJSONWithFixedPrecision(this.toJSON())}static create(...l){return new Sphere(...l)}}e.register("SphereType",S);class o{constructor(l,F){l instanceof Float32Array?this.setFromFloat32Array(l):(this.p0=l instanceof Z?l:new Z(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),this.p1=F instanceof Z?F:new Z(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY))}get min(){return this.p0}get max(){return this.p1}set(l,F){this.p0=l,this.p1=F}reset(){this.p0.x=Number.POSITIVE_INFINITY,this.p1.x=Number.NEGATIVE_INFINITY,this.p0.y=Number.POSITIVE_INFINITY,this.p1.y=Number.NEGATIVE_INFINITY,this.p0.z=Number.POSITIVE_INFINITY,this.p1.z=Number.NEGATIVE_INFINITY}isValid(){return this.p0.x!=Number.POSITIVE_INFINITY&&this.p1.x!=Number.NEGATIVE_INFINITY&&this.p0.y!=Number.POSITIVE_INFINITY&&this.p1.y!=Number.NEGATIVE_INFINITY&&this.p0.z!=Number.POSITIVE_INFINITY&&this.p1.z!=Number.NEGATIVE_INFINITY}addPoint(l){l.x!=Number.POSITIVE_INFINITY&&l.x!=Number.NEGATIVE_INFINITY&&(l.x<this.p0.x&&(this.p0.x=l.x),l.x>this.p1.x&&(this.p1.x=l.x)),l.y!=Number.POSITIVE_INFINITY&&l.y!=Number.NEGATIVE_INFINITY&&(l.y<this.p0.y&&(this.p0.y=l.y),l.y>this.p1.y&&(this.p1.y=l.y)),l.z!=Number.POSITIVE_INFINITY&&l.z!=Number.NEGATIVE_INFINITY&&(l.z<this.p0.z&&(this.p0.z=l.z),l.z>this.p1.z&&(this.p1.z=l.z))}addBox3(l,F){F?(this.addPoint(F.transformVec3(l.p0)),this.addPoint(F.transformVec3(new Z(l.p0.x,l.p0.y,l.p1.z))),this.addPoint(F.transformVec3(new Z(l.p0.x,l.p1.y,l.p0.z))),this.addPoint(F.transformVec3(new Z(l.p1.x,l.p0.y,l.p0.z))),this.addPoint(F.transformVec3(new Z(l.p0.x,l.p1.y,l.p1.z))),this.addPoint(F.transformVec3(new Z(l.p1.x,l.p0.y,l.p1.z))),this.addPoint(F.transformVec3(new Z(l.p1.x,l.p1.y,l.p0.z))),this.addPoint(F.transformVec3(l.p1))):(this.addPoint(l.p0),this.addPoint(l.p1))}size(){return this.p1.subtract(this.p0)}diagonal(){return this.p1.subtract(this.p0)}center(){const l=this.p1.subtract(this.p0);return l.scaleInPlace(.5),l.addInPlace(this.p0),l}toMat4(){const l=this.p1.x-this.p0.x,F=this.p1.y-this.p0.y,U=this.p1.z-this.p0.z;return new L(l,0,0,0,0,F,0,0,0,0,U,0,this.p0.x,this.p0.y,this.p0.z,1)}getBoundingSphere(){return new S(this.center(),.5*this.diagonal().length())}intersectsBox(l){return!(l.max.x<this.min.x||l.min.x>this.max.x||l.max.y<this.min.y||l.min.y>this.max.y||l.max.z<this.min.z||l.min.z>this.max.z)}intersectsSphere(l){return closestPoint.distanceToSquared(l.center)<=l.radius*l.radius}intersectsPlane(l){let F,U;return l.normal.x>0?(F=l.normal.x*this.min.x,U=l.normal.x*this.max.x):(F=l.normal.x*this.max.x,U=l.normal.x*this.min.x),l.normal.y>0?(F+=l.normal.y*this.min.y,U+=l.normal.y*this.max.y):(F+=l.normal.y*this.max.y,U+=l.normal.y*this.min.y),l.normal.z>0?(F+=l.normal.z*this.min.z,U+=l.normal.z*this.max.z):(F+=l.normal.z*this.max.z,U+=l.normal.z*this.min.z),F<=-l.constant&&U>=-l.constant}clone(){return new o(this.p0.clone(),this.p1.clone())}static create(...l){return new o(...l)}static sizeInBytes(){return 24}toJSON(){return{p0:this.p0.toJSON(),p1:this.p1.toJSON()}}fromJSON(l){const F={x:Q.isNumeric(l.p0.x)?l.p0.x:Number.POSITIVE_INFINITY,y:Q.isNumeric(l.p0.y)?l.p0.y:Number.POSITIVE_INFINITY,z:Q.isNumeric(l.p0.z)?l.p0.z:Number.POSITIVE_INFINITY},U={x:Q.isNumeric(l.p1.x)?l.p1.x:Number.NEGATIVE_INFINITY,y:Q.isNumeric(l.p1.y)?l.p1.y:Number.NEGATIVE_INFINITY,z:Q.isNumeric(l.p1.z)?l.p1.z:Number.NEGATIVE_INFINITY};this.p0.fromJSON(F),this.p1.fromJSON(U)}loadBin(l,F){this.p0.loadBin(l,F),this.p0.loadBin(l,F+12)}setFromFloat32Array(l){this.p0=new Z(l.buffer,l.byteOffset),this.p1=new Z(l.buffer,l.byteOffset+12)}toString(){return X.stringifyJSONWithFixedPrecision(this.toJSON())}}e.register("Box3",o);class W extends g{constructor(l,F=0){super(),this.normal=l instanceof Z?l:new Z,this.w=F}set(l,F,U,c){this.normal.set(l,F,U),this.w=c}divideScalar(l){this.normal.scaleInPlace(1/l),this.w/=l}distanceToPoint(l){return l.dot(this.normal)+this.w}normalizeInPlace(){const l=1/this.normal.length();this.normal.scaleInPlace(l),this.w*=l}clone(){return new Plane(this.normal.clone(),this.w)}static create(...l){return new Plane(...l)}toJSON(){return{normal:this.normal.toJSON(),w:this.w}}toString(){return X.stringifyJSONWithFixedPrecision(this.toJSON())}}e.register("PlaneType",W);class J{constructor(l,F,U,c,s,B){this.planes=[l||new W,F||new W,U||new W,c||new W,s||new W,B||new W]}setFromMatrix(l){const F=l,U=this.planes;U[0].set(F.m03-F.m00,F.m13-F.m10,F.m23-F.m20,F.m33-F.m30),U[1].set(F.m03+F.m00,F.m13+F.m10,F.m23+F.m20,F.m33+F.m30),U[2].set(F.m03+F.m01,F.m13+F.m11,F.m23+F.m21,F.m33+F.m31),U[3].set(F.m03-F.m01,F.m13-F.m11,F.m23-F.m21,F.m33-F.m31),U[4].set(F.m03-F.m02,F.m13-F.m12,F.m23-F.m22,F.m33-F.m32),U[5].set(F.m03+F.m02,F.m13+F.m12,F.m23+F.m22,F.m33+F.m32),U.forEach(l=>l.normalizeInPlace())}intersectsBox(l){const F=new Z,U=this.planes,{min:c,max:s}=l;for(let l=0;l<6;l++){const B=U[l];if(F.x=B.normal.x>0?s.x:c.x,F.y=B.normal.y>0?s.y:c.y,F.z=B.normal.z>0?s.z:c.z,B.distanceToPoint(F)<0)return!1}return!0}toJSON(){return{p0:this.p0.toJSON(),p1:this.p1.toJSON(),p2:this.p2.toJSON(),p3:this.p3.toJSON(),p4:this.p4.toJSON(),p5:this.p5.toJSON()}}fromJSON(l){this.p0.fromJSON(l.p0),this.p1.fromJSON(l.p1),this.p2.fromJSON(l.p2),this.p3.fromJSON(l.p3),this.p4.fromJSON(l.p4),this.p5.fromJSON(l.p5)}toString(){return X.stringifyJSONWithFixedPrecision(this.toJSON())}}e.register("Frustum",J);var E=Object.freeze({__proto__:null,AttrValue:g,Vec2:a,Vec3:Z,Vec4:x,RGBA:G,Color:R,EulerAngles:y,Quat:n,Ray:C,Mat3:m,Mat4:L,Xfo:h,Box2:u,Box3:o,Frustum:J,PlaneType:W,SphereType:S});class H{constructor(){this.listeners={}}on(l,F){if(!F)throw new Error("Missing callback function (listener).");this.listeners[l]||(this.listeners[l]=[]);const U=this.listeners[l];if(-1!=U.indexOf(F))throw new Error(`Listener "${F.name}" already connected to event "${l}".`);const c=U.length;return U[c]=F,c}once(l,F){const U=c=>{F(c),this.off(l,U)};this.on(l,U)}off(l,F){if(!F)throw new Error("Missing callback function (listener).");if("number"==typeof F)return console.warn("Deprecated. Un-register using the original listener instead."),void this.removeListenerById(l,F);const U=this.listeners[l]||[],c=[];if(U.forEach((l,U)=>{l===F&&c.push(U)}),0==c.length)throw new Error(`Listener "${F.name}" is not connected to "${l}" event`);for(const l of c)U[l]=void 0}addListener(l,F){return console.warn("Deprecated. Use #on instead."),this.on(l,F)}removeListener(l,F){console.warn("Deprecated. Use #off instead."),this.off(l,F)}removeListenerById(l,F){console.warn("Deprecated. Use #off, passing the listener itself instead of the id.");const U=this.listeners[l];if(U){if(!U[F])throw new Error("Invalid ID");U[F]=void 0}else console.warn("callback :"+F+" was not connected to this signal:"+l)}emit(l,F){(this.listeners[l]||[]).forEach(l=>{l&&l(F)})}}class r extends H{constructor(l=0,F=0){super(),this.root={x:0,y:0,w:l,h:F}}fit(l){if(0==l.length)return;let F=!1;this.root.w<l[0].w&&(this.root.w=l[0].w,F=!0),this.root.h<l[0].h&&(this.root.h=l[0].h,F=!0),F&&this.emit("resized",{width:this.root.w,height:this.root.h});l.forEach(l=>{l.fit=this.__addBlock(l)})}__addBlock(l){const F=this.findNode(this.root,l.w,l.h);return F?this.splitNode(F,l.w,l.h):this.growNode(l.w,l.h)}addBlock(l){let F=!1;this.root.w<l.w&&(this.root.w=l.w,F=!0),this.root.h<l.h&&(this.root.h=l.h,F=!0),F&&this.emit("resized",{width:this.root.w,height:this.root.h});const U=this.findNode(this.root,l.w,l.h);return U?this.splitNode(U,l.w,l.h):this.growNode(l.w,l.h)}findNode(l,F,U){return l.used?this.findNode(l.right,F,U)||this.findNode(l.down,F,U):F<=l.w&&U<=l.h?l:null}splitNode(l,F,U){return l.used=!0,l.down={x:l.x,y:l.y+U,w:l.w,h:l.h-U},l.right={x:l.x+F,y:l.y,w:l.w-F,h:U},l}growNode(l,F){const U=l<=this.root.w,c=F<=this.root.h,s=c&&this.root.h>=this.root.w+l,B=U&&this.root.w>=this.root.h+F;return s?this.growRight(l,F):B?this.growDown(l,F):c?this.growRight(l,F):U?this.growDown(l,F):null}growRight(l,F){this.root={used:!0,x:0,y:0,w:this.root.w+l,h:this.root.h,down:this.root,right:{x:this.root.w,y:0,w:l,h:this.root.h}};const U=this.findNode(this.root,l,F);let c;return U&&(c=this.splitNode(U,l,F)),this.emit("resized",{width:this.root.w,height:this.root.h}),c}growDown(l,F){this.root={used:!0,x:0,y:0,w:this.root.w,h:this.root.h+F,down:{x:0,y:this.root.h,w:this.root.w,h:F},right:this.root};const U=this.findNode(this.root,l,F);let c;return U&&(c=this.splitNode(U,l,F)),this.emit("resized",{width:this.root.w,height:this.root.h}),c}}class Y extends H{constructor(l=0){super(),this.__asyncCount=l,this.ready=!1,this.incAsyncCount=(l=1)=>{this.__asyncCount+=l,this.ready=!1},this.decAsyncCount=()=>{this.__asyncCount>0&&(this.__asyncCount--,0==this.__asyncCount&&this.__asyncsCompleted())},this.__asyncsCompleted=()=>{this.emit("ready",{})}}get count(){return this.__asyncCount}}const p=l=>{if(window.TextDecoder)return new TextDecoder("utf-8").decode(l);{let F="";for(let U=0;U<l.length;U++)F+=String.fromCharCode(l[U]);return F}};var N=Object.freeze({__proto__:null,GrowingPacker:r,Async:Y,EventEmitter:H,decodeText:p,StringFunctions:X,UInt8:0,SInt8:1,SInt16:3,UInt16:2,SInt32:5,UInt32:4,Float32:6,MathFunctions:Q});let T=0;class A extends H{constructor(){if(super(),"RefCounted"==this.constructor.name)throw new Error("RefCounted should not be instantiated directly.");this.__id=++T,this.__refs=[],this.__destroyed=!1}getId(){return this.__id}numRefs(){return this.__refs.length}addRef(l){if(!l)throw new Error("Error in RefCounted.addRef: Must provide a referer");return this.__refs.push(l),!0}removeRef(l){if(!l)throw new Error("Error in RefCounted.removeRef: Must provide a referer");const F=this.__refs.indexOf(l);if(-1==F)throw new Error("Error in RefCounted.removeRef: referer not found in refs list.");this.__refs.splice(F,1),0==this.__refs.length&&this.destroy()}getRefer(l){return this.__refs[l]}getRefIndex(l){return this.__refs.indexOf(l)}isDestroyed(){return this.__destroyed}destroy(){this.__destroyed=!0,this.emit("destructing",{})}}let M=0;class z extends H{constructor(){super(),this.__id=++M,this.__params=[],this.__paramMapping={},this.__paramEventHandlers={}}getId(){return this.__id}numParameters(){return console.warn("Deprecated. Use #getNumParameters instead."),this.getNumParameters()}getNumParameters(){return this.__params.length}getParameters(){return this.__params}getParameterIndex(l){return this.__paramMapping[l]}getParameterByIndex(l){return this.__params[l]}hasParameter(l){return l in this.__paramMapping}getParameter(l){const F=this.__paramMapping[l];return-1==F?null:this.__params[F]}__parameterValueChanged(l){this.emit("parameterValueChanged",l)}addParameter(l){return this.insertParameter(l,this.__params.length)}insertParameter(l,F){const U=l.getName();null!=this.__paramMapping[U]&&(console.warn("Replacing Parameter:"+U),this.removeParameter(U)),l.setOwner(this);const c=F=>this.__parameterValueChanged({...F,param:l});l.on("valueChanged",c),this.__paramEventHandlers[U]=c,this.__params.splice(F,0,l);for(let l=F;l<this.__params.length;l++)this.__paramMapping[this.__params[l].getName()]=l;return this.emit("parameterAdded",{name:U}),l}removeParameter(l){if(null==this.__paramMapping[l])throw new Error("Unable to remove Parameter:"+l);const F=this.__paramMapping[l];this.__params[this.__paramMapping[l]].off("valueChanged",this.__paramEventHandlers[l]),this.__params.splice(F,1),delete this.__paramMapping[l];for(let l=F;l<this.__params.length;l++)this.__paramMapping[this.__params[l].getName()]=l;this.emit("parameterRemoved",{name:l})}replaceParameter(l){const F=l.getName();if(null==this.__paramMapping[F])throw new Error("Unable to replace Parameter:"+paramName);const U=this.__paramMapping[F];return this.removeParameter(F),this.insertParameter(l,U),l}toJSON(l){const F={},U={};let c=0;for(const F of this.__params){const s=F.toJSON(l);s&&(U[F.getName()]=s,c++)}return c>0&&(F.params=U),F}fromJSON(l,F){if(l.params)for(const U in l.params){const c=l.params[U],s=this.getParameter(U);s?c.paramPath?F.resolvePath(c.paramPath,l=>{this.replaceParameter(l)},l=>{console.warn("Unable to resolve shared parameter:"+c.paramPath)}):s.fromJSON(c,F):console.warn("Param not found:"+U)}}readBinary(l,F){if(F.versions["zea-engine"].compare([0,0,3])>=0){const U=l.loadUInt32();for(let c=0;c<U;c++){const U=l.loadStr(),c=l.loadStr();let s=this.getParameter(c);if(!s){if(s=e.constructClass(U,c),!s){console.error("Unable to construct prop:"+c+" of type:"+U);continue}this.addParameter(s)}s.readBinary(l,F)}}}toString(){return JSON.stringify(this.toJSON(),null,2)}copyFrom(l){let F=l.getNumParameters();for(;F--;){const U=l.getParameterByIndex(F),c=this.getParameter(U.getName());c?c.loadValue(U.getValue()):this.addParameter(U.clone())}}}class k{constructor(l,F=0,U=!0){this.__data=l,this.__byteOffset=F,this.__dataView=new DataView(this.__data),this.__isMobileDevice=U,this.utf8decoder=new TextDecoder}get isMobileDevice(){return this.__isMobileDevice}get data(){return this.__data}get byteLength(){return this.__dataView.byteLength}get remainingByteLength(){return this.__dataView.byteLength-this.__byteOffset}pos(){return this.__byteOffset}seek(l){this.__byteOffset=l}advance(l){this.__byteOffset+=l}loadUInt8(){const l=this.__dataView.getUint8(this.__byteOffset);return this.__byteOffset+=1,l}loadUInt16(){const l=this.__dataView.getUint16(this.__byteOffset,!0);return this.__byteOffset+=2,l}loadUInt32(){const l=this.__dataView.getUint32(this.__byteOffset,!0);return this.__byteOffset+=4,l}loadSInt32(){const l=this.__dataView.getInt32(this.__byteOffset,!0);return this.__byteOffset+=4,l}loadFloat16(){const l=this.loadUInt16();return Q.decode16BitFloat(l)}loadUFloat16(){const l=this.loadFloat16();return l<0?2048-l:l}loadFloat16From2xUInt8(){const l=this.__dataView.getFloat16(this.__byteOffset,!0);return this.__byteOffset+=2,l}loadUInt32From2xUFloat16(){return this.loadUFloat16()+4096*this.loadUFloat16()}loadSInt32From2xFloat16(){return this.loadFloat16()+2048*this.loadFloat16()}loadFloat32(){const l=this.__dataView.getFloat32(this.__byteOffset,!0);return this.__byteOffset+=4,l}loadUInt8Array(l,F=!1){null==l&&(l=this.loadUInt32());const U=new Uint8Array(this.__data,this.__byteOffset,l);this.__byteOffset+=l;this.__byteOffset;return U}loadUInt16Array(l,F=!1){if(null==l&&(l=this.loadUInt32()),0==l)return new Uint16Array;let U;if(this.readPadd(2),this.__isMobileDevice){U=new Uint16Array(l);for(let F=0;F<l;F++)U[F]=this.__dataView.getUint16(this.__byteOffset,!0),this.__byteOffset+=2}else U=new Uint16Array(this.__data,this.__byteOffset,l),this.__byteOffset+=2*l;return U}loadUInt32Array(l,F=!1){if(null==l&&(l=this.loadUInt32()),0==l)return new Uint32Array;let U;if(this.readPadd(4),this.__isMobileDevice){U=new Uint32Array(l);for(let F=0;F<l;F++)U[F]=this.__dataView.getUint32(this.__byteOffset,!0),this.__byteOffset+=4}else U=new Uint32Array(this.__data,this.__byteOffset,l),this.__byteOffset+=4*l;return U}loadFloat32Array(l,F=!1){if(null==l&&(l=this.loadUInt32()),0==l)return new Float32Array;let U;if(this.readPadd(4),this.__isMobileDevice){U=new Float32Array(l);for(let F=0;F<l;F++)U[F]=this.__dataView.getFloat32(this.__byteOffset,!0),this.__byteOffset+=4}else U=new Float32Array(this.__data,this.__byteOffset,l),this.__byteOffset+=4*l;return U}loadStr(){const l=this.loadUInt32(),F=new Uint8Array(this.__data,this.__byteOffset,l);return this.__byteOffset+=l,this.utf8decoder.decode(F)}loadStrArray(){const l=this.loadUInt32(),F=[];for(let U=0;U<l;U++)F[U]=this.loadStr();return F}loadSInt32Vec2(){const l=this.loadSInt32(),F=this.loadSInt32();return new a(l,F)}loadUInt32Vec2(){const l=this.loadUInt32(),F=this.loadUInt32();return new a(l,F)}loadFloat16Vec2(){const l=this.loadFloat16(),F=this.loadFloat16();return new a(l,F)}loadFloat32Vec2(){const l=this.loadFloat32(),F=this.loadFloat32();return new a(l,F)}loadFloat16Vec3(){const l=this.loadFloat16(),F=this.loadFloat16(),U=this.loadFloat16();return new Z(l,F,U)}loadFloat32Vec3(){const l=this.loadFloat32(),F=this.loadFloat32(),U=this.loadFloat32();return new Z(l,F,U)}loadFloat16Quat(){const l=this.loadFloat16(),F=this.loadFloat16(),U=this.loadFloat16(),c=this.loadFloat16();return new n(l,F,U,c)}loadFloat32Quat(){const l=this.loadFloat32(),F=this.loadFloat32(),U=this.loadFloat32(),c=this.loadFloat32();return new n(l,F,U,c)}loadRGBFloat32Color(){const l=this.loadFloat32(),F=this.loadFloat32(),U=this.loadFloat32();return new R(l,F,U)}loadRGBAFloat32Color(){const l=this.loadFloat32(),F=this.loadFloat32(),U=this.loadFloat32(),c=this.loadFloat32();return new R(l,F,U,c)}loadRGBUInt8Color(){const l=this.loadUInt8(),F=this.loadUInt8(),U=this.loadUInt8();return new R(l/255,F/255,U/255)}loadRGBAUInt8Color(){const l=this.loadUInt8(),F=this.loadUInt8(),U=this.loadUInt8(),c=this.loadUInt8();return new R(l/255,F/255,U/255,c/255)}loadBox2(){return new u(this.loadFloat32Vec2(),this.loadFloat32Vec2())}loadBox3(){return new o(this.loadFloat32Vec3(),this.loadFloat32Vec3())}readPadd(l){const F=this.__byteOffset%l;0!=F&&(this.__byteOffset+=l-F)}}let v=0;class K extends z{constructor(l){super(),this.__name=l||"",this.__path=[this.__name],this.__ownerItem=void 0,this.__selectable=!0,this.__selected=!1,this.__metaData={},v++}static getNumBaseItems(){return v}getName(){return this.__name}setName(l){if(this.__name!=l){const F=this.__name;this.__name=l,this.__updatePath(),this.emit("nameChanged",{newName:l,oldName:F})}}__updatePath(){null==this.__ownerItem?this.__path=[this.__name]:this.__path=[...this.__ownerItem.getPath(),this.__name]}getPath(){return this.__path}resolvePath(l,F=0){if(0==F&&("."!=l[0]&&l[0]!=this.__name||F++),F==l.length)return this;if(">"==l[F]&&F==l.length-1)return this.getParameter(l[F+1]);const U=this.getParameter(l[F]);if(U)return U;throw new Error("Invalid path:"+l+"["+F+"] member not found")}getOwner(){return this.__ownerItem}setOwner(l){this.__ownerItem!==l&&(this.__ownerItem=l,this.__updatePath())}getSelectable(){return this.__selectable}setSelectable(l){return this.__selectable!=l&&(this.__selectable=l,!0)}isSelected(){return this.__selected}getSelected(){return this.__selected}setSelected(l){this.__selected=l,this.emit("selectedChanged",{selected:this.__selected})}getMetadata(l){return this.__metaData[l]}hasMetadata(l){return l in this.__metaData}setMetadata(l,F){this.__metaData[l]=F}deleteMetadata(l){delete this.__metaData[l]}toJSON(l){const F=super.toJSON(l);return F.name=this.__name,F.type=e.getBlueprintName(this),F}fromJSON(l,F){l.name&&(this.__name=l.name),super.fromJSON(l,F)}readBinary(l,F){l.loadStr();this.setName(l.loadStr()),super.readBinary(l,F)}clone(){throw new Error(this.constructor.name+" does not implement its clone method")}copyFrom(l){super.copyFrom(l),this.setName(l.getName())}destroy(){super.destroy()}}const w=function(l){return l.substring(0,l.lastIndexOf("/"))+"/"},f=function(l,F,U,c,s){try{const s=new XMLHttpRequest;s.responseType=F,s.addEventListener("timeout",(function(F){throw new Error("The request for "+l+" timed out.")})),s.addEventListener("error",(function(F){throw new Error("The request for "+l+": xhr.readyState:"+s.readyState)})),s.addEventListener("abort",(function(F){throw new Error("The request for "+l+": xhr.readyState:"+s.readyState)})),s.addEventListener("loadend",(function(l){200==s.status?U(s):c(s.statusText)})),s.open("GET",l,!0),s.send()}catch(l){c(l)}},D=function(l,F,U,c){f(l,"text",l=>{F(l.responseText)},F=>{if(null==U)throw new Error("Unable to XHR File:"+l);U(F)})},P=function(l,F,U,c){f(l,"json",l=>{F(l.response,l)},F=>{if(null==U)throw new Error("Unable to XHR File:"+l);U(F)})},_=function(l,F,U,c){f(l,"document",l=>{F(l.responseXML)},F=>{if(null==U)throw new Error("Unable to XHR File:"+l);U(F)})},O=function(l,F,U,c){f(l,"arraybuffer",l=>{F(l.response)},F=>{if(null==U)throw new Error("Unable to XHR File:"+l);U(F)})};var q=null;try{var $="undefined"!=typeof module&&"function"==typeof module.require&&module.require("worker_threads")||"function"==typeof __non_webpack_require__&&__non_webpack_require__("worker_threads")||"function"==typeof require&&require("worker_threads");q=$.Worker}catch(l){}function ll(l,F,U){var c=void 0===F?null:F,s=function(l,F){return Buffer.from(l,"base64").toString(F?"utf16":"utf8")}(l,void 0!==U&&U),B=s.indexOf("\n",10)+1,d=s.substring(B)+(c?"//# sourceMappingURL="+c:"");return function(l){return new q(d,Object.assign({},l,{eval:!0}))}}function Fl(l,F,U){var c=void 0===F?null:F,s=function(l,F){var U=atob(l);if(F){for(var c=new Uint8Array(U.length),s=0,B=U.length;s<B;++s)c[s]=U.charCodeAt(s);return String.fromCharCode.apply(null,new Uint16Array(c.buffer))}return U}(l,void 0!==U&&U),B=s.indexOf("\n",10)+1,d=s.substring(B)+(c?"//# sourceMappingURL="+c:""),i=new Blob([d],{type:"application/javascript"});return URL.createObjectURL(i)}var Ul="[object process]"===Object.prototype.toString.call("undefined"!=typeof process?process:0);function cl(l,F,U){return Ul?ll(l,F,U):function(l,F,U){var c;return function(s){return c=c||Fl(l,F,U),new Worker(c,s)}}(l,F,U)}var sl=cl("","data:application/json;charset=utf-8;base64,",!1);const Bl=new class extends H{constructor(){let l;if(super(),this.__adapter=void 0,this.__totalWork=0,this.__doneWork=0,this.__callbacks={},this.__workers=[],this.__nextWorker=0,globalThis.navigator){const F=document.getElementsByTagName("script");for(let U=0;U<F.length;U++){const c=F[U];if(c.src.includes("zea-engine")){const F=c.src.split("/");F.pop(),F.pop(),l=F.join("/");break}}l||(l="https://unpkg.com/@zeainc/zea-engine@0.1.3"),this.wasmUrl=l+"/public-resources/unpack.wasm"}l||(l="https://unpkg.com/@zeainc/zea-engine@0.1.3"),this.wasmUrl=l+"/public-resources/unpack.wasm",this.__commonResources={}}setAdapter(l){this.__adapter=l}getAdapter(){return this.__adapter}__getWorker(){return this.__nextWorker=(this.__nextWorker+1)%3,null==this.__workers[this.__nextWorker]&&(this.__workers[this.__nextWorker]=(()=>new Promise(l=>{const F=new sl;F.postMessage({type:"init",wasmUrl:this.wasmUrl}),F.onmessage=U=>{if("WASM_LOADED"===U.data.type)l(F);else if("FINISHED"===U.data.type){U.data;this.addWorkDone(U.data.resourceId,1),this.__onFinishedReceiveFileData(U.data)}else if("ERROR"===U.data.type){const l=U.data;console.error("Unable to load Resource:",l.resourceId," With url:",l.url)}}}))()),this.__workers[this.__nextWorker]}__terminateWorkers(){for(const l of this.__workers)l.terminate();this.__workers=[]}resolveFileId(l){return this.__adapter?this.__adapter.resolveFileId(l):l}resolveFilename(l){if(this.__adapter)return this.__adapter.resolveFilename(l);return l.split(l.lastIndexOf("/"))[1]}resolveURL(l){return this.__adapter?this.__adapter.resolveURL(l):l}loadURL(l,F,U,c=!0){return console.warn("Please call loadUrl instead,"),this.loadUrl(l,F,U,c)}loadUrl(l,F,U,c=!0){c&&this.addWork(l,3),l in this.__callbacks||(this.__callbacks[l]=[]),this.__callbacks[l].push(U),fetch(F).then(l=>function(l){if(!l.ok)throw new Error(`HTTP ${l.status} - ${l.statusText}`);return l}(l)&&l.arrayBuffer()).then(F=>{this.__getWorker().then(U=>{U.postMessage({type:"unpack",resourceId:l,buffer:F})})})}__onFinishedReceiveFileData(l){const F=l.resourceId;this.addWorkDone(F,1);const U=this.__callbacks[F];if(U){for(const F of U)F(l.entries);delete this.__callbacks[F]}this.emit("loaded",{resourceId:F}),this.addWorkDone(F,1)}loadCommonAssetResource(l){if(l in this.__commonResources)return this.__commonResources[l];const F=new VLAAsset;return F.getParameter("DataFilePath").setValue(l),this.__commonResources[l]=F,F}addWork(l,F){this.__totalWork+=F;const U=this.__doneWork/this.__totalWork*100;this.emit("progressIncremented",{percent:U})}addWorkDone(l,F){this.__doneWork+=F;const U=this.__doneWork/this.__totalWork*100;if(this.emit("progressIncremented",{percent:U}),this.__doneWork>this.__totalWork)throw new Error("Mismatch between work loaded and work done.");this.__doneWork==this.__totalWork&&this.emit("allResourcesLoaded",{})}};class dl{constructor(l){if(l){const F=l.split("-"),U=F[0].split(".");this.major=parseInt(U[0]),this.minor=parseInt(U[1]),this.patch=parseInt(U[2]),2==F.length&&(this.branch=F[1])}else this.major=0,this.minor=0,this.patch=0}compare(l){const F=[this.major,this.minor,this.patch];for(let U=0;U<3;U++)if(F[U]!==l[U])return F[U]-l[U];return 0}equals(l){return!(this.patch==l[2]&&this.minor==l[1]&&this.major==l[0])}lessThan(l){return!(this.major>=l[0]||this.minor>=l[1]||this.patch>=l[2])}greaterThan(l){return this.major>l[0]||this.minor>l[1]||this.patch>l[2]}greaterOrEqualThan(l){return!(this.major<l[0])&&(this.major>l[0]||!(this.minor<l[1])&&(this.minor>l[1]||!(this.patch<l[2])))}}class il{constructor(l=0){this.__data=new ArrayBuffer(l),this.__byteOffset=0,this.__reserved=l,this.__dataView=new DataView(this.__data)}pos(){return this.__byteOffset}seek(l){this.__byteOffset=l}seekEnd(){this.__byteOffset=this.__reserved}getBuffer(){if(this.__data.byteLength==this.__byteOffset)return this.__data;return new Uint8Array(this.__data).slice(0,this.__byteOffset).buffer}__grow(){const l=2*(this.__reserved>0?this.__reserved:1),F=new ArrayBuffer(l),U=new Uint8Array(F),c=new Uint8Array(this.__data);U.set(c),this.__data=F,this.__dataView=new DataView(this.__data),this.__reserved=l}__reserve(l){this.__byteOffset+l>this.__reserved&&this.__grow()}__offset(l){this.__byteOffset+=l,this.__byteOffset>this.__reserved&&this.__grow()}writeUInt8(l){this.__reserve(1),this.__dataView.setUint8(this.__byteOffset,l),this.__offset(1)}writeUInt16(l){this.__reserve(2),this.__dataView.setUint16(this.__byteOffset,l,!0),this.__offset(2)}writeUInt32(l){this.__reserve(4),this.__dataView.setUint32(this.__byteOffset,l,!0),this.__offset(4)}writeSInt32(l){this.__reserve(4),this.__dataView.setInt32(this.__byteOffset,l,!0),this.__offset(4)}writeFloat16(l){const F=Q.encode16BitFloat(l);this.writeUInt16(F)}writeFloat32(l){this.__reserve(4),this.__dataView.setFloat32(this.__byteOffset,l,!0),this.__offset(4)}writeUInt8Array(l,F=!0){const U=l.size?l.size:l.length;this.__reserve(U+(F?4:0)),F&&this.writeUInt32(U);for(let F=0;F<U;F++)this.writeUInt8(l[F])}writeUInt16Array(l,F=!0){const U=l.size?l.size:l.length;this.__reserve(2*U+(F?4:0)),F&&this.writeUInt32(U);for(let F=0;F<U;F++)this.writeUInt16(l[F])}writeUInt32Array(l,F=!0){const U=l.size?l.size:l.length;this.__reserve(4*U+(F?4:0)),F&&this.writeUInt32(U);for(let F=0;F<U;F++)this.writeUInt32(l[F])}writeFloat32Array(l,F=!0){const U=l.size?l.size:l.length;this.__reserve(4*U+(F?4:0)),F&&this.writeUInt32(U);for(let F=0;F<U;F++)this.writeFloat32(l[F])}writeStr(l,F=!0){const U=l.length;this.__reserve(4*U+(F?4:0)),F&&this.writeUInt32(U);for(let F=0;F<U;F++)this.writeFloat32(l.charCodeAt(F))}writeSInt32Vec2(l){this.writeSInt32(l.x),this.writeSInt32(l.y)}writeUInt32Vec2(l){this.writeUInt32(l.x),this.writeUInt32(l.y)}writeFloat16Vec2(l){this.writeFloat16(l.x),this.writeFloat16(l.y)}writeFloat32Vec2(l){this.writeFloat32(l.x),this.writeFloat32(l.y)}writeFloat16Vec3(l){this.writeFloat16(l.x),this.writeFloat16(l.y),this.writeFloat16(l.z)}writeFloat32Vec3(l){this.writeFloat32(l.x),this.writeFloat32(l.y),this.writeFloat32(l.z)}writeFloat16Quat(l){this.writeFloat16(l.x),this.writeFloat16(l.y),this.writeFloat16(l.z),this.writeFloat16(l.w)}writeFloat32Quat(l){this.writeFloat32(l.x),this.writeFloat32(l.y),this.writeFloat32(l.z),this.writeFloat32(l.w)}writeRGBFloat32Color(l){this.writeFloat32(l.r),this.writeFloat32(l.g),this.writeFloat32(l.b)}writeRGBAFloat32Color(l){this.writeFloat32(l.r),this.writeFloat32(l.g),this.writeFloat32(l.b),this.writeFloat32(l.a)}writeRGBUInt8Color(l){this.writeUInt8(l.r),this.writeUInt8(l.g),this.writeUInt8(l.b)}writeRGBAUInt8Color(l){this.writeUInt8(l.r),this.writeUInt8(l.g),this.writeUInt8(l.b),this.writeUInt8(l.a)}writeBox2(l){this.writeFloat32Vec2(l.p0),this.writeFloat32Vec2(l.p1)}writeBox3(l){this.writeFloat32Vec3(l.p0),this.writeFloat32Vec3(l.p1)}writePadd(l){const F=l-this.__byteOffset;this.__reserve(F),this.__offset(F)}writeAlignment(l){const F=this.__byteOffset%l;0!=F&&(this.__reserve(l-F),this.__offset(l-F))}}const Ql={OP_WRITE:0,OP_READ_WRITE:1};class tl extends H{constructor(l,F,U){super(l),this.__name=l,this.__value=F,this.__dataType=U||void 0,this.__boundOps=[],this.__dirtyOpIndex=0,this.__cleaning=!1,this.getName=this.getName.bind(this),this.setName=this.setName.bind(this),this.getValue=this.getValue.bind(this),this.setValue=this.setValue.bind(this)}clone(){return new tl(this.__name,this.__value,this.__dataType)}getName(){return this.__name}setName(l){if(l===this.__name)return this;const F=this.__name;this.__name=l,this.emit("nameChanged",{newName:this.__name,prevName:F})}getOwner(){return this.ownerItem}setOwner(l){this.ownerItem=l}getPath(){return this.ownerItem&&this.ownerItem.getName?[...this.ownerItem.getPath(),this.__name]:[this.__name]}getDataType(){return this.__dataType}bindOperatorOutput(l,F=-1){-1==F&&(F=this.__boundOps.length),this.__boundOps.splice(F,0,l);for(let l=F;l<this.__boundOps.length;l++)this.__boundOps[l].setParamBindIndex(l);return this.setDirty(F)||this.emit("valueChanged",{mode:0}),F}unbindOperator(l){const F=l.getParamBindIndex();this.__boundOps.splice(F,1);for(let l=F;l<this.__boundOps.length;l++)this.__boundOps[l].setParamBindIndex(l);return this.setDirty(Math.max(0,F-1)),F}setDirty(l){if(l<this.__dirtyOpIndex){for(this.__dirtyOpIndex--;this.__dirtyOpIndex>0&&(this.__dirtyOpIndex!=l&&this.__boundOps[this.__dirtyOpIndex].getOperator().setDirty(),this.__boundOps[this.__dirtyOpIndex].getMode()!=Ql.OP_WRITE);this.__dirtyOpIndex--);return this.emit("valueChanged",{mode:0}),!0}return!1}isDirty(){return this.__dirtyOpIndex<this.__boundOps.length}getDirtyBindingIndex(){return this.__dirtyOpIndex}setCleanFromOp(l,F){if(F!=this.__dirtyOpIndex)if(F<this.__dirtyOpIndex)console.log("Parameter is cleaned when it was already clean to that point in the stack:",this.getPath());else if(this.__boundOps[F].getMode()!=Ql.OP_WRITE){const l=e.getBlueprintName(this),U=e.getBlueprintName(this.__boundOps[F].getOperator());throw new Error(`Parameter: ${l} with name: ${this.getName()} is not cleaning all outputs during evaluation of op: ${U} with name: ${op.getName()}`)}this.__value=l,this.__dirtyOpIndex=F+1}getValueFromOp(l){return this.__dirtyOpIndex<l&&this._clean(l),this.__value}_clean(l){if(this.__cleaning)throw new Error(`Cycle detected when cleaning: ${this.getPath()}. Operators need to be rebound to fix errors`);for(this.__cleaning=!0;this.__dirtyOpIndex<l;){const l=this.__dirtyOpIndex;if(this.__boundOps[this.__dirtyOpIndex].getOperator().evaluate(),l==this.__dirtyOpIndex){const l=this.__boundOps[this.__dirtyOpIndex].getOperator(),F=e.getBlueprintName(l);console.warn(`Operator: ${F} with name: ${l.getName()} is not cleaning its outputs during evaluation`),this.__dirtyOpIndex++}}this.__cleaning=!1}getValue(l){return null!=l&&console.warn("WARNING in Parameter.setValue: 'mode' is deprecated."),this.__dirtyOpIndex<this.__boundOps.length&&this._clean(this.__boundOps.length),this.__value}setValue(l,F){if(null==l)throw"undefined was passed into the set value for param:"+this.getName();if(null!=F&&console.warn("WARNING in Parameter.setValue: 'mode' is deprecated."),this.__boundOps.length>0)for(let F=this.__boundOps.length-1;F>=0;F--){const U=this.__boundOps[F];if(l=U.backPropagateValue(l),0==U.getMode())return}(l.fromJSON||this.__value!=l)&&(this.__value=l,this.emit("valueChanged",{}))}loadValue(l){this.__value=l}toJSON(l){return this.__value.toJSON?{value:this.__value.toJSON(l)}:{value:this.__value}}fromJSON(l,F){null!=l.value?(l.value.type&&null==this.__value&&(this.__value=e.constructClass(l.value.type)),null!=this.__value&&this.__value.fromJSON?this.__value.fromJSON(l.value,F):this.__value=l.value,this.emit("valueChanged",{mode:0})):console.warn("Invalid Parameter JSON")}readBinary(l,F){console.warn(`TODO: Parameter: ${this.constructor.name} with name: ${this.__name} does not implement readBinary`)}clone(){const l=this.__value;l.clone&&(l=l.clone());return new tl(this.__name,l,this.__dataType)}}class Il extends tl{constructor(l,F=0,U,c){super(l,F,"Number"),U&&!Array.isArray(U)&&console.error("Range value must be an array of 2 numbers."),this.__range=U,this.__step=c}getRange(){return this.__range}setRange(l){this.__range=l}getStep(){return this.__step}setStep(l){this.__step=l}toJSON(l){const F=super.toJSON(l);return this.__range&&(F.range=this.__range),this.__step&&(F.step=this.__step),F}fromJSON(l,F){super.fromJSON(l,F),l.range&&(this.__range=l.range),l.step&&(this.__step=l.step)}readBinary(l,F){this.__value=l.loadFloat32()}clone(){const l=new Il(this.__name,this.__value);return l.__range=this.__range,l.__step=this.__step,l}}e.register("NumberParameter",Il),e.register("Property_SInt32",Il),e.register("Property_UInt32",Il),e.register("Property_Float32",Il);class Vl extends Il{constructor(l,F,U){super(l,F,[0,U.length],1),this.choices=U}getChoices(){return this.choices}setValue(l){"string"==typeof l?super.setValue(this.choices.indexOf(l)):super.setValue(l)}}class el extends tl{constructor(l,F){super(l,F,"Boolean")}clone(){return new el(this.__name,this.__value)}}e.register("BooleanParameter",el);class Xl extends tl{constructor(l,F,U){super(l,F||new a,"Vec2"),this.__range=U}getRange(){return this.__range}__setRange(l){this.__range=l,this.emit("rangeChanged",{range:l})}readBinary(l,F){this.__value.readBinary(l)}clone(){return new Xl(this.__name,this.__value.clone())}}class al extends tl{constructor(l,F,U){super(l,F||new Z,"Vec3")}readBinary(l,F){this.__value.readBinary(l)}clone(){return new al(this.__name,this.__value.clone())}}class bl extends tl{constructor(l,F){super(l,F||new x,"Vec4")}readBinary(l,F){this.__value.readBinary(l)}clone(){return new bl(this.__name,this.__value.clone())}}class Zl extends tl{constructor(l,F){super(l,F||new R,"Color")}readBinary(l,F){const U=l.loadRGBAFloat32Color();U.applyGamma(2.2),this.__value=U}clone(){return new Zl(this.__name,this.__value.clone())}}e.register("ColorParameter",Zl);class xl extends tl{constructor(l,F){super(l,F||new m,"Mat3")}readBinary(l,F){this.__value.readBinary(l)}clone(){return new xl(this.__name,this.__value.clone())}}class Gl extends tl{constructor(l,F){super(l,F||new L,"Mat4")}readBinary(l,F){this.__value.readBinary(l)}clone(){return new Gl(this.__name,this.__value.clone())}}class Rl extends tl{constructor(l,F){super(l,F||new h,"Xfo")}readBinary(l,F){this.__value.readBinary(l)}clone(){return new Rl(this.__name,this.__value.clone())}}class yl extends tl{constructor(l,F){super(l,F,"BaseImage")}toJSON(l){const F=super.toJSON(l);return this.__value&&(F.imageType=e.getBlueprintName(this.__value)),F}fromJSON(l,F){return l.imageType&&(this.__value=e.constructClass(l.imageType)),super.fromJSON(l,F)}clone(){return new yl(this.__name,this.__value)}}class ml extends tl{constructor(l,F=""){super(l,F,"String"),this.multiLine=!1}setMultiLine(l){this.multiLine=l}getMultiLine(){return this.multiLine}readBinary(l,F){this.__value=l.loadStr()}clone(){return new ml(this.__name,this.__value)}}e.register("StringParameter",ml),e.register("Property_String",ml);class Ll extends ml{constructor(l,F=""){super(l,F,"String"),this.lang="js"}setLanguage(l){this.lang=l}getLanguage(){return this.lang}clone(){return new Ll(this.__name,this.__value)}}e.register("CodeParameter",Ll);class nl extends tl{constructor(l,F){super(l,[]),this.__dataType=F}__filter(l){return!0}getCount(){return this.__value.length}getElement(l){return this.__value[l]}setElement(l,F){this.__value[l]=F,this.emit("valueChanged",{})}addElement(l){if(null==l)l=new this.__dataType;else if(!this.__filter(l))return;return this.__value.push(l),this.emit("elementAdded",{elem:l,index:this.__value.length-1}),this.emit("valueChanged",{}),l}removeElement(l){const F=this.__value[l];this.__value.splice(l,1),this.emit("elementRemoved",{elem:F,index:l}),this.emit("valueChanged",{})}insertElement(l,F){this.__filter(F)&&(this.__value.splice(l,0,F),this.emit("elementAdded",{elem:F,index:l}),this.emit("valueChanged",{}))}toJSON(l){const F=[];for(const U of this.__value)"string"==typeof this.__dataType?F.push(U):F.push(U.toJSON(l));return{items:F}}fromJSON(l,F){if(null!=l.items){this.__value=[];for(let U=0;U<l.items.length;U++){let c;"string"==typeof this.__dataType?c=l.items[U]:(console.log(this.__dataType),c=new this.__dataType,c.fromJSON(l.items[U],F)),this.__value.push(c),this.emit("elementAdded",{elem:c,index:this.__value.length-1})}this.emit("valueChanged",{mode:0})}else console.warn("Invalid Parameter JSON")}clone(){const l=this.__value.slice(0),F=new nl(this.__name,this.__dataType);return F.setValue(l),F}destroy(){for(let l=0;l<this.__value.length;l++)this.__value[l]instanceof tl&&this.__value[l].destroy(),this.removeElement(l)}}class Cl extends tl{constructor(l){super(l,{},"Struct"),this.__members=[]}_addMember(l){return this.__value[l.getName()]=l.getValue(),l.on("valueChanged",()=>{this.__value[l.getName()]=l.getValue()}),this.__members.push(l),this.emit("valueChanged",{}),l}getParameter(l){for(const F of this.__members)if(F.getName()==l)return F}getMember(l){return this.getParameter(l)}getMemberNames(){const l=[];for(let F=0;F<this.__members.length;F++){const U=this.__members[F];null!=U&&(l[F]=U.getName())}return l}toJSON(l){const F=[];for(const U of this.__members)F.push(U.toJSON(l));return{members:F}}fromJSON(l,F){if(null!=l.members)for(let U=0;U<l.members.length;U++)l.members[U]&&this.__members[U].fromJSON(l.members[U],F);else console.warn("Invalid Parameter JSON")}destroy(){super.destroy();for(const l of this.__members)l.destroy()}}class hl extends tl{constructor(l,F){super(l,void 0,"TreeItem"),this.__filterFn=F,this.__emittreeItemGlobalXfoChanged=this.__emittreeItemGlobalXfoChanged.bind(this)}__emittreeItemGlobalXfoChanged(l){this.emit("treeItemGlobalXfoChanged",l)}setOwner(l){this.__owner=l}getOwner(){return this.__owner}setFilterFn(){this.__filterFn=filterFn}getFilterFn(){return this.__filterFn}setValue(l){if(this.__filterFn&&!this.__filterFn(l))return!1;this.__value!==l&&(this.__value&&this.__value.off("globalXfoChanged",this.__emittreeItemGlobalXfoChanged),this.__value=l,this.__value&&this.__value.on("globalXfoChanged",this.__emittreeItemGlobalXfoChanged),this.emit("valueChanged",{}))}toJSON(l){return{value:l.makeRelative(this.__value.getPath())}}fromJSON(l,F){null!=l.value?F.resolvePath(l.value,l=>{this.setValue(l)},()=>{console.warn("Unable to resolve tree item parameter value:"+pj.paramPath)}):console.warn("Invalid Parameter JSON")}clone(){return new hl(this.__name,this.__filterFn)}destroy(){this.__value&&this.__value.off("globalXfoChanged",this.__emittreeItemGlobalXfoChanged)}}class ul extends tl{constructor(l,F){super(l,void 0,"BaseItem"),this.__items=new Set,this.__filterFn=F}setFilterFn(l){this.__filterFn=l}getFilterFn(){return this.__filterFn}getItem(l){return Array.from(this.__items)[l]}addItem(l,F=!0){if(this.__filterFn&&!this.__filterFn(l))return console.warn("ItemSet __filterFn rejecting item:",l.getPath()),!1;this.__items.add(l);const U=Array.from(this.__items).indexOf(l);return this.emit("itemAdded",{item:l,index:U}),F&&this.emit("valueChanged",{}),U}addItems(l,F=!0){l.forEach(l=>this.addItem(l,!1)),F&&this.emit("valueChanged",{})}removeItem(l,F=!0){const U=Array.from(this.__items)[l];return this.__items.delete(U),this.emit("itemRemoved",{item:U,index:l}),F&&this.emit("valueChanged",{}),U}setItems(l,F=!0){for(let F=this.__items.length-1;F>=0;F--){const U=this.__items[F];l.has(U)||this.removeItem(U,!1)}for(const F of l)this.__items.has(F)||this.addItem(F,!1);F&&this.emit("valueChanged",{})}clearItems(l=!0){this.__items.clear(),l&&this.emit("valueChanged",{})}getNumItems(){return Array.from(this.__items).length}getValue(){return this.__items}toJSON(l){return{}}fromJSON(l,F){}clone(){return new ul(this.__name,this.__filterFn)}}class Sl extends tl{constructor(l,F){super(l,void 0,F.getDataType()),this.setSourceParameter(F)}setSourceParameter(l){this.sourceParameter=l,this.sourceParameter.on("valueChanged",this.__proxyValueChanged.bind(this))}__proxyValueChanged(l){this.emit("valueChanged",l)}getDataType(){return this.sourceParameter.getDataType()}setValue(l){}getValue(){return this.sourceParameter.getValue()}toJSON(l){const F=super.toJSON(l);return this.sourceParameter&&(F.sourceParameter=this.sourceParameter.getPath()),F}fromJSON(l,F){super.fromJSON(l,F),l.sourceParameter&&F.resolvePath(l.sourceParameter,l=>{this.setSourceParameter(l)},F=>{console.warn("Error loading Proxy Param: '"+this.getName()+"'. Unable to connect to:"+l.sourceParameter)}),l.range&&(this.sourceParameter=l.range),l.step&&(this.__step=l.step)}clone(l){const F=new Sl(this.__name,this.__value);return this.sourceParameter&&this.connectToClonedSourceParam(l),F}connectToClonedSourceParam(l){l.resolveClonedItem(this.sourceParameter,l=>{clonedParam.setSourceParameter(l)},l=>{console.warn("Error cloning Proxy Param: '"+this.getName()+"'. Unable to connect to:"+j.sourceParameter)})}}e.register("ProxyParameter",Sl);class ol extends tl{constructor(l,F){super(l,void 0,"Geometry"),this.setValue(F),this.__emitBoundingBoxDirtied=this.__emitBoundingBoxDirtied.bind(this)}__emitBoundingBoxDirtied(l){this.emit("boundingBoxChanged",l)}setValue(l){this.__value!==l&&(this.__value&&this.__value.off("boundingBoxChanged",this.__emitBoundingBoxDirtied),this.__value=l,this.__value&&this.__value.on("boundingBoxChanged",this.__emitBoundingBoxDirtied),this.emit("valueChanged",{}))}toJSON(l){return super.toJSON(l)}fromJSON(l,F){return super.fromJSON(l,F)}clone(){return new ol(this.__name,this.__value)}destroy(){this.__value&&this.__value.off("boundingBoxChanged",this.__emitBoundingBoxDirtied)}}class Wl extends tl{constructor(l){super(l,"","FilePath")}getFilepath(){return this.__value?Bl.getFilepath(this.__value):""}setFilepath(l){this.setValue(Bl.resolveFileId(l))}getFilename(){return Bl.resolveFilename(this.__value)}getExt(){const l=this.getFilename(),F=l.lastIndexOf(".");if(-1!=F)return l.substring(F).toLowerCase()}getStem(){const l=this.getFilename();if(l){const F=l.split(".");return 2==F.length?F[0]:l}}getFileDesc(){return this.getFile()}getFile(){return{id:this.__value,url:this.getUrl(),name:this.getFilename()}}setUrl(l,F){this.setValue(Bl.resolveFileId(l))}getUrl(){return Bl.resolveURL(this.__value)}setValue(l){if(null==l)throw new Error("Invalid value for setValue.");l!=this.__value&&(this.__value=l,this.emit("valueChanged",{}))}toJSON(l){const F={};return this.__file&&(F.value=this.__value),F}fromJSON(l,F){l.value&&(this.__value=l.value)}clone(){const l=new Wl(this.__name);return l.__file=this.__file,l}}class Jl extends tl{constructor(l,F){super(l,F,"Material"),this.__valueParameterValueChanged=this.__valueParameterValueChanged.bind(this)}__valueParameterValueChanged(l){this.emit("valueParameterValueChanged",l)}setValue(l){this.__value!==l&&(this.__value&&this.__value.off("parameterValueChanged",this.__valueParameterValueChanged),this.__value=l,this.__value&&this.__value.on("parameterValueChanged",this.__valueParameterValueChanged),this.emit("valueChanged",{}))}toJSON(l){return this.__value?{value:this.__value.getPath()}:void 0}fromJSON(l,F){if(null!=l.value){if((l.value instanceof array||l.value instanceof string)&&F&&F.assetItem){const U=F.assetItem.getMaterialLibrary().getMaterial(l.value instanceof array?l.value[1]:l.value);U&&this.loadValue(U)}}else console.warn("Invalid Parameter JSON")}clone(){return new Jl(this.__name,this.__value)}destroy(){this.__value&&this.__value.off("parameterValueChanged",this.__valueParameterValueChanged)}}class El extends K{constructor(l){super(l),this.width=0,this.height=0,this.format="RGB",this.type="UNSIGNED_BYTE",this.addParameter(new el("AlphaFromLuminance",!1)),this.addParameter(new el("Invert",!1)),this.addParameter(new el("FlipY",!1)),this.on("parameterValueChanged",l=>{this.emit("updated")}),this.loaded=!1}isLoaded(){return!0}getMapping(){return this.__mapping}setMapping(l){this.__mapping=l}isStream(){return!1}isStreamAtlas(){return this.__streamAtlas}getParams(){return{type:this.type,format:this.format,width:this.width,height:this.height,flipY:this.getParameter("FlipY").getValue(),invert:this.getParameter("Invert").getValue(),alphaFromLuminance:this.getParameter("AlphaFromLuminance").getValue()}}}class Hl extends Il{constructor(l,F,U){super(l,F,U)}getImage(){return this.__image}setImage(l){const F=()=>{this.emit("textureDisconnected",{})};l?(null!=this.__image&&this.__image!==l&&F(),this.__image=l,this.emit("textureConnected",{}),this.emit("valueChanged",{mode:0})):null!=this.__image&&(F(),this.__image=void 0,this.emit("textureDisconnected",{}))}setValue(l){l instanceof El?this.setImage(l):(null!=this.__image&&this.setImage(void 0),super.setValue(l))}readBinary(l,F){super.readBinary(l,F);const U=l.loadStr();""!=U&&(console.log("Load Texture"),this.setImage(F.materialLibrary.getImage(U)))}clone(){return new Hl(this.__name,this.__value.clone())}}e.register("MaterialFloatParam",Hl);class rl extends Zl{constructor(l,F){super(l,F),this.__imageUpdated=this.__imageUpdated.bind(this)}getImage(){return this.__image}__imageUpdated(){this.emit("valueChanged",{})}setImage(l){const F=()=>{this.__image.off("loaded",this.__imageUpdated),this.__image.off("updated",this.__imageUpdated),this.__image=null,this.emit("textureDisconnected",{})};l?(null!=this.__image&&this.__image!==l&&F(),this.__image=l,this.__image.on("updated",this.__imageUpdated),this.emit("textureConnected",{}),this.emit("valueChanged",{mode:0})):null!=this.__image&&(F(),this.__image=void 0,this.emit("textureDisconnected",{}))}setValue(l){l instanceof El?this.setImage(l):(null!=this.__image&&this.setImage(void 0),super.setValue(l))}readBinary(l,F){super.readBinary(l,F);const U=l.loadStr();""!=U&&this.setImage(F.materialLibrary.getImage(U))}clone(){return new rl(this.__name,this.__value.clone())}}e.register("MaterialColorParam",rl);class Yl{constructor(l,F,U){if(this.__dataType=l,this.normalized=!1,null!=l.numElements)this.__dimension=this.__dataType.numElements();else switch(l){case 6:case 4:case 5:this.__dimension=1;break;default:throw new Error("Invalid data type for attribute:"+l)}var c;this.__defaultElementValue=null!=U?U:Number.MAX_VALUE,(c=F)&&void 0!==c.byteLength?this.__data=F:(this.__data=new Float32Array(F*this.__dimension),this.initRange(0))}resize(l){const F=this.__data.length,U=l*this.__dimension;if(U>F){const l=new Float32Array(U);l.set(this.__data),this.__data=l,this.initRange(F)}else U<F&&(this.__data=this.__data.slice(0,U))}initRange(l){for(let F=l;F<this.__data.length;F++)this.__data[F]=this.__defaultElementValue}getCount(){return this.__data.length/this.__dimension}get length(){return this.__data.length/this.__dimension}get dataType(){return this.__dataType}get data(){return this.__data}set data(l){this.__data=l}get numElements(){return this.__dimension}getFloat32Value(l){return this.__data[l]}setFloat32Value(l,F){this.__data[l]=F}getValueRef(l){const F=this.__dimension;if(l>=this.__data.length/F)throw new Error("Invalid vertex index:"+l+". Num Vertices:"+this.__data.length/3);return this.__dataType.createFromBuffer(this.__data.buffer,l*F*4)}setValue(l,F){const U=this.__dimension;if(l>=this.__data.length/U)throw new Error("Invalid vertex index:"+l+". Num Vertices:"+this.__data.length/3);this.__dataType.createFromBuffer(this.__data.buffer,l*U*4).setFromOther(F)}toJSON(l){return{data:Array.from(this.__data),dataType:e.getBlueprintName(this.__dataType),defaultValue:this.__defaultElementValue,length:this.__data.length/this.__dimension}}fromJSON(l){this.__data=Float32Array.from(l.data)}toString(){return JSON.stringify(this.toJSON(),null,2)}}class pl extends z{constructor(){super(),this.__numVertices=0,this.__boundingBox=new o,this.__boundingBoxDirty=!0,this.__vertexAttributes=new Map,this.__metaData=new Map,this.addVertexAttribute("positions",Z,0)}setDebugName(l){this.__name=l}addVertexAttribute(l,F,U){const c=this.getVertexAttribute("positions");let s;var B;return s=(B=U)&&void 0!==B.byteLength?new Yl(F,U):new Yl(F,null!=c?c.length:0,U),this.__vertexAttributes.set(l,s),s}hasVertexAttribute(l){return this.__vertexAttributes.has(l)}getVertexAttribute(l){return this.__vertexAttributes.get(l)}getVertexAttributes(){const l={};for(const[F,U]of this.__vertexAttributes.entries())l[F]=U;return l}get vertices(){return console.warn("deprecated use #getVertexAttribute('positions')"),this.__vertexAttributes.get("positions")}numVertices(){return this.__numVertices}getNumVertices(){return this.__numVertices}setNumVertices(l){this.__numVertices=l,this.__vertexAttributes.forEach(l=>l.resize(this.__numVertices))}getVertex(l){return console.warn("deprecated use #getVertexAttribute('positions').getValueRef()"),Z.createFromBuffer(this.vertices.data.buffer,3*l*4)}setVertex(l,F){return console.warn("deprecated use #getVertexAttribute('positions').getValueRef().setFromOther(value)"),Z.createFromBuffer(this.vertices.data.buffer,3*l*4).setFromOther(F)}moveVertices(l){console.warn("deprecated use #getVertexAttribute('positions').getValueRef()");const F=this.vertices;for(let U=0;U<F.length;U++)F.getValueRef(U).addInPlace(l);this.setBoundingBoxDirty()}transformVertices(l){console.warn("deprecated, please transform the vertices manually");const F=this.vertices;for(let U=0;U<F.length;U++){const c=F.getValueRef(U),s=l.transformVec3(c);c.set(s.x,s.y,s.z)}this.setBoundingBoxDirty()}get boundingBox(){return console.warn("deprecated, please use #getBoundingBox()"),this.__boundingBoxDirty&&this.updateBoundingBox(),this.__boundingBox}getBoundingBox(){return this.__boundingBoxDirty&&this.updateBoundingBox(),this.__boundingBox}setBoundingBoxDirty(){this.__boundingBoxDirty=!0,this.emit("boundingBoxChanged",{})}updateBoundingBox(){const l=this.getVertexAttribute("positions"),F=new o,U=l.length;for(let c=0;c<U;c++)F.addPoint(l.getValueRef(c));this.__boundingBox=F,this.__boundingBoxDirty=!1}getMetadata(l){return this.__metaData.get(l)}hasMetadata(l){return this.__metaData.has(l)}setMetadata(l,F){this.__metaData.set(l,F)}deleteMetadata(l){this.__metaData.delete(l)}genBuffers(l){const F={};for(const[l,U]of this.__vertexAttributes)F[l]={values:U.data,count:U.length,dataType:U.dataType,normalized:U.normalized};return{numVertices:this.numVertices(),attrBuffers:F}}freeBuffers(){}loadBaseGeomBinary(l){this.name=l.loadStr();const F=l.loadUInt8();this.debugColor=l.loadRGBFloat32Color();const U=l.loadUInt32();this.__boundingBox.set(l.loadFloat32Vec3(),l.loadFloat32Vec3()),this.setNumVertices(U);const c=this.getVertexAttribute("positions");let s,B;2&F&&(s=this.getVertexAttribute("normals"),s||(s=this.addVertexAttribute("normals",Z,0))),4&F&&(B=this.getVertexAttribute("texCoords"),B||(B=this.addVertexAttribute("texCoords",a,0)));const d=(l,F,U,s)=>{for(let B=l[0];B<l[1];B++){const l=new Z(s[3*B+0]/255,s[3*B+1]/255,s[3*B+2]/255);l.multiplyInPlace(U),l.addInPlace(F),c.setValue(B,l)}},i=(l,F,U,c)=>{U.isNull()&&U.set(1,1,1);for(let B=l[0];B<l[1];B++){const l=new Z(c[3*B+0]/255,c[3*B+1]/255,c[3*B+2]/255);l.multiplyInPlace(U),l.addInPlace(F),l.normalizeInPlace(),s.setValue(B,l)}},Q=(l,F,U,c)=>{for(let s=l[0];s<l[1];s++){const l=new a(c[2*s+0]/255,c[2*s+1]/255);l.multiplyInPlace(U),l.addInPlace(F),B.setValue(s,l)}},t=l.loadUInt32();if(1==t){{const F=this.__boundingBox,c=l.loadUInt8Array(3*U);d([0,U],F.p0,F.diagonal(),c)}if(s){const F=new o(l.loadFloat32Vec3(),l.loadFloat32Vec3()),c=l.loadUInt8Array(3*U);i([0,U],F.p0,F.diagonal(),c),s.loadSplitValues(l)}if(B){const F=new u(l.loadFloat32Vec2(),l.loadFloat32Vec2()),c=l.loadUInt8Array(2*U);Q([0,U],F.p0,F.diagonal(),c),B.loadSplitValues(l)}}else{const F=[];let c=0;for(let U=0;U<t;U++){const U=l.loadUInt32(),d={range:[c,c+U],bbox:new o(l.loadFloat32Vec3(),l.loadFloat32Vec3())};s&&(d.normalsRange=new o(l.loadFloat32Vec3(),l.loadFloat32Vec3())),B&&(d.texCoordsRange=new u(l.loadFloat32Vec2(),l.loadFloat32Vec2())),F.push(d),c+=U}const I=l.loadUInt8Array(3*U);let V,e;s&&(V=l.loadUInt8Array(3*U)),B&&(e=l.loadUInt8Array(2*U));for(let l=0;l<t;l++){{const U=F[l].bbox;d(F[l].range,U.p0,U.diagonal(),I)}if(s){const U=F[l].normalsRange;i(F[l].range,U.p0,U.diagonal(),V)}if(B){const U=F[l].texCoordsRange;Q(F[l].range,U.p0,U.diagonal(),e)}}s&&s.loadSplitValues(l),B&&B.loadSplitValues(l)}}toJSON(l){let F=super.toJSON(l);F||(F={}),F.type=e.getBlueprintName(this),F.numVertices=this.__numVertices;const U={};for(const[F,c]of this.__vertexAttributes.entries())U[F]=c.toJSON(l);return F.vertexAttributes=U,F}fromJSON(l,F){super.fromJSON(l,F),this.setNumVertices(l.numVertices);for(const F in l.vertexAttributes){let U=this.__vertexAttributes.get(F);const c=l.vertexAttributes[F];if(!U){const l=e.getBlueprint(c.dataType);U=new VertexAttribute(this,l,0,c.defaultScalarValue),this.__vertexAttributes.set(F,U)}U.fromJSON(c)}}toString(){return JSON.stringify(this.toJSON(),null,2)}}class Nl extends Yl{constructor(l,F,U,c){super(F,U,c),this.__geom=l,this.__splits={},this.__splitValues=[]}getFaceVertexValueRef(l,F){const U=this.__geom.getFaceVertexIndex(l,F);return U in this.__splits&&l in this.__splits[U]?this.__splitValues[this.__splits[U][l]]:this.getValueRef(U)}setFaceVertexValue(l,F,U){const c=this.__geom.getFaceVertexIndex(l,F);this.setFaceVertexValue_ByVertexIndex(l,c,U)}setFaceVertexValue_ByVertexIndex(l,F,U){const c=this.getValueRef(F);if(c.isValid())if(c.approxEqual(U));else{if(F in this.__splits){const c=this.__splits[F];for(const F in c){const s=c[F];if(this.__splitValues[s].approxEqual(U))return void(c[l]=s)}if(l in this.__splits[F]){return void this.__splitValues[this.__splits[F][l]].setFromOther(U)}}else this.__splits[F]={};this.__splits[F][l]=this.__splitValues.length,this.__splitValues.push(U)}else c.setFromOther(U)}setSplitVertexValue(l,F,U){if(l in this.__splits||(this.__splits[l]={}),F in this.__splits[l]){if(this.__splitValues[this.__splits[l][F]].approxEqual(U))return;console.warn("Face Vertex Already Split with different value")}this.__splits[l][F]=this.__splitValues.length,this.__splitValues.push(U)}setSplitVertexValues(l,F,U){l in this.__splits||(this.__splits[l]={});const c=this.__splitValues.length;this.__splitValues.push(U);for(const U of F)this.__splits[l][U]=c}getSplits(){return this.__splits}getSplitCount(){let l=0;for(const F in this.__splits)l+=Object.keys(this.__splits[F]).length;return l}generateSplitValues(l,F){if(0==F)return this.__data;const U=this.length,c=this.length+F,s=this.__dataType.numElements?this.__dataType.numElements():1,B=new Float32Array(c*s);for(let l=0;l<this.__data.length;l++)B[l]=this.__data[l];for(const F in l){const c=l[F];for(const l in c){const d=U+c[l];if(F in this.__splits&&l in this.__splits[F]){const U=this.__splits[F][l];6==this.__dataType?B[d*s]=this.__splitValues[U]:this.__dataType.createFromBuffer(B.buffer,d*s*4).setFromOther(this.__splitValues[U])}else{const l=parseInt(F);for(let F=0;F<s;F++)l*s+F>this.__data.length&&console.log("Error remapping src:"+l*s+F),d*s+F>B.length&&console.log("Error remapping tgt:"+d*s+F),B[d*s+F]=this.__data[l*s+F]}}}return B}toJSON(l){const F=super.toJSON(l);return F.splits=this.__splits,F.splitValues=this.__splitValues,F}fromJSON(l,F){super.fromJSON(l,F),this.__splits=l.splits,this.__splitValues=[];for(const F of l.splitValues)this.__splitValues.push(this.__dataType.createFromJSON(F))}loadSplitValues(l){const F=l.loadUInt32Array();if(0==F.length)return;let U=0,c=0;for(;;){const l=F[U++],s=F[U++],B={};for(let l=0;l<s;l++){const l=F[U++],s=F[U++];B[l]=s,s>=c&&(c=s+1)}if(this.__splits[l]=B,U>=F.length)break}const s=this.__numFloat32Elements,B=l.loadFloat32Array(c*s);this.__splitValues=[];for(let l=0;l<c;l++){const F=this.__dataType.createFromFloat32Array(B.slice(l*s,l*s+s));this.__splitValues.push(F)}}}class Tl extends pl{constructor(){super()}loadBin(l){this.name=l.loadStr();const F=l.loadUInt32();this.__boundingBox.set(l.loadFloat32Vec3(),l.loadFloat32Vec3()),this.setNumVertices(F);const U=this.getVertexAttribute("positions");if(F<256){const c=this.__boundingBox.toMat4(),s=l.loadUInt8Array(3*F);for(let l=0;l<F;l++){const F=new Vec3(s[3*l+0]/255,s[3*l+1]/255,s[3*l+2]/255);U.setValue(l,c.transformVec3(F))}}else{const c=l.loadUInt32(),s=[];for(let F=0;F<c;F++){const F=l.loadUInt32Vec2(),U=l.loadFloat32Vec3(),c=l.loadFloat32Vec3();s.push({range:F,bbox:new Box3(U,c)})}const B=l.loadUInt8Array(3*F);for(let l=0;l<c;l++){const F=s[l].bbox.toMat4();for(let c=s[l].range.x;c<s[l].range.y;c++){const l=new Vec3(B[3*c+0]/255,B[3*c+1]/255,B[3*c+2]/255);U.setValue(c,F.transformVec3(l))}}}}readBinary(l,F){super.loadBaseGeomBinary(l),this.emit("geomDataChanged",{})}}e.register("Points",Tl);class Al extends pl{constructor(){super(),this.__indices=new Uint32Array,this.lineThickness=0}getIndices(){return this.__indices}getNumSegments(){return this.__indices.length/2}setNumSegments(l){if(l>this.getNumSegments()){const F=new Uint32Array(2*l);F.set(this.__indices),this.__indices=F}else this.__indices=this.__indices.slice(0,2*l)}setSegmentVertexIndices(l,F,U){if(l>=this.__indices.length/2)throw new Error("Invalid line index:"+l+". Num Segments:"+this.__indices.length/2);this.__indices[2*l+0]=F,this.__indices[2*l+1]=U}setSegment(l,F,U){console.warn("deprecated use #setSegmentVertexIndices"),this.setSegmentVertexIndices(l,F,U)}getSegmentVertexIndex(l,F){if(l<this.getNumSegments())return this.__indices[2*l+F]}genBuffers(){const l=super.genBuffers();let F;return l.numVertices<Math.pow(2,8)?(F=new Uint8Array(this.__indices.length),this.__indices.forEach((l,U)=>{F[U]=l})):l.numVertices<Math.pow(2,16)?(F=new Uint16Array(this.__indices.length),this.__indices.forEach((l,U)=>{F[U]=l})):F=this.__indices,l.indices=F,l}readBinary(l,F){super.loadBaseGeomBinary(l),this.setNumSegments(l.loadUInt32());const U=l.loadUInt8();1==U?this.__indices=l.loadUInt8Array():2==U?this.__indices=l.loadUInt16Array():4==U&&(this.__indices=l.loadUInt32Array()),this.emit("geomDataChanged",{})}toJSON(l){const F=super.toJSON(l);return F.indices=Array.from(this.__indices),F}fromJSON(l,F){super.fromJSON(l,F),this.__indices=Uint32Array.from(l.indices)}}e.register("Lines",Al);class Ml extends pl{constructor(){super(),this.init()}init(){this.__faceCounts=[],this.__faceVertexIndices=new Uint32Array,this.__faceAttributes=new Map,this.__edgeAttributes=new Map,this.__logTopologyWarnings=!1,this.edgeVerts=void 0,this.vertexEdges=void 0,this.numEdges=0,this.edgeAngles=new Float32Array}getFaceCounts(){return this.__faceCounts}getNumFaces(){return 0==this.__faceCounts.length?0:this.__faceCounts.reduce((l,F)=>l+F)}clear(){this.__faceVertexIndices=void 0,this.__faceCounts=[]}setFaceCounts(l){let F=0,U=0,c=3;for(const s of l)F+=s,U+=s*c,c++;if(0==this.getNumFaces())this.__faceVertexIndices=new Uint32Array(U);else{const F=new Uint32Array(U);let s=0,B=0;U=0,c=3,l.forEach((l,U)=>{const d=s+Math.min(l,this.__faceCounts[U])*c;F.set(this.__faceVertexIndices.slice(s,d),B),s+=this.__faceCounts[U]*c,B+=l*c,c++}),this.__faceVertexIndices=F}this.__faceCounts=l;for(const l of this.__faceAttributes)l.resize(F)}getFaceVertexCount(l){let F=0,U=0;return this.__faceCounts.some((c,s)=>{if(F+=c,F>l)return U=s+3,!0}),U}getFaceVertexOffset(l){let F=0,U=0;return this.__faceCounts.some((c,s)=>{if(F+c>l)return U+=(l-F)*(s+3),!0;F+=c,U+=c*(s+3)}),U}setFaceVertexIndices(l,F){2!=arguments.length&&(console.warn("deprecated interface. Please pass vertexIndices as an array"),F=Array.prototype.slice.call(arguments,1));const U=this.getFaceVertexCount(l);if(F.length!=U)throw new Error(`Invalid indices for face:${l} vertexIndices:${F}. Expected ${U} indices`);const c=this.getFaceVertexOffset(l);this.__faceVertexIndices.set(F,c)}addFace(l){const F=[...this.__faceCounts];if(F.length<=l.length-3){for(let U=F.length;U<l.length-3;U++)F[U]=0;F[l.length-3]=1}else F[l.length-3]++;this.setFaceCounts(F);let U=0,c=0;return this.__faceCounts.some((F,s)=>{if(s+3==l.length)return U+=F-1,c+=(F-1)*(s+3),!0;U+=F,c+=F*(s+3)}),this.__faceVertexIndices.set(l,c),U}getFaceVertexIndices(l){const F=[],U=this.getFaceVertexOffset(l),c=this.getFaceVertexCount(l);for(let l=0;l<c;l++)F.push(this.__faceVertexIndices[U+l]);return F}getFaceVertexIndex(l,F){const U=this.getFaceVertexOffset(l);return this.__faceVertexIndices[U+F]}addVertexAttribute(l,F,U){const c=this.getVertexAttribute("positions"),s=new Nl(this,F,null!=c?c.length:0,U);return this.__vertexAttributes.set(l,s),s}addFaceAttribute(l,F,U){const c=new Yl(F,null!=U?U:this.getNumFaces());return this.__faceAttributes.set(l,c),c}hasFaceAttribute(l){return this.__faceAttributes.has(l)}getFaceAttribute(l){return this.__faceAttributes.get(l)}addEdgeAttribute(l,F,U){const c=new Yl(F,null!=U?U:this.getNumEdges());return this.__edgeAttributes.set(l,c),c}hasEdgeAttribute(l){return this.__edgeAttributes.has(l)}getEdgeAttribute(l){return this.__edgeAttributes.get(l)}genTopologyInfo(){const l={};this.vertexEdges=[],this.edgeFaces=[],this.edgeVerts=[],this.faceEdges=[],this.numEdges=0;const F=this.getVertexAttribute("positions"),U=(U,c)=>{let s=U,B=c;if(B<s){const l=s;s=B,B=l}const d=s+">"+B;if(d in l)return l[d];const i=F.getValueRef(s),Q=F.getValueRef(B).subtract(i),t={edgeIndex:this.edgeFaces.length/2,edgeVec:Q};return l[d]=t,this.edgeFaces.push(-1),this.edgeFaces.push(-1),this.edgeVerts.push(s),this.edgeVerts.push(B),this.numEdges++,t},c=(l,F,c)=>{const s=U(l,F).edgeIndex;if(F<l){const l=2*s+0;this.__logTopologyWarnings&&-1!=this.edgeFaces[l]&&console.warn("Edge poly 0 already set. Mesh is non-manifold."),this.edgeFaces[l]=c}else{const l=2*s+1;this.__logTopologyWarnings&&-1!=this.edgeFaces[l]&&console.warn("Edge poly 1 already set. Mesh is non-manifold."),this.edgeFaces[l]=c}c in this.faceEdges||(this.faceEdges[c]=[]),this.faceEdges[c].push(s),null==this.vertexEdges[l]&&(this.vertexEdges[l]=new Set),null==this.vertexEdges[F]&&(this.vertexEdges[F]=new Set),this.vertexEdges[l].add(s),this.vertexEdges[F].add(s)},s=this.getNumFaces();for(let l=0;l<s;l++){const F=this.getFaceVertexIndices(l);for(let U=0;U<F.length;U++){c(F[U],F[(U+1)%F.length],l)}}}computeFaceNormals(){const l=this.getVertexAttribute("positions"),F=this.addFaceAttribute("normals",Z),U=this.getNumFaces();for(let c=0;c<U;c++){const U=this.getFaceVertexIndices(c),s=l.getValueRef(U[0]);let B=l.getValueRef(U[1]);const d=new Z;for(let F=2;F<U.length;F++){const c=l.getValueRef(U[F]),i=B.subtract(s),Q=c.subtract(s);d.addInPlace(i.cross(Q).normalize()),B=c}d.lengthSquared()<Number.EPSILON||F.setValue(c,d.normalize())}}calculateEdgeAngles(){null==this.vertexEdges&&this.genTopologyInfo(),this.hasFaceAttribute("normals")||this.computeFaceNormals();const l=this.getVertexAttribute("positions"),F=this.getFaceAttribute("normals");this.edgeVecs=[],this.edgeAngles=new Float32Array(this.numEdges);for(let U=0;U<this.edgeFaces.length;U+=2){const c=this.edgeVerts[U],s=this.edgeVerts[U+1],B=l.getValueRef(s).subtract(l.getValueRef(c));B.normalizeInPlace(),this.edgeVecs.push(B);const d=this.edgeFaces[U],i=this.edgeFaces[U+1];if(-1==d||-1==i){this.edgeAngles[U/2]=2*Math.PI;continue}const Q=F.getValueRef(d),t=F.getValueRef(i);this.edgeAngles[U/2]=Q.angleTo(t)}}computeVertexNormals(l=1){this.calculateEdgeAngles();const F=this.getFaceAttribute("normals"),U=this.addVertexAttribute("normals",Z),c=F.data.buffer,s=l=>Z.createFromBuffer(c,3*l*4),B=U.data,d=(l,F)=>{B[3*l+0]=F.x,B[3*l+1]=F.y,B[3*l+2]=F.z},i=(l,F)=>{let U,c;const s=this.faceEdges[l];for(const l of s)(this.edgeVerts[2*l]==F||this.edgeVerts[2*l+1]==F)&&(U?c=this.edgeVecs[l]:U=this.edgeVecs[l]);return[U,c]};for(let F=0;F<this.vertexEdges.length;F++){if(null==this.vertexEdges[F])continue;const c=this.vertexEdges[F],B=[],Q=l=>{let F=!1;for(const U of B)if(F=-1!=U.indexOf(l),F)break;F||B.push([l])};for(const F of c){const U=this.edgeFaces[2*F],c=this.edgeFaces[2*F+1];if(-1!=U&&-1==c&&this.edgeAngles[F]<l){let l=-1,F=-1;for(let s=0;s<B.length;s++)-1==l&&-1!=B[s].indexOf(U)&&(l=s),-1==F&&-1!=B[s].indexOf(c)&&(F=s);-1==l&&-1==F?B.push([U,c]):-1!=l&&-1!=F?l!=F&&(B[l]=B[l].concat(B[F]),B.splice(F,1)):(-1==l&&B[F].push(U),-1==F&&B[l].push(c))}else-1!=U&&Q(U),-1!=c&&Q(c)}B.sort((l,F)=>l.length<F.length?1:l.length>F.length?-1:0);let t=!0;for(const l of B){const c=new Z;for(const U of l){const l=i(U,F),B=l[0].angleTo(l[1]);c.addInPlace(s(U).scale(B))}c.normalizeInPlace(),t?(d(F,c),t=!1):U.setSplitVertexValues(F,l,c)}}return U}computeHardEdgesIndices(l=1){this.edgeVerts||this.calculateEdgeAngles();const F=[],U=l=>{F.push(this.edgeVerts[l]),F.push(this.edgeVerts[l+1])};for(let F=0;F<this.edgeAngles.length;F++)this.edgeAngles[F]>l&&U(2*F);return Uint32Array.from(F)}getWireframeIndices(){return console.warn("@todo-review - This returns nothing"),indices}genBuffers(l){const F={};let U=0;for(const[,l]of this.__vertexAttributes){const c=l.getSplits();for(const l in c){l in F||(F[l]={});const s=c[l];for(const c in s){const s=parseInt(c);s in F[l]||(F[l][s]=U,U++)}}}const c=this.getVertexAttribute("positions").length,s=c+U;let B;l&&0==l.includeIndices||(B=this.generateTriangulatedIndices(s,c,F));const d={};for(const[l,c]of this.__vertexAttributes){let s;s=0==U?c.data:c.generateSplitValues(F,U);const B=c.numElements,i=s.length/B;d[l]={values:s,count:i,dimension:B,normalized:"normals"==l,dataType:c.dataType}}const i={numVertices:this.numVertices(),numRenderVerts:s,indices:B,attrBuffers:d};if(l&&l.includeVertexNeighbors){null==this.vertexEdges&&this.genTopologyInfo();let l=0;for(let F=0;F<this.vertexEdges.length;F++)this.vertexEdges[F]&&(l+=this.vertexEdges[F].size);const F=new Uint32Array(2*this.vertexEdges.length+l),U=l=>{for(let F=0;F<l.length;F++){const U=l[F];for(let c=0;c<F;c++){const s=l[c];if(-1!=U[0]&&U[0]==s[1]){F!=c+1&&(l.splice(F,1),l.splice(c+1,0,U));break}if(-1!=U[1]&&U[1]==s[0]){l.splice(F,1),l.splice(c,0,U);break}}}},c=l=>{if(!(-1!=l[0][0]&&-1!=l[l.length-1][1]||-1==l[0][0]&&-1==l[l.length-1][1]))throw new Error("If fan starts with -1, it must also end with -1");for(let F=0;F<l.length;F++){const U=l[F];if((-1==U[0]||-1==U[1])&&0!=F&&F!=l.length-1)throw new Error("-1 only allowed at the beginning and end of a fan.");if(-1!=U[0]){let c=F-1;if(c<0&&(c+=l.length),U[0]!=l[c][1])throw new Error("Faces are not sequential")}if(-1!=U[1]){const c=(F+1)%l.length;if(U[1]!=l[c][0])throw new Error("Faces are not sequential")}}};let s=2*this.vertexEdges.length;for(let l=0;l<this.vertexEdges.length;l++){if(null==this.vertexEdges[l])continue;const B=this.vertexEdges[l],d=[];for(const F of B){const U=this.edgeVerts[2*F],c=this.edgeVerts[2*F+1];let s,B=this.edgeFaces[2*F],i=this.edgeFaces[2*F+1];if(U==l)s=c;else{if(c!=l)throw new Error("Invalid topology");{s=U;const l=B;B=i,i=l}}d.push([B,i,s])}U(d),c(d);let i=0;(-1!=d[0][0]||-1!=d[d.length-1][1])&&(i+=1),F[2*l]=s,F[2*l+1]=B.size+(i<<8);for(const l of d)F[s]=l[2],s++}i.vertexNeighbors=F}return i}computeNumTriangles(){let l=3,F=0;for(const U of this.__faceCounts)F+=U*(l-2),l++;return F}generateTriangulatedIndices(l,F,U){const c=this.computeNumTriangles();let s;s=l<Math.pow(2,8)?new Uint8Array(3*c):l<Math.pow(2,16)?new Uint16Array(3*c):new Uint32Array(3*c);let B=0;const d=function(l,c){l in U&&c in U[l]&&(l=F+U[l][c]),s[B]=l,B++},i=this.getNumFaces();for(let l=0;l<i;l++){const F=this.getFaceVertexIndices(l);for(let U=0;U<F.length;U++)U>=3&&(d(F[0],l),d(F[U-1],l)),d(F[U],l)}return s}freeBuffers(){super.freeBuffers(),this.init()}readBinary(l,F){super.loadBaseGeomBinary(l),this.setFaceCounts(l.loadUInt32Array());l.loadUInt8Array(this.getNumFaces());const U=l.loadSInt32Vec2(),c=l.loadUInt8();let s;1==c?s=l.loadUInt8Array():2==c?s=l.loadUInt16Array():4==c&&(s=l.loadUInt32Array());const B=this.getNumFaces();let d=0,i=0,Q=[];for(let l=0;l<B;l++){const F=this.getFaceVertexCount(l);Q[l]=d;for(let c=0;c<F;c++){const F=d+c,B=s[F]+U.x;if(0==l)this.__faceVertexIndices[F]=B;else{let U=Q[l-1];U+=c<i?c:i-1,this.__faceVertexIndices[F]=this.__faceVertexIndices[U]+B}}d+=F,i=F}this.__numPopulatedFaceVertexIndices=d,this.hasVertexAttribute("normals")||this.computeVertexNormals(),this.emit("geomDataChanged",{})}toJSON(l){const F=super.toJSON(l);return F.faceCounts=Array.from(this.__faceCounts),F.faceVertexIndices=Array.from(this.__faceVertexIndices),F}fromJSON(l,F){super.fromJSON(l,F),l.faceCounts&&(this.__faceCounts=l.faceCounts),l.faceVertexIndices&&(this.__faceVertexIndices=Uint32Array.from(l.faceVertexIndices))}}e.register("Mesh",Ml);class zl extends H{constructor(l){if(super(),this.name=l.name,this.__buffers=l.geomBuffers,this.__buffers.attrBuffers)for(const l in this.__buffers.attrBuffers){const F=this.__buffers.attrBuffers[l],U=e.getBlueprint(F.dataType);F.dataType=U}this.boundingBox=new o,this.boundingBox.p0.__data=l.bbox.p0.__data,this.boundingBox.p1.__data=l.bbox.p1.__data,this.__metaData=new Map}genBuffers(){return this.__buffers}freeBuffers(){const l={attrBuffers:{}},F=[];if(this.__buffers.indices&&(F.push(this.__buffers.indices.buffer),l.indices=this.__buffers.indices,delete this.__buffers.indices),this.__buffers.attrBuffers){for(const U in this.__buffers.attrBuffers){const c=this.__buffers.attrBuffers[U];l.attrBuffers[U]=this.__buffers.attrBuffers[U],F.push(c.values.buffer),delete this.__buffers.attrBuffers[U]}delete this.__buffers.attrBuffers}}getMetadata(l){return this.__metaData.get(l)}hasMetadata(l){return this.__metaData.has(l)}setMetadata(l,F){this.__metaData.set(l,F)}}class kl extends zl{constructor(l){super(l)}}class vl extends zl{constructor(l){super(l)}}class Kl extends zl{constructor(l){super(l)}}class wl extends Tl{constructor(l=1,F=1,U=1,c=1,s=!1){if(super(),isNaN(l)||isNaN(F)||isNaN(U)||isNaN(c))throw new Error("Invalid geom args");this.__x=l,this.__y=F,this.__xDivisions=U,this.__yDivisions=c,s&&this.addVertexAttribute("texCoords",a),this.__rebuild()}get x(){return console.warn("getter is deprecated. Please use 'getX'"),this.getX()}set x(l){console.warn("getter is deprecated. Please use 'setX'"),this.setX(l)}get y(){return console.warn("getter is deprecated. Please use 'getY'"),this.getY()}set y(l){console.warn("getter is deprecated. Please use 'setY'"),this.setY(l)}getX(){return this.__x}setX(l){this.__x=l,this.__resize()}getY(){return this.__y}setY(l){this.__y=l,this.__resize()}setSize(l,F){this.__x=l,this.__y=F,this.__resize()}__rebuild(){this.setNumVertices(this.__xDivisions*this.__yDivisions);const l=this.getVertexAttribute("texCoords");if(l)for(let F=0;F<this.__yDivisions;F++){const U=F/(this.__yDivisions-1);for(let c=0;c<this.__xDivisions;c++){const s=c/(this.__xDivisions-1);l.getValueRef(F*this.__xDivisions+c).set(s,U)}}this.__resize(!1),this.emit("geomDataTopologyChanged",{})}__resize(l=!0){const F=this.getVertexAttribute("positions");for(let l=0;l<this.__yDivisions;l++){const U=(l/(this.__yDivisions-1)-.5)*this.__y;for(let c=0;c<this.__xDivisions;c++){const s=(c/(this.__xDivisions-1)-.5)*this.__x;F.getValueRef(l*this.__xDivisions+c).set(s,U,0)}}this.setBoundingBoxDirty(),l&&this.emit("geomDataChanged",{})}toJSON(){const l=super.toJSON();return l.x=this.__x,l.y=this.__y,l.xDivisions=this.__xDivisions,l.yDivisions=this.__yDivisions,l}}class fl extends Al{constructor(l=1,F=1){if(super(),isNaN(l)||isNaN(F))throw new Error("Invalid geom args");this.__x=this.addParameter(new Il("x",l)),this.__x.on("valueChanged",this.__resize.bind(this)),this.__y=this.addParameter(new Il("y",F)),this.__y.on("valueChanged",this.__resize.bind(this)),this.__rebuild()}get x(){return this.__x.getValue()}set x(l){this.__x.setValue(l)}get y(){return this.__y.getValue()}set y(l){this.__y.setValue(l)}setSize(l,F){this.__x.setValue(l,-1),this.__y.setValue(F,-1),this.__resize()}__rebuild(){this.setNumVertices(4),this.setNumSegments(4),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,1,2),this.setSegmentVertexIndices(2,2,3),this.setSegmentVertexIndices(3,3,0),this.__resize(!1),this.emit("geomDataTopologyChanged",{})}__resize(l){const F=this.__x.getValue(),U=this.__y.getValue(),c=this.getVertexAttribute("positions");c.getValueRef(0).set(-.5*F,-.5*U,0),c.getValueRef(1).set(.5*F,-.5*U,0),c.getValueRef(2).set(.5*F,.5*U,0),c.getValueRef(3).set(-.5*F,.5*U,0),this.setBoundingBoxDirty(),l&&this.emit("geomDataChanged",{})}toJSON(){const l=super.toJSON();return l.x=this.__x,l.y=this.__y,l}}e.register("Rect",fl);class Dl extends Al{constructor(l=1,F=32,U=2*Math.PI){if(super(),isNaN(l)||isNaN(F))throw new Error("Invalid geom args");this.__radius=this.addParameter(new Il("Radius",l)),this.__angle=this.addParameter(new Il("Angle",U)),this.__numSegments=this.addParameter(new Il("NumSegments",F>=3?F:3,[3,200],1));const c=()=>{this.__rebuild()};this.__radius.on("valueChanged",()=>{this.__resize()}),this.__angle.on("valueChanged",c),this.__numSegments.on("valueChanged",c),this.__rebuild()}__rebuild(){const l=this.__numSegments.getValue();this.setNumVertices(l);const F=this.__angle.getValue()<2*Math.PI;F?this.setNumSegments(l-1):this.setNumSegments(l);for(let U=0;U<(F?l-1:l);U++)this.setSegmentVertexIndices(U,U,(U+1)%l);this.__resize(!1),this.emit("geomDataTopologyChanged",{})}__resize(l){const F=this.__radius.getValue(),U=this.__numSegments.getValue(),c=this.__angle.getValue()/U,s=this.getVertexAttribute("positions");for(let l=0;l<U;l++)s.getValueRef(l).set(Math.cos(c*l)*F,Math.sin(c*l)*F,0);this.setBoundingBoxDirty(),l&&this.emit("geomDataChanged",{})}}e.register("Circle",Dl);class Pl extends Al{constructor(l=1){if(super(),isNaN(l))throw new Error("Invalid geom args");this.__sizeParam=this.addParameter(new Il("size",l)),this.__rebuild();this.__sizeParam.on("valueChanged",()=>{this.__resize()})}__rebuild(){this.setNumVertices(6),this.setNumSegments(3),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,2,3),this.setSegmentVertexIndices(2,4,5),this.__resize()}__resize(){const l=this.__sizeParam.getValue(),F=this.getVertexAttribute("positions");F.getValueRef(0).set(-.5*l,0,0),F.getValueRef(1).set(.5*l,0,0),F.getValueRef(2).set(0,.5*l,0),F.getValueRef(3).set(0,-.5*l,0),F.getValueRef(4).set(0,0,.5*l),F.getValueRef(5).set(0,0,-.5*l),this.setBoundingBoxDirty(),this.emit("geomDataChanged",{})}}e.register("Cross",Pl);class _l extends Al{constructor(l=1,F=1,U=1,c=!1){super(),this.__x=this.addParameter(new Il("x",l)),this.__y=this.addParameter(new Il("y",F)),this.__z=this.addParameter(new Il("z",U)),this.__baseZAtZero=this.addParameter(new Il("BaseZAtZero",c)),this.__rebuild();const s=()=>{this.__resize()};this.__x.on("valueChanged",s),this.__y.on("valueChanged",s),this.__z.on("valueChanged",s),this.__baseZAtZero.on("valueChanged",()=>{this.__rebuild()})}__rebuild(){this.setNumVertices(8),this.setNumSegments(12),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,1,2),this.setSegmentVertexIndices(2,2,3),this.setSegmentVertexIndices(3,3,0),this.setSegmentVertexIndices(4,4,5),this.setSegmentVertexIndices(5,5,6),this.setSegmentVertexIndices(6,6,7),this.setSegmentVertexIndices(7,7,4),this.setSegmentVertexIndices(8,0,4),this.setSegmentVertexIndices(9,1,5),this.setSegmentVertexIndices(10,2,6),this.setSegmentVertexIndices(11,3,7),this.__resize(!1),this.emit("geomDataTopologyChanged",{})}__resize(){const l=this.__x.getValue(),F=this.__y.getValue(),U=this.__z.getValue(),c=this.__baseZAtZero.getValue(),s=this.getVertexAttribute("positions");let B=.5;c&&(B=1),s.getValueRef(0).set(.5*l,-.5*F,B*U),s.getValueRef(1).set(.5*l,.5*F,B*U),s.getValueRef(2).set(-.5*l,.5*F,B*U),s.getValueRef(3).set(-.5*l,-.5*F,B*U),B=-.5,c&&(B=0),s.getValueRef(4).set(.5*l,-.5*F,B*U),s.getValueRef(5).set(.5*l,.5*F,B*U),s.getValueRef(6).set(-.5*l,.5*F,B*U),s.getValueRef(7).set(-.5*l,-.5*F,B*U),this.setBoundingBoxDirty(),emit&&this.emit("geomDataChanged",{})}toJSON(){const l=super.toJSON();return l.size=this.__size,l}}e.register("LinesCuboid",_l);class jl extends Al{constructor(l=1,F=1,U=10,c=10,s=!1){if(super(),isNaN(l)||isNaN(F)||isNaN(U)||isNaN(c))throw new Error("Invalid geom args");this.__xParam=this.addParameter(new Il("x",l)),this.__yParam=this.addParameter(new Il("y",F)),this.__xDivisionsParam=this.addParameter(new Il("xDivisions",U)),this.__yDivisionsParam=this.addParameter(new Il("yDivisions",c)),this.__skipCenterLinesParam=this.addParameter(new el("skipCenterLines",s)),this.__rebuild()}__rebuild(){const l=this.__xDivisionsParam.getValue(),F=this.__yDivisionsParam.getValue(),U=this.__skipCenterLinesParam.getValue()&&l%2==0&&F%2==0;this.setNumVertices(2*(l+F+2-(U?1:0))),this.setNumSegments(l+F+2-(U?1:0));let c=0;for(let F=0;F<=l;F++){if(U&&F==l/2)continue;const s=2*c,B=2*c+1;this.setSegmentVertexIndices(c,s,B),c++}for(let s=0;s<=F;s++){if(U&&s==l/2)continue;const F=2*c,B=2*c+1;this.setSegmentVertexIndices(c,F,B),c++}this.__resize()}__resize(){const l=this.getVertexAttribute("positions"),F=this.__xDivisionsParam.getValue(),U=this.__yDivisionsParam.getValue(),c=this.__xParam.getValue(),s=this.__yParam.getValue(),B=this.__skipCenterLinesParam.getValue()&&F%2==0&&U%2==0;let d=0;for(let U=0;U<=F;U++){if(B&&U==F/2)continue;const i=2*d,Q=2*d+1,t=(U/F-.5)*c;l.getValueRef(i).set(t,-.5*s,0),l.getValueRef(Q).set(t,.5*s,0),d++}for(let i=0;i<=U;i++){if(B&&i==F/2)continue;const Q=2*d,t=2*d+1,I=(i/U-.5)*s;l.getValueRef(Q).set(-.5*c,I,0),l.getValueRef(t).set(.5*c,I,0),d++}this.setBoundingBoxDirty()}toJSON(){const l=super.toJSON();return l.x=this.__x,l.z=this.__y,l.xDivisions=this.__xDivisions,l.yDivisions=this.__yDivisions,l}}e.register("Grid",jl);class Ol extends Ml{constructor(l=.5,F=1,U=32,c=!0){if(super(),isNaN(l)||isNaN(F)||isNaN(U))throw new Error("Invalid geom args");this.__radiusParam=this.addParameter(new Il("radius",l)),this.__heightParam=this.addParameter(new Il("height",F)),this.__detailParam=this.addParameter(new Il("detail",U>=3?U:3,[3,200],1)),this.__capParam=this.addParameter(new el("cap",c)),this.addVertexAttribute("texCoords",a),this.addVertexAttribute("normals",Z),this.__rebuild();const s=()=>{this.__resize()},B=()=>{this.__rebuild()};this.__radiusParam.on("valueChanged",s),this.__heightParam.on("valueChanged",s),this.__detailParam.on("valueChanged",B),this.__capParam.on("valueChanged",B)}__rebuild(){this.clear();const l=this.__detailParam.getValue(),F=this.__radiusParam.getValue(),U=this.__heightParam.getValue(),c=this.__capParam.getValue();let s=l+1;c&&(s+=1),this.setNumVertices(s);const B=l,d=l+1,i=this.getVertexAttribute("positions");i.getValueRef(B).set(0,0,U);for(let U=0;U<l;U++){const c=U/l*2*Math.PI;i.getValueRef(U).set(F*Math.cos(c),F*Math.sin(c),0)}c&&i.getValueRef(d).set(0,0,0),this.setFaceCounts([l+(c?l:0)]);for(let F=0;F<l;F++){const U=(F+1)%l;this.setFaceVertexIndices(F,[U,F,B])}if(c)for(let F=0;F<l;F++){const U=(F+1)%l;this.setFaceVertexIndices(l+F,[F,U,d])}const Q=this.getVertexAttribute("normals");let t;const I=U;Math.abs(U)<1e-12&&(t=U<0?-1e-12:1e-12),t=F/I;let V=0;for(let F=0;F<l;F++){const U=(F+1)/l*2*Math.PI,c=F/l*2*Math.PI,s=.5*(U+c);Q.setFaceVertexValue(V,0,new Z(Math.cos(U),t,Math.sin(U)).normalize()),Q.setFaceVertexValue(V,1,new Z(Math.cos(c),t,Math.sin(c)).normalize()),Q.setFaceVertexValue(V,2,new Z(Math.cos(s),t,Math.sin(s)).normalize()),V++}if(c){const F=new Z(0,-1,0);for(let U=0;U<l;U++)Q.setFaceVertexValue(V,0,F),Q.setFaceVertexValue(V,1,F),Q.setFaceVertexValue(V,2,F),V++}const e=this.getVertexAttribute("texCoords");V=0;for(let F=0;F<l;F++)e.setFaceVertexValue(V,0,new a((F+1)/l,0)),e.setFaceVertexValue(V,1,new a(F/l,0)),e.setFaceVertexValue(V,2,new a((F+.5)/l,1));if(c)for(let F=0;F<l;F++)e.setFaceVertexValue(V,0,new a(F/l,0)),e.setFaceVertexValue(V,1,new a((F+1)/l,0)),e.setFaceVertexValue(V,2,new a((F+.5)/l,1)),V++;this.setBoundingBoxDirty(),this.emit("geomDataTopologyChanged",{})}__resize(){const l=this.__detailParam.getValue(),F=this.__radiusParam.getValue(),U=this.__heightParam.getValue(),c=(this.__capParam.getValue(),l),s=l+1,B=this.getVertexAttribute("positions");B.getValueRef(c).set(0,0,U);for(let U=0;U<l;U++){const c=U/l*2*Math.PI;B.getValueRef(U).set(F*Math.cos(c),F*Math.sin(c),0)}this.__cap&&B.getValueRef(s).set(0,0,0),this.setBoundingBoxDirty(),this.emit("geomDataChanged",{})}}e.register("Cone",Ol);class ql extends Ml{constructor(l=1,F=1,U=1,c=!1){if(super(),isNaN(l)||isNaN(F)||isNaN(U))throw new Error("Invalid geom args");this.__xParam=this.addParameter(new Il("x",l)),this.__yParam=this.addParameter(new Il("y",F)),this.__zParam=this.addParameter(new Il("z",U)),this.__baseZAtZeroParam=this.addParameter(new el("baseZAtZero",c)),this.setFaceCounts([0,6]),this.setFaceVertexIndices(0,[0,1,2,3]),this.setFaceVertexIndices(1,[7,6,5,4]),this.setFaceVertexIndices(2,[1,0,4,5]),this.setFaceVertexIndices(3,[3,2,6,7]),this.setFaceVertexIndices(4,[0,3,7,4]),this.setFaceVertexIndices(5,[2,1,5,6]),this.setNumVertices(8),this.addVertexAttribute("texCoords",a),this.addVertexAttribute("normals",Z),this.__rebuild();const s=()=>{this.__resize()};this.__xParam.on("valueChanged",s),this.__yParam.on("valueChanged",s),this.__zParam.on("valueChanged",s),this.__baseZAtZeroParam.on("valueChanged",s)}setSize(l,F,U){this.__xParam.setValue(l),this.__yParam.setValue(F),this.__zParam.setValue(U)}setBaseSize(l,F){this.__xParam.setValue(l),this.__yParam.setValue(F)}__rebuild(){const l=this.getVertexAttribute("normals");for(let F=0;F<6;F++){let U;switch(F){case 0:U=new Z(0,0,1);break;case 1:U=new Z(0,0,-1);break;case 2:U=new Z(1,0,0);break;case 3:U=new Z(-1,0,0);break;case 4:U=new Z(0,1,0);break;case 5:U=new Z(0,-1,0)}l.setFaceVertexValue(F,0,U),l.setFaceVertexValue(F,1,U),l.setFaceVertexValue(F,2,U),l.setFaceVertexValue(F,3,U)}const F=this.getVertexAttribute("texCoords");for(let l=0;l<6;l++)F.setFaceVertexValue(l,0,new a(0,0)),F.setFaceVertexValue(l,1,new a(1,0)),F.setFaceVertexValue(l,2,new a(1,1)),F.setFaceVertexValue(l,3,new a(0,1));this.__resize()}__resize(){const l=this.__xParam.getValue(),F=this.__yParam.getValue(),U=this.__zParam.getValue(),c=this.__baseZAtZeroParam.getValue();let s=.5;const B=this.getVertexAttribute("positions");c&&(s=1),B.getValueRef(0).set(.5*l,-.5*F,s*U),B.getValueRef(1).set(.5*l,.5*F,s*U),B.getValueRef(2).set(-.5*l,.5*F,s*U),B.getValueRef(3).set(-.5*l,-.5*F,s*U),s=-.5,c&&(s=0),B.getValueRef(4).set(.5*l,-.5*F,s*U),B.getValueRef(5).set(.5*l,.5*F,s*U),B.getValueRef(6).set(-.5*l,.5*F,s*U),B.getValueRef(7).set(-.5*l,-.5*F,s*U),this.setBoundingBoxDirty(),this.emit("geomDataChanged",{})}toJSON(){const l=super.toJSON();return l.x=this.__x,l.y=this.__y,l.z=this.__z,l}}e.register("Cuboid",ql);class $l extends Ml{constructor(l=.5,F=1,U=32,c=2,s=!0,B=!1){if(super(),isNaN(l)||isNaN(F)||isNaN(U)||isNaN(c))throw new Error("Invalid geom args");this.__radiusParam=this.addParameter(new Il("radius",l)),this.__heightParam=this.addParameter(new Il("height",F)),this.__sidesParam=this.addParameter(new Il("sides",U>=3?U:3,[3,200],1)),this.__loopsParam=this.addParameter(new Il("loops",c>=2?c:2,[1,200],1)),this.__capsParam=this.addParameter(new el("caps",s)),this.__baseZAtZeroParam=this.addParameter(new el("baseZAtZero",B)),this.addVertexAttribute("texCoords",a),this.addVertexAttribute("normals",Z),this.__rebuild();const d=()=>{this.__resize()},i=()=>{this.__rebuild()};this.__radiusParam.on("valueChanged",d),this.__heightParam.on("valueChanged",d),this.__sidesParam.on("valueChanged",i),this.__loopsParam.on("valueChanged",i),this.__capsParam.on("valueChanged",i),this.__baseZAtZeroParam.on("valueChanged",d)}__rebuild(){this.clear();const l=this.__sidesParam.getValue(),F=this.__loopsParam.getValue(),U=this.__capsParam.getValue();let c=l*F;U&&(c+=2),this.setNumVertices(c),U?this.setFaceCounts([2*l,l]):this.setFaceCounts([0,l]);let s=0;if(U){for(let F=0;F<l;F++){const U=c-1,B=F,d=(F+1)%l;this.setFaceVertexIndices(s++,[U,B,d])}for(let U=0;U<l;U++){const B=l*(F-1)+U,d=c-2,i=l*(F-1)+(U+1)%l;this.setFaceVertexIndices(s++,[B,d,i])}}for(let U=0;U<F-1;U++)for(let F=0;F<l;F++){const c=l*U+(F+1)%l,B=l*U+F,d=l*(U+1)+F,i=l*(U+1)+(F+1)%l;this.setFaceVertexIndices(s++,[c,B,d,i])}const B=this.getVertexAttribute("normals");if(s=0,U){const F=new Z(0,0,-1);for(let U=0;U<l;U++)B.setFaceVertexValue(s,0,F),B.setFaceVertexValue(s,1,F),B.setFaceVertexValue(s,2,F),s++;F.set(0,0,1);for(let U=0;U<l;U++)B.setFaceVertexValue(s,0,F),B.setFaceVertexValue(s,1,F),B.setFaceVertexValue(s,2,F),s++}for(let U=0;U<F-1;U++)for(let F=0;F<l;F++){let U=F/l*2*Math.PI;const c=new Z(Math.sin(U),Math.cos(U),0);B.setFaceVertexValue(s,0,c),B.setFaceVertexValue(s,1,c),U=(F+1)/l*2*Math.PI;const d=new Z(Math.sin(U),Math.cos(U),0);B.setFaceVertexValue(s,2,d),B.setFaceVertexValue(s,3,d),s++}const d=this.getVertexAttribute("texCoords");if(s=0,U){for(let F=0;F<l;F++)d.setFaceVertexValue(s,0,new a(F/l,0)),d.setFaceVertexValue(s,1,new a((F+1)/l,0)),d.setFaceVertexValue(s,2,new a((F+.5)/l,1)),s++;for(let F=0;F<l;F++)d.setFaceVertexValue(s,0,new a(F/l,0)),d.setFaceVertexValue(s,1,new a((F+1)/l,0)),d.setFaceVertexValue(s,2,new a((F+.5)/l,1)),s++}for(let F=0;F<l;F++)d.setFaceVertexValue(s,0,new a((F+1)/l,0)),d.setFaceVertexValue(s,2,new a((F+1)/l,1)),d.setFaceVertexValue(s,1,new a(F/l,0)),d.setFaceVertexValue(s,3,new a(F/l,1)),s++;this.emit("geomDataTopologyChanged",{}),this.__resize()}__resize(){const l=this.__sidesParam.getValue(),F=this.__loopsParam.getValue(),U=this.__radiusParam.getValue(),c=this.__heightParam.getValue(),s=this.__capsParam.getValue(),B=this.__baseZAtZeroParam.getValue();let d=l*F;s&&(d+=2);let i=0,Q=.5;B&&(Q=0);const t=this.getVertexAttribute("positions");for(let s=0;s<F;s++){const B=s/(F-1)*c-c*Q;for(let F=0;F<l;F++){const c=F/l*2*Math.PI;t.getValueRef(i).set(Math.sin(c)*U,Math.cos(c)*U,B),i++}}s&&(t.getValueRef(d-1).set(0,0,c*(B?0:-.5)),t.getValueRef(d-2).set(0,0,c*(B?1:.5))),this.setBoundingBoxDirty(),this.emit("geomDataChanged",{})}}e.register("Cylinder",$l);class lF extends Ml{constructor(l=.5,F=32){if(super(),isNaN(l)||isNaN(F))throw new Error("Invalid geom args");this.__radiusParam=this.addParameter(new Il("radius",l)),this.__sidesParam=this.addParameter(new Il("sides",F>=3?F:3,[3,200],1)),this.addVertexAttribute("texCoords",a),this.addVertexAttribute("normals",Z),this.__rebuild()}get radius(){return this.__radius}set radius(l){this.__radius=l,this.__resize()}set sides(l){this.__sides=l>=3?l:3,this.__rebuild()}__rebuild(){const l=this.__sidesParam.getValue();this.setNumVertices(l+1),this.setFaceCounts([l]);this.getVertexAttribute("positions").getValueRef(0).set(0,0,0);for(let F=0;F<l;F++){const U=F%l+1,c=(F+1)%l+1;this.setFaceVertexIndices(F,[0,U,c])}const F=this.getVertexAttribute("normals"),U=new Z(0,0,1);F.setValue(0,U);for(let c=0;c<l;c++)F.setValue(c+1,U);const c=this.getVertexAttribute("texCoords");c.getValueRef(0).set(.5,.5);for(let F=0;F<l;F++){const U=F/l*2*Math.PI;c.getValueRef(F+1).set(.5*Math.sin(U)+.5,.5*Math.cos(U)+.5)}this.setBoundingBoxDirty(),this.__resize()}__resize(){const l=this.__sidesParam.getValue(),F=this.__radiusParam.getValue(),U=this.getVertexAttribute("positions");for(let c=0;c<l;c++){const s=c/l*2*Math.PI;U.getValueRef(c+1).set(Math.sin(s)*F,Math.cos(s)*F,0)}this.setBoundingBoxDirty(),this.emit("geomDataChanged",{})}toJSON(){const l=super.toJSON();return l.radius=this.__radius,l}}e.register("Disc",lF);class FF extends Ml{constructor(l=1,F=1,U=1,c=1,s=!0,B=!0){if(super(),isNaN(l)||isNaN(F)||isNaN(U)||isNaN(c))throw new Error("Invalid geom args");this.__sizeXParam=this.addParameter(new Il("SizeX",l)),this.__sizeYParam=this.addParameter(new Il("SizeY",F)),this.__detailXParam=this.addParameter(new Il("DetailX",U)),this.__detailYParam=this.addParameter(new Il("DetailY",c)),s&&this.addVertexAttribute("normals",Z),B&&this.addVertexAttribute("texCoords",a),this.__rebuild();const d=()=>{this.__resize()},i=()=>{this.__rebuild()};this.__sizeXParam.on("valueChanged",d),this.__sizeYParam.on("valueChanged",d),this.__detailXParam.on("valueChanged",i),this.__detailYParam.on("valueChanged",i)}__rebuild(){const l=this.__detailXParam.getValue(),F=this.__detailYParam.getValue();this.setNumVertices((l+1)*(F+1)),this.setFaceCounts([0,l*F]);let U=0;for(let c=0;c<F;c++)for(let F=0;F<l;F++){const s=(l+1)*(c+1)+F,B=(l+1)*(c+1)+(F+1),d=(l+1)*c+(F+1),i=(l+1)*c+F;this.setFaceVertexIndices(U,[s,B,d,i]),U+=1}let c=0;const s=this.getVertexAttribute("normals");if(s)for(let U=0;U<=F;U++)for(let F=0;F<=l;F++)s.getValueRef(c).set(0,0,1),c++;c=0;const B=this.getVertexAttribute("texCoords");if(B)for(let U=0;U<=F;U++){const s=U/F;for(let F=0;F<=l;F++){const U=F/l;B.getValueRef(c).set(U,s),c++}}this.__resize(!1),this.emit("geomDataTopologyChanged",{})}__resize(l=!0){const F=this.__sizeXParam.getValue(),U=this.__sizeYParam.getValue(),c=this.__detailXParam.getValue(),s=this.__detailYParam.getValue(),B=this.getVertexAttribute("positions");let d=0;for(let l=0;l<=s;l++){const i=(l/s-.5)*U;for(let l=0;l<=c;l++){const U=(l/c-.5)*F;B.getValueRef(d).set(U,i,0),d++}}this.setBoundingBoxDirty(),l&&this.emit("geomDataChanged",{})}}class UF extends Ml{constructor(l=1,F=12,U=12){if(super(),isNaN(l)||isNaN(F)||isNaN(U))throw new Error("Invalid geom args");this.__radiusParam=this.addParameter(new Il("radius",l)),this.__sidesParam=this.addParameter(new Il("sides",F>=3?F:3,[3,200],1)),this.__loopsParam=this.addParameter(new Il("loops",U>=3?U:3,[3,200],1)),this.addVertexAttribute("texCoords",a),this.addVertexAttribute("normals",Z),this.__rebuild();const c=()=>{this.__rebuild()};this.__radiusParam.on("valueChanged",()=>{this.__resize()}),this.__sidesParam.on("valueChanged",c),this.__loopsParam.on("valueChanged",c)}__rebuild(){const l=this.__radiusParam.getValue(),F=this.__sidesParam.getValue(),U=this.__loopsParam.getValue(),c=2+F*U,s=2*F,B=F*U;this.setNumVertices(c),this.setFaceCounts([s,B]);const d=this.getVertexAttribute("positions"),i=this.getVertexAttribute("normals"),Q=new Z(0,0,1);let t=0;d.getValueRef(t).set(0,0,l),i.getValueRef(t).set(0,0,1),t++;for(let c=0;c<U;c++){const s=(c+1)/(U+1)*Math.PI;for(let U=0;U<F;U++){const c=U/F*2*Math.PI;Q.set(Math.sin(s)*Math.cos(c),Math.sin(s)*Math.sin(c),Math.cos(s)),d.getValueRef(t).setFromOther(Q.scale(l)),i.getValueRef(t).setFromOther(Q),t++}}d.getValueRef(t).set(0,0,-l),i.getValueRef(t).set(0,0,-1),t++;const I=this.getVertexAttribute("texCoords");let V=0;for(let l=0;l<F;l++){const c=0,s=(l+1)%F+1,B=l+1;this.setFaceVertexIndices(V,[c,s,B]);const d=new a(.5,0),i=new a(1-(l+1)/F,0),Q=new a(1-l/F,1/(U+1));I.setFaceVertexValue(V,0,d),I.setFaceVertexValue(V,1,i),I.setFaceVertexValue(V,2,Q),V++}for(let l=0;l<F;l++){const s=c-1,B=F*(U-1)+l+1,d=F*(U-1)+(l+1)%F+1;this.setFaceVertexIndices(V,[s,B,d]);const i=new a(1-l/F,U/(U+1)),Q=new a(1-(l+1)/F,U/(U+1)),t=new a(.5,1);I.setFaceVertexValue(V,0,i),I.setFaceVertexValue(V,1,Q),I.setFaceVertexValue(V,2,t),V++}for(let l=0;l<U-1;l++)for(let c=0;c<F;c++){const s=F*l+c+1,B=F*l+(c+1)%F+1,d=F*(l+1)+(c+1)%F+1,i=F*(l+1)+c+1;this.setFaceVertexIndices(V,[s,B,d,i]),I.setFaceVertexValue(V,0,new a(l/U,c/U)),I.setFaceVertexValue(V,1,new a(l/U,(c+1)/U)),I.setFaceVertexValue(V,2,new a((l+1)/U,(c+1)/U)),I.setFaceVertexValue(V,3,new a((l+1)/U,c/U)),V++}this.setBoundingBoxDirty(),this.emit("geomDataTopologyChanged",{})}__resize(){const l=this.__radiusParam.getValue(),F=this.__sidesParam.getValue(),U=this.__loopsParam.getValue(),c=this.getVertexAttribute("positions");let s=0;const B=new Z(0,0,1);c.getValueRef(s).set(0,0,l),s++;for(let d=0;d<U;d++){const i=(d+1)/(U+1)*Math.PI;for(let U=0;U<F;U++){const d=U/F*2*Math.PI;B.set(Math.sin(i)*Math.cos(d),Math.sin(i)*Math.sin(d),Math.cos(i)),c.getValueRef(s).setFromOther(B.scale(l)),s++}}c.getValueRef(s).set(0,0,-l),s++,this.setBoundingBoxDirty(),this.emit("geomDataChanged",{})}}e.register("Sphere",UF);class cF extends Ml{constructor(l=.5,F=1,U=32){if(super(),isNaN(l)||isNaN(F)||isNaN(U))throw new Error("Invalid geom args");this.__innerRadius=l,this.__outerRadius=F,this.__detail=U>=3?U:3,this.addVertexAttribute("texCoords",a),this.addVertexAttribute("normals",Z),this.__rebuild()}get innerRadius(){return this.__innerRadius}set innerRadius(l){this.__innerRadius=l,this.__resize()}get outerRadius(){return this.__outerRadius}set outerRadius(l){this.__outerRadius=l,this.__resize()}get detail(){return this.__detail}set detail(l){this.__detail=l>=3?l:3,this.__rebuild()}__rebuild(){const l=this.__detail,F=2*this.__detail,U=l*F;this.setNumVertices(U),this.setFaceCounts([0,l*F]);const c=this.getVertexAttribute("positions"),s=this.getVertexAttribute("normals");let B=0;for(let U=0;U<F;U++){const d=U/F*2*Math.PI,i=Math.cos(d),Q=Math.sin(d);for(let F=0;F<l;F++){const U=F/l*2*Math.PI,d=Math.sin(U),t=Math.cos(U),I=this.__outerRadius+t*this.__innerRadius;c.getValueRef(B).set(i*I,Q*I,this.__innerRadius*d),s.getValueRef(B).set(i*t,Q*t,d),B++}}const d=this.getVertexAttribute("texCoords");let i=0;for(let U=0;U<F;U++)for(let c=0;c<l;c++){const s=(U+1)%F,B=(c+1)%l,Q=l*U+c,t=l*U+B,I=l*s+B,V=l*s+c;this.setFaceVertexIndices(i,[Q,t,I,V]),d.setFaceVertexValue(i,0,new a(U/F,c/F)),d.setFaceVertexValue(i,1,new a(U/F,(c+1)/F)),d.setFaceVertexValue(i,2,new a((U+1)/F,(c+1)/F)),d.setFaceVertexValue(i,3,new a((U+1)/F,c/F)),i++}this.setBoundingBoxDirty(),this.emit("geomDataTopologyChanged",{})}__resize(){const l=this.__detail,F=2*this.__detail,U=this.getVertexAttribute("positions");for(let c=0;c<F;c++){const s=c/F*2*Math.PI,B=Math.cos(s),d=Math.sin(s);for(let F=0;F<l;F++){const c=F/l*2*Math.PI,s=Math.sin(c),i=Math.cos(c),Q=this.__outerRadius+i*this.__innerRadius;U.getValueRef(0).set(B*Q,d*Q,this.__innerRadius*s),index++}}this.setBoundingBoxDirty(),this.emit("geomDataChanged",{})}toJSON(){const l=super.toJSON();return l.x=this.__x,l.y=this.__y,l.z=this.__z,l}}class sF extends El{constructor(l){super(),null==l&&(l=this.constructor.name),this.__name=l,this.format="RGBA",this.type="UNSIGNED_BYTE",this.__loaded=!1,this.width=1,this.height=1}isLoaded(){return this.__loaded}getName(){return this.__name}isStream(){return!1}setData(l,F,U){this.width=l,this.height=F,this.__data=U,this.__loaded?this.emit("updated",{}):(this.__loaded=!0,this.emit("loaded",{}))}getParams(){const l=super.getParams();return l.data=this.__data,l}}function BF(l){this.data=l,this.pos=0}function dF(l){this.stream=new BF(l),this.output={}}e.register("DataImage2D",sF),e.register("DataImage",sF),BF.prototype.readByte=function(){return this.data[this.pos++]},BF.prototype.peekByte=function(){return this.data[this.pos]},BF.prototype.readBytes=function(l){for(var F=new Array(l),U=0;U<l;U++)F[U]=this.readByte();return F},BF.prototype.peekBytes=function(l){for(var F=new Array(l),U=0;U<l;U++)F[U]=this.data[this.pos+U];return F},BF.prototype.readString=function(l){for(var F="",U=0;U<l;U++)F+=String.fromCharCode(this.readByte());return F},BF.prototype.readBitArray=function(){for(var l=[],F=this.readByte(),U=7;U>=0;U--)l.push(!!(F&1<<U));return l},BF.prototype.readUnsigned=function(l){var F=this.readBytes(2);return l?(F[1]<<8)+F[0]:(F[0]<<8)+F[1]},dF.prototype.parse=function(l){return this.parseParts(this.output,l),this.output},dF.prototype.parseParts=function(l,F){for(var U=0;U<F.length;U++){var c=F[U];this.parsePart(l,c)}},dF.prototype.parsePart=function(l,F){var U,c=F.label;if(!F.requires||F.requires(this.stream,this.output,l))if(F.loop){for(var s=[];F.loop(this.stream);){var B={};this.parseParts(B,F.parts),s.push(B)}l[c]=s}else F.parts?(U={},this.parseParts(U,F.parts),l[c]=U):F.parser?(U=F.parser(this.stream,this.output,l),F.skip||(l[c]=U)):F.bits&&(l[c]=this.parseBits(F.bits))},dF.prototype.parseBits=function(l){var F={},U=this.stream.readBitArray();for(var c in l){var s=l[c];s.length?F[c]=U.slice(s.index,s.index+s.length).reduce((function(l,F){return 2*l+F}),0):F[c]=U[s.index]}return F};var iF=function(){return function(l){return l.readByte()}},QF=function(l){return function(F){return F.readBytes(l)}},tF=function(l){return function(F){return F.readString(l)}},IF=function(l){return function(F){return F.readUnsigned(l)}},VF=function(l,F){return function(U,c,s){for(var B=F(U,c,s),d=new Array(B),i=0;i<B;i++)d[i]=U.readBytes(l);return d}},eF={label:"blocks",parser:function(l){for(var F=[],U=l.readByte();0!==U;U=l.readByte())F=F.concat(l.readBytes(U));return F}},XF={label:"gce",requires:function(l){var F=l.peekBytes(2);return 33===F[0]&&249===F[1]},parts:[{label:"codes",parser:QF(2),skip:!0},{label:"byteSize",parser:iF()},{label:"extras",bits:{future:{index:0,length:3},disposal:{index:3,length:3},userInput:{index:6},transparentColorGiven:{index:7}}},{label:"delay",parser:IF(!0)},{label:"transparentColorIndex",parser:iF()},{label:"terminator",parser:iF(),skip:!0}]},gF={label:"image",requires:function(l){return 44===l.peekByte()},parts:[{label:"code",parser:iF(),skip:!0},{label:"descriptor",parts:[{label:"left",parser:IF(!0)},{label:"top",parser:IF(!0)},{label:"width",parser:IF(!0)},{label:"height",parser:IF(!0)},{label:"lct",bits:{exists:{index:0},interlaced:{index:1},sort:{index:2},future:{index:3,length:2},size:{index:5,length:3}}}]},{label:"lct",requires:function(l,F,U){return U.descriptor.lct.exists},parser:VF(3,(function(l,F,U){return Math.pow(2,U.descriptor.lct.size+1)}))},{label:"data",parts:[{label:"minCodeSize",parser:iF()},eF]}]},aF={label:"text",requires:function(l){var F=l.peekBytes(2);return 33===F[0]&&1===F[1]},parts:[{label:"codes",parser:QF(2),skip:!0},{label:"blockSize",parser:iF()},{label:"preData",parser:function(l,F,U){return l.readBytes(U.text.blockSize)}},eF]},bF={label:"frames",parts:[XF,{label:"application",requires:function(l,F,U){var c=l.peekBytes(2);return 33===c[0]&&255===c[1]},parts:[{label:"codes",parser:QF(2),skip:!0},{label:"blockSize",parser:iF()},{label:"id",parser:function(l,F,U){return l.readString(U.blockSize)}},eF]},{label:"comment",requires:function(l,F,U){var c=l.peekBytes(2);return 33===c[0]&&254===c[1]},parts:[{label:"codes",parser:QF(2),skip:!0},eF]},gF,aF],loop:function(l){var F=l.peekByte();return 33===F||44===F}},ZF=[{label:"header",parts:[{label:"signature",parser:tF(3)},{label:"version",parser:tF(3)}]},{label:"lsd",parts:[{label:"width",parser:IF(!0)},{label:"height",parser:IF(!0)},{label:"gct",bits:{exists:{index:0},resolution:{index:1,length:3},sort:{index:4},size:{index:5,length:3}}},{label:"backgroundColorIndex",parser:iF()},{label:"pixelAspectRatio",parser:iF()}]},{label:"gct",requires:function(l,F){return F.lsd.gct.exists},parser:VF(3,(function(l,F){return Math.pow(2,F.lsd.gct.size+1)}))},bF];function xF(l){var F=new dF(new Uint8Array(l));this.raw=F.parse(ZF),this.raw.hasImages=!1;for(var U=0;U<this.raw.frames.length;U++)if(this.raw.frames[U].image){this.raw.hasImages=!0;break}}xF.prototype.decompressFrame=function(l,F){if(l>=this.raw.frames.length)return null;var U=this.raw.frames[l];if(U.image){var c=U.image.descriptor.width*U.image.descriptor.height,s=function(l,F,U){var c,s,B,d,i,Q,t,I,V,e,X,g,a,b,Z,x,G=U,R=new Array(U),y=new Array(4096),m=new Array(4096),L=new Array(4097);for(i=(s=1<<(g=l))+1,c=s+2,t=-1,B=(1<<(d=g+1))-1,V=0;V<s;V++)y[V]=0,m[V]=V;for(X=I=a=b=x=Z=0,e=0;e<G;){if(0===b){if(I<d){X+=F[Z]<<I,I+=8,Z++;continue}if(V=X&B,X>>=d,I-=d,V>c||V==i)break;if(V==s){B=(1<<(d=g+1))-1,c=s+2,t=-1;continue}if(-1==t){L[b++]=m[V],t=V,a=V;continue}for(Q=V,V==c&&(L[b++]=a,V=t);V>s;)L[b++]=m[V],V=y[V];a=255&m[V],L[b++]=a,c<4096&&(y[c]=t,m[c]=a,0==(++c&B)&&c<4096&&(d++,B+=c)),t=Q}b--,R[x++]=L[b],e++}for(e=x;e<G;e++)R[e]=0;return R}(U.image.data.minCodeSize,U.image.data.blocks,c);U.image.descriptor.lct.interlaced&&(s=function(l,F){for(var U=new Array(l.length),c=l.length/F,s=function(c,s){var B=l.slice(s*F,(s+1)*F);U.splice.apply(U,[c*F,F].concat(B))},B=[0,4,2,1],d=[8,8,4,2],i=0,Q=0;Q<4;Q++)for(var t=B[Q];t<c;t+=d[Q])s(t,i),i++;return U}(s,U.image.descriptor.width));var B={pixels:s,dims:{top:U.image.descriptor.top,left:U.image.descriptor.left,width:U.image.descriptor.width,height:U.image.descriptor.height}};return U.image.descriptor.lct&&U.image.descriptor.lct.exists?B.colorTable=U.image.lct:B.colorTable=this.raw.gct,U.gce&&(B.delay=10*(U.gce.delay||10),B.disposalType=U.gce.extras.disposal,U.gce.extras.transparentColorGiven&&(B.transparentIndex=U.gce.transparentColorIndex)),F&&(B.patch=function(l){for(var F=l.pixels.length,U=new Uint8ClampedArray(4*F),c=0;c<F;c++){var s=4*c,B=l.pixels[c],d=l.colorTable[B];U[s]=d[0],U[s+1]=d[1],U[s+2]=d[2],U[s+3]=B!==l.transparentIndex?255:0}return U}(B)),B}return null},xF.prototype.decompressFrames=function(l){for(var F=[],U=0;U<this.raw.frames.length;U++){this.raw.frames[U].image&&F.push(this.decompressFrame(U,l))}return F};const GF={},RF={},yF=globalThis.navigator&&-1!==navigator.userAgent.indexOf("Chrome");class mF extends El{constructor(l,F="",U={}){F.constructor==Object&&(U=F),null!=l&&-1!=l.lastIndexOf(".")&&(console.warn("Deprecated signature. Please provide a name and filepath to the image constructor"),l=l.substring(l.lastIndexOf("/")+1,l.lastIndexOf("."))),super(l,U),this.__loaded=!1;const c=this.addParameter(new Wl("FilePath"));c.on("valueChanged",()=>{if(this.loaded=!1,""==this.getName()){const l=c.getStem(),F=l.substring(l.length-1);isNaN(F)?this.setName(l):this.setName(l.substring(0,l.length-1))}c.getValue()&&this.__loadData()}),F&&""!=F&&c.setFilepath(F)}static __imageDataLibrary(){return GF}static registerLoader(l,F){RF[l]=F}static constructLoader(l,F){for(const U of RF)if(new RegExp("\\.("+U+")$","i").test(l.name)){const c=new RF[U](F);if(c)return c.getParameter("FilePath").setValue(l.id),c}}__loadData(){const l=this.getParameter("FilePath").get();if(".jpg"==l||".png"==l||".webp"==l)this.__loadLDRImage(l);else if(".mp4"==l||".ogg"==l)this.__loadLDRVideo();else if(".vlh"==l)this.__loadVLH();else if(".gif"==l)this.__loadGIF();else{if(".svg"!=l)throw new Error("Unsupported file type. Check the ext:"+file);console.warn("SVG Image not yet supported")}}__loadLDRImage(F){const U=this.getParameter("FilePath").getFile();let c;".jpg"==F?this.format="RGB":".png"==F&&(this.format="RGBA"),this.type="UNSIGNED_BYTE";const s=()=>{this.getDOMElement=()=>c,this.width=c.width,this.height=c.height,this.__data=c,this.__loaded=!0,this.emit("loaded",{})};if(U.id in GF)c=GF[U.id],c.complete?s():c.addEventListener("load",s);else{Bl.addWork(U.id,1);const F=this.addParameter(new Il("PreferredSize",-1));let B=U.url;if(U.assets&&Object.keys(U.assets).length>0){const c={maxSize:l.gpuDesc.maxTextureSize},s=F.getValue();-1==s?U.assets.reduce&&(c.prefSize=U.assets.reduce.w):c.prefSize=s;const d=function(l,F){if(F=F.filter(l=>null!==l),yF){const l=F.filter(l=>"webp"===l.format);l.length>1&&(F=l)}else F=F.filter(l=>"webp"!==l.format);if(l.maxSize&&(F=F.filter(F=>F.w<=l.maxSize)),l.filter){const U=F.filter(F=>-1!==F.url.indexOf(l.filter));U.length>1&&(F=U)}if(l.prefSize&&(F=F.map(F=>Object.assign({score:Math.abs(l.prefSize-F.w)},F))).sort((l,F)=>l.score>F.score?1:l.score<F.score?-1:0),F.length>0)return F[0]}(c,Object.values(U.assets));d&&(console.log("Selected image:"+U.name+" format:"+d.format+" :"+d.w+"x"+d.h+" url:"+d.url),B=d.url)}else console.warn("Images not processed for this file:"+U.name);c=new Image,c.crossOrigin="anonymous",c.src=B,c.addEventListener("load",s),c.addEventListener("load",()=>{Bl.addWorkDone(U.id,1)}),GF[U.id]=c}}__removeVideoParams(){this.getParameterIndex("spatializeAudio")&&(this.removeParameter(this.getParameterIndex("Loop")),this.removeParameter(this.getParameterIndex("spatializeAudio")),this.removeParameter(this.getParameterIndex("Gain")),this.removeParameter(this.getParameterIndex("refDistance")),this.removeParameter(this.getParameterIndex("maxDistance")),this.removeParameter(this.getParameterIndex("rolloffFactor")),this.removeParameter(this.getParameterIndex("coneInnerAngle")),this.removeParameter(this.getParameterIndex("coneOuterAngle")),this.removeParameter(this.getParameterIndex("coneOuterGain")))}__loadLDRVideo(){const l=this.getParameter("FilePath").getFile();this.format="RGB",this.type="UNSIGNED_BYTE",Bl.addWork(l.id,1);const F=this.addParameter(new el("Mute",!0)),U=this.addParameter(new el("Loop",!0)),c=document.createElement("video");c.style.display="none",c.preload="auto",c.crossOrigin="anonymous",this.getAudioSource=()=>c,document.body.appendChild(c),c.on("loadedmetadata",()=>{c.muted=F.getValue(),F.on("valueChanged",()=>{c.muted=F.getValue()}),c.loop=U.getValue(),U.on("valueChanged",()=>{c.loop=U.getValue()}),this.width=c.videoHeight,this.height=c.videoWidth,this.__data=c,this.__loaded=!0,Bl.addWorkDone(l.id,1),this.emit("loaded",{}),c.play().then(()=>{let l=0;const F=()=>{if(c.paused||c.ended)return;const U=Math.floor(29.97*c.currentTime);l!=U&&(this.emit("updated",{}),l=U),setTimeout(F,20)};F()},l=>{console.log("Autoplay was prevented.",l,l.message)})},!1),c.src=l.url}__loadVLH(){const l=this.getParameter("FilePath").getFile();this.type="FLOAT";let F=new R(1,1,1,1);this.setHDRTint=l=>{F=l},this.getHDRTint=()=>F,Bl.loadUrl(l.id,l.url,l=>{let F,U;for(const c in l)c.endsWith(".jpg")?F=l[c]:c.endsWith(".bin")&&(U=l[c]);const c=new Blob([F.buffer]),s=new Image;s.onload=()=>{this.width=s.width,this.height=s.height,this.__data={ldr:s,cdm:U},this.__loaded?this.emit("updated",{}):(this.__loaded=!0,this.emit("loaded",{}))},s.src=URL.createObjectURL(c)})}__loadGIF(){const l=this.getParameter("FilePath").getFile();let F,U,c;this.format="RGBA",this.type="UNSIGNED_BYTE",this.__streamAtlas=!0,this.addParameter(new bl("StreamAtlasDesc",new x)),this.addParameter(new Il("StreamAtlasIndex",0)).setRange([0,1]),this.getFrameDelay=()=>20,this.play=()=>{c.then(()=>{F=!0,U&&U()})},this.stop=()=>{F=!1},l.id in GF?c=GF[l.id]:(c=new Promise((F,U)=>{if(Bl.addWork(l.id,1),l.assets&&l.assets.atlas){const U=new Image;return U.crossOrigin="anonymous",U.src=l.assets.atlas.url,void U.addEventListener("load",()=>{F({width:l.assets.atlas.width,height:l.assets.atlas.height,atlasSize:l.assets.atlas.atlasSize,frameDelays:l.assets.atlas.frameDelays,frameRange:[0,l.assets.atlas.frameDelays.length],imageData:U}),Bl.addWorkDone(l.id,1)})}O(l.url,U=>{console.warn("Unpacking Gif client side:"+l.name);const c=performance.now(),s=new xF(U).decompressFrames(!0),B=Math.sqrt(s.length),d=[B,B];Q.fract(B)>0&&(d[0]=Math.floor(d[0]+1),Q.fract(B)>.5?d[1]=Math.floor(d[1]+1):d[1]=Math.floor(d[1]));const i=s[0].dims.width,t=s[0].dims.height,I=document.createElement("canvas"),V=I.getContext("2d"),e=document.createElement("canvas"),X=e.getContext("2d");e.width=i,e.height=t;const g=document.createElement("canvas"),a=g.getContext("2d");let b;g.width=d[0]*i,g.height=d[1]*t;const Z=[],x=(l,F)=>{const U=l.dims;Z.push(l.delay/10),b&&U.width==b.width&&U.height==b.height||(I.width=U.width,I.height=U.height,b=V.createImageData(U.width,U.height)),b.data.set(l.patch),V.putImageData(b,0,0),2==l.disposalType&&X.clearRect(0,0,e.width,e.height),X.drawImage(I,U.left,U.top),a.drawImage(e,F%d[0]*i,Math.floor(F/d[0])*t)};for(let l=0;l<s.length;l++)x(s[l],l);Bl.addWorkDone(l.id,1);const G=a.getImageData(0,0,g.width,g.height),R=performance.now()-c;console.log(`Decode GIF '${l.name}' time:`+R),F({width:g.width,height:g.height,atlasSize:d,frameRange:[0,s.length],frameDelays:Z,imageData:G})},l=>{const F="Unable to Load URL:"+l+":"+fileDesc.url;console.warn(F),U(F)})}),GF[l.id]=c),c.then(l=>{this.width=l.width,this.height=l.height,this.getParameter("StreamAtlasDesc").setValue(new x(l.atlasSize[0],l.atlasSize[1],0,0)),this.getParameter("StreamAtlasIndex").setRange(l.frameRange),this.__data=l.imageData,this.getFrameDelay=F=>10*l.frameDelays[F];const c=this.getParameter("StreamAtlasIndex"),s=c.getRange()[1];let B=0;U=()=>{c.setValue(B),F&&setTimeout(U,this.getFrameDelay(B)),B=(B+1)%s},F&&U(),this.__loaded=!0,this.emit("loaded",{})})}isStream(){return!1}isLoaded(){return this.__loaded}getParams(){const l=super.getParams();return this.__loaded&&(l.data=this.__data),l}toJSON(l){}fromJSON(l,F){}readBinary(l,F){this.setName(l.loadStr());let U=l.loadStr();if("string"==typeof U&&""!=U){if(F.lod>=0){const l=U.lastIndexOf(".");if(-1!=l){const c=U.substring(0,l)+F.lod+U.substring(l);Bl.resolveFilepath(c)&&(U=c)}}this.getParameter("FilePath").setFilepath(U)}}}class LF extends mF{constructor(l,F={}){console.warn("FileImage2D is becoming deprecated in favor of simple FileImage"),super(l,F)}}e.register("FileImage2D",mF),e.register("FileImage",mF);const nF=globalThis.navigator&&-1!==navigator.userAgent.indexOf("Chrome");class CF extends mF{constructor(l,F,U){super(l,F,U),this.type="UNSIGNED_BYTE",this.addParameter(new Il("PreferredSize",-1)),this.__crossOrigin="anonymous"}setCrossOrigin(l){this.__crossOrigin=l}__loadData(F){".png"==this.getParameter("FilePath").getExt()&&(this.format="RGBA");let U=F.url;if(F.assets&&Object.keys(F.assets).length>0){const c={maxSize:l.gpuDesc.maxTextureSize},s=this.getParameter("PreferredSize").getValue();-1==s?F.assets.reduce&&(c.prefSize=F.assets.reduce.w):c.prefSize=s;const B=function(l,F){if(F=F.filter(l=>null!==l),nF){const l=F.filter(l=>"webp"===l.format);l.length>1&&(F=l)}else F=F.filter(l=>"webp"!==l.format);if(l.maxSize&&(F=F.filter(F=>F.w<=l.maxSize)),l.filter){const U=F.filter(F=>-1!==F.url.indexOf(l.filter));U.length>1&&(F=U)}if(l.prefSize&&(F=F.map(F=>Object.assign({score:Math.abs(l.prefSize-F.w)},F))).sort((l,F)=>l.score>F.score?1:l.score<F.score?-1:0),F.length>0)return F[0]}(c,Object.values(F.assets));B&&(console.log("Selected image:"+F.name+" format:"+B.format+" :"+B.w+"x"+B.h+" url:"+B.url),U=B.url)}else console.warn("Images not processed for this file:"+F.name);this.setImageURL(U,"RGB")}setImageURL(l,F="RGB"){if(!F){const U=l.lastIndexOf(".");if(-1!=U){".png"==l.substring(U).toLowerCase()&&(F="RGBA")}}let U;this.format=F,this.__loaded=!1;const c=()=>{this.getDOMElement=()=>U,this.width=U.width,this.height=U.height,this.__data=U,this.__loaded=!0,this.emit("loaded",{})},s=mF.__imageDataLibrary();l in s?(U=s[l],U.complete?c():U.addEventListener("load",c)):(U=new Image,U.crossOrigin=this.__crossOrigin,U.src=l,U.addEventListener("load",c),s[l]=U)}}mF.registerLoader("jpg|jpeg|png",CF),e.register("LDRImage",CF);class hF extends mF{constructor(l,F,U){super(l,F,U),this.format="RGB",this.type="UNSIGNED_BYTE",this.addParameter(new el("Mute",!1)),this.addParameter(new el("Loop",!0)),this.addParameter(new Il("Gain",2)).setRange([0,5]),this.addParameter(new el("SpatializeAudio",!0)),this.addParameter(new Il("refDistance",2)),this.addParameter(new Il("maxDistance",1e4)),this.addParameter(new Il("rolloffFactor",1)),this.addParameter(new Il("coneInnerAngle",360)),this.addParameter(new Il("coneOuterAngle",0)),this.addParameter(new Il("coneOuterGain",1))}__loadData(l){Bl.addWork(l.id,1);const F=document.createElement("video");F.style.display="none",F.preload="auto",F.crossOrigin="anonymous",this.getAudioSource=()=>F,document.body.appendChild(F),F.addEventListener("loadedmetadata",()=>{const U=this.getParameter("Mute");F.muted=U.getValue(),U.on("valueChanged",()=>{F.muted=U.getValue()});const c=this.getParameter("Loop");F.loop=c.getValue(),c.on("valueChanged",()=>{F.loop=c.getValue()}),this.width=F.videoHeight,this.height=F.videoWidth,this.__data=F,this.__loaded=!0,Bl.addWorkDone(l.id,1),this.emit("loaded",{});let s=0;const B=()=>{if(F.paused||F.ended)return;const l=Math.floor(29.97*F.currentTime);s!=l&&(this.emit("updated",{}),s=l),setTimeout(B,20)};B()},!1),F.src=l.url;const U=F.play();void 0!==U&&U.then(l=>{console.log("Autoplay started!")}).catch(()=>{console.log("Autoplay was prevented.")})}}mF.registerLoader("mp4|ogg",hF),e.register("LDRVideo",hF);class uF extends mF{constructor(l,F="",U={}){super(l,F,U),this.format="RGBA",this.type="UNSIGNED_BYTE",this.__streamAtlas=!0,this.addParameter(new bl("StreamAtlasDesc")),this.addParameter(new Il("StreamAtlasIndex",0));const c=this.getParameter("StreamAtlasIndex");let s;c.setRange([0,1]);let B=0;const d=l=>{c.setValue(B),s&&setTimeout(()=>d(l),this.getFrameDelay(B)),B=(B+1)%l};this.play=()=>{this.__resourcePromise.then(()=>{s=!0;const l=c.getRange()[1];d(l)})},this.stop=()=>{s=!1}}getFrameDelay(l){return 10*this.__unpackedData.frameDelays[l]}__loadData(l){const F=mF.__imageDataLibrary();l.id in F?this.__resourcePromise=F[l.id]:(this.__resourcePromise=new Promise((F,U)=>{if(Bl.addWork(l.id,1),l.assets&&l.assets.atlas){const U=new Image;return U.crossOrigin="anonymous",U.src=l.assets.atlas.url,void U.addEventListener("load",()=>{F({width:l.assets.atlas.width,height:l.assets.atlas.height,atlasSize:l.assets.atlas.atlasSize,frameDelays:l.assets.atlas.frameDelays,frameRange:[0,l.assets.atlas.frameDelays.length],imageData:U}),Bl.addWorkDone(l.id,1)})}O(l.url,U=>{console.warn("Unpacking Gif client side:"+l.name);const c=performance.now(),s=new xF(U).decompressFrames(!0),B=Math.sqrt(s.length),d=[B,B];Q.fract(B)>0&&(d[0]=Math.floor(d[0]+1),Q.fract(B)>.5?d[1]=Math.floor(d[1]+1):d[1]=Math.floor(d[1]));const i=s[0].dims.width,t=s[0].dims.height,I=document.createElement("canvas"),V=I.getContext("2d"),e=document.createElement("canvas"),X=e.getContext("2d");e.width=i,e.height=t;const g=document.createElement("canvas"),a=g.getContext("2d");let b;g.width=d[0]*i,g.height=d[1]*t;const Z=[],x=(l,F)=>{const U=l.dims;Z.push(l.delay/10),b&&U.width==b.width&&U.height==b.height||(I.width=U.width,I.height=U.height,b=V.createImageData(U.width,U.height)),b.data.set(l.patch),V.putImageData(b,0,0),2==l.disposalType&&X.clearRect(0,0,e.width,e.height),X.drawImage(I,U.left,U.top),a.drawImage(e,F%d[0]*i,Math.floor(F/d[0])*t)};for(let l=0;l<s.length;l++)x(s[l],l);Bl.addWorkDone(l.id,1);const G=a.getImageData(0,0,g.width,g.height),R=performance.now()-c;console.log(`Decode GIF '${l.name}' time:`+R),F({width:g.width,height:g.height,atlasSize:d,frameRange:[0,s.length],frameDelays:Z,imageData:G})},F=>{const c="Unable to Load URL:"+F+":"+l.url;console.warn(c),U(c)})}),F[l.id]=this.__resourcePromise),this.__resourcePromise.then(l=>{this.width=l.width,this.height=l.height,this.getParameter("StreamAtlasDesc").setValue(new x(l.atlasSize[0],l.atlasSize[1],0,0)),this.getParameter("StreamAtlasIndex").setRange(l.frameRange),this.__unpackedData=l,this.__data=l.imageData,this.__loaded=!0,this.emit("loaded",{})})}}mF.registerLoader("gif",uF),e.register("GIFImage",uF);class SF extends El{constructor(l,F={}){let U;null!=l&&-1!=l.lastIndexOf(".")&&(U=l,l=l.substring(l.lastIndexOf("/")+1,l.lastIndexOf("."))),super(l,F),this.__loaded=!1,this.__exposure=1,this.__ambientLightFactor=0,this.__hdrtint=new R(1,1,1,1),this.__stream="stream"in F&&F.stream,this.type="FLOAT";const c=this.addParameter(new Wl("FilePath"));c.on("valueChanged",()=>{if(this.loaded=!1,""==this.getName()){const l=c.getStem(),F=l.substring(l.length-1);isNaN(F)?this.setName(l):this.setName(l.substring(0,l.length-1))}const l=c.getValue(),F=c.getFile();this.__loadVLH(l,F)}),U&&this.getParameter("FilePath").setFilepath(U)}getDOMElement(){return this.__domElement}getResourcePath(){return this.getParameter("FilePath").getValue()}__decodeData(l){const F=l.ldr,U=l.cdm,c=new Blob([F.buffer]),s=new Image;s.onload=()=>{this.width=s.width,this.height=s.height,this.__data={ldr:s,cdm:U},this.__loaded?this.emit("updated",{}):(this.__loaded=!0,this.emit("loaded",{}))},s.src=URL.createObjectURL(c)}__loadVLH(l,F){this.type="FLOAT",Bl.loadUrl(l,F.url,l=>{if(!l.ldr||!l.cdm)for(const F in l)F.endsWith(".jpg")?(l.ldr=l[F],delete l[F]):F.endsWith(".bin")&&(l.cdm=l[F],delete l[F]);this.__decodeData(l)})}isStream(){return!1}isLoaded(){return this.__loaded}getParams(){const l=super.getParams();return this.__loaded&&(l.data=this.__data,l.exposure=this.__exposure),l}setHDRTint(l){this.__hdrtint=l}getHDRTint(){return this.__hdrtint}toJSON(l){}fromJSON(l,F){}readBinary(l,F){this.setName(l.loadStr());const U=l.loadStr();if("string"==typeof U&&""!=U){if(F.lod>=0){const l=U.lastIndexOf(".");if(-1!=l){const c=U.substring(0,l)+F.lod+U.substring(l);Bl.resourceAvailable(c)&&(U=c)}}this.getParameter("FilePath").setValue(U)}}}e.register("VLHImage",SF);const oF=1,WF=2,JF=(l,F)=>F<l?0:1;function EF(l){return l.dot(new a(1,1))}function HF(l){return new a(Math.abs(l.x),Math.abs(l.y))}function rF(l,F){return new a(Math.max(l.x,F),Math.max(l.y,F))}function YF(l){const F=(U=l,new Z(Math.abs(U.x),Math.abs(U.y),Math.abs(U.z)));var U;const c=function(l){return new Z(2*JF(0,l.x)-1,2*JF(0,l.y)-1,2*JF(0,l.z)-1)}(l),s=new a(F.x,F.y);let B=rF(s,1e-20);const d=Math.atan2(B.x,B.y)/(.5*Math.PI);B=rF(new a(F.z,s.length()),1e-20);const i=Math.atan2(B.y,B.x)/(.5*Math.PI);let Q=new a(c.x*d,c.y*(1-d));if(Q.scaleInPlace(i),l.z<0){const l=new a(Q.y,Q.x),F=new a(c.x,c.y);Q=F.subtract(HF(l).multiply(F))}return Q.scale(.5).add(new a(.5,.5))}function pF(l){l=l.scale(2).subtract(new a(1,1));const F=new a(2*JF(0,(U=l).x)-1,2*JF(0,U.y)-1);var U;const c=EF(HF(l)),s=c*Math.PI*.5;if(s<=0)return new Z(0,0,1);if(Math.abs(s-Math.PI)<1e-6)return new Z(0,0,-1);if(c>1){l=HF(a(l.y,l.x)).negate().add(new a(1,1)).multiply(F),c=EF(HF(l))}const B=Math.abs(l.x)/c*(.5*Math.PI),d=Math.sin(B),i=Math.cos(B),Q=Math.sin(s),t=Math.cos(s);return new Z(d*F.x*Q,i*F.y*Q,t)}class NF extends SF{constructor(l,F={}){super(l,F),this.mapping=WF}__decodeData(l){super.__decodeData(l);const F=l.samples;F&&(window.TextDecoder?this.__sampleSets=JSON.parse(new TextDecoder("utf-8").decode(F)):this.__sampleSets=JSON.parse(p(F)),this.__sampleSets.luminanceThumbnail&&(this.__thumbSize=Math.sqrt(this.__sampleSets.luminanceThumbnail.length)))}getSampleSets(){return this.__sampleSets}uvToDir(l){switch(this.mapping){case oF:return function(l,F){const U=Math.PI*(2*l-1),c=Math.PI*F;return new Z(sin(c)*sin(U),-sin(c)*cos(U),cos(c))}(l);case WF:return pF(l)}}dirToUv(l){switch(this.mapping){case oF:return function(l){const F=Math.acos(l.z),U=Math.atan2(l.x,-l.y);return new a((1+U/Math.PI)/2,F/Math.PI)}(l);case WF:return YF(l)}}uvToLuminance(l){const F=Math.floor(l.y*this.__thumbSize)*this.__thumbSize+Math.floor(l.x*this.__thumbSize);return this.__sampleSets.luminanceThumbnail[F]}dirToLuminance(l){return this.uvToLuminance(this.dirToUv(l))}}e.register("EnvMap",NF);const TF=new class extends H{constructor(){super(),this.__labelLibraries={},this.__language=function(){if(!globalThis.navigator)return"en";const l=new URLSearchParams(window.location.search);if(l.has("lang"))return l.get("lang");const F=window.navigator,U=["language","browserLanguage","systemLanguage","userLanguage"];let c,s;const B=l=>l.startsWith("en")?"En":l.startsWith("es")?"Es":l.startsWith("fr")?"Fr":l.startsWith("gb")||l.startsWith("de")?"Gb":l;if(Array.isArray(F.languages))for(c=0;c<F.languages.length;c++)if(s=F.languages[c],s&&s.length)return B(s);for(c=0;c<U.length;c++)if(s=F[U[c]],s&&s.length)return B(s);return null}(),this.__foundLabelLibraries={}}loadLibrary(l,F){const U=l.substring(0,l.lastIndexOf("."));this.__foundLabelLibraries[U]=F,l.endsWith(".labels")?D(F,l=>{this.__labelLibraries[U]=JSON.parse(l),this.emit("labelLibraryLoaded",{library:U})}):l.endsWith(".xlsx")&&globalThis.navigator&&window.XLSX&&O(F,l=>{const F=new Uint8Array(l),c=XLSX.read(F,{type:"array"}),s={};c.SheetNames.forEach((function(l){XLSX.utils.sheet_to_row_object_array(c.Sheets[l]).forEach((function(l){const F=l.Identifier;delete l.Identifier,s[F]=l}))})),this.__labelLibraries[U]=s,this.emit("labelLibraryLoaded",{library:U})})}isLibraryFound(l){return l in this.__foundLabelLibraries}isLibraryLoaded(l){return l in this.__labelLibraries}getLabelText(l,F){const U=this.__labelLibraries[l];if(!U)throw new Error("LabelLibrary: '"+l+"' not found in LabelManager. Found: ["+Object.keys(this.__labelLibraries)+"]");const c=U[F];if(!c)throw new Error("Label: '"+F+"' not found in LabelLibrary: '"+l+"'. Found: ["+Object.keys(U)+"]");const s=c[this.__language];if(!s){if(c.En)return c.En;throw new Error("labelText: '"+language+"' not found in Label. Found: ["+Object.keys(c)+"]")}return s}setLabelText(l,F,U){let c=this.__labelLibraries[l];c||(c={},this.__labelLibraries[l]=c);let s=c[F];s||(s={},c[F]=s),s[this.__language]=U}setLanguage(l){this.__language=l}};class AF extends sF{constructor(l,F){super(l),this.__canvasElem=document.createElement("canvas");const U=this.addParameter(new ml("Library"));this.addParameter(new ml("Text","")),this.addParameter(new Zl("FontColor",new R(0,0,0))),this.addParameter(new Il("Margin",11)),this.addParameter(new Il("BorderWidth",2)),this.addParameter(new Il("BorderRadius",11)),this.addParameter(new el("Outline",!1)),this.addParameter(new el("OutlineColor",new R(0,0,0))),this.addParameter(new el("Background",!0)),this.addParameter(new Zl("BackgroundColor",new R("#FBC02D"))),this.addParameter(new el("FillBackground",!0)),this.addParameter(new el("StrokeBackgroundOutline",!0)),this.addParameter(new Il("FontSize",22)),this.addParameter(new ml("Font","Helvetica"));this.on("nameChanged",()=>{this.loadLabelData()}),F&&U.setValue(F),this.__requestedRerender=!1,this.__needsRender=!1,this.loadLabelData()}__parameterValueChanged(l){super.__parameterValueChanged(l),this.__requestedRerender||(this.__requestedRerender=!0,this.loadLabelData())}loadLabelData(){Promise.all([(()=>new Promise(l=>{const F=this.getParameter("Library").getValue();if(""==F)return void l();if(!TF.isLibraryFound(F))return console.warn("Label Libary not found:",F),void l();const U=()=>{try{const l=this.getName(),U=TF.getLabelText(F,l);this.getParameter("Text").setValue(U)}catch(l){console.warn(l)}l()};TF.isLibraryLoaded(F)?U():TF.on("labelLibraryLoaded",l=>{l.library==F&&U()})}))(),(()=>new Promise(l=>{if(null!=document.fonts){const F=this.getParameter("Font").getValue(),U=this.getParameter("FontSize").getValue();document.fonts.load(U+'px "'+F+'"').then(()=>{l()})}else l()}))()]).then(()=>{this.__requestedRerender=!1,this.__needsRender=!0,this.__loaded?this.emit("updated",{}):(this.__loaded=!0,this.emit("loaded",{}))})}renderLabelToImage(){const l=this.__canvasElem.getContext("2d",{alpha:!0});let F=this.getParameter("Text").getValue();""==F&&(F=this.getName());const U=this.getParameter("Font").getValue(),c=this.getParameter("FontColor").getValue(),s=this.getParameter("FontSize").getValue(),B=this.getParameter("Margin").getValue(),d=this.getParameter("BorderWidth").getValue(),i=this.getParameter("BorderRadius").getValue(),Q=this.getParameter("Outline").getValue(),t=this.getParameter("OutlineColor").getValue(),I=this.getParameter("Background").getValue(),V=this.getParameter("BackgroundColor").getValue(),e=this.getParameter("FillBackground").getValue(),X=this.getParameter("StrokeBackgroundOutline").getValue(),g=B+d,a=F.split("\n");l.font=s+'px "'+U+'"';let b=0;a.forEach(F=>{b=Math.max(l.measureText(F).width,b)});const Z=s;this.width=Math.ceil(b+2*g),this.height=Math.ceil(Z*a.length+2*g),l.canvas.width=this.width,l.canvas.height=this.height,this.__canvasElem.width=this.width,this.__canvasElem.height=this.height,l.fillStyle="rgba(0, 0, 0, 0.0)",l.fillRect(0,0,this.width,this.height),I&&(l.fillStyle=V.toHex(),l.strokeStyle=t.toHex(),function(l,F,U,c,s,B,d,i,Q){if(void 0===i&&(i=!0),void 0===B&&(B=5),"number"==typeof B)B={tl:B,tr:B,br:B,bl:B};else{const l={tl:0,tr:0,br:0,bl:0};for(const F in l)B[F]=B[F]||l[F]}l.beginPath(),l.moveTo(F+B.tl,U),l.lineTo(F+c-B.tr,U),l.quadraticCurveTo(F+c,U,F+c,U+B.tr),l.lineTo(F+c,U+s-B.br),l.quadraticCurveTo(F+c,U+s,F+c-B.br,U+s),l.lineTo(F+B.bl,U+s),l.quadraticCurveTo(F,U+s,F,U+s-B.bl),l.lineTo(F,U+B.tl),l.quadraticCurveTo(F,U,F+B.tl,U),l.closePath(),d&&l.fill(),i&&(l.lineWidth=Q,l.stroke())}(l,d,d,this.width-2*d,this.height-2*d,i,e,X,d)),l.font=s+'px "'+U+'"',l.textAlign="left",l.fillStyle=c.toHex(),l.textBaseline="hanging",a.forEach((F,U)=>{l.fillText(F,g,g+U*Z)}),Q&&(l.strokeStyle=t.toHex(),l.lineWidth=1.5,l.strokeText(F,g,g)),this.__data=l.getImageData(0,0,this.width,this.height),this.__needsRender=!1,this.emit("labelRendered",{width:this.width,height:this.height,data:this.__data})}getParams(){return this.__needsRender&&this.renderLabelToImage(),super.getParams()}toJSON(l){return super.toJSON(l)}fromJSON(l,F){super.fromJSON(l,F),this.__getLabelText()}}e.register("Label",AF);class MF extends El{constructor(){super(),this.__loaded=!1}connectWebcam(l,F,U=!1){const c={width:l,height:F,frameRate:{ideal:60,max:60}};c.facingMode=U?{exact:"environment"}:{facingMode:"user"};const s=document.createElement("video");s.style.display="none",s.preload="auto",s.crossOrigin="anonymous",document.body.appendChild(s),navigator.mediaDevices.getUserMedia({audio:!1,video:c}).then(l=>{s.srcObject=l,s.onloadedmetadata=l=>{s.play(),this.width=s.videoWidth,this.height=s.videoHeight,console.log("Webcam:["+this.width+", "+this.height+"]"),this.__data=s,this.__loaded=!0,this.emit("loaded",{});let F=0;const U=()=>{if(s.paused||s.ended)return;const l=Math.floor(60*s.currentTime);F!=l&&(this.emit("updated",{}),F=l),setTimeout(U,20)};U()}}).catch((function(l){}))}setVideoStream(l){this.__loaded=!1,this.width=l.videoWidth,this.height=l.videoHeight,this.start(),this.__data=l,this.__loaded=!0,this.emit("loaded",{})}stop(){clearInterval(this.__intervalId)}start(){this.__intervalId=setInterval(()=>{this.emit("updated",{})},20)}isLoaded(){return this.__loaded}getParams(){return{type:this.type,format:this.format,width:this.width,height:this.height,data:this.__data,flipY:this.getParameter("FlipY").getValue()}}}e.register("VideoStreamImage2D",MF);class zF{constructor(l){this.__name=l,this._param=void 0,this._paramValueChanged=this._paramValueChanged.bind(this)}getName(){return this.__name}setOperator(l){this._op=l}getOperator(){return this._op}isConnected(){return null!=this._param}getParam(){return this._param}_paramValueChanged(l){this._op&&this._op.setDirty(this.__name)}setParam(l){this._param&&this._param.off("valueChanged",this._paramValueChanged),this._param=l,this._param&&this._param.on("valueChanged",this._paramValueChanged)}getValue(){if(this._param)return this._param.getValue()}setValue(l){this._param&&this._param.setValue(l)}toJSON(l){const F=this._param?this._param.getPath():"";return{name:this.__name,paramPath:l&&l.makeRelative?l.makeRelative(F):F}}fromJSON(l,F){l.paramPath&&F.resolvePath(l.paramPath,l=>{this.setParam(l)},F=>{console.warn("OperatorInput: '"+this.getName()+"'. Unable to connect to:"+l.paramPath)})}detach(){this._param&&this._param.off("valueChanged",this._paramValueChanged)}reattach(){this.detached=!1,this._param&&this._param.on("valueChanged",this._paramValueChanged)}}class kF{constructor(l,F=Ql.OP_WRITE){this.__name=l,this._mode=F,this._param=void 0,this._paramBindIndex=-1,this.detached=!1}getName(){return this.__name}setOperator(l){this._op=l}getOperator(){return this._op}getMode(){return this._mode}isConnected(){return null!=this._param}getParam(){return this._param}setParam(l,F=-1){this._param&&this._param.unbindOperator(this,F),this._param=l,this._param&&(this._paramBindIndex=this._param.bindOperatorOutput(this,F))}getParamBindIndex(){return this._paramBindIndex}setParamBindIndex(l){this._paramBindIndex=l}setDirty(){this._param&&this._param.setDirty(this._paramBindIndex)}getValue(){if(this._param)return this._param.getValueFromOp(this._paramBindIndex);throw new Error("Cannot call getValue on OperatorOutput that is not connected:",this.__name)}backPropagateValue(l){return this._param&&(l=this._op.backPropagateValue(l,this)),l}setClean(l){this._param&&this._param.setCleanFromOp(l,this._paramBindIndex)}toJSON(l){const F=this._param?this._param.getPath():"";return{name:this.__name,paramPath:l&&l.makeRelative?l.makeRelative(F):F,paramBindIndex:this._paramBindIndex}}fromJSON(l,F){l.paramPath&&F.resolvePath(l.paramPath,F=>{this.setParam(F,l.paramBindIndex)},F=>{console.warn("OperatorOutput: '"+this.getName()+"'. Unable to connect to:"+l.paramPath)})}detach(){this.detached=!0,this._paramBindIndex=this._param.unbindOperator(this)}reattach(){this.detached=!1,this._paramBindIndex=this._param.bindOperatorOutput(this,this._paramBindIndex)}rebind(){this._param&&(this._param.unbindOperator(this),this._paramBindIndex=this._param.bindOperatorOutput(this))}}class vF extends K{constructor(l){super(l),this.__inputs=new Map,this.__outputs=new Map}setDirty(){this.__outputs.forEach(l=>l.setDirty())}__parameterValueChanged(l){super.__parameterValueChanged(l),this.setDirty()}addInput(l){return"string"==typeof l&&(l=new zF(l)),l.setOperator(this),this.__inputs.set(l.getName(),l),this.setDirty(),l}removeInput(l){if("string"==typeof l&&(l=this.getInput(l)),!(l instanceof zF))throw new Error("Invalid parameter for removeInput:",l);l.getParam()&&l.setParam(null),this.__inputs.delete(l.getName())}getNumInputs(){return this.__inputs.size}getInputByIndex(l){return Array.from(this.__inputs.values())[l]}getInput(l){return this.__inputs.get(l)}addOutput(l){if("string"==typeof l&&(l=new kF(l)),l.setOperator(this),this.getOutput(l.getName()))throw new Error("Operator output already exists "+l.getName());return this.__outputs.set(l.getName(),l),this.setDirty(),l}removeOutput(l){if("string"==typeof l&&(l=this.getOutput(l)),!(l instanceof kF))throw new Error("Invalid parameter for removeOutput:",l);l.getParam()&&l.setParam(null),this.__outputs.delete(l.getName())}getNumOutputs(){return this.__outputs.size}getOutputByIndex(l){return Array.from(this.__outputs.values())[l]}getOutput(l){return this.__outputs.get(l)}evaluate(){throw new Error("Not yet implemented")}backPropagateValue(l){return l}toJSON(l){const F=super.toJSON(l);F.type=e.getBlueprintName(this);const U=[];this.__inputs.forEach(F=>{U.push(F.toJSON(l))}),F.inputs=U;const c=[];return this.__outputs.forEach(F=>{c.push(F.toJSON(l))}),F.outputs=c,F}fromJSON(l,F){super.fromJSON(l,F),l.inputs&&l.inputs.forEach((l,U)=>{let c;l.name?(c=this.getInput(l.name),c||(c=this.addInput(l.name))):c=this.getInputByIndex(U),c.fromJSON(l,F)}),l.outputs&&l.outputs.forEach((l,U)=>{let c;l.name?(c=this.getOutput(l.name),c||(c=this.addOutput(l.name))):c=this.getOutputByIndex(U),c.fromJSON(l,F)})}detach(){this.__inputs.forEach(l=>l.detach()),this.__outputs.forEach(l=>l.detach())}reattach(){this.__inputs.forEach(l=>l.reattach()),this.__outputs.forEach(l=>l.reattach())}rebind(){this.__outputs.forEach(l=>l.rebind())}}class KF extends vF{constructor(l,F){super("CalcGlobalXfoOperator"),this.addInput(new zF("ParentGlobal")),this.addInput(new zF("LocalXfo")).setParam(F),this.addOutput(new kF("GlobalXfo")).setParam(l)}backPropagateValue(l){const F=this.getInput("LocalXfo").getParam(),U=this.getInput("ParentGlobal");if(U.isConnected()){const c=U.getValue();F.setValue(c.inverse().multiply(l))}else F.setValue(l)}evaluate(){const l=this.getInput("LocalXfo").getValue(),F=this.getInput("ParentGlobal"),U=this.getOutput("GlobalXfo");if(F.isConnected()){const c=F.getValue();U.setClean(c.multiply(l),this)}else U.setClean(l,this)}}class wF extends tl{constructor(l,F){super(l,new o,"Box3"),this.treeItem=F,this.dirty=!0}setDirty(){this.dirty=!0,this.emit("valueChanged")}getValue(){return this.dirty&&(this.__value=this.treeItem._cleanBoundingBox(this.__value)),this.__value}}let fF=new R("#03E3AC");fF.a=.1;let DF=fF.lerp(new R("white"),.5);DF.a=.1;class PF extends K{constructor(l){super(l),this.__visibleCounter=1,this.__visible=!0,this.__highlightMapping={},this.__highlights=[],this.__childItems=[],this.__childItemsEventHandlers=[],this.__childItemsMapping={},this.onMouseDown=this.onMouseDown.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onMouseMove=this.onMouseMove.bind(this),this.onMouseEnter=this.onMouseEnter.bind(this),this.onMouseLeave=this.onMouseLeave.bind(this),this.__visibleParam=this.addParameter(new el("Visible",!0)),this.__localXfoParam=this.addParameter(new Rl("LocalXfo",new h)),this.__globalXfoParam=this.addParameter(new Rl("GlobalXfo",new h)),this.__boundingBoxParam=this.addParameter(new wF("BoundingBox",this)),this._setBoundingBoxDirty=this._setBoundingBoxDirty.bind(this),this._childNameChanged=this._childNameChanged.bind(this),this.globalXfoOp=new KF(this.__globalXfoParam,this.__localXfoParam),this.__globalXfoParam.on("valueChanged",l=>{this._setBoundingBoxDirty(),this.emit("globalXfoChanged",l)}),this.__visibleParam.on("valueChanged",()=>{this.__visibleCounter+=this.__visibleParam.getValue()?1:-1,this.__updateVisibility()}),this.on("selectedChanged",()=>{this.__selected?this.addHighlight("selected",fF,!0):this.removeHighlight("selected",!0)})}static getSelectionOutlineColor(){return fF}static setSelectionOutlineColor(l){fF=l}static getBranchSelectionOutlineColor(){return DF}static setBranchSelectionOutlineColor(l){DF=l}setOwner(l){if(this.__ownerItem){this.__ownerItem.isVisible()||this.__visibleCounter++;const l=this.__ownerItem.getChildIndex(this);l>=0&&this.__ownerItem.__unbindChild(l,this)}super.setOwner(l),this.__ownerItem?(this.setSelectable(this.__ownerItem.getSelectable(),!0),this.__ownerItem.isVisible()||this.__visibleCounter--,this.globalXfoOp.getInput("ParentGlobal").setParam(this.__ownerItem.getParameter("GlobalXfo"))):this.globalXfoOp.getInput("ParentGlobal").setParam(null),this.__updateVisibility()}__updatePath(){super.__updatePath();for(const l of this.__childItems)l&&l.__updatePath()}getParentItem(){return this.getOwner()}setParentItem(l){this.setOwner(l)}getLocalXfo(){return console.warn("Deprecated. use \"getParameter('LocalXfo').getValue()\""),this.__localXfoParam.getValue()}setLocalXfo(l){console.warn("Deprecated. use \"getParameter('LocalXfo').setValue(xfo)\""),this.__localXfoParam.setValue(l)}getGlobalXfo(){return console.warn("Deprecated. use \"getParameter('GlobalXfo').getValue()\""),this.__globalXfoParam.getValue()}setGlobalXfo(l){console.warn("Deprecated. use \"getParameter('GlobalXfo').setValue(xfo)\""),this.__globalXfoParam.setValue(l)}getVisible(){return console.warn("Deprecated. Use #isVisible"),this.isVisible()}isVisible(){return this.__visibleCounter>0}setVisible(l){this.__visibleParam.setValue(l)}propagateVisibility(l){this.__visibleCounter+=l,this.__updateVisibility()}__updateVisibility(){const l=this.__visibleCounter>0;if(l!=this.__visible){this.__visible=l;for(const l of this.__childItems)l instanceof PF&&l.propagateVisibility(this.__visible?1:-1);return this.emit("visibilityChanged",{visible:l}),!0}return!1}addHighlight(l,F,U=!1){if(l in this.__highlightMapping){const F=this.__highlights.indexOf(l);this.__highlights.splice(F,1)}this.__highlights.push(l),this.__highlightMapping[l]=F,this.emit("highlightChanged",{name:l,color:F}),U&&this.__childItems.forEach(c=>{c instanceof PF&&c.addHighlight(l,F,U)})}removeHighlight(l,F=!1){if(l in this.__highlightMapping){const F=this.__highlights.indexOf(l);this.__highlights.splice(F,1),delete this.__highlightMapping[l],this.emit("highlightChanged",{})}F&&this.__childItems.forEach(U=>{U instanceof PF&&U.removeHighlight(l,F)})}getHighlight(){if(this.__highlights.length>0)return this.__highlightMapping[this.__highlights[this.__highlights.length-1]]}isHighlighted(){return this.__highlights.length>0}get boundingBox(){return console.warn("getter is deprecated. Please use 'getBoundingBox'"),this.getBoundingBox()}getBoundingBox(){return console.warn("getter is deprecated. Please use 'getParameter('BoundingBox').getValue()'"),this.__boundingBoxParam.getValue()}_cleanBoundingBox(l){return l.reset(),this.__childItems.forEach(F=>{F instanceof PF&&F.isVisible()&&l.addBox3(F.getParameter("BoundingBox").getValue())}),l}_childBBoxChanged(){this._setBoundingBoxDirty()}_setBoundingBoxDirty(){this.__boundingBoxParam&&this.__boundingBoxParam.setDirty()}getChildren(){return this.__childItems}numChildren(){return console.warn("Deprecated. Use #getNumChildren"),this.__childItems.length}getNumChildren(){return this.__childItems.length}generateUniqueName(l){if(!(l in this.__childItemsMapping))return l;let F=1;l.length>4&&!Number.isNaN(parseInt(l.substring(l.length-4)))?F=parseInt(l.substr(l.length-4)):l.length>3&&!Number.isNaN(parseInt(l.substring(l.length-3)))?F=parseInt(l.substr(l.length-3)):l.length>2&&!Number.isNaN(parseInt(l.substring(l.length-2)))&&(F=parseInt(l.substr(l.length-2)));const U=[];for(const l of this.__childItems)l&&U.push(l.getName());let c=l;for(;;){let s=""+F;for(;s.length<2;)s="0"+s;if(c=l+s,-1==U.indexOf(c))break;F++}return c}__updateMapping(l){for(let F=l;F<this.__childItems.length;F++)this.__childItemsMapping[this.__childItems[F].getName()]=F}_childNameChanged(l){const F=this.__childItemsMapping[l.oldName];delete this.__childItemsMapping[l.oldName],this.__childItemsMapping[l.newName]=F}insertChild(l,F,U=!1,c=!0){if(l.getName()in this.__childItemsMapping){if(!c)throw new Error("Item '"+l.getName()+"' is already a child of :"+this.getPath());l.setName(this.generateUniqueName(l.getName()))}if(!(l instanceof K))throw new Error("Object is is not a tree item :"+l.constructor.name);let s;if(l.on("nameChanged",this._childNameChanged),l instanceof PF){if(U){const F=this.getParameter("GlobalXfo").getValue(),U=l.getParameter("GlobalXfo").getValue();s=F.inverse().multiply(U)}l.on("boundingChanged",this._setBoundingBoxDirty),l.on("visibilityChanged",this._setBoundingBoxDirty)}return this.__childItems.splice(F,0,l),this.__childItemsMapping[l.getName()]=F,this.__updateMapping(F),l.setOwner(this),l instanceof PF&&(U&&l.getParameter("LocalXfo").setValue(s),this._setBoundingBoxDirty()),this.emit("childAdded",{childItem:l,index:F}),l}addChild(l,F=!0,U=!0){const c=this.__childItems.length;return this.insertChild(l,c,F,U),l}getChild(l){return this.__childItems[l]}getChildByName(l){const F=this.__childItemsMapping[l];return null!=F?this.__childItems[F]:null}getChildNames(){const l=[];for(let F=0;F<this.__childItems.length;F++){const U=this.__childItems[F];null!=U&&(l[F]=U.getName())}return l}__unbindChild(l,F){F.off("nameChanged",this._childNameChanged),F instanceof PF&&(F.off("boundingChanged",this._setBoundingBoxDirty),F.off("visibilityChanged",this._setBoundingBoxDirty)),this.__childItems.splice(l,1),this.__childItemsEventHandlers.splice(l,1),delete this.__childItemsMapping[F.getName()],this.__updateMapping(l),F instanceof PF&&this._setBoundingBoxDirty(),this.emit("childRemoved",{childItem:F,index:l})}removeChild(l){const F=this.__childItems[l];F&&(this.__unbindChild(l,F),F.setOwner(void 0))}removeChildByName(l){const F=this.__childItemsMapping[l];return null!=F?this.removeChild(F):null}removeChildByHandle(l){console.warn("Deprecated. Use #removeChild");const F=this.__childItems.indexOf(l);if(-1==F)throw new Error("Error in removeChildByHandle. Child not found:"+l.getName());this.removeChild(F)}removeAllChildren(){let l=this.__childItems.length;for(;l--;)this.removeChild(l);this._setBoundingBoxDirty()}getChildIndex(l){return this.__childItems.indexOf(l)}indexOfChild(l){return console.warn("Deprecated Use #getChildIndex"),this.getChildIndex(l)}resolvePath(l,F=0,U=!1){if("string"==typeof l&&(l=l.split("/")),0==F)if("."==l[0]||l[0]==this.__name)F++;else if(".."==l[0])return this.__ownerItem.resolvePath(l,F+1);if(F==l.length)return this;const c=l[F],s=this.getChildByName(c);if(null==s){const U=this.getParameter(l[F]);if(U)return U;throw new Error(`Unable to resolve path : [${l.toString()}] after: ${this.getName()} \nNo child or parameter called : "${l[F]}"`)}return s.resolvePath(l,F+1)}traverse(l,F=!0){const U=(l,F)=>{const U=l.getChildren();for(const l of U)l&&c(l,F+1)},c=(F,c)=>{if(0==l(F,c))return!1;F instanceof PF&&U(F,c)};F?c(this,1):U(this,0)}onMouseDown(l){this.emit("mouseDown",l),l.propagating&&this.__ownerItem&&this.__ownerItem.onMouseDown(l)}onMouseUp(l){this.emit("mouseUp",l),l.propagating&&this.__ownerItem&&this.__ownerItem.onMouseUp(l)}onMouseMove(l){this.emit("mouseMove",l),l.propagating&&this.__ownerItem&&this.__ownerItem.onMouseMove(l)}onMouseEnter(l){this.emit("mouseEnter",l),l.propagating&&this.__ownerItem&&this.__ownerItem.onMouseEnter(l)}onMouseLeave(l){this.emit("mouseLeave",l),l.propagating&&this.__ownerItem&&this.__ownerItem.onMouseLeave(l)}onWheel(l){l.propagating&&this.__ownerItem&&this.__ownerItem.onWheel(l)}toJSON(l){const F=super.toJSON(l),U={};for(const F of this.__childItems)if(F){const c=F.toJSON(l);c&&(U[F.getName()]=c)}return Object.keys(U).length>0&&(F?F.children=U:F={name:this.__name,children:U}),F}fromJSON(l,F){if(super.fromJSON(l,F),F&&!Number.isNaN(F.numTreeItems)&&F.numTreeItems++,null!=l.children){const U=l.children;if(Array.isArray(U))for(const l of U){let U=this.getChildByName(l.name);U?U.fromJSON(l,F):l.type&&(U=e.constructClass(l.type),U&&(U.fromJSON(l,F),this.addChild(U,!1,!1)))}else for(const l in U){const c=U[l];let s=this.getChildByName(l);s?s.fromJSON(c,F):c.type&&(s=e.constructClass(c.type),s&&(s.fromJSON(c,F),this.addChild(s,!1,!1)))}}}readBinary(l,F){super.readBinary(l,F),F.numTreeItems++;const U=l.loadUInt8();if(4&U){const F=new h;F.tr=l.loadFloat32Vec3(),F.ori=l.loadFloat32Quat(),F.sc.set(l.loadFloat32()),this.__localXfoParam.loadValue(F)}8&U&&this.__boundingBoxParam.loadValue(new o(l.loadFloat32Vec3(),l.loadFloat32Vec3()));const c=l.loadUInt32();if(c>0){const U=l.loadUInt32Array(c);for(let s=0;s<c;s++)try{l.seek(U[s]);let c=l.loadStr();if(c.startsWith("N")&&c.endsWith("E")){const l=c.indexOf("podium");-1!=l&&(c=parseInt(c[l+7])?c.substring(l+8,c.length-1):c.substring(l+7,c.length-1));-1!=c.indexOf("livenurbs")&&(c=c.substring(c.indexOf("CAD"),c.length-1))}const B=e.constructClass(c);if(!B){const F=l.loadStr();console.warn("Unable to construct child:"+F+" of type:"+c);continue}l.seek(U[s]),B.readBinary(l,F),this.addChild(B,!1,!1)}catch(l){console.warn("Error loading tree item: ",l)}}}clone(){const l=new PF;return l.copyFrom(this),l}copyFrom(l){super.copyFrom(l),l.getChildren().forEach(l=>{l&&this.addChild(l.clone(),!1,!1)})}destroy(){this.removeAllChildren(),super.destroy()}}e.register("TreeItem",PF);class _F extends PF{constructor(l){super(l)}setSrcTree(l,F){this.__srcTree=l;if(0==this.__srcTree.getNumChildren()){const l=this.__srcTree.clone(F);l.getParameter("LocalXfo").loadValue(new h),this.addChild(l,!1)}else{this.__srcTree.getChildren().forEach(l=>{const U=l.clone(F);this.addChild(U,!1)})}}getSrcTree(){return this.__srcTree}readBinary(l,F={}){super.readBinary(l,F);const U=l.loadStrArray();try{F.resolvePath(U,l=>{this.setSrcTree(l,F)})}catch(l){console.warn(`Error loading InstanceItem: ${this.getPath()}: `+l.message)}}toJSON(l={}){return super.toJSON(l)}fromJSON(l,F={},U){}}e.register("InstanceItem",_F);class jF extends PF{constructor(l){super(l),this.__loaded=!1;const F=this.addParameter(new Wl("FilePath"));let U,c;const s=()=>{U=window.ZeaAudioaudioCtx.createBufferSource(),U.buffer=c,U.loop=Q.getValue(),U.muted=i.getValue(),U.start(0),this.emit("audioSourceCreated",{audioSource:U})};F.on("valueChanged",()=>{const l=new XMLHttpRequest;l.open("GET",F.getURL(),!0),l.responseType="arraybuffer",l.onload=()=>{const F=l.response;window.ZeaAudioaudioCtx.decodeAudioData(F,l=>{c=l,this.__loaded=!0,this.emit("loaded",{}),B.getValue()&&s()},l=>{console.log("Error with decoding audio data"+l.err)})},l.send()});const B=this.addParameter(new el("Autoplay",!1)),d=this.addParameter(new Il("PlayState",0));d.on("valueChanged",l=>{switch(d.getValue()){case 0:this.__loaded&&U&&(U.stop(0),U=void 0);break;case 1:this.__loaded&&s()}}),this.isPlaying=()=>0!=d.getValue(),this.play=()=>{d.setValue(1)},this.stop=()=>{d.setValue(0)},this.pause=()=>{d.setValue(0)},this.getAudioSource=()=>U;const i=this.addParameter(new el("Mute",!1));this.addParameter(new Il("Gain",1)).setRange([0,5]);const Q=this.addParameter(new el("Loop",!1));this.addParameter(new el("SpatializeAudio",!0)),this.addParameter(new Il("refDistance",2)),this.addParameter(new Il("maxDistance",1e4)),this.addParameter(new Il("rolloffFactor",1)),this.addParameter(new Il("coneInnerAngle",360)),this.addParameter(new Il("coneOuterAngle",0)),this.addParameter(new Il("coneOuterGain",1)),i.on("valueChanged",()=>{U&&(U.muted=i.getValue())}),Q.on("valueChanged",()=>{U&&(U.loop=Q.getValue())}),this.mute=l=>{i.setValue(l)},this.loaded=!1}isLoaded(){return this.__loaded}setAudioStream(){this.__loaded=!0,this.emit("loaded",{}),this.emit("audioSourceCreated",{audioSource:audioSource})}}class OF extends jF{constructor(l){}}const qF=(l,F,U,c)=>"boolean"==typeof F||!1===F||!0===F?new tl(l,F,"Boolean"):"string"==typeof F?new tl(l,F,"String"):Q.isNumeric(F)?c?new Hl(l,F,U):new Il(l,F,U):F instanceof a?new Xl(l,F):F instanceof Z?new al(l,F):F instanceof R?c?new rl(l,F):new Zl(l,F):new tl(l,F);class $F extends K{constructor(l,F){super(l),this.visibleInGeomDataBuffer=!0,F&&this.setShaderName(F)}getShaderName(){return this.__shaderName}setShaderName(l){if(this.__shaderName==l)return;const F=e.getBlueprint(l);if(!F)throw new Error("Error setting Shader. Shader not found:"+l);const U=F.getParamDeclarations(),c={};for(const l of U){let F=this.getParameter(l.name);F||(F=this.addParameter(qF(l.name,l.defaultValue,l.range,0!=l.texturable))),c[l.name]=!0}for(const l of this.__params)c[l.getName()]||this.removeParameter(l.getName());this.__shaderName=l,this.emit("shaderNameChanged",{shaderName:l})}removeAllTextures(){for(const l of this.__params)l.getImage&&l.getImage()&&l.setImage(void 0)}getParamTextures(){const l={};for(const F of this.__params)F.getImage&&F.getImage()&&(l[F.getName()]=F.getImage());return l}__makeParameterTexturable(l){makeParameterTexturable(l)}isTransparent(){const l=this.getParameter("Opacity");if(l&&(l.getValue()<.99||l.getImage()))return!0;const F=this.getParameter("BaseColor");return!(!F||!F.getImage()||"RGBA"!=F.getImage().format)}getShaderClass(){return e.getBlueprint(this.getShaderName())}modifyParams(l,F){F&&this.setShaderName(F);for(const F in l){const U=this.getParameter(F);U&&(l[F]instanceof tl?this.replaceParameter(l[F]):U.setValue(l[F]))}}toJSON(l){return super.toJSON(l)}fromJSON(l,F={}){l.shader?(this.setShaderName(l.shader),super.fromJSON(l,F)):console.warn("Invalid Material JSON")}readBinary(l,F){let U=l.loadStr();if("StandardMaterial"==U&&(U="StandardSurfaceShader"),"TransparentMaterial"==U&&(U="TransparentSurfaceShader"),this.setShaderName(U),F.versions["zea-engine"].compare([0,0,3])<0){function c(l){return l.charAt(0).toUpperCase()+l.slice(1)}this.setName(l.loadStr());const U=l.loadUInt32();for(let s=0;s<U;s++){const U=c(l.loadStr());let s;"MaterialColorParam"==l.loadStr()?(s=l.loadRGBAFloat32Color(),s.applyGamma(2.2)):s=l.loadFloat32();const B=l.loadStr();let d=this.getParameter(U);d?d.setValue(s):d=this.addParameter(qF(U,s)),""!=B&&d.setImage&&(F.materialLibrary.hasImage(B)?d.setImage(F.materialLibrary.getImage(B)):console.warn("Missing Texture:"+B))}}else super.readBinary(l,F)}clone(){const l=new $F;return l.copyFrom(this),l}copyFrom(l){super.copyFrom(l),this.setShaderName(l.getShaderName());for(const F of l.getParameters()){const U=l.getParameter(F.getName());F.getImage||this.__makeParameterTexturable(U)}}destroy(){this.removeAllTextures(),super.destroy()}}class lU extends PF{constructor(l){super(l),this.overlay=!1,this.__cutAway=!1,this.__cutAwayVector=!1,this.__cutAwayDist=!1,this.__layers=[]}setOverlay(l){this.overlay=l}isOverlay(){return this.overlay}addLayer(l){this.__layers.push(l)}getLayers(){return this.__layers}isCutawayEnabled(){return this.__cutAway}setCutawayEnabled(l){this.__cutAway=l,this.emit("cutAwayChanged",{})}getCutVector(){return this.__cutAwayVector}setCutVector(l){this.__cutAwayVector=l,this.emit("cutAwayChanged",{})}getCutDist(){return this.__cutAwayDist}setCutDist(l){this.__cutAwayDist=l,this.emit("cutAwayChanged",{})}readBinary(l,F){if(super.readBinary(l,F),F.versions["zea-engine"].greaterOrEqualThan([0,0,4])){const U=l.loadStr();let c=F.assetItem.getMaterialLibrary().getMaterial(U,!1);if(c||(c=new $F(U,"SimpleSurfaceShader"),c.getParameter("BaseColor").loadValue(R.random(.25)),F.assetItem.getMaterialLibrary().addMaterial(c)),this.getParameter("Material").loadValue(c),this.__layers=l.loadStrArray(),this.__layers.length>0)for(const l of this.__layers)F.addGeomToLayer(this,l)}}}class FU extends vF{constructor(l,F,U){super("CalcGeomMatOperator"),this.addInput(new zF("GlobalXfo")).setParam(l),this.addInput(new zF("GeomOffsetXfo")).setParam(F),this.addOutput(new kF("GeomMat")).setParam(U)}evaluate(){const l=this.getInput("GlobalXfo").getValue(),F=this.getInput("GeomOffsetXfo").getValue(),U=this.getOutput("GeomMat"),c=l.toMat4(),s=F.toMat4();U.setClean(c.multiply(s))}}class UU extends lU{constructor(l,F,U){super(l),this.__geomParam=this.addParameter(new ol("Geometry")),this._setBoundingBoxDirty=this._setBoundingBoxDirty.bind(this),this.__geomParam.on("valueChanged",this._setBoundingBoxDirty),this.__geomParam.on("boundingBoxChanged",this._setBoundingBoxDirty),this.__materialParam=this.addParameter(new Jl("Material")),this.__paramMapping.material=this.getParameterIndex(this.__materialParam),this.__geomOffsetXfoParam=this.addParameter(new Rl("GeomOffsetXfo")),this.__geomMatParam=this.addParameter(new Gl("GeomMat")),this.calcGeomMatOperator=new FU(this.__globalXfoParam,this.__geomOffsetXfoParam,this.__geomMatParam),F&&this.getParameter("Geometry").loadValue(F),U&&this.getParameter("Material").loadValue(U)}getGeometry(){return console.warn("deprecated. please use 'getParameter('Geometry').getValue"),this.__geomParam.getValue()}setGeometry(l){console.warn("deprecated. please use 'getParameter('Geometry').setValue"),this.__geomParam.setValue(l)}getGeom(){return console.warn("deprecated. please use 'getParameter('Geometry').getValue"),this.__geomParam.getValue()}setGeom(l){return console.warn("setGeom is deprecated. Please use 'getParameter('Geometry').setValue'"),this.__geomParam.setValue(l)}getMaterial(){return console.warn("deprecated. please use 'getParameter('Material').getValue"),this.__materialParam.getValue()}setMaterial(l){console.warn("deprecated. please use 'getParameter('Material').setValue"),this.__materialParam.setValue(l)}_cleanBoundingBox(l){l=super._cleanBoundingBox(l);const F=this.__geomParam.getValue();return F&&l.addBox3(F.getBoundingBox(),this.getGeomMat4()),l}getGeomOffsetXfo(){return this.__geomOffsetXfoParam.getValue()}setGeomOffsetXfo(l){this.__geomOffsetXfoParam.setValue(l)}getGeomMat4(){return this.__geomMatParam.getValue()}toJSON(l){return super.toJSON(l)}fromJSON(l,F){super.fromJSON(l,F),F.numGeomItems++}readBinary(l,F){super.readBinary(l,F),F.numGeomItems++;const U=l.loadUInt8(),c=l.loadUInt32(),s=F.assetItem.getGeometryLibrary(),B=s.getGeom(c);if(B)this.getParameter("Geometry").loadValue(B);else{this.geomIndex=c;const l=F=>{const{range:U}=F;if(c>=U[0]&&c<U[1]){const F=s.getGeom(c);F?this.getParameter("Geometry").setValue(F):console.warn("Geom not loaded:",this.getName()),s.off("rangeLoaded",l)}};s.on("rangeLoaded",l)}if(4&U&&this.__geomOffsetXfoParam.setValue(new h(l.loadFloat32Vec3(),l.loadFloat32Quat(),l.loadFloat32Vec3())),F.versions["zea-engine"].compare([0,0,4])<0){if(U&8){const U=F.assetItem.getMaterialLibrary(),c=l.loadStr();let s=U.getMaterial(c);s||(console.warn("Geom :'"+this.name+"' Material not found:"+c),s=U.getMaterial("Default")),this.getParameter("Material").loadValue(s)}else this.getParameter("Material").loadValue(F.assetItem.getMaterialLibrary().getMaterial("Default"))}l.loadFloat32Vec2()}toString(){return JSON.stringify(this.toJSON(),null,2)}clone(l){const F=new UU;return F.copyFrom(this,l),F}copyFrom(l,F){if(super.copyFrom(l,F),!l.getParameter("Geometry").getValue()&&-1!=l.geomIndex){const U=F.assetItem.getGeometryLibrary(),c=l.geomIndex,s=l=>{const{range:F}=l;if(c>=F[0]&&c<F[1]){const l=U.getGeom(c);l?this.getParameter("Geometry").loadValue(l):console.warn("Geom not loaded:",this.getName()),U.off("rangeLoaded",s)}};U.on("rangeLoaded",s)}this.__geomMatParam.setDirty(this.__cleanGeomMat)}destroy(){super.destroy()}}e.register("GeomItem",UU);class cU extends vF{constructor(l,F){super(),this.addInput(new zF("GroupGlobalXfo")).setParam(l),this.addOutput(new kF("GroupTransformXfo")).setParam(F)}setBindXfo(l){this.bindXfo=l,this.invBindXfo=l.inverse(),this.setDirty()}evaluate(){const l=this.getOutput("GroupTransformXfo");if(this.invBindXfo){const F=this.getInput("GroupGlobalXfo").getValue();l.setClean(F.multiply(this.invBindXfo))}else l.setClean(new h)}}class sU extends vF{constructor(l,F){super(),this.addInput(new zF("GroupTransformXfo")).setParam(l),this.addOutput(new kF("MemberGlobalXfo",Ql.OP_READ_WRITE)).setParam(F),this._enabled=!0}disable(){this._enabled=!1,this.setDirty()}enable(){this._enabled=!0,this.setDirty()}evaluate(){const l=this.getOutput("MemberGlobalXfo"),F=l.getValue();if(this._enabled){const U=this.getInput("GroupTransformXfo").getParam().getValue();l.setClean(U.multiply(F))}else l.setClean(F)}}const BU={disabled:0,manual:1,first:2,average:3,globalOri:4};class dU extends PF{constructor(l){super(l),this.groupXfoDirty=!1,this.calculatingGroupXfo=!1,this.dirty=!1,this.searchRoot=null,this._bindXfoDirty=!1,this.memberXfoOps=[],this.__itemsParam=this.addParameter(new ul("Items",l=>l instanceof PF)),this.__itemsParam.on("itemAdded",l=>{this.__bindItem(l.item,l.index)}),this.__itemsParam.on("itemRemoved",l=>{this.__unbindItem(l.item,l.index)}),this.__initialXfoModeParam=this.addParameter(new Vl("InitialXfoMode",BU.average,["manual","first","average","global"])),this.__initialXfoModeParam.on("valueChanged",()=>{this.calcGroupXfo()}),this.__highlightedParam=this.addParameter(new el("Highlighted",!1)),this.__highlightedParam.on("valueChanged",()=>{this.__updateHighlight()}),this.__updateHighlight=this.__updateHighlight.bind(this);this.addParameter(new Zl("HighlightColor",new R(.5,.5,1))).on("valueChanged",this.__updateHighlight);this.addParameter(new Il("HighlightFill",0,[0,1])).on("valueChanged",this.__updateHighlight),this.__materialParam=this.addParameter(new Jl("Material")),this.__materialParam.on("valueChanged",()=>{this.__updateMaterial()}),this.__updateCutaway=this.__updateCutaway.bind(this),this.addParameter(new el("CutAwayEnabled",!1)).on("valueChanged",this.__updateCutaway),this.addParameter(new al("CutPlaneNormal",new Z(1,0,0))).on("valueChanged",this.__updateCutaway),this.addParameter(new Il("CutPlaneDist",0)).on("valueChanged",this.__updateCutaway);const F=this.addParameter(new Rl("GroupTransform",new h));this.groupTransformOp=new cU(this.getParameter("GlobalXfo"),F)}static get INITIAL_XFO_MODES(){return BU}__updateVisibility(){if(super.__updateVisibility()){const l=this.isVisible();return Array.from(this.__itemsParam.getValue()).forEach(F=>{F instanceof PF&&F.propagateVisibility(l?1:-1)}),!0}return!1}__updateHighlight(){new Promise(l=>{let F,U=!1;(this.getParameter("Highlighted").getValue()||this.isSelected())&&(U=!0,F=this.getParameter("HighlightColor").getValue(),F.a=this.getParameter("HighlightFill").getValue());const c="groupItemHighlight"+this.getId();Array.from(this.__itemsParam.getValue()).forEach(l=>{l instanceof PF&&(U?l.addHighlight(c,F,!0):l.removeHighlight(c,!0))}),l()})}setSelected(l){super.setSelected(l),this.__updateHighlight()}calcGroupXfo(){const l=Array.from(this.__itemsParam.getValue());if(0==l.length)return new h;this.calculatingGroupXfo=!0,this.memberXfoOps.forEach(l=>l.disable());const F=this.__initialXfoModeParam.getValue();let U;if(F==BU.manual)U=this.getParameter("GlobalXfo").getValue();else if(F==BU.first)l[0]instanceof PF&&(U=l[0].getParameter("GlobalXfo").getValue());else if(F==BU.average){U=new h,U.ori.set(0,0,0,0);let F=0;l.forEach((l,c)=>{if(l instanceof PF){const c=l.getParameter("GlobalXfo").getValue();U.tr.addInPlace(c.tr),U.ori.addInPlace(c.ori),F++}}),U.tr.scaleInPlace(1/F),U.ori.normalizeInPlace()}else{if(F!=BU.globalOri)throw new Error("Invalid GROUP_XFO_MODES.");{U=new h;let F=0;l.forEach((l,c)=>{if(l instanceof PF){const c=l.getParameter("GlobalXfo").getValue();U.tr.addInPlace(c.tr),F++}}),U.tr.scaleInPlace(1/F)}}this.getParameter("GlobalXfo").setValue(U),this.groupTransformOp.setBindXfo(U),this.memberXfoOps.forEach(l=>l.enable()),this.calculatingGroupXfo=!1,this.groupXfoDirty=!1}__updateMaterial(){new Promise(l=>{const F=this.getParameter("Material").getValue();Array.from(this.__itemsParam.getValue()).forEach(l=>{l.traverse(l=>{if(l instanceof PF&&l.hasParameter("Material")){const U=l.getParameter("Material");if(F){const l=U.getValue();l!=F&&(U.__backupMaterial=l,U.loadValue(F))}else U.__backupMaterial&&U.loadValue(U.__backupMaterial)}},!1)}),l()})}__updateCutaway(){new Promise(l=>{const F=this.getParameter("CutAwayEnabled").getValue(),U=this.getParameter("CutPlaneNormal").getValue(),c=this.getParameter("CutPlaneDist").getValue();Array.from(this.__itemsParam.getValue()).forEach(l=>{l.traverse(l=>{l instanceof lU&&(l.setCutawayEnabled(F),l.setCutVector(U),l.setCutDist(c))},!0)}),l()})}setSearchRoot(l){this.searchRoot=l}setOwner(l){this.searchRoot&&this.searchRoot!=this.getOwner()||(this.searchRoot=l),super.setOwner(l)}setPaths(l){this.clearItems(!1);this.getOwner();if(null==this.searchRoot)return void console.warn("Group does not have an owner and so cannot resolve paths:",this.getName());const F=[];l.forEach(l=>{const U=this.searchRoot.resolvePath(l);U?F.push(U):console.warn("Path does not resolve to an Item:",l," group:",this.getName())}),this.setItems(F)}resolveItems(l){this.setPaths(l)}__bindItem(l,F){if(!(l instanceof PF))return;l.on("mouseDown",this.onMouseDown),l.on("mouseUp",this.onMouseUp),l.on("mouseMove",this.onMouseMove),l.on("mouseEnter",this.onMouseEnter),l.on("mouseLeave",this.onMouseLeave);const U=this.getParameter("Material").getValue();if(U&&l.traverse(l=>{if(l instanceof PF&&l.hasParameter("Material")){const F=l.getParameter("Material");if(U){const l=F.getValue();l!=U&&(F.__backupMaterial=l,F.loadValue(U))}}},!0),l instanceof PF&&this.getParameter("Highlighted").getValue()){const F=this.getParameter("HighlightColor").getValue();F.a=this.getParameter("HighlightFill").getValue(),l.addHighlight("groupItemHighlight"+this.getId(),F,!0)}const c=this.getParameter("CutAwayEnabled").getValue();if(c){const F=this.getParameter("CutPlaneNormal").getValue(),U=this.getParameter("CutPlaneDist").getValue();l.traverse(l=>{l instanceof lU&&(l.setCutawayEnabled(c),l.setCutVector(F),l.setCutDist(U))},!0)}if(this.isVisible()||l.propagateVisibility(-1),l instanceof PF){const U=l.getParameter("GlobalXfo"),c=new sU(this.getParameter("GroupTransform"),U);this.memberXfoOps.splice(F,0,c),l.getParameter("BoundingBox").on("valueChanged",this._setBoundingBoxDirty),this._bindXfoDirty=!0}l.on("boundingChanged",this._setBoundingBoxDirty)}__unbindItem(l,F){l instanceof PF&&(l.removeHighlight("branchselected"+this.getId(),!0),this.getParameter("Highlighted").getValue()&&l.removeHighlight("groupItemHighlight"+this.getId(),!0),this.isVisible()||l.propagateVisibility(1),l.traverse(l=>{l instanceof lU&&l.setCutawayEnabled(!1)},!0),l.off("mouseDown",this.onMouseDown),l.off("mouseUp",this.onMouseUp),l.off("mouseMove",this.onMouseMove),l.off("mouseEnter",this.onMouseEnter),l.off("mouseLeave",this.onMouseLeave),l instanceof PF&&(this.memberXfoOps[F].detach(),this.memberXfoOps.splice(F,1),this._setBoundingBoxDirty(),this._bindXfoDirty=!0),l.off("boundingChanged",this._setBoundingBoxDirty))}addItem(l,F=!0){l?(this.__itemsParam.addItem(l,F),F&&this.calcGroupXfo()):console.warn("Error adding item to group. Item is null")}removeItem(l,F=!0){this.__itemsParam.removeItem(l,F),F&&this.calcGroupXfo()}clearItems(l=!0){const F=Array.from(this.__itemsParam.getValue());for(let l=F.length-1;l>=0;l--)this.__unbindItem(F[l],l);this.memberXfoOps=[],this.__itemsParam.clearItems(l),l&&this.calcGroupXfo()}getItems(){return this.__itemsParam.getValue()}setItems(l){this.clearItems(!1),this.__itemsParam.setItems(l),this.calcGroupXfo()}_cleanBoundingBox(l){const F=super._cleanBoundingBox(l);return Array.from(this.__itemsParam.getValue()).forEach(l=>{l instanceof PF&&l.isVisible()&&F.addBox3(l.getParameter("BoundingBox").getValue())}),F}onMouseDown(l){super.onMouseDown(l)}onMouseUp(l){super.onMouseUp(l)}onMouseMove(l){super.onMouseMove(l)}toJSON(l){const F=super.toJSON(l),U=Array.from(this.__itemsParam.getValue()),c=[];return U.forEach(F=>{const U=F.getPath();c.push(l?l.makeRelative(U):U)}),F.treeItems=c,F}fromJSON(l,F){if(super.fromJSON(l,F),!l.treeItems)return void console.warn("Invalid Parameter JSON");if(!F)throw new Error("Unable to load JSON on a Group without a load context");let U=l.treeItems.length;const c=l=>{F.resolvePath(l,l=>{this.addItem(l),U--,0==U&&(this.calculatingGroupXfo=!0,this.calcGroupXfo(),this.calculatingGroupXfo=!1)},F=>{console.warn("Group: '"+this.getName()+"'. Unable to load item:"+l)})};for(const F of l.treeItems)c(F)}clone(){const l=new dU;return l.copyFrom(this),l}copyFrom(l){super.copyFrom(l)}}e.register("Group",dU);var iU=cl("","data:application/json;charset=utf-8;base64,",!1);class QU extends H{constructor(){super(),this.__streamInfos={},this.__genBuffersOpts={},this.__workers=[],this.__nextWorker=0;for(let l=0;l<3;l++)this.__workers.push(this.__constructWorker());this.clear()}clear(){this.__loaded=0,this.__numGeoms=0,this.geoms=[]}__constructWorker(){const l=new iU;return l.onmessage=l=>{this.__recieveGeomDatas(l.data.key,l.data.geomDatas,l.data.geomIndexOffset,l.data.geomsRange)},l}__terminateWorkers(){for(const l of this.__workers)l.terminate();this.__workers=[]}setGenBufferOption(l,F){this.__genBuffersOpts[l]=F}setNumGeoms(l){this.__numGeoms=l}getGeom(l){return l>=this.geoms.length?null:this.geoms[l]}loadUrl(l){O(l,l=>{this.loadBin(l)},l=>{console.warn(l)})}readBinaryBuffer(F,U,c){const s=l.isMobileDevice,B=new k(U,0,s),d=B.loadUInt32(),i=B.loadUInt32();if(this.__streamInfos[F]={total:d,done:0},0==d)return this.emit("streamFileParsed",{}),d;0==this.__numGeoms&&(this.__numGeoms=d);const Q=B.loadUInt32Array(d);let t=window.navigator.hardwareConcurrency;t||(t=s?2:4);const I=Math.max(1,Math.floor(d/t+1));let V=0;for(;V<d;){const l=Q[V];let s,t;V+I>=d?(t=[V,d],s=U.byteLength):(t=[V,V+I],s=Q[t[1]]);const e=U.slice(l,s);V+=I,this.__workers[this.__nextWorker].postMessage({key:F,toc:Q,geomIndexOffset:i,geomsRange:t,isMobileDevice:B.isMobileDevice,bufferSlice:e,genBuffersOpts:this.__genBuffersOpts,context:{versions:c.versions}},[e]),this.__nextWorker=(this.__nextWorker+1)%this.__workers.length}return d}__recieveGeomDatas(l,F,U,c){const s=U+c[0],B=[s,U+c[1]];for(let l=0;l<F.length;l++){const U=F[l];if(!U.type)continue;let c;switch(U.type){case"Points":c=new kl(U);break;case"Lines":c=new vl(U);break;case"Mesh":case"Plane":case"Sphere":case"Cone":c=new Kl(U);break;default:throw new Error("Unsupported Geom type:"+className)}this.geoms[s+l]=c}this.emit("rangeLoaded",{range:B});const d=B[1]-B[0],i=this.__streamInfos[l];i.done+=d,i.done==i.total&&this.emit("streamFileParsed",{count:1}),this.__loaded+=d,this.__loaded==this.__numGeoms&&(this.__terminateWorkers(),this.emit("loaded"))}toJSON(){return{numGeoms:this.geoms.length()}}toString(){return JSON.stringify(this.toJSON(),null,2)}}class tU extends H{constructor(F="MaterialLibrary"){super(),this.__name=F,this.lod=0,l.isMobileDevice&&(this.lod=1),this.clear()}clear(){this.__images={},this.__materials={Default:new $F("Default","SimpleSurfaceShader")}}getPath(){return[this.__name]}getNumMaterials(){return Object.keys(this.__materials).length}getMaterials(){return Object.values(this.__materials)}getMaterialNames(){const l=[];for(const F in this.__materials)l.push(F);return l}hasMaterial(l){return l in this.__materials}addMaterial(l){l.setOwner(this),this.__materials[l.getName()]=l}getMaterial(l,F=!0){const U=this.__materials[l];if(!U&&F)throw new Error("Material:"+l+" not found in library:"+this.getMaterialNames());return U}hasImage(l){return l in this.__images}addImage(l){l.setOwner(this),this.__images[l.getName()]=l}getImage(l,F=!0){const U=this.__images[l];if(!U&&F)throw new Error("Image:"+l+" not found in library:"+this.getImageNames());return U}getImageNames(){const l=[];for(const F in this.__images)l.push(F);return l}load(l){const F=new XMLHttpRequest;F.open("GET",l,!0),F.ontimeout=()=>{throw new Error("The request for "+l+" timed out.")},F.onload=()=>{4===F.readyState&&(200===F.status?this.fromJSON(JSON.parse(F.responseText)):console.warn(F.statusText))},F.send(null)}toJSON(l={}){return{numMaterials:this.geoms.length()}}fromJSON(l,F={}){F.lod=this.lod;for(const F in l.textures){new mF(F).fromJSON(l.textures[F]),this.__images[F]=texture}for(const F in l.materials){const U=new $F(F);U.fromJSON(l.materials[F]),this.addMaterial(U)}}readBinary(l,F={}){this.name=l.loadStr(),F.lod=this.lod,F.materialLibrary=this;const U=l.loadUInt32();for(let c=0;c<U;c++){const U=l.loadStr(),c=e.constructClass(U,void 0);c.readBinary(l,F),this.__images[c.getName()]=c}const c=l.loadUInt32();if(c>0){const U=l.loadUInt32Array(c);for(let s=0;s<c;s++){const c=new $F("");l.seek(U[s]),c.readBinary(l,F,this.__images),this.addMaterial(c)}}this.emit("loaded",{})}toString(){return JSON.stringify(this.toJSON(),null,2)}}class IU extends PF{constructor(l){super(l),this.__geomLibrary=new QU,this.__materials=new tU,this.loaded=!1}isLoaded(){return this.loaded}getEngineDataVersion(){return this.__engineDataVersion}getGeometryLibrary(){return this.__geomLibrary}getMaterialLibrary(){return this.__materials}getUnitsConversion(){return this.__unitsScale}readBinary(l,F={}){let U;F.assetItem=this,F.numTreeItems=0,F.numGeomItems=0,F.versions["zea-engine"]||(F.versions["zea-engine"]=new dl(l.loadStr())),this.__engineDataVersion=F.versions["zea-engine"],console.log("Loading Engine File version:",F.versions["zea-engine"]);const c={};F.addGeomToLayer=(l,F)=>{if(!c[F]){U||(U=new PF("Layers"),this.addChild(U,!1));const l=new dU(F);l.propagateXfoToItems=!1,U.addChild(l,!1),c[F]=l}c[F].addItem(l)};const s=()=>{this.__units=l.loadStr();let F=1;switch(this.__units){case"Millimeters":F=.001;break;case"Centimeters":F=.01;break;case"Meters":F=1;break;case"Kilometers":F=1e3;break;case"Inches":F=.0254;break;case"Feet":F=.3048;break;case"Miles":F=1609.34}this.__unitsScale=F;const U=this.getParameter("LocalXfo"),c=U.getValue();c.sc.scaleInPlace(F),U.setValue(c)};F.versions["zea-engine"].greaterThan([0,0,6])&&s(),this.__materials.readBinary(l,F),super.readBinary(l,F),F.versions["zea-engine"].greaterOrEqualThan([0,0,5])&&F.versions["zea-engine"].lessThan([0,0,7])&&s()}toJSON(l={}){l.makeRelative=l=>{const F=this.getPath(),U=l.slice(0,F.length);for(let c=0;c<U.length-1;c++)if(U[c]!=F[c])return console.warn("Param Path is not relative to the asset. May not be able to be resolved at load time:"+l),l;const c=l.slice(F.length-1);return c[0]=".",c},l.assetItem=this;return super.toJSON(l)}fromJSON(l,F={},U){F||(F={}),F.assetItem=this,F.numTreeItems=0,F.numGeomItems=0,null==F.version&&(F.version=0),F.assetItem=this;const c=[];F.resolvePath=(l,F)=>{if(!l)throw new Error("Path not spcecified");const U=this.resolvePath(l);U?F(U):c.push(()=>{const U=this.resolvePath(l);U?F(U):console.warn("Path unable to be resolved:"+l)})},F.addPLCB=l=>c.push(l),super.fromJSON(l,F);for(const l of c)l();U&&U()}}e.register("AssetItem",IU);class VU extends PF{constructor(l,F){super(l);const U=this.addParameter(new yl("Image"));F&&U.setValue(F),this.addParameter(new Il("PixelsPerMeter",1e3)),this.addParameter(new Il("Alpha",1)),this.addParameter(new Zl("Color",new R(1,1,1))),this.addParameter(new el("AlignedToCamera",!1)),this.addParameter(new el("DrawOnTop",!1))}}e.register("BillboardItem",VU);class eU extends PF{constructor(l){null==l&&(l="Camera"),super(l),this.__isOrthographicParam=this.addParameter(new el("isOrthographic",!1)),this.__fovParam=this.addParameter(new Il("fov",1)),this.__nearParam=this.addParameter(new Il("near",.1)),this.__farParam=this.addParameter(new Il("far",1e3)),this.__focalDistanceParam=this.addParameter(new Il("focalDistance",5));const F=l=>{this.emit("projectionParamChanged",l)};this.__isOrthographicParam.on("valueChanged",F),this.__fovParam.on("valueChanged",F),this.__nearParam.on("valueChanged",F),this.__farParam.on("valueChanged",F),this.setPositionAndTarget(new Z(3,3,1.75),new Z(0,0,1)),this.setLensFocalLength("28mm")}getNear(){return this.__nearParam.getValue()}setNear(l){this.__nearParam.setValue(l)}getFar(){return this.__farParam.getValue()}setFar(l){this.__farParam.setValue(l)}getFov(){return this.__fovParam.getValue()}setFov(l){this.__fovParam.setValue(l)}setLensFocalLength(l){const F={"10mm":100.4,"11mm":95,"12mm":90,"14mm":81.2,"15mm":77.3,"17mm":70.4,"18mm":67.4,"19mm":64.6,"20mm":61.9,"24mm":53.1,"28mm":46.4,"30mm":43.6,"35mm":37.8,"45mm":29.9,"50mm":27,"55mm":24.6,"60mm":22.6,"70mm":19.5,"75mm":18.2,"80mm":17.1,"85mm":16.1,"90mm":15.2,"100mm":13.7,"105mm":13,"120mm":11.4,"125mm":11,"135mm":10.2,"150mm":9.1,"170mm":8.1,"180mm":7.6,"210mm":6.5,"300mm":4.6,"400mm":3.4,"500mm":2.7,"600mm":2.3,"800mm":1.7};!l in F?console.warn("Camera lense focal length not suported:"+l):this.__fovParam.setValue(Q.degToRad(F[l]))}getFocalDistance(){return this.__focalDistanceParam.getValue()}setFocalDistance(l){l<1e-4&&console.error("Never set focal distance to zero"),this.__focalDistanceParam.setValue(l),this.__nearParam.setValue(.01*l),this.__farParam.setValue(200*l)}getIsOrthographic(){return this.__isOrthographicParam.getValue()}setIsOrthographic(l){this.__isOrthographicParam.setValue(l)}setPositionAndTarget(l,F){this.setFocalDistance(l.distanceTo(F));const U=new h;U.setLookAt(l,F,new Z(0,0,1)),this.getParameter("GlobalXfo").setValue(U)}getTargetPostion(){const l=this.__focalDistanceParam.getValue(),F=this.getParameter("GlobalXfo").getValue(),U=F.ori.getZaxis();return U.scaleInPlace(-l),U.addInPlace(F.tr),U}frameView(l,F){const U=new o;for(const l of F)U.addBox3(l.getParameter("BoundingBox").getValue());if(!U.isValid())return void console.warn("Bounding box not valid.");const c=this.__focalDistanceParam.getValue(),s=this.__fovParam.getValue(),B=this.getParameter("GlobalXfo").getValue().clone(),d=B.ori.getZaxis(),i=d.scale(-c),Q=B.tr.add(i),t=U.center().subtract(Q);B.tr.addInPlace(t);const I=new o;I.addBox3(U,B.inverse());I.center();const V=s*(l.getWidth()/l.getHeight()),e=I.p1,X=Math.abs(e.x)/Math.tan(.5*V)*1.2,g=Math.abs(e.y)/Math.tan(.5*s)*1.2,a=-.5*(I.p0.z-I.p1.z),b=Math.max(X,g)+a,Z=b-c;B.tr.addInPlace(d.scale(Z)),this.setFocalDistance(b),this.getParameter("GlobalXfo").setValue(B),this.emit("movementFinished")}updateProjectionMatrix(l,F){this.__isOrthographicParam.getValue();const U=this.__fovParam.getValue(),c=this.__nearParam.getValue(),s=this.__farParam.getValue();l.setPerspectiveMatrix(U,F,c,s)}}e.register("Camera",eU);class XU{constructor(l){let F;if(this.__resources={},this.__resourcesTreeEntities={},this.__resourcesTree={children:{}},this.__resourceRegisterCallbacks={},globalThis.navigator){const l=document.getElementsByTagName("script");for(let U=0;U<l.length;U++){const c=l[U];if(c.src.includes("zea-engine")){const l=c.src.split("/");l.pop(),l.pop(),F=l.join("/");break}}F||(F="https://unpkg.com/@zeainc/zea-engine@0.1.3"),this.addResourceURL("ZeaEngine/Vive.vla",F+"/public-resources/Vive.vla"),this.addResourceURL("ZeaEngine/Oculus.vla",F+"/public-resources/Oculus.vla")}F||(F="https://unpkg.com/@zeainc/zea-engine@0.1.3"),this.addResourceURL("ZeaEngine/Vive.vla",F+"/public-resources/Vive.vla"),this.addResourceURL("ZeaEngine/Oculus.vla",F+"/public-resources/Oculus.vla"),l&&this.setResources(l)}getRootFolder(){return this.__resourcesTree}registerResourceCallback(l,F){this.__resourceRegisterCallbacks[l]=F;for(const U in this.__resources){const c=this.__resources[U];c.name.includes(l)&&F(c)}}__applyCallbacks(l){const F=l=>{for(const F in this.__resourceRegisterCallbacks)l.name.includes(F)&&this.__resourceRegisterCallbacks[F](l)};for(const U in l){const c=l[U];c.url&&F(c)}}__buildTree(l){const F=U=>{if(this.__resourcesTreeEntities[U])return;const c=l[U];c.id=U,"folder"!==c.type&&"dependency"!==c.type||(c.children={}),c.parent&&(this.__resourcesTreeEntities[c.parent]||F(c.parent));(c.parent?this.__resourcesTreeEntities[c.parent]:this.__resourcesTree).children[c.name]=c,this.__resourcesTreeEntities[U]=c};for(const U in l)F(U)}setResources(l){this.__resources=Object.assign(this.__resources,l),this.__buildTree(l),this.__applyCallbacks(l)}addResourceURL(l,F){const U=l.split("/"),c=U.pop();if(!F){let c=window.location.href.split("#")[0];c=c.split("?")[0],(c.endsWith(".html")||c.endsWith(".html"))&&(c=c.substring(0,c.lastIndexOf("/"))+"/");const s=c;if("."==U[0])U.shift();else if(".."==U[0]){item=item.substring(3);const l=s.split("/");l.pop(),l.pop(),s=l.join("/")+"/"}F=s+l}let s;const B={};for(const l of U){const F=X.hashStr(l);F in this.__resources||(this.__resources[F]={name:l,type:"folder",parent:s},B[F]=this.__resources[F]),s=F}const d=X.hashStr(c),i={name:c,url:F,parent:s,id:d};this.__resources[d]=i,B[d]=i,this.__buildTree(B),this.__applyCallbacks(B)}updateFile(l){const F=!(l.id in this.__resources);if(this.__resources[l.id]=l,F){console.log("New file added");const F={};F[l.id]=l,this.__buildTree(F)}this.emit("fileUpdated",{fileId:l.id})}getFilepath(l){let F=this.__resources[l];const U=[F.name];for(;F.parent;)F=this.__resources[F.parent],U.splice(0,0,F.name);return U.join("/")}resourceAvailable(l){return l.indexOf(".")>0?(console.warn("Deprecation warning for resourceAvailable. Value should be a file id, not a path."),null!=this.resolveFilepath(l)):l in this.__resources}getFile(l){return this.__resources[l]}resolveFileId(l){const F=l.split("/");"."!=F[0]&&""!=F[0]||F.shift();let U=this.__resourcesTree;for(const c of F){if(!(c in U.children))throw new Error("Unable to resolve key:"+c+" of path:"+l);U=U.children[c]}return U.id}resolveFilename(l){return this.__resources[l].name}resolveURL(l){return this.__resources[l].url}traverse(l){const F=l=>{for(const F in l.children)U(l.children[F])},U=U=>{if(0==l(U))return!1;U.children&&F(U)};F(this.__resourcesTree)}}class gU extends K{constructor(l){super(l),this.addParameter(new Zl("BackgroundColor",new R("#808080"))),this.addParameter(new yl("EnvMap")),this.addParameter(new el("Display EnvMap",!1)),this.addParameter(new Il("EnvMapLOD",0))}}class aU extends IU{constructor(l){super(l),this.loaded=!1,this.geomsLoaded=!1,this.loaded=!1,this.__geomLibrary.on("loaded",()=>{this.emit("geomsLoaded",{})}),this.__datafileParam=this.addParameter(new Wl("DataFilePath")),this.__datafileParam.on("valueChanged",()=>{this.geomsLoaded=!1,this.loadDataFile(()=>{this.loaded||this.emit("loaded",{})},()=>{})})}readBinary(l,F){if(F.versions["zea-engine"]);else{const U=l.loadUInt8();if(l.seek(0),U>7){const U=new dl;U.patch=l.loadUInt32(),F.versions["zea-engine"]=U}else F.versions["zea-engine"]=new dl(l.loadStr())}F.meshSdk="FBX",this.meshfileversion=F.versions["zea-mesh"],this.meshSdk=F.meshSdk,console.log("Loading CAD File version:",F.versions["zea-mesh"]," exported using SDK:",F.meshSdk);const U=l.loadUInt32();return super.readBinary(l,F),F.versions["zea-engine"].compare([0,0,5])<0&&l.seek(l.byteLength-4),this.__geomLibrary.setNumGeoms(l.loadUInt32()),U}loadDataFile(F,U){const c=this.__datafileParam.getValue(),s=this.__datafileParam.getUrl(),B=s.lastIndexOf("/")>-1?s.substring(0,s.lastIndexOf("/"))+"/":"",d=s.lastIndexOf("/")>-1?s.substring(s.lastIndexOf("/")+1):"",i=d.substring(0,d.lastIndexOf("."));let Q=0;const t={assetItem:this,versions:{}},I=()=>{const l=[];for(let F=0;F<Q;F++){const U=B+i+F+".vlageoms";l.push(V(F,U))}Promise.all(l).then(()=>{U&&U()})},V=(l,F)=>new Promise(U=>{Bl.loadUrl(c+l,F,l=>{const F=l[Object.keys(l)[0]];this.__geomLibrary.readBinaryBuffer(c,F.buffer,t),U()},!1)});Bl.loadUrl(c,s,s=>{let B;if(s.tree2)B=new k(s.tree2.buffer,0,l.isMobileDevice);else{const F=s.tree?s.tree:s[Object.keys(s)[0]];B=new k(F.buffer,0,l.isMobileDevice),t.versions["zea-engine"]=new dl}Q=this.readBinary(B,t),F(),0==Q&&s.geoms0?(Bl.addWork(c,1),this.__geomLibrary.readBinaryBuffer(c,s.geoms0.buffer,t),U()):(Bl.addWork(c,4*Q),I())}),this.__geomLibrary.on("streamFileParsed",l=>{Bl.addWorkDone(c,l.fraction)})}fromJSON(l,F,U){F||(F={}),F.assetItem=this;const c=()=>{super.fromJSON(l,F,U),U&&U()};if(l.params&&l.params.DataFilePath){this.__datafileLoaded=c;const U=l.params.DataFilePath;delete l.params.DataFilePath,this.__datafileParam.fromJSON(U,F)}else c()}}e.register("VLAAsset",aU);class bU extends PF{constructor(l=5,F=50,U=new R("#DCDCDC")){super("GridTree");const c=new $F("gridMaterial","LinesShader");c.getParameter("BaseColor").setValue(U);const s=new jl(l,l,F,F,!0);this.addChild(new UU("GridItem",s,c),!1);const B=new Al;B.setNumVertices(2),B.setNumSegments(1),B.setSegmentVertexIndices(0,0,1);const d=B.getVertexAttribute("positions");d.getValueRef(0).set(-.5*l,0,0),d.getValueRef(1).set(.5*l,0,0);const i=new $F("gridXAxisMaterial","LinesShader");i.getParameter("BaseColor").setValue(new R(U.luminance(),0,0)),this.addChild(new UU("xAxisLine",B,i),!1);const Q=new $F("gridZAxisMaterial","LinesShader");Q.getParameter("BaseColor").setValue(new R(0,U.luminance(),0));const t=new h;t.ori.setFromAxisAndAngle(new Z(0,0,1),.5*Math.PI);const I=new UU("yAxisLine",B,Q);I.setGeomOffsetXfo(t),this.addChild(I,!1),this.setSelectable(!1,!0);const V=this._cleanBoundingBox(this.__boundingBoxParam.getValue());this.__boundingBoxParam.setValue(V)}_cleanBoundingBox(l){return l.reset(),l}}e.register("GridTreeItem",bU);const ZU=new R("#DCDCDC");class xU{constructor(l){l&&Bl.setAdapter(new XU(l)),this.settings=new gU("Scene Settings"),this.root=new PF("root"),this.root.addChild(this.settings)}getSettings(){return this.settings}getRoot(){return this.root}getResourceLoader(){return Bl}setEnvMap(l){console.warn("Deprecated Function. Please access the Scene Settings object."),this.settings.getParameter("EnvMap").setValue(l)}addAsset(l){console.warn("Deprecated Function. Please access the Scene Root object."),this.root.addChild(l,!1)}setupGrid(l=5,F=50,U=ZU){const c=new bU(l,F,U);return this.root.addChild(c,!1),c}toJSON(l={}){l.makeRelative=l=>l;return{root:this.root.toJSON(l)}}fromJSON(l,F={}){const U=[];F.resolvePath=(l,F)=>{if(!l)throw new Error("Path not spcecified");const c=this.root.resolvePath(l);c?F(c):U.push(()=>{const U=this.resolvePath(l);U?F(U):console.warn("Path unable to be resolved:"+l)})},F.addPLCB=l=>U.push(l),F.settings=this.settings,l.root&&this.root.fromJSON(l.root,F);for(const l of U)l()}}class GU extends IU{constructor(l){super(l),this.geomsLoaded=!1,this.loaded=!1,this.addParameter(new el("splitObjects",!1)),this.addParameter(new el("splitGroupsIntoObjects",!1)),this.addParameter(new el("loadMtlFile",!0)),this.addParameter(new Il("unitsConversion",1)),this.addParameter(new ml("defaultShader","")),this.objfileParam=this.addParameter(new Wl("FilePath")),this.objfileParam.on("valueChanged",()=>{this.loaded=!1,this.__loadObj(()=>{this.emit("loaded",{})},()=>{this.emit("geomsLoaded",{})})}),this.geomLibrary=new QU,this.materials=new tU}getGeometryLibrary(){return this.geomLibrary}getMaterialLibrary(){return this.materials}__loadObj(l,F){const U=this.objfileParam.getUrl(),c=U.substring(0,U.lastIndexOf("/"))+"/",s=U.substring(U.lastIndexOf("/")+1),B=l=>{const F=l.split("\n"),U=/\s+/;let s;const B=function(l){if(3==l.length)return new R(parseFloat(l[0]),parseFloat(l[1]),parseFloat(l[2]));throw new Error("Unable to parse a color from the following parts:"+l.join("_"))},d=l=>new FileImage(l[0],c+l[0]);for(let l=0;l<F.length;l++){let c=F[l].trim();if(c.startsWith("#"))continue;-1!=c.indexOf("#")&&(c=c.substring(0,c.indexOf("#")).trim());const i=c.split(U),Q=i.shift(),t=i.join(" ");switch(Q){case"newmtl":s=new $F(t),s.setShaderName("StandardSurfaceShader"),this.materials.addMaterial(s);break;case"Kd":s.getParameter("BaseColor").setValue(B(i));break;case"map_Kd":s.getParameter("BaseColor").setValue(d(i));break;case"Ks":const l=(parseFloat(i[0])+parseFloat(i[1])+parseFloat(i[2]))/3;s.roughness=1-l,s.getParameter("Roughness").setValue(1-l),s.getParameter("Reflectance").setValue(l);break;case"map_Ks":s.getParameter("Roughness").setValue(d(i)),s.getParameter("Reflectance").setValue(.2);break;case"d":const F=parseFloat(t);F<1&&(s.setShaderName("TransparentSurfaceShader"),s.getParameter("Opacity").setValue(F));break;case"map_d":s.getParameter("alpha").setValue(parseFloat(i));break;case"map_bump":s.getParameter("normal").setValue(d(i))}}},d=new Y;d.incAsyncCount(),d.on("ready",()=>{X()});const i=l=>new Promise(F=>{D(l.url,l=>{Bl.addWorkDone(fileId,1),B(l),d.decAsyncCount(),Bl.addWorkDone(fileId,1),F()})}),Q=new Array,t=new Array,I=new Array,V={},e=async l=>{const F=l.split("\n"),U=/\s+/;let B=void 0,e=void 0;const X=l=>{let F=0;for(;l in V;)F++,l+=String(F);B={verticesRemapping:{},texCoordsRemapping:{},normalsRemapping:{},vertexIndices:[],texCoordIndices:[],normalIndices:[],numVertices:0,numTexCoords:0,numNormals:0,faceCounts:[],material:e},V[l]=B};X(s);const g=this.getParameter("splitGroupsIntoObjects").getValue();for(let l=0;l<F.length;l++){let s=F[l].trim();if(s.startsWith("#"))continue;-1!=s.indexOf("#")&&(s=s.substring(0,s.indexOf("#")).trim());const a=s.split(U),b=a.shift(),Z=a.join(" ");switch(b){case"":case"s":continue;case"mtllib":if(!this.getParameter("loadMtlFile").getValue())continue;d.incAsyncCount(),Bl.addWork(stem,2);const l=Bl.resolveFilepath(c+Z);l&&await i(l);break;case"o":X(Z);break;case"usemtl":e=Z,X(Z+Object.keys(V).length);break;case"g":g&&X(a.join("_"));break;case"v":Q.push(a.map(l=>parseFloat(l)));break;case"vt":I.push(a.map(l=>parseFloat(l)));break;case"vn":t.push(a.map(l=>parseFloat(l)));break;case"f":{const l=[],F=[],U=[];for(let c=0,s=a.length;c<s;c++){const s=a[c].split("/").map(l=>parseInt(l)-1),d=s[0];let i=B.verticesRemapping[d];if(null==i&&(i=B.numVertices,B.verticesRemapping[d]=i,B.numVertices++),l.push(i),s.length>1&&!isNaN(s[1])){const l=s[1];F.push(l)}if(s.length>2&&!isNaN(s[2])){const l=s[2];U.push(l)}}B.vertexIndices.push(l),U.length>0&&B.normalIndices.push(U),F.length>0&&B.texCoordIndices.push(F),null==B.faceCounts[l.length-3]&&(B.faceCounts[l.length-3]=[]),B.faceCounts[l.length-3]++;break}default:console.warn("Unhandled line:"+s)}}d.decAsyncCount()},X=()=>{for(const l in V)0!=V[l].numVertices&&g(l,V[l]);l(),F()},g=(l,F)=>{const U=F.numVertices,c=new Ml(l);c.setFaceCounts(F.faceCounts),c.setNumVertices(U);const s=c.getVertexAttribute("positions"),B=this.getParameter("unitsConversion").getValue();for(const l in F.verticesRemapping){const U=F.verticesRemapping[l];s.getValueRef(U).set(Q[l][0]*B,Q[l][1]*B,Q[l][2]*B)}let d,i;F.normalIndices.length>0&&(d=c.addVertexAttribute("normals",Z)),F.texCoordIndices.length>0&&(i=c.addVertexAttribute("texCoords",a));const V=Array(F.faceCounts.length).fill(0);for(let l=0;l<F.vertexIndices.length;l++){const U=F.vertexIndices[l];let s=0;for(let l=0;l<U.length-3;++l)s+=F.faceCounts[l];if(s+=V[U.length-3],V[U.length-3]++,c.setFaceVertexIndices(s,U),d){const U=F.normalIndices[l];for(let l=0;l<U.length;l++){const F=new Z(t[U[l]][0],t[U[l]][1],t[U[l]][2]);d.setFaceVertexValue(s,l,F)}}if(i&&F.texCoordIndices.length==F.vertexIndices.length){const U=F.texCoordIndices[l];for(let l=0;l<U.length;l++){const F=new a(I[U[l]][0],I[U[l]][1]);i.setFaceVertexValue(s,l,F)}}}const e=new UU(l,c);e.selectable=!0;const X=c.getBoundingBox().center();{const l=X.negate(),F=c.getVertexAttribute("positions");for(let U=0;U<F.length;U++)F.getValueRef(U).addInPlace(l);c.setBoundingBoxDirty()}if(e.getParameter("LocalXfo").setValue(new h(X)),null!=F.material&&this.materials.hasMaterial(F.material))e.getParameter("Material").setValue(this.materials.getMaterial(F.material));else{const F=this.getParameter("defaultShader").getValue(),U=new $F(l+"mat");U.setShaderName(""!=F?F:"StandardSurfaceShader"),this.materials.addMaterial(U),e.getParameter("Material").setValue(U)}this.addChild(e,!1)};(()=>{const l=this.objfileParam.getValue();Bl.addWork(l,2),D(U,F=>{Bl.addWorkDone(l,1),e(F),Bl.addWorkDone(l,1)})})()}}class RU extends vF{constructor(l){super(l),this.__input=this.addInput(new zF("Input"))}addRoute(){return this.addOutput(new kF("Output"+this.__outputs.size))}evaluate(){if(this.__input.isConnected()){const l=this.__input.getValue();let F=this.__outputs.size;for(;F--;){this.getOutputByIndex(F).setClean(l)}}else{let l=this.__outputs.size;for(;l--;){this.getOutputByIndex(l).setClean(0)}}}}e.register("RouterOperator",RU);class yU extends z{constructor(F){null==F&&(F="Camera"),super(F),this.__defaultManipulationState="orbit",this.__manipulationState=this.__defaultManipulationState,this.__mouseDown=!1,this.__dragging=!1,this.__mouseDragDelta=new a,this.__keyboardMovement=!1,this.__keysPressed=[],this.__maxVel=.002,this.__velocity=new Z,this.__ongoingTouches={},this.__globalXfoChangedDuringDrag=this.__globalXfoChangedDuringDrag.bind(this),this.__orbitRateParam=this.addParameter(new Il("orbitRate",l.isMobileDevice?-.3:1)),this.__dollySpeedParam=this.addParameter(new Il("dollySpeed",.02)),this.__mouseWheelDollySpeedParam=this.addParameter(new Il("mouseWheelDollySpeed",5e-4))}setDefaultManipulationMode(l){this.__defaultManipulationState=l}look(l,F){const{viewport:U}=l,c=U.getCamera(),s=c.getFocalDistance(),B=this.__orbitRateParam.getValue();if(this.__keyboardMovement){const l=c.getParameter("GlobalXfo").getValue();this.__mouseDownCameraXfo=l.clone(),this.__mouseDownZaxis=l.ori.getZaxis();const F=this.__mouseDownZaxis.scale(-s);this.__mouseDownCameraTarget=l.tr.add(F)}const d=this.__mouseDownCameraXfo.clone(),i=new n;i.rotateZ(F.x/U.getWidth()*Math.PI*B),d.ori=i.multiply(d.ori);const Q=new n;Q.rotateX(F.y/U.getHeight()*Math.PI*B),d.ori.multiplyInPlace(Q),this.__keyboardMovement,c.getParameter("GlobalXfo").setValue(d)}orbit(l,F){const{viewport:U}=l,c=U.getCamera(),s=c.getFocalDistance(),B=this.__orbitRateParam.getValue();if(this.__keyboardMovement){const l=c.getParameter("GlobalXfo").getValue();this.__mouseDownCameraXfo=l.clone(),this.__mouseDownZaxis=l.ori.getZaxis();const F=this.__mouseDownZaxis.scale(-s);this.__mouseDownCameraTarget=l.tr.add(F)}const d=this.__mouseDownCameraXfo.clone(),i=new n;i.rotateZ(F.x/U.getWidth()*2*Math.PI*-B),d.ori=i.multiply(d.ori);const Q=new n;Q.rotateX(F.y/U.getHeight()*Math.PI*-B),d.ori.multiplyInPlace(Q),d.tr=this.__mouseDownCameraTarget.add(d.ori.getZaxis().scale(s)),this.__keyboardMovement,c.getParameter("GlobalXfo").setValue(d)}pan(l,F){const{viewport:U}=l,c=U.getCamera(),s=c.getFocalDistance(),B=c.getFov(),d=new Z(1,0,0),i=new Z(0,1,0),Q=2*s*Math.tan(.5*B),t=Q*(U.getWidth()/U.getHeight()),I=new h;I.tr=d.scale(-F.x/U.getWidth()*t),I.tr.addInPlace(i.scale(F.y/U.getHeight()*Q)),c.getParameter("GlobalXfo").setValue(this.__mouseDownCameraXfo.multiply(I))}dolly(l,F){const{viewport:U}=l,c=U.getCamera(),s=F.x*this.__dollySpeedParam.getValue(),B=new h;B.tr.set(0,0,s),c.getParameter("GlobalXfo").setValue(this.__mouseDownCameraXfo.multiply(B))}panAndZoom(l,F,U){const{viewport:c}=l,s=c.getCamera(),B=s.getFocalDistance(),d=s.getFov(),i=new Z(1,0,0),Q=new Z(0,1,0),t=2*B*Math.tan(.5*d),I=t*(c.getWidth()/c.getHeight()),V=new h;V.tr=i.scale(-F.x/c.getWidth()*I),V.tr.addInPlace(Q.scale(F.y/c.getHeight()*t));const e=U*B;s.setFocalDistance(this.__mouseDownFocalDist+e),V.tr.z+=e,s.getParameter("GlobalXfo").setValue(this.__mouseDownCameraXfo.multiply(V))}initDrag(l){const{viewport:F}=l,U=F.getCamera(),c=U.getFocalDistance();this.__mouseDown=!0,this.__calculatingDragAction=!1,this.__mouseDownPos=l.mousePos,this.__mouseDownViewport=F,this.__mouseDragDelta.set(0,0),this.__mouseDownCameraXfo=U.getParameter("GlobalXfo").getValue().clone(),this.__mouseDownZaxis=this.__mouseDownCameraXfo.ori.getZaxis();const s=this.__mouseDownZaxis.scale(-c);this.__mouseDownCameraTarget=U.getParameter("GlobalXfo").getValue().tr.add(s),this.__mouseDownFocalDist=c,U.getParameter("GlobalXfo").on("valueChanged",this.__globalXfoChangedDuringDrag),this.__dragging=!0}__globalXfoChangedDuringDrag(){if(!this.__calculatingDragAction){if(this.__dragging){this.__mouseDownViewport.getCamera().getParameter("GlobalXfo").off("valueChanged",this.__globalXfoChangedDuringDrag),this.__dragging=!1}this.initDrag({viewport:this.__mouseDownViewport,mousePos:this.__mouseDownPos})}}endDrag(l){if(this.__dragging){const{viewport:F}=l;F.getCamera().getParameter("GlobalXfo").off("valueChanged",this.__globalXfoChangedDuringDrag),this.__dragging=!1}this.__mouseDown=!1}aimFocus(l,F){const{viewport:U}=l,c=U.getCamera();this.__focusIntervalId&&clearInterval(this.__focusIntervalId);let s=0;const B=()=>{const l=c.getParameter("GlobalXfo").getValue(),U=c.getFocalDistance(),d=F.subtract(l.tr),i=d.normalizeInPlace(),Q=new n,t=new n;{const F=l.ori.getZaxis().clone();F.z=0;const U=d.negate();U.z=0,Q.setFrom2Vectors(F,U)}{const F=l.ori.getZaxis().clone(),U=d.negate();F.x=U.x,F.y=U.y,F.normalizeInPlace(),F.cross(U).dot(l.ori.getXaxis())>0?t.rotateX(F.angleTo(U)):t.rotateX(-F.angleTo(U))}const I=l.clone();I.ori=Q.multiply(I.ori),I.ori.multiplyInPlace(t);const V=Math.pow(s/20,2),e=l.clone();e.ori=l.ori.lerp(I.ori,V),c.setFocalDistance(U+(i-U)*V),c.getParameter("GlobalXfo").setValue(e),s++,s<=20?this.__focusIntervalId=setTimeout(B,20):(this.__focusIntervalId=void 0,this.emit("movementFinished",{}),c.emit("movementFinished",{}))};B(),this.__manipulationState="focussing"}onMouseMove(l){}onDoubleClick(l){if(l.intersectionData){const F=l.viewport.getCamera().getParameter("GlobalXfo").getValue().tr.add(l.mouseRay.dir.scale(l.intersectionData.dist));this.aimFocus(l,F)}}onMouseDown(l){if(this.__dragging){this.__mouseDownViewport.getCamera().getParameter("GlobalXfo").off("valueChanged",this.__globalXfoChangedDuringDrag),this.__dragging=!1}this.initDrag(l),2==l.button?this.__manipulationState="pan":l.ctrlKey&&l.altKey?this.__manipulationState="dolly":l.ctrlKey||2==l.button?this.__manipulationState="look":this.__manipulationState=this.__defaultManipulationState,l.stopPropagation(),l.preventDefault()}onMouseMove(l){if(!this.__mouseDown)return;const F=l.mousePos;switch(this.__calculatingDragAction=!0,this.__keyboardMovement?this.__mouseDragDelta=F:this.__mouseDragDelta=F.subtract(this.__mouseDownPos),this.__manipulationState){case"orbit":this.orbit(l,this.__mouseDragDelta);break;case"look":this.look(l,this.__mouseDragDelta);break;case"pan":this.pan(l,this.__mouseDragDelta);break;case"dolly":this.dolly(l,this.__mouseDragDelta)}this.__dragging=!0,this.__calculatingDragAction=!1,l.stopPropagation(),l.preventDefault()}onMouseUp(l){this.__dragging&&(this.endDrag(l),this.emit("movementFinished",{}),l.viewport.getCamera().emit("movementFinished",{}),l.stopPropagation())}onWheel(l){const{viewport:F}=l,U=F.getCamera(),c=this.__mouseWheelDollySpeedParam.getValue(),s=l.shiftKey?.1:.5,B=U.getParameter("GlobalXfo").getValue(),d=B.ori.getZaxis();this.__mouseWheelZoomIntervalId&&clearInterval(this.__mouseWheelZoomIntervalId);let i=0;const Q=()=>{const F=U.getFocalDistance(),t=l.deltaY*c*F*s;B.tr.addInPlace(d.scale(t)),"orbit"==this.__defaultManipulationState&&U.setFocalDistance(U.getFocalDistance()+t),U.getParameter("GlobalXfo").setValue(B),i++,i<10?this.__mouseWheelZoomIntervalId=setTimeout(Q,10):(this.__mouseWheelZoomIntervalId=void 0,this.emit("movementFinished",{}),U.emit("movementFinished",{}))};Q(),l.preventDefault(),l.stopPropagation()}__integrateVelocityChange(l){const{viewport:F}=l,U=F.getCamera(),c=new h;c.tr=this.__velocity.normalize().scale(this.__maxVel),U.getParameter("GlobalXfo").setValue(U.getParameter("GlobalXfo").getValue().multiply(c))}onKeyPressed(l,F){return!1}onKeyDown(l,F){}onKeyUp(l,F){}__startTouch(l){this.__ongoingTouches[l.identifier]={identifier:l.identifier,pos:new a(l.pageX,l.pageY)}}__endTouch(l){delete this.__ongoingTouches[l.identifier]}onTouchStart(l){console.log("onTouchStart"),l.preventDefault(),l.stopPropagation(),0==Object.keys(this.__ongoingTouches).length&&(this.__manipMode=void 0);const F=l.changedTouches;for(let l=0;l<F.length;l++)this.__startTouch(F[l]);1==Object.keys(this.__ongoingTouches).length&&this.initDrag(l)}onTouchMove(l){l.preventDefault(),l.stopPropagation(),this.__calculatingDragAction=!0;const F=l.touches;if(1==F.length&&"panAndZoom"!=this.__manipMode){const U=F[0],c=new a(U.pageX,U.pageY),s=this.__ongoingTouches[U.identifier].pos.subtract(c);"look"==this.__defaultManipulationState?(s.scaleInPlace(6),this.look(l,s)):this.orbit(l,s)}else if(2==F.length){const U=F[0],c=this.__ongoingTouches[U.identifier],s=F[1],B=this.__ongoingTouches[s.identifier],d=new a(U.pageX,U.pageY),i=new a(s.pageX,s.pageY),Q=B.pos.subtract(c.pos).length()-i.subtract(d).length(),t=d.subtract(c.pos),I=i.subtract(B.pos),V=t.add(I);V.scaleInPlace(.5),this.panAndZoom(l,V,.002*Q),this.__manipMode="panAndZoom"}this.__calculatingDragAction=!1}onTouchEnd(l){l.preventDefault(),l.stopPropagation();const F=l.changedTouches;for(let l=0;l<F.length;l++)this.__endTouch(F[l]);0==Object.keys(this.__ongoingTouches).length&&this.endDrag(l)}onTouchCancel(l){l.preventDefault();const F=l.touches;for(let l=0;l<F.length;l++)this.__endTouch(F[l]);0==Object.keys(this.__ongoingTouches).length&&this.endDrag(l)}onDoubleTap(l){if(l.intersectionData){const{viewport:F}=l,U=F.getCamera().getParameter("GlobalXfo").getValue().tr.add(l.touchRay.dir.scale(l.intersectionData.dist));this.aimFocus(l,U)}l.preventDefault()}}const mU={registerClass:(l,F)=>{console.warn("'sgFactory' is deprecated, Please use 'Registry.register'"),e.register(l,F)},constructClass:(l,...F)=>{console.warn("'sgFactory' is deprecated, Please use 'Registry.constructClass'"),e.constructClass(l,...F)}};var LU=Object.freeze({__proto__:null,RefCounted:A,ParameterOwner:z,BaseItem:K,getFileFolder:w,loadTextfile:D,loadJSONfile:P,loadXMLfile:_,loadBinfile:O,resourceLoader:Bl,Version:dl,BinReader:k,BinWriter:il,OperatorOutputMode:Ql,Parameter:tl,MultiChoiceParameter:Vl,BooleanParameter:el,NumberParameter:Il,Vec2Parameter:Xl,Vec3Parameter:al,Vec4Parameter:bl,ColorParameter:Zl,Mat3Parameter:xl,Mat4Parameter:Gl,XfoParameter:Rl,ImageParameter:yl,StringParameter:ml,CodeParameter:Ll,ListParameter:nl,StructParameter:Cl,TreeItemParameter:hl,ItemSetParameter:ul,ProxyParameter:Sl,GeometryParameter:ol,FilePathParameter:Wl,MaterialParameter:Jl,MaterialFloatParam:Hl,MaterialColorParam:rl,Attribute:Yl,BaseGeom:pl,VertexAttribute:Nl,Points:Tl,Lines:Al,Mesh:Ml,PointsProxy:kl,LinesProxy:vl,MeshProxy:Kl,PointGrid:wl,Rect:fl,Circle:Dl,Cross:Pl,LinesCuboid:_l,Grid:jl,Cone:Ol,Cuboid:ql,Cylinder:$l,Disc:lF,Plane:FF,Sphere:UF,Torus:cF,DataImage:sF,FileImage:mF,FileImage2D:LF,LDRImage:CF,LDRVideo:hF,GIFImage:uF,EnvMap:NF,Label:AF,VideoStreamImage2D:MF,labelManager:TF,TreeItem:PF,InstanceItem:_F,AudioItem:jF,FileAudioItem:OF,BaseGeomItem:lU,GeomItem:UU,AssetItem:IU,BillboardItem:VU,Camera:eU,Group:dU,GeomLibrary:QU,Material:$F,BaseImage:El,MaterialLibrary:tU,Scene:xU,VLAAsset:aU,ObjAsset:GU,Operator:vF,OperatorInput:zF,OperatorOutput:kF,RouterOperator:RU,CameraMouseAndKeyboard:yU,sgFactory:mU});const nU=function(l,F){let U=null;if(null!=F.webglContextType)try{U=l.getContext(F.webglContextType,F),U.name=F.webglContextType}catch(l){}else{["webgl2","webgl"].some(c=>{try{U=l.getContext(c,F),U.name=c}catch(l){}if(U)return!0})}if(U)return U.sizeInBytes=function(l){switch(l){case this.BYTE:case this.UNSIGNED_BYTE:return 1;case this.SHORT:case this.UNSIGNED_SHORT:return 2;case this.INT:case this.UNSIGNED_INT:case this.FLOAT:return 4;default:throw new Error("unknown type")}},"webgl2"==U.name?(U.floatTexturesSupported=!0,U.__ext_float_linear=U.getExtension("OES_texture_float_linear"),U.__ext_texture_half_float_linear=U.getExtension("OES_texture_half_float_linear"),U.__ext_color_buffer_float=U.getExtension("EXT_color_buffer_float")):(U.__ext_float=U.getExtension("OES_texture_float"),U.__ext_float?(U.floatTexturesSupported=!0,U.__ext_float_linear=U.getExtension("OES_texture_float_linear")):console.warn("OES_texture_float is not available"),U.__ext_half_float=U.getExtension("OES_texture_half_float"),U.__ext_half_float&&(U.HALF_FLOAT=U.__ext_half_float.HALF_FLOAT_OES,U.floatTexturesSupported=!0,U.__ext_texture_half_float_linear=U.getExtension("OES_texture_half_float_linear")),U.__ext_color_buffer_float=U.getExtension("EXT_color_buffer_float"),U.__ext_std_derivatives=U.getExtension("OES_standard_derivatives"),U.__ext_Inst=U.getExtension("ANGLE_instanced_arrays"),U.__ext_Inst&&(U.vertexAttribDivisor=U.__ext_Inst.vertexAttribDivisorANGLE.bind(U.__ext_Inst),U.drawArraysInstanced=U.__ext_Inst.drawArraysInstancedANGLE.bind(U.__ext_Inst),U.drawElementsInstanced=U.__ext_Inst.drawElementsInstancedANGLE.bind(U.__ext_Inst)),U.__ext_VAO=U.getExtension("OES_vertex_array_object"),U.__ext_VAO&&(U.createVertexArray=U.__ext_VAO.createVertexArrayOES.bind(U.__ext_VAO),U.deleteVertexArray=U.__ext_VAO.deleteVertexArrayOES.bind(U.__ext_VAO),U.bindVertexArray=U.__ext_VAO.bindVertexArrayOES.bind(U.__ext_VAO)),U.__ext_element_index_uint=U.getExtension("OES_element_index_uint"),U.__ext_WEBGL_depth_texture=U.getExtension("WEBGL_depth_texture"),U.__ext_WEBGL_depth_texture&&(U.UNSIGNED_INT_24_8=U.__ext_WEBGL_depth_texture.UNSIGNED_INT_24_8_WEBGL),U.DRAW_FRAMEBUFFER=U.FRAMEBUFFER),U.__ext_frag_depth=U.getExtension("EXT_frag_depth"),U.setupInstancedQuad=function(){const l=new Float32Array([0,1,2,3]),F=new Uint16Array([0,1,2,2,1,3]);this.__quadVertexIdsBuffer=this.createBuffer(),this.bindBuffer(this.ARRAY_BUFFER,this.__quadVertexIdsBuffer),this.bufferData(this.ARRAY_BUFFER,l,this.STATIC_DRAW),this.__quadIndexBuffer=this.createBuffer(),this.bindBuffer(this.ELEMENT_ARRAY_BUFFER,this.__quadIndexBuffer),this.bufferData(this.ELEMENT_ARRAY_BUFFER,F,this.STATIC_DRAW),this.__quadattrbuffers={vertexIDs:{buffer:this.__quadVertexIdsBuffer,dataType:6,dimension:1,count:l.length,shared:!0}}},U.drawQuad=function(){this.drawElements(this.TRIANGLES,6,this.UNSIGNED_SHORT,0)},U.setupLineSegAttrBuffers=function(){const l=new Float32Array([0,1]),F=U.createBuffer();U.bindBuffer(U.ARRAY_BUFFER,F),U.bufferData(U.ARRAY_BUFFER,l,U.STATIC_DRAW),U.__linesegattrbuffers={vertexIDs:{buffer:F,dimension:1,count:l.length,shared:!0}}},U};class CU extends A{constructor(l,F){if(super(),this.__gl=l,this.ready=!1,this.width=0,this.height=0,this.textureType=1,this.textureDesc=[0,0,0,0],this.__loaded=!1,this.__bound=!1,null!=F)if(F instanceof El){this.__texture=F,this.__texture.setMetadata("gltexture",this);const l=()=>{const l=this.__texture.getParams(),F=l.width,U=l.height,c=l.data;this.bufferData(c,F,U)};this.__texture.on("updated",l),this.__texture.isLoaded()?this.configure(this.__texture.getParams()):this.__texture.on("loaded",()=>{this.configure(this.__texture.getParams())})}else this.configure(F)}isLoaded(){return this.__loaded}getTexture(){return this.__texture}getInternalFormat(){return this.__internalFormat}getType(){return this.__typeParam}getTypeID(){return this.__type}getFormat(){return this.__formatParam}getFormatID(){return this.__format}getFilter(){return this.__filterParam}getWrap(){return this.__wrapParam}getMipMapped(){return this.__mipMapped}configure(l,F=!0){if(!("type"in l&&"format"in l&&"width"in l&&"height"in l))throw new Error("Invalid texture params");const U=this.__gl,c=l.width,s=l.height,B=l.data,d=U.getParameter(U.MAX_TEXTURE_SIZE);if(c<=0||c>d||s<=0||s>d)throw new Error("gl-texture2d: Invalid texture size. width:"+c+" height:"+s+" maxSize:"+d);const i=l.format,Q=l.type;let t="minFilter"in l?l.minFilter:"filter"in l?l.filter:"LINEAR",I="magFilter"in l?l.magFilter:"filter"in l?l.filter:"LINEAR";const V="wrap"in l?l.wrap:"CLAMP_TO_EDGE";if("FLOAT"==Q)if(this.textureType=3,"webgl2"==U.name)"LINEAR"!=t||U.__ext_float_linear||(console.warn("Floating point texture filtering not supported on this device"),t="NEAREST"),"LINEAR"!=I||U.__ext_float_linear||(console.warn("Floating point texture filtering not supported on this device"),I="NEAREST");else if(U.__ext_float)"LINEAR"!=t||U.__ext_float_linear||(console.warn("Floating point texture filtering not supported on this device"),t="NEAREST"),"LINEAR"!=I||U.__ext_float_linear||(console.warn("Floating point texture filtering not supported on this device"),I="NEAREST");else{if(!U.__ext_half_float)throw new Error("OES_texture_half_float is not available");Q="HALF_FLOAT","LINEAR"!=t||U.__ext_texture_half_float_linear||(console.warn("Half Float texture filtering not supported on this device"),t="NEAREST"),"LINEAR"!=I||U.__ext_texture_half_float_linear||(console.warn("Half Float texture filtering not supported on this device"),I="NEAREST")}else if("HALF_FLOAT"==Q)if("webgl2"==U.name);else{if(!U.supportUploadingHalfFloat&&null!=B)throw new Error("Safari does not support uploading HALF_FLOAT texture data.");if(!U.__ext_half_float)throw new Error("OES_texture_half_float is not available");if("LINEAR"!=t||U.__ext_texture_half_float_linear||(console.warn("Half Float texture filtering not supported on this device"),t="NEAREST"),"LINEAR"!=I||U.__ext_texture_half_float_linear||(console.warn("Half Float texture filtering not supported on this device"),I="NEAREST"),"RGB"==i)throw new Error("OES_texture_half_float onlysupports RGBA textures")}else if("sRGB"==Q&&!U.__ext_sRGB)throw new Error("EXT_sRGB is not available");this.__formatParam=i,this.__typeParam=Q,this.__minFilterParam=t,this.__magFilterParam=I,this.__wrapParam=V,this.__format=U[i],this.__internalFormat="internalFormat"in l?U[l.internalFormat]:this.__format,this.__type=U[Q],"webgl2"==U.name&&("internalFormat"in l||(this.__type==U.FLOAT?this.__format==U.RED?this.__internalFormat=U.R32F:this.__format==U.RG?this.__internalFormat=U.RG32F:this.__format==U.RGB?this.__internalFormat=U.RGB32F:this.__format==U.RGBA&&(this.__internalFormat=U.RGBA32F):this.__type==U.HALF_FLOAT?this.__format==U.RED?this.__internalFormat=U.R16F:this.__format==U.RG?this.__internalFormat=U.RG16F:this.__format==U.RGB?this.__internalFormat=U.RGB16F:this.__format==U.RGBA&&(this.__internalFormat=U.RGBA16F):this.__type==U.UNSIGNED_BYTE&&(this.__format==U.RED&&(this.__internalFormat=U.R8),this.__format==U.RG&&(this.__internalFormat=U.RG8),this.__format==U.RGB?this.__internalFormat=U.RGB8:this.__format==U.RGBA&&(this.__internalFormat=U.RGBA8)))),this.__minFilter=U[t],this.__magFilter=U[I],this.__wrap=U[V],this.__flipY="flipY"in l&&l.flipY,this.__mipMapped="mipMapped"in l&&l.mipMapped,this.invert="invert"in l&&l.invert,this.alphaFromLuminance="alphaFromLuminance"in l&&l.alphaFromLuminance,this.textureDesc=[c,s,0,0],this.__gltex&&U.deleteTexture(this.__gltex),this.__gltex=U.createTexture(),this.__updateGLTexParams(),B?this.bufferData(B,c,s,!1,!1):this.resize(c,s,!1,!1),this.__loaded||(this.emit("ready",{}),this.__loaded=!0)}__updateGLTexParams(){const l=this.__gl;l.bindTexture(l.TEXTURE_2D,this.__gltex),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,this.__minFilter),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,this.__magFilter),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,this.__wrap),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,this.__wrap)}bufferData(l,F=-1,U=-1,c=!0,s=!0){const B=this.__gl;if(c&&B.bindTexture(B.TEXTURE_2D,this.__gltex),null!=l){if(l instanceof Image||l instanceof ImageData||l instanceof HTMLCanvasElement||l instanceof HTMLImageElement||l instanceof HTMLVideoElement)B.texImage2D(B.TEXTURE_2D,0,this.__internalFormat,this.__format,this.__type,l),this.width=l.width,this.height=l.height;else{-1==F&&(F=this.width),-1==U&&(U=this.height);const c=F*U;let s;switch(this.__format){case B.RED:case B.RED_INTEGER:case B.ALPHA:case B.LUMINANCE:case B.LUMINANCE_ALPHA:s=1;break;case B.RG:s=2;break;case B.RGB:s=3;break;case B.RGBA:s=4}l.length!=c*s&&console.warn("Invalid data for Image width:"+F+" height:"+U+" format:"+this.__formatParam+" type:"+this.__typeParam+" Data Length:"+l.length+" Expected:"+c*s),this.__type==B.HALF_FLOAT&&l instanceof Float32Array&&(l=Q.convertFloat32ArrayToUInt16Array(l)),"webgl2"==B.name?B.texImage2D(B.TEXTURE_2D,0,this.__internalFormat,F,U,0,this.__format,this.__type,l,0):B.texImage2D(B.TEXTURE_2D,0,this.__internalFormat,F,U,0,this.__format,this.__type,l),this.width=F,this.height=U}this.__mipMapped&&B.generateMipmap(B.TEXTURE_2D)}else B.texImage2D(B.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,null),this.width=F,this.height=U;s&&this.emit("updated",{})}clear(){const l=this.__gl,F=this.width*this.height;let U,c;switch(this.__format){case l.RED:case l.RED_INTEGER:case l.ALPHA:case l.LUMINANCE:case l.LUMINANCE_ALPHA:U=1;break;case l.RG:U=2;break;case l.RGB:U=3;break;case l.RGBA:U=4;break;default:throw new Error("Invalid Format")}switch(this.__type){case l.UNSIGNED_BYTE:c=new UInt8Array(F*U);break;case l.HALF_FLOAT:c=new UInt16Array(F*U);break;case l.FLOAT:c=new Float32Array(F*U);break;default:throw new Error("Invalid Type")}"webgl2"==l.name?l.texImage2D(l.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,c,0):l.texImage2D(l.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,c)}resize(l,F,U=!1,c=!0){const s=this.__gl;if(this.width!=l||this.height!=F){const B=s.getParameter(s.MAX_TEXTURE_SIZE);if(l<0||l>B||F<0||F>B)throw new Error("gl-texture2d: Invalid texture size. width:"+l+" height:"+F+" maxSize:"+B);if(U){const U=s.createTexture();s.bindTexture(s.TEXTURE_2D,U),s.texImage2D(s.TEXTURE_2D,0,this.__internalFormat,l,F,0,this.__format,this.__type,null);const c=s.createFramebuffer();s.bindFramebuffer(s.FRAMEBUFFER,c),s.framebufferTexture2D(s.FRAMEBUFFER,s.COLOR_ATTACHMENT0,s.TEXTURE_2D,this.__gltex,0),s.bindTexture(s.TEXTURE_2D,U),s.copyTexImage2D(s.TEXTURE_2D,0,this.__internalFormat,0,0,this.width,this.height,0),s.bindFramebuffer(s.FRAMEBUFFER,null),s.deleteFramebuffer(c),this.__gl.deleteTexture(this.__gltex),this.__gltex=U,this.__updateGLTexParams()}else s.bindTexture(s.TEXTURE_2D,this.__gltex),s.texImage2D(s.TEXTURE_2D,0,this.__internalFormat,l,F,0,this.__format,this.__type,null);this.width=l,this.height=F,c&&this.emit("resized",{width:l,height:F})}}populate(l,F,U,c=0,s=0,B=!0){const d=this.__gl;B&&d.bindTexture(d.TEXTURE_2D,this.__gltex),d.texSubImage2D(d.TEXTURE_2D,0,c,s,F,U,this.__format,this.__type,l)}getSize(){return[this.width,this.height]}get glTex(){return this.__gltex}getTexHdl(){return this.__gltex}bind(l,F){return console.warn("'bind' is deprecated. Please use 'bindToUniform'"),this.bindToUniform(l,F)}preBind(l,F){return{textureTypeUnif:F[l.name+"Type"],textureDescUnif:F[l.name+"Desc"]}}bindToUniform(l,F,U){if(!this.__loaded)return!1;if(!this.__gltex)throw new Error("Unable to bind non-initialized or deleted texture.");const c=l.boundTextures++,s=this.__gl.TEXTURE0+c,B=this.__gl;return B.activeTexture(s),B.bindTexture(B.TEXTURE_2D,this.__gltex),B.uniform1i(F.location,c),U&&(U.textureTypeUnif&&B.uniform1i(U.textureTypeUnif.location,this.textureType),U.textureDescUnif&&this.__gl.uniform4fv(U.textureDescUnif.location,this.textureDesc)),!0}destroy(){super.destroy(),this.__texture&&this.__texture.setMetadata("gltexture",void 0),this.__gl.deleteTexture(this.__gltex),this.__gltex=void 0}}class hU{constructor(l,F,U,c){this.__gl=l,this.__shaderAttrs=F,this.__glattrbuffers=U,this.__indexBuffer=c}bind(l){const F=this.__gl;for(const l in this.__shaderAttrs){if("instancedIds"==l)continue;const U=this.__shaderAttrs[l],c=U.location;if(-1==c)continue;const s=this.__glattrbuffers[l];if(!s){F.disableVertexAttribArray(c);continue}let B,d,i;switch(s.dataType){case 0:B=1,d=4,i=F.UNSIGNED_BYTE;break;case 1:B=1,d=4,i=F.BYTE;break;case 2:B=1,d=4,i=F.UNSIGNED_SHORT;break;case 3:B=1,d=4,i=F.SHORT;break;case 4:B=1,d=4,i=F.UNSIGNED_INT;break;case 5:B=1,d=4,i=F.INT;break;case 6:B=1,d=4,i=F.FLOAT;break;case a:B=2,d=4,i=F.FLOAT;break;case Z:B=3,d=4,i=F.FLOAT;break;case x:case R:B=4,d=4,i=F.FLOAT;break;case G:B=4,d=1,i=F.UNSIGNED_BYTE;break;default:throw"Unhandled Type"}const Q=B*d,t=null!=s.offset?s.offset*B*d:0,I=1==s.normalized,V=U.instanced;F.enableVertexAttribArray(c),F.bindBuffer(F.ARRAY_BUFFER,s.buffer),F.vertexAttribPointer(c,B,i,I,Q,t),F.vertexAttribDivisor&&(1==V?F.vertexAttribDivisor(c,1):F.vertexAttribDivisor(c,0))}return F.bindBuffer(F.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),!0}unbind(){const l=this.__gl;for(const F in this.__shaderAttrs){const U=this.__shaderAttrs[F].location;-1!=U&&(l.disableVertexAttribArray(U),l.vertexAttribDivisor(U,0))}l.bindBuffer(l.ELEMENT_ARRAY_BUFFER,null)}destroy(){}}class uU{constructor(l,F,U,c){this.__gl=l,this.__vao=l.createVertexArray(),l.bindVertexArray(this.__vao);for(const c in F){if("instancedIds"==c)continue;const s=F[c],B=s.location;if(-1==B)continue;const d=U[c];if(!d){l.disableVertexAttribArray(B);continue}let i,Q,t;switch(d.dataType){case 0:i=1,Q=4,t=l.UNSIGNED_BYTE;break;case 1:i=1,Q=4,t=l.BYTE;break;case 2:i=1,Q=4,t=l.UNSIGNED_SHORT;break;case 3:i=1,Q=4,t=l.SHORT;break;case 4:i=1,Q=4,t=l.UNSIGNED_INT;break;case 5:i=1,Q=4,t=l.INT;break;case 6:i=1,Q=4,t=l.FLOAT;break;case a:i=2,Q=4,t=l.FLOAT;break;case Z:i=3,Q=4,t=l.FLOAT;break;case x:case R:i=4,Q=4,t=l.FLOAT;break;case G:i=4,Q=1,t=l.UNSIGNED_BYTE;break;default:throw"Unhandled Type"}const I=i*Q,V=null!=d.offset?d.offset*i*Q:0,e=1==d.normalized,X=s.instanced;l.enableVertexAttribArray(B),l.bindBuffer(l.ARRAY_BUFFER,d.buffer),l.vertexAttribPointer(B,i,t,e,I,V),X?l.vertexAttribDivisor(B,1):l.vertexAttribDivisor(B,0)}this.__indexBuffer=c}bind(l){return this.__gl.bindVertexArray(this.__vao),this.__indexBuffer&&this.__gl.bindBuffer(this.__gl.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),!0}unbind(){const l=this.__gl;for(const F in this.__shaderAttrs){const U=this.__shaderAttrs[F].location;-1!=U&&(l.disableVertexAttribArray(U),l.vertexAttribDivisor(U,0))}this.__gl.bindVertexArray(null),this.__indexBuffer&&l.bindBuffer(l.ELEMENT_ARRAY_BUFFER,null)}destroy(){this.__gl.deleteVertexArray(this.__vao)}}function SU(l,F,U,c){return null==l.createVertexArray?new hU(l,F,U,c):new uU(l,F,U,c)}class oU extends A{constructor(l,F){super(),this.__gl=l,this.__geom=F,this.__glattrs={},this.__glattrbuffers={},this.__shaderBindings={};this.__geom.on("geomDataChanged",l=>{this.updateBuffers(l),this.emit("updated",{})});this.__geom.on("geomDataTopologyChanged",l=>{this.clearShaderBindings(),this.updateBuffers(l),this.emit("updated",{})})}getGeom(){return this.__geom}genBuffers(){}updateBuffers(l){}bind(l){if(this.__destroyed)throw new Error("Error binding a destroyed geom");let F=this.__shaderBindings[l.shaderkey];if(!F){F=SU(this.__gl,l.attrs,this.__glattrbuffers,this.__indexBuffer),this.__shaderBindings[l.shaderkey]=F}return F.bind(l),!0}unbind(l){const F=this.__shaderBindings[l.shaderkey];F&&F.unbind(l)}draw(){throw new Error("Not implemented. Implement this method in a derived class.")}drawInstanced(l){throw new Error("Not implemented. Implement this method in a derived class.")}bindAndDraw(l){this.bind(l),this.draw(l)}clearShaderBindings(){for(const l in this.__shaderBindings){this.__shaderBindings[l].destroy()}this.__shaderBindings={}}destroy(){this.__geom.deleteMetadata("glgeom"),this.clearShaderBindings();const l=this.__gl;for(const F in this.__glattrbuffers){const U=this.__glattrbuffers[F];U.shared||l.deleteBuffer(U.buffer)}this.__glattrs={},this.__shaderBindings={},this.__destroyed=!0,this.emit("destructing",{})}}class WU extends oU{constructor(l,F){super(l,F),this.genBuffers()}getNumTriangles(){return this.__numTriangles}genBuffers(){super.genBuffers();const l=this.__gl,F=this.__geom.genBuffers(),U=F.indices;this.__numTriIndices=F.indices.length,U instanceof Uint8Array&&(this.__indexDataType=this.__gl.UNSIGNED_BYTE),U instanceof Uint16Array&&(this.__indexDataType=this.__gl.UNSIGNED_SHORT),U instanceof Uint32Array&&(this.__indexDataType=this.__gl.UNSIGNED_INT),this.__numTriangles=U.length/3,this.__numRenderVerts=F.numRenderVerts,this.__indexBuffer=l.createBuffer(),l.bindBuffer(l.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),l.bufferData(l.ELEMENT_ARRAY_BUFFER,F.indices,l.STATIC_DRAW);for(const U in F.attrBuffers){const c=F.attrBuffers[U],s=l.createBuffer();l.bindBuffer(l.ARRAY_BUFFER,s),l.bufferData(l.ARRAY_BUFFER,c.values,l.STATIC_DRAW),this.__glattrbuffers[U]={buffer:s,dataType:c.dataType,normalized:c.normalized},"textureCoords"==U&&(this.__glattrbuffers.texCoords=this.__glattrbuffers.textureCoords)}}updateBuffers(l){const F=this.__gl,U=this.__geom.genBuffers({includeIndices:!1});for(const l in U.attrBuffers){const c=U.attrBuffers[l],s=this.__glattrbuffers[l];F.bindBuffer(F.ARRAY_BUFFER,s.buffer),F.bufferData(F.ARRAY_BUFFER,c.values,F.STATIC_DRAW)}}getNumUnSplitVerts(){return this.__geom.getNumVertices()}getNumSplitVerts(){return this.__numRenderVerts}generateWireframesVAO(){if(!this.__vao)return!1;this.__geom.edgeVerts||this.__geom.genTopologyInfo(),this.__wireframesVao&&this.__ext.deleteVertexArrayOES(this.__wireframesVao),this.__wireframesVao=this.__ext.createVertexArrayOES(),this.__ext.bindVertexArrayOES(this.__wireframesVao);const l=this.__gl,F=l.createBuffer(),U=Uint32Array.from(this.__geom.edgeVerts);l.bindBuffer(l.ELEMENT_ARRAY_BUFFER,F),l.bufferData(l.ELEMENT_ARRAY_BUFFER,U,l.STATIC_DRAW);const c=this.__glattrbuffers.positions.buffer;l.enableVertexAttribArray(0),l.bindBuffer(l.ARRAY_BUFFER,c),l.vertexAttribPointer(0,3,l.FLOAT,!1,12,0),this.__numWireIndices=U.length,this.__ext.bindVertexArrayOES(null)}bindWireframeVAO(l){return null!=this.__wireframesVao&&(this.__ext.bindVertexArrayOES(this.__wireframesVao),!0)}unbindWireframeVAO(){this.__ext.bindVertexArrayOES(null)}drawWireframe(){this.__wireframesVao&&this.__gl.drawElements(this.__gl.LINES,this.__numWireIndices,this.__gl.UNSIGNED_INT,0)}generateHardEdgesVAO(){if(!this.__vao)return!1;this.__hardEdgesVao&&this.__ext.deleteVertexArrayOES(this.__hardEdgesVao),this.__hardEdgesVao=this.__ext.createVertexArrayOES(),this.__ext.bindVertexArrayOES(this.__hardEdgesVao);const l=this.__gl,F=l.createBuffer(),U=this.__geom.computeHardEdgesIndices();l.bindBuffer(l.ELEMENT_ARRAY_BUFFER,F),l.bufferData(l.ELEMENT_ARRAY_BUFFER,U,l.STATIC_DRAW);const c=this.__glattrbuffers.positions.buffer;l.enableVertexAttribArray(0),l.bindBuffer(l.ARRAY_BUFFER,c),l.vertexAttribPointer(0,3,l.FLOAT,!1,12,0),this.__numEdgeIndices=U.length,this.__ext.bindVertexArrayOES(null)}bindHardEdgesVAO(l){return null!=this.__hardEdgesVao&&(this.__ext.bindVertexArrayOES(this.__hardEdgesVao),!0)}unbindHardEdgesVAO(){this.__ext.bindVertexArrayOES(null)}drawHardEdges(){this.__hardEdgesVao&&this.__gl.drawElements(this.__gl.LINES,this.__numEdgeIndices,this.__gl.UNSIGNED_INT,0)}drawPoints(){this.__gl.drawArrays(this.__gl.POINTS,0,this.__geom.numVertices())}draw(){this.__gl.drawElements(this.__gl.TRIANGLES,this.__numTriIndices,this.__indexDataType,0)}drawInstanced(l){this.__gl.drawElementsInstanced(this.__gl.TRIANGLES,this.__numTriIndices,this.__indexDataType,0,l)}destroy(){super.destroy();this.__gl.deleteBuffer(this.__indexBuffer),this.__indexBuffer=void 0}}class JU extends oU{constructor(l,F){super(l,F),this.genBuffers()}genBuffers(){super.genBuffers();const l=this.__gl,F=this.__geom.genBuffers(),U=F.indices;if(this.fatLines=(this.__geom.lineThickness>0||F.attrBuffers.lineThickness)&&l.floatTexturesSupported,this.fatLines){l.__quadVertexIdsBuffer||l.setupInstancedQuad(),this.__glattrbuffers.vertexIDs=l.__quadattrbuffers.vertexIDs,this.__drawCount=U.length/2;const F=this.__geom.getVertexAttributes(),c=F.positions,s=F.lineThickness,B=4,d=new Float32Array(c.length*B);for(let l=0;l<c.length;l++){Z.createFromBuffer(d.buffer,l*B*4).setFromOther(c.getValueRef(l)),d[4*l+3]=s?s.getFloat32Value(l):this.__geom.lineThickness}this.__positionsTexture=new CU(l,{format:"RGBA",type:"FLOAT",width:c.length,height:1,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",data:d,mipMapped:!1});const i=new Float32Array(U.length);for(let l=0;l<U.length;l++){let F;F=l%2==0?l>0?U[l]==U[l-1]:U[l]==U[U.length-1]:l<U.length-1?U[l]==U[l+1]:U[l]==U[0],i[l]=(F?1:0)+2*U[l]}const Q=l.createBuffer();l.bindBuffer(l.ARRAY_BUFFER,Q),l.bufferData(l.ARRAY_BUFFER,i,l.STATIC_DRAW),this.__glattrbuffers.segmentIndices={buffer:Q,dimension:2}}else{this.__indexBuffer=l.createBuffer(),l.bindBuffer(l.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),l.bufferData(l.ELEMENT_ARRAY_BUFFER,U,l.STATIC_DRAW);for(const U in F.attrBuffers){const c=F.attrBuffers[U],s=l.createBuffer();l.bindBuffer(l.ARRAY_BUFFER,s),l.bufferData(l.ARRAY_BUFFER,c.values,l.STATIC_DRAW),this.__glattrbuffers[U]={buffer:s,dataType:c.dataType,normalized:c.normalized}}this.__numSegIndices=U.length,this.__numVertices=F.numVertices}U instanceof Uint8Array&&(this.__indexDataType=this.__gl.UNSIGNED_BYTE),U instanceof Uint16Array&&(this.__indexDataType=this.__gl.UNSIGNED_SHORT),U instanceof Uint32Array&&(this.__indexDataType=this.__gl.UNSIGNED_INT)}updateBuffers(l){const F=this.__gl,U=this.__geom.genBuffers(),c=U.indices;if(this.fatLines){this.__drawCount=c.length/2;const l=this.__geom.getVertexAttributes(),U=l.positions,s=l.lineThickness,B=4,d=new Float32Array(U.length*B);for(let l=0;l<U.length;l++){Z.createFromBuffer(d.buffer,l*B*4).setFromOther(U.getValueRef(l)),d[4*l+3]=s?s.getFloat32Value(l):this.__geom.lineThickness}this.__positionsTexture.bufferData(d,U.length,1);const i=new Float32Array(c.length);for(let l=0;l<c.length;l++){let F;F=l%2==0?l>0&&c[l]==c[l-1]:l<c.length-1&&c[l]==c[l+1],i[l]=(F?1:0)+2*c[l]}F.bindBuffer(F.ARRAY_BUFFER,this.__glattrbuffers.segmentIndices.buffer),F.bufferData(F.ARRAY_BUFFER,i,F.STATIC_DRAW)}else{this.__geom.getVertexAttributes();if(l&&l.indicesChanged){const l=this.__geom.getIndices();this.__numSegIndices!=l.length&&(F.deleteBuffer(this.__indexBuffer),this.__indexBuffer=F.createBuffer()),F.bindBuffer(F.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),F.bufferData(F.ELEMENT_ARRAY_BUFFER,l,F.STATIC_DRAW),this.__numSegIndices=l.length}const s=U.numVertices!=this.__numVertices;for(const l in U.attrBuffers){const c=U.attrBuffers[l],B=this.__glattrbuffers[l];s&&(F.deleteBuffer(B.buffer),B.buffer=F.createBuffer()),F.bindBuffer(F.ARRAY_BUFFER,B.buffer),F.bufferData(F.ARRAY_BUFFER,c.values,F.STATIC_DRAW)}this.__numVertices=U.numVertices,this.__numSegIndices=c.length}c instanceof Uint8Array&&(this.__indexDataType=this.__gl.UNSIGNED_BYTE),c instanceof Uint16Array&&(this.__indexDataType=this.__gl.UNSIGNED_SHORT),c instanceof Uint32Array&&(this.__indexDataType=this.__gl.UNSIGNED_INT)}bind(l){if(this.fatLines&&"LineThickness"in l.unifs){const F=this.__gl;let U=this.__shaderBindings[l.shaderkey];U||(U=SU(F,l.attrs,this.__glattrbuffers,F.__quadIndexBuffer),this.__shaderBindings[l.shaderkey]=U),U.bind(l);{const U=l.unifs;U.positionsTexture&&(this.__positionsTexture.bindToUniform(l,U.positionsTexture),F.uniform1i(U.positionsTextureSize.location,this.__positionsTexture.width))}const c=l.unifs;return F.uniform1f(c.LineThickness.location,(this.__geom.lineThickness?this.__geom.lineThickness:1)*l.viewScale),!0}return super.bind(l)}drawPoints(){this.__gl.drawArrays(this.__gl.POINTS,0,this.__geom.numVertices())}draw(l){const F=this.__gl;this.fatLines?l.unifs.LineThickness&&F.drawElementsInstanced(F.TRIANGLES,6,F.UNSIGNED_SHORT,0,this.__drawCount):F.drawElements(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0)}drawInstanced(l){this.__gl.drawElementsInstanced(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0,l)}}class EU extends oU{constructor(l,F){super(l,F),this.genBuffers()}genBuffers(){super.genBuffers();const l=this.__gl,F=this.__geom.genBuffers();for(const U in F.attrBuffers){const c=F.attrBuffers[U],s=l.createBuffer();l.bindBuffer(l.ARRAY_BUFFER,s),l.bufferData(l.ARRAY_BUFFER,c.values,l.STATIC_DRAW),this.__glattrbuffers[U]={buffer:s,dataType:c.dataType,normalized:c.normalized}}this.__numVertices=F.numVertices,this.__vboState=2}updateBuffers(l){const F=this.__gl,U=this.__geom.genBuffers(),c=U.numVertices!=this.__numVertices;for(const l in U.attrBuffers){const s=U.attrBuffers[l],B=this.__glattrbuffers[l];c&&(F.deleteBuffer(B.buffer),B.buffer=F.createBuffer()),F.bindBuffer(F.ARRAY_BUFFER,B.buffer),F.bufferData(F.ARRAY_BUFFER,s.values,F.STATIC_DRAW)}this.__numVertices=U.numVertices}bind(l){if(l.unifs.PointSize){const F=this.__gl;let U=this.__shaderBindings[l.shaderkey];if(!U){F.__quadVertexIdsBuffer||F.setupInstancedQuad();const c=Object.assign(this.__glattrbuffers,F.__quadattrbuffers);U=SU(F,l.attrs,c,F.__quadIndexBuffer),this.__shaderBindings[l.shaderkey]=U}return U.bind(l),!0}return super.bind(l)}draw(l){const F=this.__gl;l.unifs.PointSize?F.drawElementsInstanced(F.TRIANGLES,6,F.UNSIGNED_SHORT,0,this.__numVertices):F.drawArrays(F.POINTS,0,this.__numVertices)}drawInstanced(l){this.__gl.drawArraysInstanced(this.__gl.POINTS,0,this.__numVertices,l)}}const HU={bool:Boolean,int:5,uint:4,float:6,ivec2:a,ivec3:Z,ivec4:x,vec2:a,vec3:Z,vec4:x,color:R,mat3:m,mat4:L,sampler2D:El};const rU=new class{constructor(){this.__shaderModules={}}hasShaderModule(l){return l in this.__shaderModules}setShaderModule(l,F){return this.parseShader(l,F)}getShaderModule(l){return this.__shaderModules[l]}getShaderModuleNames(){const l=[];for(const F in this.__shaderModules)l.push(F);return l}parseShader(l,F){const U=l=>{if(l.startsWith("..")){return c.substring(0,c.lastIndexOf("/"))+l.substring(2)}return l.startsWith(".")?c+l.substring(1):l.startsWith("/")?l.substring(1):l},c=(X.hashStr(l),l.substring(0,l.lastIndexOf("/"))),s=F.split("\n"),B={glsl:" //starting:"+l+"\n",lines:s,numLines:0,includeMetaData:[],uniforms:{},attributes:{}},d=/\s+/;for(let F=0;F<s.length;F++){let c=s[F],i=c.trim();if(i.startsWith("//")||i.startsWith("*"))B.glsl=B.glsl+c+"\n",B.numLines++;else if(-1!=i.indexOf("//")&&(i=i.slice(0,i.indexOf("//")).trim()),i.startsWith("<%")||i.startsWith("</%")){const i=function(l){const F=(l=(l=l.startsWith("</%")?l.slice(3):l.slice(2)).endsWith("/>")?l.slice(0,l.length-2):l.slice(0,l.length-1)).split(d),U={tag:F.shift(),attributes:{}};for(const l of F){const F=l.split("=");U.attributes[F[0]]=F[1].replace(/['"]+/g,"")}return U}(s[F].trim());switch(i.tag){case"include":{const c=U(i.attributes.file);if(!this.hasShaderModule(c))throw new Error("Error while parsing :"+l+" \nShader module not found:"+c+"\n in:"+this.getShaderModuleNames());const s=this.getShaderModule(c);X.hashStr(i.attributes.file);let d=s.glsl;d=d.substring(d.indexOf("\n")+1),B.glsl=B.glsl+" //including:"+i.attributes.file+"\n";const Q={};for(const l in i.attributes){if("file"==l)continue;const F=i.attributes[l];d=X.replaceAll(d,l,F),Q[l]=F}B.glsl=B.glsl+d,B.includeMetaData.push({src:B.numLines,tgt:F,length:s.numLines,key:c}),B.glsl=B.glsl+" //continuing:"+l+"\n",B.numLines+=s.numLines+1;for(const l in s.attributes){let F=l;for(const l in Q)F=X.replaceAll(F,l,Q[l]);B.attributes[F]=s.attributes[l]}for(const l in s.uniforms){let F=l;for(const l in Q)F=X.replaceAll(F,l,Q[l]);B.uniforms[F]=s.uniforms[l]}break}default:console.warn("Error while parsing :"+l+" \nUnhandled line:"+c);continue}}else{const U=(F,U)=>{if(!(F[1]in HU))throw new Error("Error while parsing :"+l+" \nType not recognized:"+F[1]);const s=F[2].slice(0,F[2].length-1);B.attributes[s]={type:HU[F[1]],instanced:U},"color"==F[1]&&(F[1]="vec4",c=F.join(" "))};if(i.startsWith("struct")){let l="";if(-1!=i.indexOf("}"))l=i.substring(i.indexOf("{")+1,i.indexOf("}")-1);else for(F++;c+=s[F]+"\n",l+=c.trim(),F++,-1==l.indexOf("}"););const U=l.substring(l.indexOf("{")+1,l.indexOf("}")-1).split(";"),B=[];for(const l of U){if(0==l.length)continue;const F=l.trim().split(d);B.push({name:F[1],type:HU[F[0]]})}const Q=i.split(d);HU[Q[1]]=B}if(i.startsWith("attribute")){U(i.split(d),!1)}if(i.startsWith("instancedattribute")){const l=i.split(d);U(l,!0),l[0]="attribute",c=l.join(" ")}else if(i.startsWith("uniform")){const F=i.split(d);let U=1;4==F.length&&(U=2);const s=F[U];if(!(s in HU))throw new Error("Error while parsing :"+l+" \nType not recognized:"+F[1]);const Q=F[U+1].slice(0,F[U+1].length-1);B.uniforms[Q]=HU[s],"struct"==B.uniforms[Q]&&console.log(F),"color"==F[1]&&(F[1]="vec4",c=F.join(" "))}B.glsl=B.glsl+c+"\n",B.numLines++}}return this.__shaderModules[l]=B,B}};let YU=0;class pU extends K{constructor(l,F){if(super(F),!l)throw new Error("gl context must be passed to shader constructor");this.__gl=l,this.__shaderStages={VERTEX_SHADER:{glsl:"",lines:0,uniforms:{},attributes:{}},FRAGMENT_SHADER:{glsl:"",lines:0,uniforms:{},attributes:{}}},this.__shaderProgramHdls={},this.__gltextures={},this.__id=YU++,this.invisibleToGeomBuffer=!1}static isTransparent(){return!1}static isOverlay(){return!1}__compileShaderStage(l,F,U,c){const s=this.__gl;if(c||(c=s.shaderopts),c){if(c.repl)for(const F in c.repl)l=X.replaceAll(l,F,c.repl[F]);c.defines&&(l=c.defines+l)}let B;"webgl2"==s.name&&(l=X.replaceAll(l,"attribute","in"),l="vertexShader"==U?X.replaceAll(l,"varying","out"):X.replaceAll(l,"varying","in"),B="#version 300 es\n",l="#version 300 es\n"+(l=X.replaceAll(l,"texture2D","texture")));const d=s.createShader(F);if(s.shaderSource(d,l),s.compileShader(d),!s.getShaderParameter(d,s.COMPILE_STATUS)){console.log("Errors in :"+this.constructor.name);const F=s.getShaderInfoLog(d).split("\n"),c={};for(let l in F){if(F[l].startsWith("'")){F[l-1]=F[l-1]+F[l],delete F[l],l--;continue}const U=F[l].split(":");if(U.length>=2){const s=parseInt(U[2]);isNaN(s)||(c[s]?c[s].push(F[l]):c[s]=[F[l]])}}const B=[],i=l.split("\n");for(let l=0;l<i.length;l++)if(B.push((l+1+":").padStart(" ",3)+i[l]),l+1 in c){const F=c[l+1];for(const l of F)B.push(l),B.push("-".padStart("-",l.length))}throw new Error("An error occurred compiling the shader \n=================\n"+this.constructor.name+"."+U+": \n\n"+F.join("\n")+"\n"+B.join("\n"))}return d}__createProgram(l){const F=this.__gl;this.__shaderCompilationAttempted=!0;const U=F.createProgram(),c=this.__shaderStages.VERTEX_SHADER.glsl,s={};if(null!=c){const B=this.__compileShaderStage(c,F.VERTEX_SHADER,"vertexShader",l);if(!B)return!1;F.attachShader(U,B),s[F.VERTEX_SHADER]=B}const B=this.__shaderStages.FRAGMENT_SHADER.glsl;if(null!=B){const c=Object.assign({},F.shaderopts,l);c.frag&&(c.defines=c.frag.defines+c.defines);const d=this.__compileShaderStage(B,F.FRAGMENT_SHADER,"fragmentShader",c);if(!d)return!1;F.attachShader(U,d),s[F.FRAGMENT_SHADER]=d}if(F.linkProgram(U),!F.getProgramParameter(U,F.LINK_STATUS)){const l=F.getProgramInfoLog(U);if(l.includes("D3D shader compilation failed")){const l=F.getExtension("WEBGL_debug_shaders");if(l){const U=l.getTranslatedShaderSource(s[F.VERTEX_SHADER]);console.log(U)}}throw console.log("vertexShaderGLSL:"+c),console.log("fragmentShaderGLSL:"+B),new Error("Unable to link the shader program:"+this.constructor.name+"\n==================\n"+l)}const d=this.__extractAttributeAndUniformLocations(U,l);return d.shaderProgramHdl=U,d}__extractAttributeAndUniformLocations(l,F){const U=this.__gl,c=this.getAttributes(),s={attrs:{},unifs:{}};for(const F in c){const B=U.getAttribLocation(l,F);if(null==B){console.warn("Shader attribute not found:"+F);continue}const d=c[F];s.attrs[F]={name:F,location:B,type:d.type,instanced:d.instanced}}const B=this.getUniforms();for(let c in B){const d=B[c];if(d instanceof Array)for(const F of d){const B=c+"."+F.name,d=U.getUniformLocation(l,B);null!=d&&(s.unifs[B]={name:B,location:d,type:F.type})}if(F&&F.repl)for(const l in F.repl)c=c.replace(l,F.repl[l]);const i=U.getUniformLocation(l,c);null!=i&&(s.unifs[c]={name:c,location:i,type:d})}return s}getAttributes(){const l={};for(const F in this.__shaderStages){const U=this.__shaderStages[F];for(const F in U.attributes)l[F]=U.attributes[F]}return l}getUniforms(){const l={};for(const F in this.__shaderStages){const U=this.__shaderStages[F];for(const F in U.uniforms)l[F]=U.uniforms[F]}return l}finalize(){}compileForTarget(l,F){const U=l?this.__id+l:this.__id;let c=this.__shaderProgramHdls[U];return c||!1!==c&&(c=this.__createProgram(F),c.shaderkey=U,this.__shaderProgramHdls[U]=c),c}compile(){this.compileForTarget()}bind(l,F){const U=this.__gl;if(l.glshader!=this){const c=this.compileForTarget(F,l.shaderopts);if(!1===c)return console.warn(this.constructor.name+" is not compiled for "+F),!1;const s=c.shaderProgramHdl;U.useProgram(s),l.glshader=this,l.shaderkey=c.shaderkey,l.unifs=c.unifs,l.attrs=c.attrs,l.boundTextures=0,l.glgeom=void 0,l.bindRendererUnifs&&l.bindRendererUnifs(c.unifs)}return l.supportsInstancing=!0,!0}unbind(l){return!0}static getParamDeclarations(){return[]}static getGeomDataShaderName(){}static getSelectedShaderName(){}destroy(){const l=this.__gl;for(const F in this.__shaderProgramHdls){const U=this.__shaderProgramHdls[F];l.deleteProgram(U.shaderProgramHdl)}this.__shaderProgramHdls={}}}rU.setShaderModule("utils/quadVertexFromID.glsl","\n\nattribute float vertexIDs;\n\nvec2 getQuadVertexPositionFromID(){\n    int vertexID = int(vertexIDs);\n    if(vertexID == 0)\n        return vec2(-0.5, -0.5);\n    else if(vertexID == 1)\n        return vec2(0.5, -0.5);\n    else if(vertexID == 2)\n        return vec2(-0.5, 0.5);\n    else if(vertexID == 3)\n        return vec2(0.5, 0.5);\n    return vec2(0,0);\n}\n"),rU.setShaderModule("utils/unpackHDR.glsl","\n\nvec3 decodeHDR(const in vec3 ldrPixel, const in float cdmAlpha) {\n    float avg = (cdmAlpha * 16.0 - 8.0);\n    float scl = 1.0;\n    vec3 color;\n    color.x = (tan((ldrPixel.x-0.5)*1.5)/scl)+avg;\n    color.y = (tan((ldrPixel.y-0.5)*1.5)/scl)+avg;\n    color.z = (tan((ldrPixel.z-0.5)*1.5)/scl)+avg;\n\n    // convert from logarithmic curve to linear curve.\n    // subtract the epsilon that was added during encoding.\n    const float eps = 0.001;\n    color.x = pow(10.0, color.x) - eps;\n    color.y = pow(10.0, color.y) - eps;\n    color.z = pow(10.0, color.z) - eps;\n    return color;\n}\n\nvec3 decodeHDR(sampler2D ldrSampler, sampler2D cdmSampler, vec2 texCoord) {\n#ifdef ENABLE_ES3\n    float cdm = texture2D(cdmSampler, texCoord).r;\n#else\n    float cdm = texture2D(cdmSampler, texCoord).a;\n#endif\n    return decodeHDR(texture2D(ldrSampler, texCoord).rgb, cdm);\n}\n\n");class NU extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("UnpackHDRShader.vertexShader",'\nprecision highp float;\n\n<%include file="utils/quadVertexFromID.glsl"/>\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n    vec2 position = getQuadVertexPositionFromID();\n    v_texCoord = position+0.5;\n    gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("UnpackHDRShader.fragmentShader",'\nprecision highp float;\n\nvarying vec2 v_texCoord;\nuniform sampler2D ldrSampler;\nuniform sampler2D cdmSampler;\nuniform float exposure;\nuniform vec4 tint;\n\n<%include file="utils/unpackHDR.glsl"/>\n\n#ifdef ENABLE_ES3\n    out vec4 fragColor;\n#endif\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n    vec4 fragColor;\n#endif\n\n    fragColor = vec4(decodeHDR(ldrSampler, cdmSampler, v_texCoord) * tint.rgb * exposure, 1.0);\n\n#ifndef ENABLE_ES3\n    gl_FragColor = fragColor;\n#endif\n}\n\n')}}class TU{constructor(F,U,c=!1){!l.isIOSDevice||"FLOAT"!=U.getType()&&"HALF_FLOAT"!=U.getType()||console.error("IOS devices are unable to render to float textures."),this.__gl=F,this.__colorTexture=U,this.__createDepthTexture=c,this.__clearColor=[0,0,0,0],this.__depthTexture=void 0,this.setup=this.setup.bind(this),this.resize=this.resize.bind(this),this.__colorTexture&&this.__colorTexture.on("resized",this.resize),this.setup()}setClearColor(l){this.__clearColor=l}getWidth(){return this.__colorTexture.width}getHeight(){return this.__colorTexture.height}getSize(){return[this.__colorTexture.width,this.__colorTexture.height]}getColorTexture(){return this.__colorTexture}getDepthTextureGL(){return this.__depthTexture}get width(){return this.__colorTexture.width}get height(){return this.__colorTexture.height}get size(){return[this.__colorTexture.width,this.__colorTexture.height]}get colorTexture(){return this.__colorTexture}setColorTexture(l){this.__colorTexture=l,gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.__colorTexture.glTex,0)}get depthTextureGL(){return this.__depthTexture}setup(){const l=this.__gl;if(this.__fbo=l.createFramebuffer(),"webgl2"==l.name?l.bindFramebuffer(l.DRAW_FRAMEBUFFER,this.__fbo):l.bindFramebuffer(l.FRAMEBUFFER,this.__fbo),this.__colorTexture&&("webgl2"==l.name?l.framebufferTexture2D(l.DRAW_FRAMEBUFFER,l.COLOR_ATTACHMENT0,l.TEXTURE_2D,this.__colorTexture.glTex,0):l.framebufferTexture2D(l.FRAMEBUFFER,l.COLOR_ATTACHMENT0,l.TEXTURE_2D,this.__colorTexture.glTex,0)),this.__createDepthTexture)if("webgl2"==l.name||l.__ext_WEBGL_depth_texture)l.activeTexture(l.TEXTURE0),this.__depthTexture=l.createTexture(),l.bindTexture(l.TEXTURE_2D,this.__depthTexture),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.LINEAR),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.LINEAR),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),"webgl2"==l.name?(l.texImage2D(l.TEXTURE_2D,0,l.DEPTH_COMPONENT24,this.width,this.height,0,l.DEPTH_COMPONENT,l.UNSIGNED_INT,null),l.framebufferTexture2D(l.DRAW_FRAMEBUFFER,l.DEPTH_ATTACHMENT,l.TEXTURE_2D,this.__depthTexture,0)):(l.texImage2D(l.TEXTURE_2D,0,l.DEPTH_COMPONENT,this.width,this.height,0,l.DEPTH_COMPONENT,l.UNSIGNED_INT,null),l.framebufferTexture2D(l.FRAMEBUFFER,l.DEPTH_ATTACHMENT,l.TEXTURE_2D,this.__depthTexture,0));else{const F=l.createRenderbuffer();l.bindRenderbuffer(l.RENDERBUFFER,F),l.renderbufferStorage(l.RENDERBUFFER,l.DEPTH_COMPONENT16,this.width,this.height),l.framebufferRenderbuffer(l.FRAMEBUFFER,l.DEPTH_ATTACHMENT,l.RENDERBUFFER,F)}this.__checkFramebuffer(),"webgl2"==l.name?l.bindFramebuffer(l.DRAW_FRAMEBUFFER,null):l.bindFramebuffer(l.FRAMEBUFFER,null)}resize(){const l=this.__gl;"webgl2"==l.name?l.bindFramebuffer(l.DRAW_FRAMEBUFFER,this.__fbo):l.bindFramebuffer(l.FRAMEBUFFER,this.__fbo),l.framebufferTexture2D(l.FRAMEBUFFER,l.COLOR_ATTACHMENT0,l.TEXTURE_2D,this.__colorTexture.glTex,0),this.__depthTexture&&(l.activeTexture(l.TEXTURE0),l.bindTexture(l.TEXTURE_2D,this.__depthTexture),"webgl2"==l.name?l.texImage2D(l.TEXTURE_2D,0,l.DEPTH_COMPONENT24,this.width,this.height,0,l.DEPTH_COMPONENT,l.UNSIGNED_INT,null):l.texImage2D(l.TEXTURE_2D,0,l.DEPTH_COMPONENT,this.width,this.height,0,l.DEPTH_COMPONENT,l.UNSIGNED_INT,null)),this.__checkFramebuffer()}__checkFramebuffer(){const l=this.__gl;let F;if(F="webgl2"==l.name?l.checkFramebufferStatus(l.DRAW_FRAMEBUFFER):l.checkFramebufferStatus(l.FRAMEBUFFER),F!==l.FRAMEBUFFER_COMPLETE)switch(l.bindTexture(l.TEXTURE_2D,null),"webgl2"==l.name?l.bindFramebuffer(l.DRAW_FRAMEBUFFER,null):l.bindFramebuffer(l.FRAMEBUFFER,null),console.warn("Error creating Fbo width:",this.width,", height:",this.height," Texture Type:",this.__colorTexture.getType()),F){case l.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case l.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case l.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case l.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}}bindForWriting(l){l&&(this.__prevBoundFbo=l.boundRendertarget,l.boundRendertarget=this.__fbo);const F=this.__gl;"webgl2"==F.name?F.bindFramebuffer(F.DRAW_FRAMEBUFFER,this.__fbo):F.bindFramebuffer(F.FRAMEBUFFER,this.__fbo),F.viewport(0,0,this.width,this.height)}unbindForWriting(l){l&&(l.boundRendertarget=this.__prevBoundFbo);const F=this.__gl;"webgl2"==F.name?F.bindFramebuffer(F.DRAW_FRAMEBUFFER,this.__prevBoundFbo):F.bindFramebuffer(F.FRAMEBUFFER,this.__prevBoundFbo)}bind(l){this.bindForWriting(l)}unbind(l){this.unbindForWriting(l)}bindForReading(){const l=this.__gl;"webgl2"==l.name?l.bindFramebuffer(l.READ_FRAMEBUFFER,this.__fbo):l.bindFramebuffer(l.FRAMEBUFFER,this.__fbo)}unbindForReading(){const l=this.__gl;"webgl2"==l.name?l.bindFramebuffer(l.READ_FRAMEBUFFER,null):l.bindFramebuffer(l.FRAMEBUFFER,null)}clear(){const l=this.__gl;l.colorMask(!0,!0,!0,!0),l.clearColor(...this.__clearColor),this.__createDepthTexture?l.clear(l.COLOR_BUFFER_BIT|l.DEPTH_BUFFER_BIT):l.clear(l.COLOR_BUFFER_BIT)}bindAndClear(l){this.bind(l),this.clear(l)}unbind(){const l=this.__gl;l.bindFramebuffer(l.FRAMEBUFFER,null)}destroy(){const l=this.__gl;l.bindFramebuffer(l.FRAMEBUFFER,null),l.deleteFramebuffer(this.__fbo),this.__fbo=null,this.__colorTexture.off("resized",this.resize)}}class AU extends CU{constructor(l,F){super(l),this.__hdrImage=F,this.__hdrImage.setMetadata("gltexture",this);const U=()=>{this.__unpackHDRImage(this.__hdrImage.getParams())};this.__hdrImage.on("updated",U),this.__hdrImage.isLoaded()?U():this.__hdrImage.on("loaded",U)}__unpackHDRImage(l){const F=this.__gl,U=l.data.ldr,c=l.data.cdm;if(this.__fbo)this.__srcLDRTex.bufferData(U),this.__srcCDMTex.bufferData(c);else{this.configure({format:"RGBA",type:"FLOAT",width:U.width,height:U.height,filter:"LINEAR",wrap:"CLAMP_TO_EDGE"}),this.__fbo=new TU(F,this),this.__fbo.setClearColor([0,0,0,0]),this.__srcLDRTex=new CU(F,{format:"RGB",type:"UNSIGNED_BYTE",width:U.width,height:U.height,filter:"NEAREST",mipMapped:!1,wrap:"CLAMP_TO_EDGE",data:U}),this.__srcCDMTex=new CU(F,{format:"webgl2"==F.name?"RED":"ALPHA",type:"UNSIGNED_BYTE",width:U.width,height:U.height,filter:"NEAREST",mipMapped:!1,wrap:"CLAMP_TO_EDGE",data:c}),this.__unpackHDRShader=new NU(F);const l=this.__unpackHDRShader.compileForTarget("GLHDRImage");this.__shaderBinding=SU(F,l.attrs,F.__quadattrbuffers,F.__quadIndexBuffer)}this.__fbo.bindAndClear();const s={};this.__unpackHDRShader.bind(s,"GLHDRImage"),this.__shaderBinding.bind(s);const B=s.unifs;this.__srcLDRTex.bindToUniform(s,B.ldrSampler),this.__srcCDMTex.bindToUniform(s,B.cdmSampler),F.uniform1f(B.exposure.location,1),F.uniform4fv(B.tint.location,this.__hdrImage.getHDRTint().asArray()),F.drawQuad(),this.__fbo.unbind(),this.emit("updated",{})}bindToUniform(l,F,U){return super.bindToUniform(l,F,U)}destroy(){super.destroy(),this.__fbo&&(this.__fbo.destroy(),this.__srcLDRTex.destroy(),this.__srcCDMTex.destroy()),this.__unpackHDRShader&&this.__unpackHDRShader.destroy(),this.__shaderBinding&&this.__shaderBinding.destroy(),this.__hdrImage.loaded.disconnectScope(this),this.__hdrImage.updated.disconnectScope(this)}}rU.setShaderModule("GLSLUtils.glsl","\n\n\nint ftoi(float val){\n    return int(floor(val + 0.5));\n}\nivec2 ftoi(vec2 v2) {\n    return ivec2(ftoi(v2.x), ftoi(v2.y));\n}\nivec3 ftoi(vec3 v4) {\n    return ivec3(ftoi(v4.x), ftoi(v4.y), ftoi(v4.z));\n}\nivec4 ftoi(vec4 v4) {\n    return ivec4(ftoi(v4.x), ftoi(v4.y), ftoi(v4.z), ftoi(v4.w));\n}\n\n#ifdef ENABLE_ES3\n\nint imod(int x, int y) {\n    return x % y;\n}\n\nvoid setFlag(inout int flags, int flag) {\n    flags |= flag;\n}\n\nvoid clearFlag(inout int flags, int flag) {\n    flags &= ~flag;\n}\n\nbool testFlag(int flags, int flag) {\n    return (flags & flag) != 0;\n}\n\n// private function: Mangle me...\nivec2 _pixelIndexToUV(int index, int textureWidth){\n    return ivec2(index % textureWidth, index / textureWidth);\n}\n\nvec4 fetchTexel(sampler2D texture, int textureWidth, int index) {\n    return texelFetch(texture, _pixelIndexToUV(index, textureWidth), 0);\n}\n\nvec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {\n    return texelFetch(texture, texCoord, 0);\n}\n\n#else\n\n// TODO: integrate: https://gist.github.com/mattatz/70b96f8c57d4ba1ad2cd\n\nint max(int a, int b) {\n    return a > b ? a : b;\n}\nint min(int a, int b) {\n    return a < b ? a : b;\n}\n\n\nfloat round(float val){\n    return floor(val + 0.4);\n}\n\nint imod(int x, int y) {\n    return x-y*(x/y);\n}\n\nvoid setFlag(inout int flags, int flag) {\n    flags += flag;\n}\nvoid clearFlag(inout int flags, int flag) {\n    flags -= flag;\n}\n\nbool testFlag(int flags, int flag) {\n    return imod(flags / flag, 2) != 0;\n}\n\n// private function: Mangle me...\nvec2 _pixelIndexToUV(int index, int textureSize){\n    float flTexSize = float(textureSize);\n    float x = (float(imod(index, textureSize))+0.5)/flTexSize;\n    float y = (floor(float(index / textureSize))+0.5)/flTexSize;\n    return vec2(x, y);\n}\n\nvec4 fetchTexel(sampler2D texture, int textureSize, int index) {\n    vec2 texCoord = _pixelIndexToUV(index, textureSize);\n    return texture2D(texture, texCoord);\n}\n\nvec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {\n    vec2 ftextureSize = vec2(textureSize);\n    return texture2D(texture, (vec2(texCoord) + 0.5) / ftextureSize);\n}\n\n\n#endif // ENABLE_ES3\n\nint uvToPixelIndex(vec2 uv, int textureSize){\n    return int(uv.x * float(textureSize)) + (int(floor(uv.y * float(textureSize))) * textureSize);\n}\n\n\n\n"),rU.setShaderModule("utils/ImageStream.glsl","\n\n// Stream Desc looks like the following\n// x : atlas Width in images\n// y : atlas height in images\n// z : image Width\n// w : image Height\n\nvec2 calcFrameImageTexCoords(vec2 texCoord, int index, in vec4 streamDesc){\n\tfloat index_x = floor(mod(float(index), streamDesc.x));\n\tfloat index_y = floor(float(index) / streamDesc.x);\n    return vec2( \n    \t(index_x + texCoord.x) / streamDesc.x, \n    \t(index_y + texCoord.y) / streamDesc.y\n    \t);\n}\n\nvec4 sampleStreamFrame(vec2 texCoord, int index, in sampler2D streamImage, in vec4 streamDesc){\n    return texture2D(streamImage, calcFrameImageTexCoords(texCoord, index, streamDesc));\n}\n\n");class MU extends A{constructor(l,F){super(),this.__gl=l,this.__streamImage=F,this.__descParam=this.__streamImage.getParameter("StreamAtlasDesc"),this.__indexParam=this.__streamImage.getParameter("StreamAtlasIndex"),this.__indexParam.on("valueChanged",()=>{this.emit("updated",{})});const U=()=>{const F=this.__streamImage.getParams();F.data.__atlasTexture||(F.data.__atlasTexture=new CU(l,F)),this.__atlasTexture=F.data.__atlasTexture,this.__atlasTexture.textureType=2,this.__atlasTexture.textureDesc=this.__descParam.getValue().asArray()};this.__streamImage.isLoaded()?U():this.__indexParam.on("loaded",()=>{U()})}preBind(l,F){const U=this.__atlasTexture.preBind(l,F);return U.textureDescUnif=F[l.name+"Desc"],U.textureIndexUnif=F[l.name+"Index"],U}bindToUniform(l,F,U){return!!this.__atlasTexture.bindToUniform(l,F,U)&&(U&&U.textureIndexUnif&&this.__gl.uniform1i(U.textureIndexUnif.location,this.__indexParam.getValue()),!0)}}class zU{constructor(l,F,U,c){switch(this.param=U,this.unif=c,c.type){case Boolean:this.uniformXX=l.uniform1i.bind(l);break;case 4:"webgl2"==l.name?this.uniformXX=l.uniform1ui.bind(l):this.uniformXX=l.uniform1i.bind(l);break;case 5:this.uniformXX=l.uniform1i.bind(l);break;case 6:this.uniformXX=l.uniform1f.bind(l)}this.dirty=!0,U.on("valueChanged",()=>{this.dirty=!0,F.emit("updated",{})})}bind(l){this.dirty&&(this.val=this.param.getValue(),this.dirty=!1),this.uniformXX(this.unif.location,this.val)}unbind(){}destroy(){}}class kU{constructor(l,F,U,c){switch(this.param=U,this.unif=c,c.type){case a:this.uniformXX=l.uniform2fv.bind(l);break;case Z:this.uniformXX=l.uniform3fv.bind(l);break;case x:this.uniformXX=l.uniform4fv.bind(l)}this.dirty=!0,U.on("valueChanged",()=>{this.dirty=!0,F.emit("updated",{})})}bind(l){this.dirty&&(this.vals=this.param.getValue().asArray(),this.dirty=!1),this.uniformXX(this.unif.location,this.vals)}unbind(){}destroy(){}}class vU{constructor(l,F,U,c){switch(this.param=U,this.unif=c,c.type){case Mat3:this.uniformMatrixXXX=l.uniformMatrix3fv.bind(l);break;case L:this.uniformMatrixXXX=l.uniformMatrix4fv.bind(l)}this.dirty=!0,U.on("valueChanged",()=>{this.dirty=!0,F.emit("updated",{})})}bind(l){this.dirty&&(this.vals=this.param.getValue().asArray(),this.dirty=!1),this.uniformMatrixXXX(this.unif.location,!1,this.val)}unbind(){}destroy(){}}class KU{constructor(l,F,U,c,s){this.gl=l,this.param=U,this.unif=c,this.textureUnif=s[c.name+"Tex"],this.textureTypeUnif=s[c.name+"TexType"],this.vals=[0,0,0,0],this.bind=this.bindValue;const B=l=>{let U=l.getMetadata("gltexture");U||(U="FLOAT"===l.type?new AU(this.gl,l):l.isStreamAtlas()?new MU(this.gl,l):new CU(this.gl,l)),this.texBinding=U.preBind(this.textureUnif,s),U.on("updated",()=>{F.emit("updated",{})}),this.gltexture=U,this.gltexture.addRef(this),this.textureType=1,this.bind=this.bindTexture,F.emit("updated",{})};let d,i;const Q=l=>{l.isLoaded()?B(l):(i=()=>{B(d)},l.on("loaded",i)),d=l},t=()=>{d.getMetadata("gltexture").removeRef(this),this.texBinding=null,this.gltexture=null,this.textureType=null,this.bind=this.bindValue,i&&d.off("loaded",i),d=null,i=null,F.emit("updated",{})};this.update=()=>{const l=U.getValue();if(this.vals=l.asArray(),this.textureUnif){let l;U.getImage&&(l=U.getImage()),l&&l!=d?Q(l):!l&&d&&t()}F.emit("updated")},this.update(),U.on("textureConnected",()=>{Q(U.getImage())}),this.dirty=!0,U.on("valueChanged",()=>{this.dirty=!0}),this.uniform1i=l.uniform1i.bind(l),this.uniform4fv=l.uniform4fv.bind(l)}bindValue(l){this.dirty&&(this.update(),this.dirty=!1),this.uniform4fv(this.unif.location,this.vals),this.textureTypeUnif&&this.uniform1i(this.textureTypeUnif.location,0)}bindTexture(l){this.dirty&&(this.update(),this.dirty=!1),this.gltexture.bindToUniform(l,this.textureUnif,this.texBinding)}}const wU={};class fU{constructor(l,F,U,c){this.uniformBindings=[];const s=s=>{const B=s.getName(),d=U[B];if(null!=d)switch(d.type){case Boolean:case 4:case 5:case 6:this.uniformBindings.push(new zU(l,F,s,d));break;case a:case Z:case x:this.uniformBindings.push(new kU(l,F,s,d));break;case R:this.uniformBindings.push(new KU(l,F,s,d,U));break;case L:this.uniformBindings.push(new vU(l,F,s,d));break;default:return void console.warn("Param :"+B+" has unhandled data type:"+d.type)}else if(c){const l=F.getMaterial().getShaderName();wU[l]||(wU[l]={}),wU[l][B]||(console.warn("Material:"+F.getMaterial().getName(),"with Shader ",l,"Param has no unif",B),wU[l][B]=!0)}},B=F.getMaterial().getParameters();for(const l of B)s(l)}bind(l){for(const F of this.uniformBindings)F.bind(l);return!0}unbind(){for(const l of this.uniformBindings)l.unbind(renderstate)}destroy(){for(const l of this.uniformBindings)l.destroy(renderstate)}}class DU extends H{constructor(l,F,U){super(),this.__gl=l,this.__material=F,this.__glshader=U,this.__shaderBindings={},F.on("parameterValueChanged",()=>this.emit("updated"))}getMaterial(){return this.__material}getGLShader(){return this.__glshader}generateShaderBinding(){const l=this.__material.getParameters();for(const F of l)bindParam(gl,F)}bind(l,F){this.__boundTexturesBeforeMaterial=l.boundTextures;let U=this.__shaderBindings[l.shaderkey];if(!U){const c=this.__gl;U=new fU(c,this,l.unifs,F),this.__shaderBindings[l.shaderkey]=U}return U.bind(l)}unbind(l){l.boundTextures=this.__boundTexturesBeforeMaterial}}class PU extends H{constructor(l,F){super(),this.__gl=l,this.textureTargets=[],this.depthTexture=null,F&&this.configure(F)}configure(l){const F=this.__gl,U=function(l,F){if(!F.width||!F.height)throw new Error("Invalid texture params");const U=l.getParameter(l.MAX_TEXTURE_SIZE);if(F.width<=0||F.width>U||F.height<=0||F.height>U)throw new Error("GLTextureParams: Invalid texture size. width:"+F.width+" height:"+F.height+" maxSize:"+U);const c={width:F.width,height:F.height},s=(U,s)=>{U in F?c[U]=isNaN(F[U])?l[F[U]]:F[U]:s&&(c[U]=s)};if(s("format"),s("internalFormat",c.format),s("type",l.UNSIGNED_BYTE),s("minFilter",l.LINEAR),s("magFilter",l.LINEAR),s("wrapS",l.CLAMP_TO_EDGE),s("wrapT",l.CLAMP_TO_EDGE),s("flipY",!1),s("mipMapped",!1),s("depthFormat"),s("depthType"),c.format==l.FLOAT)if("webgl2"==l.name)c.filter!=l.LINEAR||l.__ext_float_linear||(console.warn("Floating point texture filtering not supported on result device"),c.filter=l.NEAREST);else if(l.__ext_float)c.filter!=l.LINEAR||l.__ext_float_linear||(console.warn("Floating point texture filtering not supported on result device"),c.filter=l.NEAREST);else{if(!l.__ext_half_float)throw new Error("OES_texture_half_float is not available");c.format=l.HALF_FLOAT,c.filter!=l.LINEAR||l.__ext_texture_half_float_linear||(console.warn("Half Float texture filtering not supported on result device"),c.filter=l.NEAREST)}else if(c.format==l.HALF_FLOAT)if("webgl2"==l.name);else{if(!l.__ext_half_float)throw new Error("OES_texture_half_float is not available");if(c.filter!=l.LINEAR||l.__ext_texture_half_float_linear||(console.warn("Half Float texture filtering not supported on result device"),c.filter=l.NEAREST),c.channels==l.RGB)throw new Error("OES_texture_half_float onlysupports RGBA textures")}else if("sRGB"==c.format&&!l.__ext_sRGB)throw new Error("EXT_sRGB is not available");return null!=c.format&&"webgl2"==l.name&&c.internalFormat==c.format&&(c.type==l.FLOAT?c.format==l.RED||c.format==l.RED?c.internalFormat=l.R32F:c.format==l.RG?c.internalFormat=l.RG32F:c.format==l.RGBA&&(c.internalFormat=l.RGBA32F):c.type==l.HALF_FLOAT?c.format==l.RED?c.internalFormat=l.R16F:c.format==l.RGB?c.internalFormat=l.RGB16F:c.format==l.RGBA&&(c.internalFormat=l.RGBA16F):c.type==l.UNSIGNED_BYTE&&(c.format==l.RED&&(c.internalFormat=l.R8),c.format==l.RGB?c.internalFormat=l.RGB8:c.format==l.RGBA&&(c.internalFormat=l.RGBA8))),null!=c.depthFormat&&("webgl2"==l.name?c.depthType==l.UNSIGNED_SHORT?c.depthInternalFormat=l.DEPTH_COMPONENT16:c.depthType==l.UNSIGNED_INT&&(c.depthInternalFormat=l.UNSIGNED_INT):c.depthInternalFormat=c.depthFormat),c}(F,l);this.textureTargets.forEach(l=>{F.deleteTexture(l)}),this.textureTargets=[],this.depthTexture&&(F.deleteTexture(this.depthTexture),this.depthTexture=null),this.frameBuffer&&F.deleteFramebuffer(this.frameBuffer),this.type=U.type,this.format=U.format,this.internalFormat=U.internalFormat,this.filter=U.filter,this.wrap=U.wrap,this.flipY=U.flipY,this.width=U.width,this.height=U.height,this.clearColor=new R(0,0,0,0),this.colorMask=[!0,!0,!0,!0],this.textureType=1,this.textureDesc=[this.width,this.height,0,0];const c=null!=l.numColorChannels?l.numColorChannels:null!=U.format?1:0;for(let l=0;l<c;l++){F.activeTexture(F.TEXTURE0+1);const l=F.createTexture();F.bindTexture(F.TEXTURE_2D,l),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_S,U.wrapS),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_T,U.wrapT),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MIN_FILTER,U.minFilter),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MAG_FILTER,U.magFilter),F.texImage2D(F.TEXTURE_2D,0,this.internalFormat,U.width,U.height,0,this.format,this.type,null),this.textureTargets.push(l)}if(U.depthFormat){if("webgl"==F.name&&!F.__ext_WEBGL_depth_texture)throw new Error("Depth textures not support on this device");F.activeTexture(F.TEXTURE0),this.depthTexture=F.createTexture(),F.bindTexture(F.TEXTURE_2D,this.depthTexture),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_S,U.wrapS),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_T,U.wrapT),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MIN_FILTER,U.minFilter),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MAG_FILTER,U.magFilter),F.texImage2D(F.TEXTURE_2D,0,U.depthInternalFormat,U.width,U.height,0,U.depthFormat,U.depthType,null)}if(this.frameBuffer=F.createFramebuffer(),"webgl2"==F.name?F.bindFramebuffer(F.DRAW_FRAMEBUFFER,this.frameBuffer):F.bindFramebuffer(F.FRAMEBUFFER,this.frameBuffer),this.textureTargets.length>0){if(this.textureTargets.length>1&&"webgl"==F.name&&!F.drawBuffers){F.__ext_draw_buffers=F.getExtension("WEBGL_draw_buffers"),F.drawBuffers=F.__ext_draw_buffers.drawBuffersWEBGL.bind(F.__ext_draw_buffers);for(let l=1;l<14;l++)F["COLOR_ATTACHMENT"+l]=F.__ext_draw_buffers["COLOR_ATTACHMENT"+l+"_WEBGL"];F.MAX_COLOR_ATTACHMENTS=F.__ext_draw_buffers.MAX_COLOR_ATTACHMENTS_WEBGL,F.MAX_DRAW_BUFFERS=F.__ext_draw_buffers.MAX_DRAW_BUFFERS_WEBGL}const l=[];for(let U=0;U<this.textureTargets.length;U++)F.framebufferTexture2D(F.DRAW_FRAMEBUFFER,F.COLOR_ATTACHMENT0+U,F.TEXTURE_2D,this.textureTargets[U],0),l.push(F.COLOR_ATTACHMENT0+U);this.textureTargets.length>1&&F.drawBuffers(l)}this.depthTexture&&F.framebufferTexture2D(F.DRAW_FRAMEBUFFER,F.DEPTH_ATTACHMENT,F.TEXTURE_2D,this.depthTexture,0);const s=F.checkFramebufferStatus(F.DRAW_FRAMEBUFFER);if(s!=F.FRAMEBUFFER_COMPLETE)switch(s){case F.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case F.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case F.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case F.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}this.unbind()}bindForWriting(l,F=!1){l&&(this.__prevBoundFbo=l.boundRendertarget,l.boundRendertarget=this.frameBuffer);const U=this.__gl;"webgl2"==U.name?U.bindFramebuffer(U.DRAW_FRAMEBUFFER,this.frameBuffer):U.bindFramebuffer(U.FRAMEBUFFER,this.frameBuffer),U.viewport(0,0,this.width,this.height),F&&this.clear()}unbindForWriting(l){l&&(l.boundRendertarget=this.__prevBoundFbo);const F=this.__gl;"webgl2"==F.name?F.bindFramebuffer(F.DRAW_FRAMEBUFFER,this.__prevBoundFbo):F.bindFramebuffer(F.FRAMEBUFFER,this.__prevBoundFbo)}clear(l=!0){const F=this.__gl;F.colorMask(...this.colorMask),F.clearColor(...this.clearColor.asArray());let U=0;this.textureTargets.length>0&&(U|=F.COLOR_BUFFER_BIT),this.depthTexture&&(U|=F.DEPTH_BUFFER_BIT),F.clear(U)}bindForReading(){const l=this.__gl;"webgl2"==l.name?l.bindFramebuffer(l.READ_FRAMEBUFFER,this.frameBuffer):l.bindFramebuffer(l.FRAMEBUFFER,this.frameBuffer)}unbindForReading(){const l=this.__gl;"webgl2"==l.name?l.bindFramebuffer(l.READ_FRAMEBUFFER,null):l.bindFramebuffer(l.FRAMEBUFFER,null)}bindColorTexture(l,F,U=0){const c=this.__gl,s=l.boundTextures++;return c.uniform1i(F.location,s),c.activeTexture(c.TEXTURE0+s),c.bindTexture(c.TEXTURE_2D,this.textureTargets[U]),!0}bindDepthTexture(l,F){const U=this.__gl,c=l.boundTextures++;return U.uniform1i(F.location,c),U.activeTexture(U.TEXTURE0+c),U.bindTexture(U.TEXTURE_2D,this.depthTexture),!0}unbind(){const l=this.__gl;l.bindFramebuffer(l.DRAW_FRAMEBUFFER,null)}resize(l,F,U=!1){}bindToUniform(l,F,U){const c=l.boundTextures++,s=this.__gl.TEXTURE0+c,B=this.__gl;return B.activeTexture(s),B.bindTexture(B.TEXTURE_2D,this.textureTargets[0]),B.uniform1i(F.location,c),U&&(U.textureTypeUnif&&B.uniform1i(U.textureTypeUnif.location,this.textureType),U.textureDescUnif&&this.__gl.uniform4fv(U.textureDescUnif.location,this.textureDesc)),!0}destroy(){const l=this.__gl;this.textureTargets.forEach(F=>{l.deleteTexture(F)}),this.textureTargets=[],this.depthTexture&&(l.deleteTexture(this.depthTexture),this.depthTexture=null),this.frameBuffer&&l.deleteFramebuffer(this.frameBuffer)}}const _U=new Uint32Array(1);function jU(l){return _U[0]=l,_U[0]=(_U[0]<<16|_U[0]>>16)>>>0,_U[0]=(1431655765&_U[0])<<1|(2863311530&_U[0])>>>1>>>0,_U[0]=(858993459&_U[0])<<2|(3435973836&_U[0])>>>2>>>0,_U[0]=(252645135&_U[0])<<4|(4042322160&_U[0])>>>4>>>0,_U[0]=(16711935&_U[0])<<8|(4278255360&_U[0])>>>8>>>0,2.3283064365386963e-10*_U[0]}function OU(l,F){return[l/F,jU(l)]}rU.setShaderModule("utils/imageAtlas.glsl","\n\n// Note: On mobile, I can't seem to pass around a stuct containing sampler2D.\n// I have to unpack the struct and pass its members. :(\n// struct ImageAtlas {\n//     sampler2D layout;\n//     sampler2D image;\n//     vec4 desc;\n// };\n\n\n\nvec4 getSubImageLayout(int index, in sampler2D atlasLayout, in vec4 atlasDesc){\n    return fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n}\n\nvec2 calcSubImageTexCoords(vec2 texCoord, int index, in sampler2D atlasLayout, in vec4 atlasDesc){\n    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n    // The following line is a hack to fix artifacts in our PBR lighting\n    // We were seeing loads of lighting garbage on some sufaces that were orthogonal\n    // to the world. The UV coordinates would have been landing right on the edges\n    // of our subimages and were often sampling outside the image. This couuld\n    // have been because of filtering, or an error in the uv coords. \n    texCoord = clamp(texCoord, vec2(0.01, 0.01), vec2(0.99, 0.99));\n    vec2 subimageTexel = texCoord * layoutData.zw;\n    // subimageTexel = clamp(subimageTexel, vec2(0.0, 0.0), vec2(1.0, 1.0));\n    return subimageTexel + layoutData.xy;\n}\n\nvec4 sampleSubImage(vec2 texCoord, int index, in sampler2D atlasLayout, in sampler2D atlasImage, in vec4 atlasDesc){\n    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n    vec2 atlasCoords = calcSubImageTexCoords(texCoord, index, atlasLayout, atlasDesc);\n    return texture2D(atlasImage, atlasCoords);\n}\n\n");class qU extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("AtlasLayoutShader.vertexShader",'\n\nprecision highp float;\n\n<%include file="utils/quadVertexFromID.glsl"/>\n\nuniform vec2 pos;\nuniform vec2 size;\nuniform vec2 srctextureDim;\nconst int border = 2;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * size * 2.0), 0.0, 1.0);\n\n  vec2 borderVec2 = vec2(float(border), float(border));\n  v_texCoord *= (srctextureDim + (borderVec2 * 2.0)) / srctextureDim;\n  v_texCoord -= borderVec2 / srctextureDim;\n}\n\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("AtlasLayoutShader.fragmentShader","\nprecision highp float;\n\nuniform sampler2D srctexture;\nuniform vec2 srctextureDim;\nuniform bool alphaFromLuminance;\nuniform bool invert;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n\nfloat luminanceFromRGB(vec3 rgb) {\n  return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n  vec2 pixelCoord = v_texCoord*srctextureDim;\n  vec2 uv = v_texCoord;\n\n  // Wrap X coords\n  if(pixelCoord.x < 0.0){\n    uv.x += 1.0/srctextureDim.x;\n    uv.y = 1.0 - uv.y;\n  }\n  else if(pixelCoord.x > srctextureDim.x){\n    uv.x -= 1.0/srctextureDim.x;\n    uv.y = 1.0 - uv.y;\n  }\n\n  // Wrap Y coords\n  if(pixelCoord.y < 0.0){\n    uv.y += 1.0/srctextureDim.y;\n    uv.x = 1.0 - uv.x;\n  }\n  else if(pixelCoord.y > srctextureDim.y){\n    uv.y -= 1.0/srctextureDim.y;\n    uv.x = 1.0 - uv.x;\n  }\n\n  vec4 texel = texture2D(srctexture, uv);\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  // TODO: check why we pre-multiply alphas here.\n  // fragColor = vec4(texel.rgb/texel.a, texel.a);\n\n  if(alphaFromLuminance) {\n    fragColor = vec4(texel.rgb, luminanceFromRGB(texel.rgb));\n  }\n  else {\n    fragColor = texel;\n  }\n  \n  if(invert) {\n    fragColor = vec4(1.0) - fragColor;\n  }\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n\n")}}class $U extends PU{constructor(l,F,U="RGBA",c="FLOAT"){super(l),this.__name=F,this.__formatParam=U,this.__typeParam=c,this.clearColor=new R(0,0,0,0),this.__subImages=[],this.__layoutNeedsRegeneration=!1,this.__async=new Y,this.loaded=!1,this.__async.on("ready",()=>{this.loaded=!0,this.emit("loaded",{})})}isLoaded(){return 0==this.__async.count}getMainImage(){return this.super}addSubImage(l){if(l instanceof El){const F=new CU(this.__gl,l);l.isLoaded()||(this.__async.incAsyncCount(),l.on("loaded",()=>{this.__async.decAsyncCount()})),l.setMetadata("ImageAtlas_gltex",F),F.addRef(this);const U=()=>{this.__layoutNeedsRegeneration=!0,this.renderAtlas()};l.on("updated",U),this.__subImages.push(F)}else l.addRef(this),this.__subImages.push(l);return this.__layoutNeedsRegeneration=!0,this.__subImages.length-1}removeSubImage(l){let F;if(l instanceof El){const U=l.getMetadata("ImageAtlas_gltex");F=this.__subImages.indexOf(U),l.deleteMetadata("ImageAtlas_gltex")}else F=this.__subImages.indexOf(l);this.__subImages[F].removeRef(this),this.__subImages.splice(F,1),this.__layoutNeedsRegeneration=!0}getSubImage(l){return this.__subImages[l]}numSubImages(){return this.__layout?this.__layout.length:this.__subImages.length}generateAtlasLayout(){if(0==this.__subImages.length)return void(this.__layoutNeedsRegeneration=!1);const l=[];this.__subImages.forEach((F,U)=>{l.push({w:F.width+4,h:F.height+4,area:F.width*F.height,index:U})}),l.sort((l,F)=>l.area>F.area?-1:l.area<F.area?1:0);const F=new r;F.fit(l),this.__layout=[],l.forEach((l,F)=>{this.__subImages[l.index];l.fit?this.__layout[l.index]={pos:new a(l.fit.x+2,l.fit.y+2),size:new a(l.w,l.h)}:console.warn("Unable to fit image")});const U=F.root.w,c=F.root.h;this.configure({width:U,height:c,format:"FLOAT"==this.__typeParam&&"RGB"==this.__formatParam?"RGBA":this.__formatParam,type:this.__typeParam,filter:"LINEAR"});const s=this.__gl;if(s.__quadVertexIdsBuffer||s.setupInstancedQuad(),!s.__atlasLayoutShader){s.__atlasLayoutShader=new qU(s);const l=s.__atlasLayoutShader.compileForTarget("GLImageAtlas");s.__atlasLayoutShaderBinding=SU(s,l.attrs,s.__quadattrbuffers,s.__quadIndexBuffer)}let B=Math.round(Math.sqrt(1*this.__layout.length)+.5);if(B=Q.nextPow2(B),B%1!=0&&(B+=1-B%1),s.floatTexturesSupported){const l=new Float32Array(B*B*4);for(let F=0;F<this.__layout.length;F++){const s=this.__layout[F];x.createFromBuffer(l.buffer,4*F*4).set(s.pos.x/U,s.pos.y/c,s.size.x/U,s.size.y/c)}this.__atlasLayoutTexture&&this.__atlasLayoutTexture.width==B&&this.__atlasLayoutTexture.height==B?this.__atlasLayoutTexture.bufferData(l,B,B):(this.__atlasLayoutTexture&&this.__atlasLayoutTexture.destroy(),this.__atlasLayoutTexture=new CU(s,{format:"RGBA",type:"FLOAT",filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1,width:B,height:B,data:l}))}else this.__layoutVec4s=[],this.__layout.forEach((l,F)=>{this.__layoutVec4s[F]=[l.pos.x/U,l.pos.y/c,l.size.x/U,l.size.y/c]});this.__layoutNeedsRegeneration=!1}getLayoutData(l){return this.__layoutVec4s[l]}renderAtlas(l=!1,F=0){if(0==this.__subImages.length)return;this.__layoutNeedsRegeneration&&this.generateAtlasLayout();const U=this.__gl,c={};this.bindForWriting(c,!0),U.__atlasLayoutShader.bind(c,"GLImageAtlas"),U.__atlasLayoutShaderBinding.bind(c);const s=new a(1/this.width,1/this.height),B=c.unifs;for(let l=F;l<this.__subImages.length;l++){const F=this.__subImages[l],d=this.__layout[l];F.bindToUniform(c,B.srctexture),U.uniform2fv(B.pos.location,d.pos.multiply(s).asArray()),U.uniform2fv(B.size.location,d.size.multiply(s).asArray()),U.uniform2f(B.srctextureDim.location,F.width,F.height),U.uniform1i(B.alphaFromLuminance.location,F.alphaFromLuminance),U.uniform1i(B.invert.location,F.invert),U.drawQuad(),c.boundTextures--}l&&this.cleanup(),this.unbind(c),this.emit("updated",{})}isReady(){return null!=this.__atlasLayoutTexture}bindToUniform(l,F){if(!this.__atlasLayoutTexture)return!1;super.bindToUniform(l,F);const U=l.unifs,c=U[F.name+"_layout"];c&&this.__atlasLayoutTexture.bindToUniform(l,c);const s=U[F.name+"_desc"];return s&&this.__gl.uniform4f(s.location,this.width,this.height,this.__atlasLayoutTexture.width,0),!0}cleanup(){for(const l of this.__subImages)l.removeRef(this);this.__subImages=[],this.destroy()}destroy(){this.cleanup(),super.destroy()}}class lc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("ConvolverShader.vertexShader",'\nprecision highp float;\n\n<%include file="utils/quadVertexFromID.glsl"/>\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("ConvolverShader.fragmentShader",'\nprecision highp float;\n\n<%include file="math/constants.glsl"/>\n<%include file="GLSLUtils.glsl"/>\n<%include file="utils/imagePyramid.glsl"/>\n<%include file="pragmatic-pbr/envmap-octahedral.glsl"/>\n\nuniform float roughness;\nvarying vec2 v_texCoord;\n\nuniform sampler2D hammersleyMap;\nvec2 Hammersley(int i, int N) {\n  vec4 rgba =  texture2D(hammersleyMap, vec2((float(i) + 0.5)/float(N)), 0.5);\n  return rgba.rg;\n}\n\nmat3 matrixFromVector(vec3 n) { // frisvad\n  float a = 1.0 / (1.0 + n.z);\n  float b = -n.x * n.y * a;\n  vec3 b1 = vec3(1.0 - n.x * n.x * a, b, -n.x);\n  vec3 b2 = vec3(b, 1.0 - n.y * n.y * a, -n.y);\n  return mat3(b1, b2, n);\n}\n\nvec3 ImportanceSampleGGX(vec2 Xi, float a) {\n  float phi = 2.0 * PI * Xi.x;\n  float cos_theta = sqrt((1.0 - Xi.y)/(1.0 + (a*a - 1.0) * Xi.y));\n  float sin_theta = sqrt(1.0 - cos_theta * cos_theta);\n\n  // float phi = Xi.y * 2.0 * PI;\n  // float cos_theta = sqrt(1.0 - Xi.x);\n  // float sin_theta = sqrt(1.0 - cos_theta * cos_theta);\n\n  vec3 H;\n  H.x = sin_theta * cos(phi);\n  H.y = sin_theta * sin(phi);\n  H.z = cos_theta;\n  return H;\n}\n\n// TODO: use tobias\'s code. The guy clearly knows what he\'s doing...\n// https://github.com/thefranke/dirtchamber/blob/master/shader/importance.hlsl\n// Compute a LOD level for filtered importance sampling.\n// From GPU Gems 3: GPU-Based Importance Sampling.\n\n\n#define M_PI       3.14159265358979323846   // pi\n#define M_HALF_PI  1.57079632679489661923   // pi/2\nfloat sqr(float val){ return val*val; }\nfloat saturate(float val) { return clamp(val, 0.0, 1.0); }\nvec3 saturate(vec3 val) { return clamp(val, 0.0, 1.0); }\n\n// Microfacet Models for Refraction through Rough Surfaces\n// Walter et al.\n// http://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.html\n// aka Towbridge-Reitz\nfloat D_ggx(in float alpha, in float NoH)\n{\n  float a2 = alpha*alpha;\n  float cos2 = NoH*NoH;\n\n  return (1.0/M_PI) * sqr(alpha/(cos2 * (a2 - 1.0) + 1.0));\n\n  /*\n  // version from the paper, eq 33\n  float CosSquared = NoH*NoH;\n  float TanSquared = (1.0 - CosSquared)/CosSquared;\n  return (1.0/M_PI) * sqr(alpha/(CosSquared * (alpha*alpha + TanSquared)));\n  */\n}\nfloat compute_lod(in vec3 H, in float pdf, in int num_samples, in int ww, in int hh)\n{\n  return max(0.0, 0.5*log2(float(ww*hh)/float(num_samples)) - 0.5*log2(pdf));\n}\n\nuniform sampler2D   envMapPyramid;\nuniform sampler2D   envMapPyramid_layout;\nuniform vec4        envMapPyramid_desc;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec3 N = sphOctUvToDir(v_texCoord);\n\n  if(false){\n    vec2 uv = dirToSphOctUv(N);\n    // fragColor = vec4(uv.x, uv.y, 0.0, 1.0);\n    fragColor = sampleImagePyramid(uv, 0.5, envMapPyramid_layout, envMapPyramid, envMapPyramid_desc);\n    // fragColor = sampleSubImage(uv, 0, envMapPyramid_layout, envMapPyramid, envMapPyramid_desc);\n    // fragColor = texture2D(envMapPyramid, uv);\n  }\n  else{\n    const int numSamples = NUM_SAMPLES;\n    int w = int(floor(envMapPyramid_desc.x + 0.5));\n    int h = int(floor(envMapPyramid_desc.y + 0.5));\n\n    vec4 color = vec4(0.0,0.0,0.0,0.0);\n    float weight = 0.0;\n    mat3 vecSpace = matrixFromVector(N);\n    float a = roughness*roughness;\n    for(int i=0; i<numSamples; i++) {\n      vec2 Xi = Hammersley(i, numSamples);\n      vec3 H = ImportanceSampleGGX(Xi, a);\n      vec3 V = normalize(vecSpace * H);\n      float VdotN = dot(V, N);\n      float NoH = saturate( dot( N, H ) );\n      float VoH = saturate( dot( V, H ) );\n\n      vec2 uv = dirToSphOctUv(V);\n      // float pdf = D_ggx(a, NoH) * NoH / (4.0 * VoH);\n      // float lod = compute_lod(H, pdf, numSamples, w, h);\n\n      color += sampleImagePyramid(uv, a, envMapPyramid_layout, envMapPyramid, envMapPyramid_desc) * VdotN;\n      weight += VdotN;\n    }\n    color /= float(weight);\n    fragColor = vec4(color.rgb, 1.0);\n  }\n  \n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n\n')}}rU.setShaderModule("utils/imagePyramid.glsl",'\n\n<%include file="utils/imageAtlas.glsl"/>\n\nvec4 sampleImagePyramid(vec2 uv, float lod, in sampler2D atlasLayout, in sampler2D atlasImage, in vec4 atlasDesc){\n  if (lod < 0.00001 || lod > 0.9999) {\n    float imageIndex = lod * (atlasDesc.z-1.0);\n    int imageId0 = int(imageIndex);\n    return sampleSubImage(uv, imageId0, atlasLayout, atlasImage, atlasDesc);\n  } else {\n    float imageIndex = lod * (atlasDesc.z-1.0);\n    int imageId0 = int(floor(imageIndex));\n    int imageId1 = imageId0+1;\n    float blend = fract(imageIndex);\n    vec4 c0 = sampleSubImage(uv, imageId0, atlasLayout, atlasImage, atlasDesc);\n    vec4 c1 = sampleSubImage(uv, imageId1, atlasLayout, atlasImage, atlasDesc);\n    return mix(c0, c1, blend);\n  } \n}\n\n\n');class Fc extends $U{constructor(l,F,U,c=!0,s=16){super(l,F),this.__srcGLTex=U,this.__fbos=[],U.on("updated",()=>{this.renderAtlas(c)}),this.__srcGLTex.isLoaded()?(this.generateAtlasLayout(s),this.renderAtlas(c)):this.__srcGLTex.on("updated",()=>{this.generateAtlasLayout(s),this.renderAtlas(c)}),U.on("destructing",()=>{console.log(this.__srcGLTex.getName()+" ImagePyramid destructing"),this.destroy()})}generateAtlasLayout(l){const F=this.__gl;this.size=this.__srcGLTex.height;const U=this.__srcGLTex.width/this.__srcGLTex.height;this.addSubImage(this.__srcGLTex);var c;for(let s=Math.round((c=this.size,Math.log2(c)))-1;s>=0;--s){const c=Math.pow(2,s);if(c<l)break;const B=new CU(F,{format:this.__srcGLTex.getFormat(),type:this.__srcGLTex.getType(),width:c*U,height:c,filter:"LINEAR",wrap:"CLAMP_TO_EDGE"});this.addSubImage(B),this.__fbos.push(new TU(F,B))}super.generateAtlasLayout()}renderAtlas(l=!0){const F=this.__gl,U={};F.screenQuad.bindShader(U);for(let l=0;l<this.__fbos.length;l++)this.__fbos[l].bindAndClear(),F.screenQuad.draw(U,this.getSubImage(l));super.renderAtlas(l)}destroy(){super.destroy();for(const l of this.__fbos)l.destroy()}}class Uc extends $U{constructor(l,F){super(l,F),this.__gl=l,l.__quadVertexIdsBuffer||l.setupInstancedQuad(),this.__convolved=!1,this.__fbos=[]}generateHammersleySamples(l){const F=this.__gl;if(!F["Hammersley"+l]){const U=new Float32Array(3*l);for(let F=0;F<l;F++){const c=OU(F,l),s=3*F;U[s+0]=c[0],U[s+1]=c[1]}F["Hammersley"+l]=new CU(F,{format:"RGB",type:"FLOAT",filter:"NEAREST",wrap:"CLAMP_TO_EDGE",width:l,height:1,data:U,mipMapped:!1})}return F["Hammersley"+l]}convolveProbe(l){const F=this.__gl,U=this.generateHammersleySamples(1024);if(!this.__convolved){this.__lodPyramid||(this.__lodPyramid=new Fc(F,"Probe Lods",l,!1),this.__lodPyramid.on("updated",()=>{this.convolveProbe(l)})),this.addSubImage(l);let U=[l.width/2,l.height/2];const c=6;for(let l=0;l<c;l++){const l=new CU(F,{format:"RGBA",type:"FLOAT",filter:"LINEAR",wrap:"CLAMP_TO_EDGE",width:U[0],height:U[1]});this.addSubImage(l);const c=new TU(F,l);c.setClearColor([0,1,0,0]),this.__fbos.push(c),U=[U[0]/2,U[1]/2]}this.generateAtlasLayout(),this.__convolverShader=new lc(F);const s=this.__convolverShader.compileForTarget("GLProbe",Object.assign({repl:{NUM_SAMPLES:1024}},F.shaderopts));this.__covolverShaderBinding=SU(F,s.attrs,F.__quadattrbuffers,F.__quadIndexBuffer)}const c={};this.__convolverShader.bind(c,"GLProbe"),this.__covolverShaderBinding.bind(c);const s=c.unifs;for(let l=0;l<this.__fbos.length;l++){if(this.__fbos[l].bindAndClear(),this.__lodPyramid.bindToUniform(c,s.envMapPyramid),"hammersleyMap"in s&&U.bindToUniform(c,s.hammersleyMap),"roughness"in s){const U=(l+1)/this.__fbos.length;F.uniform1f(s.roughness.location,U)}F.drawQuad()}this.__convolved=!0,this.renderAtlas(!1)}bindProbeToUniform(l,F){this.__convolved&&super.bindToUniform(l,F)}destroy(){super.destroy(),this.__convolverShader.destroy();for(const l of this.__fbos)l.destroy()}}rU.setShaderModule("stack-gl/inverse.glsl","\n\n\n#ifndef ENABLE_ES3\n\nfloat inverse(float m) {\n  return 1.0 / m;\n}\n\nmat2 inverse(mat2 m) {\n  return mat2(m[1][1],-m[0][1],\n             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);\n}\n\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\n#endif\n\n"),rU.setShaderModule("stack-gl/transpose.glsl","\n\n\n#ifndef ENABLE_ES3\n\nfloat transpose(float m) {\n  return m;\n}\n\nmat2 transpose(mat2 m) {\n  return mat2(m[0][0], m[1][0],\n              m[0][1], m[1][1]);\n}\n\nmat3 transpose(mat3 m) {\n  return mat3(m[0][0], m[1][0], m[2][0],\n              m[0][1], m[1][1], m[2][1],\n              m[0][2], m[1][2], m[2][2]);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\n              m[0][1], m[1][1], m[2][1], m[3][1],\n              m[0][2], m[1][2], m[2][2], m[3][2],\n              m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\n#endif\n\n"),rU.setShaderModule("pragmatic-pbr/envmap-octahedral.glsl","\n\n#define sectorize(value) step(0.0, (value))*2.0-1.0\n#define sum(value) dot(clamp((value), 1.0, 1.0), (value))\n\n\nvec2 dirToSphOctUv(vec3 normal){\n    normal = normalize(normal);\n    vec3 aNorm = abs(normal);\n    vec3 sNorm = sectorize(normal);\n\n    vec2 dir = max(aNorm.xy, 1e-20);\n    float orient = atan(dir.x, dir.y)/HalfPI;\n\n    dir = max(vec2(aNorm.z, length(aNorm.xy)), 1e-20);\n    float pitch = atan(dir.y, dir.x)/HalfPI;\n\n    vec2 uv = vec2(sNorm.x*orient, sNorm.y*(1.0-orient))*pitch;\n\n    if(normal.z < 0.0){\n        uv = sNorm.xy - abs(uv.ts)*sNorm.xy;\n    }\n    return uv*0.5+0.5;\n}\n\n\nvec3 sphOctUvToDir(vec2 uv){\n    uv = uv*2.0-1.0;\n    vec2 suv = sectorize(uv);\n    float sabsuv =  sum(abs(uv));\n    float pitch = sabsuv*HalfPI;\n\n    if (pitch <= 0.0) {\n        return vec3(0.0, 0.0, 1.0);\n    }\n    if (abs(pitch - PI) < 0.000001) {\n        return vec3(0.0, 0.0, -1.0);\n    }\n    if(sabsuv > 1.0){\n        uv = (1.0-abs(uv.ts))*suv;\n    }\n\n    float orient = (abs(uv.s)/sabsuv)*HalfPI;\n    float sOrient = sin(orient);\n    float cOrient = cos(orient);\n    float sPitch = sin(pitch);\n    float cPitch = cos(pitch);\n\n    return vec3(\n        sOrient*suv.s*sPitch,\n        cOrient*suv.t*sPitch,\n        cPitch\n    );\n}\n\n"),rU.setShaderModule("pragmatic-pbr/envmap-equirect.glsl","\n\n\nvec2 latLongUVsFromDir(vec3 dir) {\n  // Math function taken from...\n  // http://gl.ict.usc.edu/Data/HighResProbes/\n  // Note: Scaling from u=[0,2], v=[0,1] to u=[0,1], v=[0,1]\n  float phi = acos(dir.z);\n  float theta = atan(dir.x, dir.y);\n  return vec2((1.0 + theta / PI) / 2.0, phi / PI);\n}\n\n// Note: when u == 0.5 z = 1.0\nvec3 dirFromLatLongUVs(float u, float v) {\n    // http://gl.ict.usc.edu/Data/HighResProbes/\n    float theta = PI*((u * 2.0) - 1.0);\n    float phi = PI*v;\n    return vec3(sin(phi)*sin(theta), sin(phi)*cos(theta), cos(phi));\n}\n\nvec3 dirFromPolar(vec2 polar) {\n    float u = polar.x / (PI * 2.0);\n    float v = polar.y / PI;\n    return dirFromLatLongUVs(u, v);\n}\n\n"),rU.setShaderModule("pragmatic-pbr/envmap-dualfisheye.glsl","\n\n\n\nvec2 dualfisheyeUVsFromDir(vec3 dir) {\n  vec2 result;\n  float angle = 0.465;\n    if(dir.x < 0.0) {\n        result = vec2(((dir.z * -angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);\n    }\n    else {\n        result = vec2( 0.5 + ((dir.z * angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);\n    }\n    return result;\n}\n\n\n");class cc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("EnvMapShader.vertexShader",'\nprecision highp float;\n\n<%include file="utils/quadVertexFromID.glsl"/>\n\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\n\n<%include file="stack-gl/inverse.glsl"/>\n<%include file="stack-gl/transpose.glsl"/>\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID() * 2.0;\n  v_texCoord = position * 0.5 + 0.5;\n\n  mat4 inverseProjection = inverse(projectionMatrix);\n  mat3 inverseModelview = transpose(mat3(viewMatrix));\n\n  // transform from the normalized device coordinates back to the view space\n  vec3 unprojected = (inverseProjection * vec4(position, 0, 1)).xyz;\n\n  // transfrom from the view space back to the world space\n  // and use it as a sampling vector\n  v_worldDir = inverseModelview * unprojected;\n\n  gl_Position = vec4(position, 0, 1);\n}\n\n')}}class sc extends cc{constructor(l){super(l),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("LatLongEnvMapShader.fragmentShader",'\nprecision highp float;\n\n<%include file="math/constants.glsl"/>\n<%include file="GLSLUtils.glsl"/>\n<%include file="pragmatic-pbr/envmap-equirect.glsl"/>\n\n#define ENABLE_INLINE_GAMMACORRECTION\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n<%include file="stack-gl/gamma.glsl"/>\nuniform float exposure;\n#endif\n\nuniform sampler2D backgroundImage;\n\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec4 texel = texture2D(backgroundImage, v_texCoord);\n  fragColor = vec4(texel.rgb/texel.a, 1.0);\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  //fragColor.rgb = toGamma(fragColor.rgb * exposure);\n\n  // Assuming a simple RGB image in gamma space for now.\n  fragColor.rgb = fragColor.rgb * exposure;\n#endif\n\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n'),this.finalize()}}class Bc extends cc{constructor(l){super(l),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("OctahedralEnvMapShader.fragmentShader",'\nprecision highp float;\n\n<%include file="math/constants.glsl"/>\n<%include file="GLSLUtils.glsl"/>\n<%include file="pragmatic-pbr/envmap-octahedral.glsl"/>\n<%include file="utils/imagePyramid.glsl"/>\n<%include file="stack-gl/gamma.glsl"/>\n\nuniform float focus;\n\n#define ENABLE_INLINE_GAMMACORRECTION\n#ifdef ENABLE_INLINE_GAMMACORRECTION\nuniform float exposure;\n#endif\n\n// uniform ImageAtlas envMap;\nuniform sampler2D   envMapPyramid;\nuniform sampler2D   envMapPyramid_layout;\nuniform vec4        envMapPyramid_desc;\n\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\nvarying vec2 v_texCoord;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 uv = dirToSphOctUv(normalize(v_worldDir));\n  if(false){\n    // Use these lines to debug the src GL image.\n    vec4 texel = texture2D(envMapPyramid, uv);\n    fragColor = vec4(texel.rgb/texel.a, 1.0);\n  }\n  else{\n    fragColor = vec4(sampleImagePyramid(uv, focus, envMapPyramid_layout, envMapPyramid, envMapPyramid_desc).rgb, 1.0);\n  }\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n'),this.finalize()}}class dc extends cc{constructor(l){super(l),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("LatLongEnvMapShader.fragmentShader",'\nprecision highp float;\n\n<%include file="math/constants.glsl"/>\n<%include file="GLSLUtils.glsl"/>\n<%include file="pragmatic-pbr/envmap-equirect.glsl"/>\n\n#define ENABLE_INLINE_GAMMACORRECTION\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n<%include file="stack-gl/gamma.glsl"/>\nuniform float exposure;\n#endif\n\nuniform sampler2D backgroundImage;\n\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\nvarying vec2 v_texCoord;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 uv = latLongUVsFromDir(normalize(v_worldDir));\n\n  vec4 texel = texture2D(backgroundImage, uv);\n  fragColor = vec4(texel.rgb/texel.a, 1.0);\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n'),this.finalize()}static getParamDeclarations(){return super.getParamDeclarations()}}class ic extends cc{constructor(l){super(l),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("SterioLatLongEnvMapShader.fragmentShader",'\nprecision highp float;\n\n<%include file="math/constants.glsl"/>\n<%include file="GLSLUtils.glsl"/>\n<%include file="pragmatic-pbr/envmap-equirect.glsl"/>\n\n#define ENABLE_INLINE_GAMMACORRECTION\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n<%include file="stack-gl/gamma.glsl"/>\nuniform float exposure;\n#endif\n\nuniform int eye;// L = 0, R = 1;\n\nuniform sampler2D backgroundImage;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\nvarying vec2 v_texCoord;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 uv = latLongUVsFromDir(normalize(v_worldDir));\n  uv.y *= 0.5;\n  if(eye == 1){\n    uv.y += 0.5;\n  }\n\n  vec4 texel = texture2D(backgroundImage, uv);\n  fragColor = vec4(texel.rgb/texel.a, 1.0);\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  //fragColor.rgb = toGamma(fragColor.rgb * exposure);\n\n  // Assuming a simple RGB image in gamma space for now.\n  fragColor.rgb = fragColor.rgb * exposure;\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n'),this.finalize()}}class Qc extends cc{constructor(l){super(l),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("DualFishEyeEnvMapShader.fragmentShader",'\nprecision highp float;\n\n<%include file="math/constants.glsl"/>\n<%include file="GLSLUtils.glsl"/>\n<%include file="pragmatic-pbr/envmap-dualfisheye.glsl"/>\n\n#define ENABLE_INLINE_GAMMACORRECTION\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n<%include file="stack-gl/gamma.glsl"/>\nuniform float exposure;\n#endif\n\nuniform sampler2D backgroundImage;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\nvarying vec2 v_texCoord;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 uv = dualfisheyeUVsFromDir(normalize(v_worldDir));\n\n  vec4 texel = texture2D(backgroundImage, uv);\n  fragColor = vec4(texel.rgb/texel.a, 1.0);\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  //fragColor.rgb = toGamma(fragColor.rgb * exposure);\n\n  // Assuming a simple RGB image in gamma space for now.\n  fragColor.rgb = fragColor.rgb * exposure;\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n'),this.finalize()}}class tc extends cc{constructor(l){super(l),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("DualFishEyeEnvMapShader.fragmentShader",'\nprecision highp float;\n\n<%include file="math/constants.glsl"/>\n<%include file="GLSLUtils.glsl"/>\n<%include file="pragmatic-pbr/envmap-equirect.glsl"/>\n<%include file="pragmatic-pbr/envmap-dualfisheye.glsl"/>\n\n#define ENABLE_INLINE_GAMMACORRECTION\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n<%include file="stack-gl/gamma.glsl"/>\nuniform float exposure;\n#endif\n\nuniform sampler2D backgroundImage;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\nvarying vec2 v_texCoord;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 uv = dualfisheyeUVsFromDir(dirFromLatLongUVs(v_texCoord.x, v_texCoord.y));\n  vec4 texel = texture2D(backgroundImage, uv);\n  fragColor = vec4(texel.rgb/texel.a, 1.0);\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  //fragColor.rgb = toGamma(fragColor.rgb * exposure);\n\n  // Assuming a simple RGB image in gamma space for now.\n  // fragColor.rgb = fragColor.rgb * exposure;\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n'),this.finalize()}}class Ic extends Uc{constructor(l,F,U){super(l.gl,"EnvMap"),this.__renderer=l,this.__envMap=F,this.__backgroundFocus=0;const c=l.gl;c.__quadVertexIdsBuffer||c.setupInstancedQuad();let s=this.__envMap.getMetadata("gltexture");s||(s=new AU(c,this.__envMap)),this.__srcGLTex=s,this.__envMapShader=new Bc(c);const B=this.__envMapShader.compileForTarget("GLEnvMap",U);if(this.__envMapShaderBinding=SU(c,B.attrs,c.__quadattrbuffers,c.__quadIndexBuffer),this.__envMap.isLoaded())this.convolveProbe(s);else{const l=()=>{this.convolveProbe(s),this.emit("loaded",{})};this.__envMap.on("loaded",l)}}getEnvMap(){return this.__envMap}getBackgroundFocus(){return this.__backgroundFocus}setBackgroundFocus(l){this.__backgroundFocus=l,this.__renderer.requestRedraw()}draw(l){if(this.__envMap.isLoaded()){const F=this.__gl;{this.__envMapShader.bind(l,"GLEnvMap");const U=l.unifs;this.bindProbeToUniform(l,U.envMapPyramid);{const l=U.focus;l&&F.uniform1f(l.location,this.__backgroundFocus)}{const c=U.exposure;c&&F.uniform1f(c.location,l.exposure)}this.__envMapShaderBinding.bind(l),F.depthMask(!1),l.bindViewports(U,()=>{F.drawQuad()})}}}bindToUniform(l,F,U){return this.__srcGLTex.bindToUniform(l,F,U)}destroy(){super.destroy(),this.__srcGLTex.loaded.disconnectScope(this),this.__srcGLTex.updated.disconnectScope(this),this.__srcGLTex.destroy()}}class Vc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("ScreenQuadShader.vertexShader",'\nprecision highp float;\n\n<%include file="utils/quadVertexFromID.glsl"/>\n\nuniform vec2 pos;\nuniform vec2 size;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n    vec2 position = getQuadVertexPositionFromID();\n    v_texCoord = position+0.5;\n    gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * abs(size) * 2.0), 0.0, 1.0);\n    if(size.x < 0.0)\n        v_texCoord.x = 1.0 - v_texCoord.x;\n    if(size.y < 0.0)\n        v_texCoord.y = 1.0 - v_texCoord.y;\n}\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("ScreenQuadShader.fragmentShader","\nprecision highp float;\n\nuniform sampler2D image;\n\nvarying vec2 v_texCoord;\n\n\n#ifdef ENABLE_ES3\n    out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n    vec4 fragColor;\n#endif\n    fragColor = texture2D(image, v_texCoord);\n    fragColor = vec4(fragColor.rgb/fragColor.a, 1.0);\n\n#ifndef ENABLE_ES3\n    gl_FragColor = fragColor;\n#endif\n}\n"),this.finalize()}}class ec{constructor(l,F){this.__gl=l,this.__pos=[0,0],this.__size=[1,1],this.flipY=!0,this.__glshader=new Vc(l),l.__quadVertexIdsBuffer||l.setupInstancedQuad();const U=this.__glshader.compileForTarget("GLScreenQuad",F);this.__quadBinding=SU(l,U.attrs,l.__quadattrbuffers,l.__quadIndexBuffer),this.ready=!0}bind(l,F,U,c){const s=l.unifs;F.bindToUniform(l,l.unifs.image);const B=this.__gl;{const l=s.pos;l&&B.uniform2fv(l.location,U?U instanceof g?U.asArray():U:this.__pos)}{const l=s.size;l&&B.uniform2fv(l.location,c?c instanceof g?c.asArray():c:this.__size)}this.__quadBinding.bind(l)}bindShader(l){return this.__glshader.bind(l,"GLScreenQuad")}draw(l,F,U,c){this.bind(l,F,U,c),this.__gl.drawQuad()}destroy(){}}class Xc extends z{constructor(l){super(),this.__renderer=l,this.__doubleClickTimeMSParam=this.addParameter(new Il("DoubleClickTimeMS",200)),this.__fbo=void 0;this.__renderer.on("sceneSet",()=>{const F=l.getScene().settings.getParameter("BackgroundColor"),U=()=>{const l=F.getValue(),U=this.__renderer.gl;l instanceof El?"FLOAT"===l.type?(this.__backgroundTexture=l,this.__backgroundGLTexture=new AU(U,l)):(this.__backgroundTexture=l,this.__backgroundGLTexture=new CU(U,l)):l instanceof R?(this.__backgroundGLTexture&&(this.__backgroundGLTexture.destroy(),this.__backgroundGLTexture=void 0,this.__backgroundTexture=void 0),this.__backgroundColor=l):console.warn("Invalid background:"+l),this.emit("updated",{})};U(),F.on("valueChanged",U)})}getRenderer(){return this.__renderer}getBl(){return this.__bl}setBl(l){this.__bl=l,this.resize(this.__canvasWidth,this.__canvasHeight)}getTr(){return this.__tr}setTr(l){this.__tr=l,this.resize(this.__canvasWidth,this.__canvasHeight)}getPosX(){return this.__x}getPosY(){return this.__y}getWidth(){return this.__width}getHeight(){return this.__height}getBackground(){console.warn("Deprecated Function. Please access the Scene Settings object.");return this.__renderer.getScene().settings.getParameter("BackgroundColor").getValue()}setBackground(l){console.warn("Deprecated Function. Please access the Scene Settings object.");this.__renderer.getScene().settings.getParameter("BackgroundColor").setValue(l),this.emit("updated",{})}resize(l,F){this.__canvasWidth=l,this.__canvasHeight=F,this.__width=l,this.__height=F,this.emit("resized",{width:this.__width,height:this.__height})}onMouseDown(l){return!1}onMouseUp(l){return!1}onMouseMove(l){return!1}onMouseLeave(l){return!1}onKeyPressed(l,F){return!1}onKeyDown(l,F){return!1}onKeyUp(l,F){return!1}}class gc extends Xc{constructor(l,F,U,c){super(l),this.__name=F,this.__projectionMatrix=new L,this.__frustumDim=new a,this.__bl=new a(0,0),this.__tr=new a(1,1),this.__exposure=0,this.__exposureRange=[-5,10],this.__tonemap=!0,this.__gamma=2.2,this.__prevDownTime=0,this.__geomDataBuffer=void 0,this.__geomDataBufferFbo=void 0,this.setCamera(new eU("Default")),this.setManipulator(new yU),this.resize(U,c)}resize(l,F){this.__canvasWidth=l,this.__canvasHeight=F,this.__x=l*this.__bl.x,this.__y=l*this.__bl.y,this.__width=l*this.__tr.x-l*this.__bl.x,this.__height=F*this.__tr.y-F*this.__bl.y,this.region=[this.__x,this.__y,this.__width,this.__height],this.__camera&&this.__updateProjectionMatrix(),this.__geomDataBufferFbo&&(this.__geomDataBuffer.resize(this.__width,this.__height),this.__geomDataBufferFbo.resize()),this.emit("resized",{width:l,height:F})}getCamera(){return this.__camera}setCamera(l){this.__camera=l;const F=l.getParameter("GlobalXfo"),U=()=>{this.__cameraXfo=F.getValue(),this.__cameraMat=this.__cameraXfo.toMat4(),this.__viewMat=this.__cameraMat.inverse()};U(),F.on("valueChanged",()=>{U(),this.invalidateGeomDataBuffer(),this.emit("updated",{}),this.emit("viewChanged",{interfaceType:"CameraAndPointer",viewXfo:this.__cameraXfo,focalDistance:this.__camera.getFocalDistance()})}),this.__camera.on("projectionParamChanged",()=>{this.__updateProjectionMatrix(),this.emit("updated",{})}),this.__updateProjectionMatrix()}getManipulator(){return this.__cameraManipulator}setManipulator(l){this.__cameraManipulator=l}__updateProjectionMatrix(){const l=this.__width/this.__height;this.__camera.updateProjectionMatrix(this.__projectionMatrix,l);const F=Math.tan(this.__camera.getFov()/2)*this.__camera.getNear()*2,U=F*l;this.__frustumDim.set(U,F)}getProjectionMatrix(){return this.__projectionMatrix}getViewMatrix(){return this.__viewMat}setActive(l){activeViewport=l?this:void 0}frameView(l){this.__width>0&&this.__height>0?this.__camera.frameView(this,l):console.warn("Unable to frameView while Viewport with and height are 0.")}calcRayFromScreenPos(l){const F=this.__canvasHeight*(1-this.__tr.y);let U=(l.x-this.__x)/this.__width,c=(l.y-F)/this.__height;U=2*U-1,c=2*c-1;const s=this.__cameraMat,B=this.__projectionMatrix.inverse();if(null==B)return null;let d,i;return this.__camera.getIsOrthographic()?(d=s.transformVec3(B.transformVec3(new Z(U,-c,-1))),i=new Z(0,0,-1)):(d=s.translation,i=B.transformVec3(new Z(U,-c,-1))),i=s.rotateVec3(i).normalize(),new C(d,i)}createGeomDataFbo(l){const F=this.__renderer.gl;this.__floatGeomBuffer=l,this.__floatGeomBuffer?this.__geomDataBuffer=new CU(F,{type:"FLOAT",format:"RGBA",filter:"NEAREST",width:this.__width<=1?1:this.__width,height:this.__height<=1?1:this.__height}):this.__geomDataBuffer=new CU(F,{type:"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:this.__width<=1?1:this.__width,height:this.__height<=1?1:this.__height}),this.__geomDataBufferFbo=new TU(F,this.__geomDataBuffer,!0),this.__geomDataBufferFbo.setClearColor([0,0,0,0])}getGeomDataFbo(){return this.__geomDataBufferFbo}renderGeomDataFbo(){if(this.__geomDataBufferFbo){this.__geomDataBufferFbo.bindAndClear();const l={};this.__initRenderState(l),this.__renderer.drawSceneGeomData(l),this.__geomDataBufferInvalid=!1}}invalidateGeomDataBuffer(){this.__geomDataBufferInvalid=!0}getGeomDataAtPos(l,F){if(this.__geomDataBufferFbo){if(this.__geomDataBufferInvalid&&(this.renderGeomDataFbo(),this.__screenPos=null),l===this.__screenPos)return this.__intersectionData;this.__screenPos=l,this.__intersectionData=null;const U=this.__renderer.gl;let c,s;if(U.finish(),this.__geomDataBufferFbo.bindForReading(),U.floatGeomBuffer){if(s=new Float32Array(4),U.readPixels(l.x,this.__height-l.y,1,1,U.RGBA,U.FLOAT,s),0==s[3])return;c=63&Math.round(s[0])}else{if(s=new Uint8Array(4),U.readPixels(l.x,this.__height-l.y,1,1,U.RGBA,U.UNSIGNED_BYTE,s),U.bindFramebuffer(U.FRAMEBUFFER,null),0==s[0]&&0==s[1])return;c=0}this.__geomDataBufferFbo.unbind();const B=this.__renderer.getPass(c);if(!B)return void console.warn("Geom data buffer returns invalid pass id:",c);const d=B.getGeomItemAndDist(s);if(d){F||(F=this.calcRayFromScreenPos(l));const U=F.start.add(F.dir.scale(d.dist));this.__intersectionData={screenPos:l,mouseRay:F,intersectionPos:U,geomItem:d.geomItem,dist:d.dist,geomData:s}}return this.__intersectionData}}getGeomItemsInRect(l,F){if(this.__geomDataBufferFbo){const U=this.__renderer.gl;U.finish();const c=Math.round(this.__height-F.y),s=Math.round(l.x),B=Math.round(F.x-l.x),d=Math.round(F.y-l.y),i=B*d;let Q;this.__geomDataBufferFbo.bindForReading(),U.floatGeomBuffer?(Q=new Float32Array(4*i),U.readPixels(s,c,B,d,U.RGBA,U.FLOAT,Q)):(Q=new Uint8Array(4*i),U.readPixels(s,c,B,d,U.RGBA,U.UNSIGNED_BYTE,Q)),U.bindFramebuffer(U.FRAMEBUFFER,null);const t=new Set;for(let l=0;l<i;l++){let F;const c=Q.subarray(4*l,4*(l+1));F=U.floatGeomBuffer?Math.round(c[0]):0;const s=this.__renderer.getPass(F).getGeomItemAndDist(c);s&&t.add(s.geomItem)}return t}}__eventMousePos(l){return new a(l.rendererX-this.getPosX(),l.rendererY-this.getPosY())}__prepareEvent(l){if(l.viewport=this,l.propagating=!0,l.stopPropagation=()=>{l.propagating=!1},l.setCapture=l=>{this.capturedItem=l},l.getCapture=l=>this.capturedItem,l.releaseCapture=()=>{this.capturedItem=null,this.renderGeomDataFbo()},l instanceof MouseEvent){const F=this.__eventMousePos(l);l.mousePos=F,l.mouseRay=this.calcRayFromScreenPos(F);const U=this.getGeomDataAtPos(l.mousePos,l.mouseRay);null!=U&&(l.intersectionData=U)}}setCapture(l){this.capturedItem=l}getCapture(){return this.capturedItem}releaseCapture(){this.capturedItem=null,this.renderGeomDataFbo()}onMouseDown(l){if(this.__prepareEvent(l),this.capturedItem)return void this.capturedItem.onMouseDown(l);if(null!=l.intersectionData){if(l.intersectionData.geomItem.onMouseDown(l),!l.propagating||this.capturedItem)return;if(this.emit("mouseDownOnGeom",l),!l.propagating)return}const F=Date.now();if(F-this.__prevDownTime<this.__doubleClickTimeMSParam.getValue()){if(this.__cameraManipulator&&(this.__cameraManipulator.onDoubleClick(l),!l.propagating))return;this.emit("mouseDoubleClicked",l)}else{if(this.__prevDownTime=F,this.__cameraManipulator&&(this.__cameraManipulator.onMouseDown(l),!l.propagating))return;this.emit("mouseDown",l)}return!1}onMouseMove(l){if(this.__prepareEvent(l),this.capturedItem)this.capturedItem.onMouseMove(l);else{if(null!=l.intersectionData){if(l.intersectionData.geomItem!=this.mouseOverItem){if(this.mouseOverItem){const F={...l,geomItem:this.mouseOverItem};this.emit("mouseLeaveGeom",F),F.propagating&&this.mouseOverItem.onMouseLeave(F)}this.mouseOverItem=l.intersectionData.geomItem,this.emit("mouseOverGeom",l),l.propagating&&this.mouseOverItem.onMouseEnter(l)}if(l.intersectionData.geomItem.onMouseMove(l),!l.propagating||this.capturedItem)return}else if(this.mouseOverItem){const F={...l,geomItem:this.mouseOverItem};this.emit("mouseLeaveGeom",F),F.propagating&&this.mouseOverItem.onMouseLeave(F),this.mouseOverItem=null}this.__cameraManipulator&&(this.__cameraManipulator.onMouseMove(l),!l.propagating)||this.emit("mouseMove",l)}}onMouseUp(l){this.__prepareEvent(l),this.capturedItem?this.capturedItem.onMouseUp(l):(null==l.intersectionData||(l.intersectionData.geomItem.onMouseUp(l),l.propagating))&&(this.__cameraManipulator&&(this.__cameraManipulator.onMouseUp(l),!l.propagating)||this.emit("mouseUp",l))}onMouseLeave(l){this.__prepareEvent(l),this.emit("mouseLeave",l)}onKeyPressed(l,F){this.__prepareEvent(F),this.__cameraManipulator&&this.__cameraManipulator.onKeyPressed(l,F)||this.emit("keyPressed",F)}onKeyDown(l,F){this.__prepareEvent(F),this.__cameraManipulator&&this.__cameraManipulator.onKeyDown(l,F)||this.emit("keyDown",F)}onKeyUp(l,F){this.__prepareEvent(F),this.__cameraManipulator&&this.__cameraManipulator.onKeyUp(l,F)||this.emit("keyUp",F)}onWheel(l){this.__prepareEvent(l),(null==l.intersectionData||(l.intersectionData.geomItem.onWheel(l),l.propagating))&&(this.__cameraManipulator?this.__cameraManipulator.onWheel(l):this.emit("mouseWheel",l))}__eventTouchPos(l){return new a(l.rendererX-this.getPosX(),l.rendererY-this.getPosY())}onTouchStart(l){if(this.__prepareEvent(l),1==l.touches.length){const F=l.touches[0],U=this.__eventTouchPos(F);l.touchPos=U,l.touchRay=this.calcRayFromScreenPos(U);const c=this.getGeomDataAtPos(U,l.touchRay);if(null!=c){if(l.intersectionData=c,c.geomItem.onMouseDown(l,c),!l.propagating)return;if(this.capturedItem)return;if(this.emit("mouseDownOnGeom",l),!l.propagating)return}const s=Date.now();if(s-this.__prevDownTime<this.__doubleClickTimeMSParam.getValue()){if(this.__cameraManipulator&&(this.__cameraManipulator.onDoubleTap(l),!l.propagating))return;return void this.emit("doubleTapped",l)}this.__prevDownTime=s}this.__cameraManipulator?this.__cameraManipulator.onTouchStart(l):this.emit("touchStart",l)}onTouchMove(l){if(this.__prepareEvent(l),this.capturedItem){l.touchPos=[],l.touchRay=[];for(let F=0;F<l.touches.length;F++){const U=l.touches[F],c=this.__eventTouchPos(U);l.touchPos[F]=c,l.touchRay[F]=this.calcRayFromScreenPos(c)}return l.mousePos=l.touchPos[0],l.mouseRay=l.touchRay[0],void this.capturedItem.onMouseMove(l)}this.__cameraManipulator?this.__cameraManipulator.onTouchMove(l):this.emit("touchMove",l)}onTouchEnd(l){this.__prepareEvent(l),this.capturedItem?this.capturedItem.onMouseUp(l):this.__cameraManipulator?this.__cameraManipulator.onTouchEnd(l):this.emit("touchEnd",l)}onTouchCancel(l){this.__prepareEvent(l),this.capturedItem?this.capturedItem.onTouchCancel(l):this.__cameraManipulator?this.__cameraManipulator.onTouchCancel(l):this.emit("touchCancel",l)}__initRenderState(l){l.viewXfo=this.__cameraXfo,l.viewScale=1,l.region=this.region,l.cameraMatrix=this.__cameraMat,l.viewports=[{region:this.region,viewMatrix:this.__viewMat,projectionMatrix:this.__projectionMatrix,viewportFrustumSize:this.__frustumDim,isOrthographic:this.__camera.getIsOrthographic(),fovY:this.__camera.getFov()}]}draw(){const l=this.__renderer.gl;l.bindFramebuffer(l.FRAMEBUFFER,null),l.viewport(...this.region),this.__backgroundColor&&l.clearColor(...this.__backgroundColor.asArray()),l.colorMask(!0,!0,!0,!0),l.clear(l.COLOR_BUFFER_BIT|l.DEPTH_BUFFER_BIT);const F={};this.__initRenderState(F),this.__renderer.drawScene(F)}}class ac{constructor(l,F){this.__vrviewport=l,this.__treeItem=new PF("VRHead"),F.addChild(this.__treeItem),this.__mat4=new L,this.__localXfo=new h}update(l){this.__mat4.setDataArray(l.transform.matrix),this.__localXfo.fromMat4(this.__mat4),this.__treeItem.getParameter("LocalXfo").setValue(this.__localXfo)}getTreeItem(){return this.__treeItem}getXfo(){return this.__localXfo}}class bc{constructor(F,U,c){if(this.__vrviewport=F,this.__inputSource=U,this.__id=c,this.__isDaydramController=l.isMobileDevice,this.__pressedButtons=[],this.__mat4=new L,this.__xfo=new h,this.__treeItem=new PF("VRController:"+U.handedness+c),!this.__isDaydramController){this.__tip=new PF("Tip");const l=new h;l.tr.set(0,-.05,-.13),this.__tip.getParameter("LocalXfo").setValue(l),this.__treeItem.addChild(this.__tip,!1),F.getTreeItem().addChild(this.__treeItem),this.__activeVolumeSize=.04,F.loadHMDResources().then(l=>{l.on("loaded",()=>{let F;0==c?F=l.getChildByName("LeftController"):1==c&&(F=l.getChildByName("RightController")),F||(F=l.getChildByName("Controller"));const U=F.clone();U.getParameter("LocalXfo").setValue(new h(new Z(0,-.035,-.085),new n({setFromAxisAndAngle:[new Z(0,1,0),Math.PI]}),new Z(.001,.001,.001))),this.__treeItem.addChild(U,!1)})})}}getHandedness(){return this.__inputSource.handedness}getId(){return this.__id}getTreeItem(){return this.__treeItem}getTipItem(){return this.__tip}getTipXfo(){return this.__tip.getParameter("GlobalXfo").getValue()}getTouchPadValue(){return this.__touchpadValue}isButtonPressed(){return this.__buttonPressed}getControllerStageLocalXfo(){return this.__xfo}getControllerTipStageLocalXfo(){return this.__xfo.multiply(this.__tip.getParameter("LocalXfo").getValue())}updatePose(l,F,U){const c=F.getPose(U.gripSpace,l);c&&c.transform&&(this.__mat4.setDataArray(c.transform.matrix),this.__xfo.fromMat4(this.__mat4),this.__treeItem.getParameter("LocalXfo").setValue(this.__xfo),this.__geomAtTip=void 0,this.__hitTested=!1)}getGeomItemAtTip(){if(this.__hitTested)return this.__intersectionData;this.__hitTested=!0;const l=this.__vrviewport.getRenderer(),F=this.__tip.getParameter("GlobalXfo").getValue(),U=this.__activeVolumeSize;return this.__intersectionData=l.raycastWithXfo(F,U,U),this.__intersectionData}}class Zc extends Xc{constructor(l){super(l),this.getParameter("DoubleClickTimeMS").setValue(300),this.__projectionMatriciesUpdated=!1,this.__far=1024,this.__near=.1,this.__stageTreeItem=new PF("VRStage"),this.__stageTreeItem.setSelectable(!1),this.__stageTreeItem.setVisible(!1),this.__renderer.addTreeItem(this.__stageTreeItem),this.__vrhead=new ac(this.__renderer.gl,this.__stageTreeItem),this.__vrControllersMap={},this.__vrControllers=[];const F=new h;F.ori.setFromAxisAndAngle(new Z(1,0,0),.5*Math.PI),this.setXfo(F),this.__leftViewMatrix=new L,this.__leftProjectionMatrix=new L,this.__rightViewMatrix=new L,this.__rightProjectionMatrix=new L}getVRDisplay(){return this.__vrDisplay}getAsset(){return this.__vrAsset}getTreeItem(){return this.__stageTreeItem}getVRHead(){return this.__vrhead}getXfo(){return this.__stageXfo}setXfo(l){this.__stageXfo=l,this.__stageTreeItem.getParameter("GlobalXfo").setValue(l),this.__stageMatrix=l.inverse().toMat4(),this.__stageScale=l.sc.x}getControllers(){return this.__vrControllers}canPresent(){return this.__canPresent}isPresenting(){return this.__session}__startSession(){const l=(F,U)=>{this.__session&&(this.__session.requestAnimationFrame(l),this.draw(U))};this.__session.requestAnimationFrame(l)}loadHMDResources(){const F=localStorage.getItem("hmd");return this.__hmd!=F&&(this.__hmdAssetPromise=void 0),this.__hmdAssetPromise||(this.__hmd=F,this.__hmdAssetPromise=new Promise((U,c)=>{this.__renderer.on("sceneSet",s=>{s.scene;let B;switch(F){case"Vive":B="ZeaEngine/Vive.vla";break;case"Oculus":default:B="ZeaEngine/Oculus.vla"}const d=Bl.resolveFilePathToId(B);d&&!l.isMobileDevice?(this.__vrAsset=Bl.loadCommonAssetResource(d),this.__vrAsset.on("loaded",()=>{const l=this.__vrAsset.getMaterialLibrary(),F=l.getMaterialNames();for(const U of F){const F=l.getMaterial(U,!1);F&&(F.visibleInGeomDataBuffer=!1,F.setShaderName("SimpleSurfaceShader"))}U(this.__vrAsset)})):c()})})),this.__hmdAssetPromise}startPresenting(){return new Promise((F,U)=>{const c=this.__renderer.gl,s=()=>{navigator.xr.requestSession("immersive-vr",{requiredFeatures:["local-floor"],optionalFeatures:["bounded-floor"]}).then(s=>{let B;this.__renderer.__xrViewportPresenting=!0,l.isMobileDevice||(B=document.createElement("canvas"),B.style.position="relative",B.style.left="0px",B.style.top="0px",B.style.width="100%",B.style.height="100%",this.__renderer.getDiv().replaceChild(B,this.__renderer.getGLCanvas()),s.on("end",l=>{this.__renderer.getDiv().replaceChild(this.__renderer.getGLCanvas(),B)})),s.on("end",l=>{this.__stageTreeItem.setVisible(!1),this.__session=null,this.emit("presentingChanged",{state:!1})});s.on("selectstart",l=>{const F=this.__vrControllersMap[l.inputSource.handedness];if(F){const U=Date.now();console.log("controller:",l.inputSource.handedness," down",U-F.__prevDownTime),U-F.__prevDownTime<this.__doubleClickTimeMSParam.getValue()?this.emit("controllerDoubleClicked",{button:1,controller:F,vleStopPropagation:!1,vrviewport:this},this):(F.__prevDownTime=U,this.emit("controllerButtonDown",{button:1,controller:F,vleStopPropagation:!1,vrviewport:this},this))}}),s.on("selectend",l=>{const F=this.__vrControllersMap[l.inputSource.handedness];F&&(console.log("controller:",l.inputSource.handedness," up"),this.emit("controllerButtonUp",{button:1,controller:F,vleStopPropagation:!1,vrviewport:this},this))}),this.__session=s,s.updateRenderState({baseLayer:new XRWebGLLayer(s,c,{compositionDisabled:"inline"==s.mode}),outputContext:B?B.getContext("xrpresent"):null}),s.requestReferenceSpace(l.isMobileDevice?"local":"local-floor").catch(l=>(console.log("Falling back to identity reference space"),s.requestReferenceSpace("viewer").then(l=>l.getOffsetReferenceSpace(new XRRigidTransform({y:-1.6}))))).then(l=>{this.__refSpace=l,this.__stageTreeItem.setVisible(!0),this.emit("presentingChanged",{state:!0}),this.__startSession(),F()}).catch(l=>{console.warn(l.message),U("Unable to start XR Session:"+l.message)})}).catch(l=>{console.warn(l.message)})};l.isMobileDevice?s():this.loadHMDResources().then(s)})}stopPresenting(){this.__session&&this.__session.end()}togglePresenting(){this.__session?this.stopPresenting():this.startPresenting()}getHMDCanvasSize(){return this.__hmdCanvasSize}__createController(l,F){console.log("creating controller:",F.handedness);const U=new bc(this,F,l);return this.__vrControllersMap[F.handedness]=U,this.__vrControllers[l]=U,this.emit("controllerAdded",{controller:U}),vrController}updateControllers(l){const F=this.__session.inputSources;for(let U=0;U<F.length;U++){const c=F[U];if(""==c.handedness||"none"==c.handedness)return;this.__vrControllers[U]||this.__createController(U,c),this.__vrControllers[U].updatePose(this.__refSpace,l,c)}}draw(l){const F=l.session.renderState.baseLayer,U=l.getViewerPose(this.__refSpace),c=U.views;if(!this.__projectionMatriciesUpdated){this.__projectionMatrices=[],this.__viewMatrices=[],this.__cameraMatrices=[],this.__region=[0,0,0,0];for(let l=0;l<c.length;l++){const U=c[l],s=new L;s.setDataArray(U.projectionMatrix),this.__projectionMatrices[l]=s,this.__viewMatrices[l]=new L,this.__cameraMatrices[l]=new L;const B=F.getViewport(U);this.__region[2]=Math.max(this.__region[2],B.x+B.width),this.__region[3]=Math.max(this.__region[3],B.y+B.height)}this.__renderer.resizeFbos(this.__region[2],this.__region[3]),this.__projectionMatriciesUpdated=!0}const s=this.__renderer.gl;s.bindFramebuffer(s.FRAMEBUFFER,F.framebuffer),this.__backgroundColor&&s.clearColor(...this.__backgroundColor.asArray()),s.colorMask(!0,!0,!0,!0),s.clear(s.COLOR_BUFFER_BIT|s.DEPTH_BUFFER_BIT);const B={boundRendertarget:F.framebuffer,region:this.__region,viewports:[]};for(let l=0;l<c.length;l++){const U=c[l];this.__viewMatrices[l].setDataArray(U.transform.inverse.matrix),this.__viewMatrices[l].multiplyInPlace(this.__stageMatrix);const s=F.getViewport(U);B.viewports.push({viewMatrix:this.__viewMatrices[l],projectionMatrix:this.__projectionMatrices[l],region:[s.x,s.y,s.width,s.height]})}if(this.__vrhead.update(U),this.updateControllers(l),B.viewXfo=this.__vrhead.getTreeItem().getParameter("GlobalXfo").getValue(),B.viewScale=1/this.__stageScale,B.cameraMatrix=B.viewXfo.toMat4(),B.region=this.__region,B.vrPresenting=!0,this.__renderer.drawScene(B),this.capturedElement){const l={viewport:this};this.capturedElement.onMouseMove(l)}const d={interfaceType:"VR",hmd:this.__hmd,viewXfo:B.viewXfo,controllers:this.__vrControllers,vrviewport:this};this.emit("viewChanged",d)}setCapture(l){this.capturedElement=l}getCapture(){return this.capturedElement}releaseCapture(){this.capturedElement=null,this.renderGeomDataFbo()}}let xc=void 0,Gc=!1,Rc=!1;const yc={};class mc extends z{constructor(F,U={}){if(super(),l.gpuDesc){this.__shaders={},this.__passes={},this.__passCallbacks=[],this.__childItemAdded=this.__childItemAdded.bind(this),this.__childItemRemoved=this.__childItemRemoved.bind(this),this.__viewports=[],this.__activeViewport=void 0,this.__continuousDrawing=!1,this.__redrawRequested=!1,this.__isMobile=l.isMobileDevice,this.__drawSuspensionLevel=1,this.__shaderDirectives={},this.__preproc={},this.__xrViewportPresenting=!1,this.renderGeomDataFbos=this.renderGeomDataFbos.bind(this),this.requestRedraw=this.requestRedraw.bind(this),this.setupWebGL(F,U.webglOptions?U.webglOptions:{}),this.bindEventHandlers();for(const l in yc)for(const F of yc[l])this.addPass(new F,l,!1);this.addViewport("main"),this.__supportXR=void 0===U.supportXR||U.supportXR,this.__xrViewport=void 0,this.__xrViewportPromise=new Promise((l,F)=>{if(this.__supportXR&&navigator.xr){const F=()=>{this.__gl.makeXRCompatible().then(()=>{this.__xrViewport=this.__setupXRViewport(),this.emit("xrViewportSetup",{xrViewport:this.__xrViewport}),l(this.__xrViewport)})};navigator.xr.supportsSessionMode?navigator.xr.supportsSessionMode("immersive-vr").then(F).catch(l=>{console.warn("Unable to setup XR:"+l)}):navigator.xr.isSessionSupported("immersive-vr").then(l=>{l&&F()}).catch(l=>{console.warn("Unable to setup XR:"+l)})}})}else console.warn("Unable to create renderer")}addShaderPreprocessorDirective(l,F){this.__shaderDirectives[l]=F?"#define "+l+" = "+F:"#define "+l;const U=[];for(const l in this.__shaderDirectives)U.push(this.__shaderDirectives[l]);this.__preproc.defines=U.join("\n")+"\n",this.__gl.shaderopts=this.__preproc}getShaderPreproc(){return this.__preproc}getWidth(){return this.__glcanvas.width}getHeight(){return this.__glcanvas.height}addViewport(l){const F=new gc(this,l,this.getWidth(),this.getHeight());F.createGeomDataFbo(this.__floatGeomBuffer);return F.on("updated",()=>{this.requestRedraw()}),F.on("viewChanged",l=>{this.__xrViewportPresenting||this.emit("viewChanged",l)}),this.__viewports.push(F),F}getViewport(l=0){return this.__viewports[l]}getViewportAtPos(l,F){for(const U of this.__viewports){const c=U.getPosX(),s=U.getPosY(),B=U.getWidth(),d=U.getHeight();if(l>=c&&F>=s&&l<=B+c&&F<=d+s)return U}}activateViewport(l){this.__activeViewport!=l&&(this.__activeViewport=l)}activateViewportAtPos(l,F){if(this.__xrViewportPresenting)return;const U=this.getViewportAtPos(l,F);U&&U!=this.__activeViewport&&this.activateViewport(U)}getActiveViewport(){return this.__xrViewportPresenting?this.__xrViewport:this.__activeViewport}suspendDrawing(){this.__drawSuspensionLevel++}resumeDrawing(){this.__drawSuspensionLevel--,0==this.__drawSuspensionLevel&&(this.__loadingImg&&this.__glcanvasDiv.removeChild(this.__loadingImg),this.renderGeomDataFbos(),this.requestRedraw())}renderGeomDataFbos(){if(1==this.__renderGeomDataFbosRequested)return;this.__renderGeomDataFbosRequested=!0;window.requestAnimationFrame(()=>{for(const l of this.__viewports)l.renderGeomDataFbo();this.__renderGeomDataFbosRequested=!1})}setupGrid(l,F,U,c){return console.warn("Deprecated Method. Please use scene.setupGrid"),this.__scene.setupGrid(l,U,F)}getScene(){return this.__scene}setScene(l){this.__scene=l,this.addTreeItem(this.__scene.getRoot()),this.__gizmoContext&&this.__gizmoContext.setSelectionManager(l.getSelectionManager()),this.emit("sceneSet",{scene:this.__scene})}__childItemAdded(l){this.addTreeItem(l.childItem)}__childItemRemoved(l){this.removeTreeItem(l.childItem)}addTreeItem(l){if(l instanceof PF){for(const F of this.__passCallbacks){const U={continueInSubTree:!0};if(F.itemAddedFn(l,U)){if(!U.continueInSubTree)return;break}}for(const F of l.getChildren())F&&this.addTreeItem(F);l.on("childAdded",this.__childItemAdded),l.on("childRemoved",this.__childItemRemoved),this.renderGeomDataFbos()}}removeTreeItem(l){if(l instanceof PF){l.off("childAdded",this.__childItemAdded),l.off("childRemoved",this.__childItemRemoved);for(const F of this.__passCallbacks){if(!F.itemRemovedFn)continue;const U={continueInSubTree:!0};if(F.itemRemovedFn(l,U)){if(!U.continueInSubTree)return;break}}for(const F of l.getChildren())F&&this.removeTreeItem(F);this.renderGeomDataFbos()}}get gl(){return this.__gl}getGL(){return this.__gl}resizeFbos(l,F){}__onResize(){if(!this.__xrViewportPresenting){const l=1;this.__glcanvas.width=this.__glcanvas.clientWidth*l,this.__glcanvas.height=this.__glcanvas.clientHeight*l;for(const l of this.__viewports)l.resize(this.__glcanvas.width,this.__glcanvas.height);this.resizeFbos(this.__glcanvas.width,this.__glcanvas.height),this.emit("resized",{width:this.__glcanvas.width,height:this.__glcanvas.height}),this.requestRedraw()}}getDiv(){return this.__glcanvasDiv}setupWebGL(F,U){this.__glcanvas=document.createElement("canvas"),this.__glcanvas.style.position=U.canvasPosition?U.canvasPosition:"absolute",this.__glcanvas.style.left="0px",this.__glcanvas.style.top="0px",this.__glcanvas.style.width="100%",this.__glcanvas.style.height="100%",this.__glcanvasDiv=F,this.__glcanvasDiv.appendChild(this.__glcanvas),function l(F,U){if(!l.watchedElementData){l.watchedElementData=[];const F=function(){l.watchedElementData.forEach((function(l){l.element.offsetWidth===l.offsetWidth&&l.element.offsetHeight===l.offsetHeight||(l.offsetWidth=l.element.offsetWidth,l.offsetHeight=l.element.offsetHeight,l.callback())}))};window.addEventListener("resize",F);new MutationObserver(F).observe(document.body,{attributes:!0,childList:!0,characterData:!0,subtree:!0})}l.watchedElementData.push({element:F,offsetWidth:F.offsetWidth,offsetHeight:F.offsetHeight,callback:U})}(this.__glcanvas,l=>{this.__onResize()}),this.__onResize(),U.preserveDrawingBuffer=!0,U.stencil=!!U.stencil&&U.stencil,U.alpha=!!U.alpha&&U.alpha,U.xrCompatible=!0,this.__gl=nU(this.__glcanvas,U),this.__gl||alert("Unable to create WebGL context. WebGL not supported."),this.__gl.renderer=this,"webgl2"==this.__gl.name&&this.addShaderPreprocessorDirective("ENABLE_ES3"),this.__gl.floatTexturesSupported&&this.addShaderPreprocessorDirective("ENABLE_FLOAT_TEXTURES"),this.__gl.screenQuad=new ec(this.__gl),this.__screenQuad=this.__gl.screenQuad,this.__floatGeomBuffer=this.__gl.floatTexturesSupported&&"Safari"!=l.browserName,this.__gl.floatGeomBuffer=this.__floatGeomBuffer}bindEventHandlers(){const l=()=>this.__glcanvas.width>0&&this.__glcanvas.height,F=l=>{const F=this.__glcanvas.getBoundingClientRect();l.rendererX=1*(l.clientX-F.left),l.rendererY=1*(l.clientY-F.top)};this.__glcanvas.addEventListener("mouseenter",l=>{l.undoRedoManager=this.undoRedoManager,Gc||(xc=this,F(l),xc.activateViewportAtPos(l.rendererX,l.rendererY),Rc=!1)}),this.__glcanvas.addEventListener("mouseleave",F=>{if(xc==this&&l())if(F.undoRedoManager=this.undoRedoManager,Gc)Rc=!0;else{const l=xc.getActiveViewport();l&&(l.onMouseLeave(F),F.preventDefault()),xc=void 0}}),this.__glcanvas.addEventListener("mousedown",l=>{l.undoRedoManager=this.undoRedoManager,F(l),Gc=!0,xc=this,xc.activateViewportAtPos(l.rendererX,l.rendererY);const U=xc.getActiveViewport();return U&&U.onMouseDown(l),Rc=!1,!1}),document.addEventListener("mouseup",U=>{if(xc!=this||!l())return;U.undoRedoManager=this.undoRedoManager,F(U),Gc=!1;const c=xc.getActiveViewport();if(c&&c.onMouseUp(U),Rc){const l=xc.getActiveViewport();l&&(l.onMouseLeave(U),U.preventDefault()),xc=void 0}return!1}),document.addEventListener("mousemove",U=>{if(xc!=this||!l())return;U.undoRedoManager=this.undoRedoManager,F(U),Gc||xc.activateViewportAtPos(U.rendererX,U.rendererY);const c=xc.getActiveViewport();return c&&c.onMouseMove(U),!1});const U=F=>{if(xc==this&&l())return xc&&(F.undoRedoManager=this.undoRedoManager,this.onWheel(F)),!1};window.addEventListener?window.addEventListener("wheel",U,{passive:!1}):window.onmousewheel=document.onmousewheel=U,window.oncontextmenu=function(){return!1},document.addEventListener("keypress",F=>{if(xc!=this||!l())return;const U=String.fromCharCode(F.keyCode).toLowerCase(),c=xc.getActiveViewport();c&&c.onKeyPressed(U,F)}),document.addEventListener("keydown",F=>{if(xc!=this||!l())return;const U=String.fromCharCode(F.keyCode).toLowerCase(),c=xc.getActiveViewport();c&&c.onKeyDown(U,F)}),document.addEventListener("keyup",F=>{if(xc!=this||!l())return;const U=String.fromCharCode(F.keyCode).toLowerCase(),c=xc.getActiveViewport();c&&c.onKeyUp(U,F)}),this.__glcanvas.addEventListener("touchstart",l=>{l.stopPropagation(),l.undoRedoManager=this.undoRedoManager;for(let U=0;U<l.touches.length;U++)F(l.touches[U]);this.getViewport().onTouchStart(l)},!1),this.__glcanvas.addEventListener("touchmove",l=>{l.stopPropagation(),l.undoRedoManager=this.undoRedoManager;for(let U=0;U<l.touches.length;U++)F(l.touches[U]);this.getViewport().onTouchMove(l)},!1),this.__glcanvas.addEventListener("touchend",l=>{l.stopPropagation(),l.undoRedoManager=this.undoRedoManager;for(let U=0;U<l.touches.length;U++)F(l.touches[U]);this.getViewport().onTouchEnd(l)},!1),this.__glcanvas.addEventListener("touchcancel",l=>{l.stopPropagation(),l.undoRedoManager=this.undoRedoManager,this.getViewport().onTouchCancel(l)},!1)}setUndoRedoManager(l){this.undoRedoManager=l}getGLCanvas(){return this.__glcanvas}getScreenQuad(){return this.__screenQuad}onWheel(l){this.__viewports[0].onWheel(l)}frameAll(l=0){this.__viewports[l].frameView([this.__scene.getRoot()])}getOrCreateShader(l){let F=this.__shaders[l];return F||(F=e.constructClass(l,this.__gl),F||console.error("Shader not registered with the Registry:",l),this.__shaders[l]=F),F}addPass(l,F=0,U=!0){this.__passes[F]||(this.__passes[F]=[]);let c=0;for(const l in this.__passes){if(l==F)break;c+=this.__passes[l].length}if(c+=this.__passes[F].length,l.on("updated",this.requestRedraw),l.init(this,c),this.__passes[F].push(l),U){let l=0;for(const F in this.__passes){const U=this.__passes[F];U.forEach((F,U)=>{F.setPassIndex(l+U)}),l+=U.length}}return this.requestRedraw(),c}registerPass(l,F){this.__passCallbacks.splice(0,0,{itemAddedFn:l,itemRemovedFn:F})}getPass(l){let F=0;for(const U in this.__passes){const c=this.__passes[U];if(l-F<c.length)return c[l-F];F+=c.length}}findPass(l){for(const F in this.__passes){const U=this.__passes[F];for(const F of U)if(F.constructor==l)return F}}getGizmoPass(){return this.__gizmoPass}supportsVR(){return console.warn("Deprecated Method. Please instead connect to the vrViewportSetup signal."),this.__supportXR&&null!=navigator.xr}__setupXRViewport(){const l=new Zc(this),F=l=>{this.emit("viewChanged",l)};return l.on("presentingChanged",U=>{const c=U.state;if(this.__xrViewportPresenting=c,c){for(const l in this.__passes){const F=this.__passes[l];for(const l of F)l.startPresenting()}l.on("viewChanged",F)}else{l.off("viewChanged",F),this.emit("updated",{});for(const l in this.__passes){const F=this.__passes[l];for(const l of F)l.stopPresenting()}const U={interfaceType:"CameraAndPointer",viewXfo:this.getViewport().getCamera().getParameter("GlobalXfo").getValue()};this.emit("viewChanged",U),this.resizeFbos(this.__glcanvas.width,this.__glcanvas.height),this.requestRedraw()}}),l}getVRViewport(){return this.__xrViewport}getXRViewport(){return this.__xrViewportPromise}isXRViewportPresenting(){return this.__xrViewportPresenting}isContinuouslyDrawing(){return this.__continuousDrawing}startContinuousDrawing(){if(this.isContinuouslyDrawing()||this.__xrViewportPresenting)return;const l=()=>{this.__continuousDrawing&&!this.__xrViewportPresenting&&window.requestAnimationFrame(l);for(const l of this.__viewports)l.draw()};this.__continuousDrawing=!0,window.requestAnimationFrame(l)}stopContinuousDrawing(){this.__continuousDrawing=!1}toggleContinuousDrawing(){this.__continuousDrawing?this.stopContinuousDrawing():this.startContinuousDrawing()}drawItemChanged(){for(const l of this.__viewports)l.invalidateGeomDataBuffer();this.requestRedraw()}requestRedraw(){if(this.__redrawRequested||this.__continuousDrawing||this.__xrViewportPresenting)return!1;return window.requestAnimationFrame(()=>{this.__redrawRequested=!1;for(const l of this.__viewports)l.draw()}),this.__redrawRequested=!0,!0}bindGLBaseRenderer(l){l.shaderopts=this.__preproc;const F=this.__gl;l.viewports&&1!=l.viewports.length?(l.bindRendererUnifs=U=>{const{cameraMatrix:c}=U;c&&F.uniformMatrix4fv(c.location,!1,l.cameraMatrix.asArray())},l.bindViewports=(U,c)=>{l.viewports.forEach((l,s)=>{F.viewport(...l.region);const{viewMatrix:B,projectionMatrix:d,eye:i}=U;B&&F.uniformMatrix4fv(B.location,!1,l.viewMatrix.asArray()),d&&F.uniformMatrix4fv(d.location,!1,l.projectionMatrix.asArray()),i&&F.uniform1i(i.location,s),c()})}):(l.bindRendererUnifs=U=>{const{cameraMatrix:c,viewMatrix:s,projectionMatrix:B,eye:d}=U;c&&F.uniformMatrix4fv(c.location,!1,l.cameraMatrix.asArray());const i=l.viewports[0];s&&F.uniformMatrix4fv(s.location,!1,i.viewMatrix.asArray()),B&&F.uniformMatrix4fv(B.location,!1,i.projectionMatrix.asArray()),d&&F.uniform1i(d.location,index)},l.bindViewports=(l,F)=>F())}drawScene(l){for(const F in this.__passes){const U=this.__passes[F];for(const F of U)F.enabled&&F.draw(l)}}drawHighlightedGeoms(l){this.bindGLBaseRenderer(l);for(const F in this.__passes){const U=this.__passes[F];for(const F of U)F.enabled&&F.drawHighlightedGeoms(l)}}drawSceneGeomData(l,F=255){this.bindGLBaseRenderer(l);for(const U in this.__passes){if(0==(Number.parseInt(U)&F))continue;const c=this.__passes[U];for(const F of c)F.enabled&&F.drawGeomData(l)}}static registerPass(l,F){yc[F]||(yc[F]=[]),yc[F].push(l)}}const Lc={OPAQUE:1,TRANSPARENT:2,OVERLAY:4};class nc extends z{constructor(){super(),this.enabled=!0,this.__passIndex=0;const l=this.addParameter(new el("Enabled",!0));l.on("valueChanged",()=>this.enabled=l.getValue())}__parameterValueChanged(l){super.__parameterValueChanged(l),this.__renderer&&this.__renderer.requestRedraw()}init(l,F){if(null==F)throw new Error("Missing constructor argument.");this.__gl=l.gl,this.__renderer=l,this.__passIndex=F}setPassIndex(l){this.__passIndex=l}startPresenting(){}stopPresenting(){}draw(l){}drawHighlightedGeoms(l){}drawGeomData(l){}getGeomItemAndDist(l){}}class Cc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("OutlinesShader.vertexShader","\nprecision highp float;\n\nattribute vec3 positions;    //(location = 0)\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n    v_texCoord = positions.xy+0.5;\n    gl_Position = vec4(positions.xy*2.0, 0.0, 1.0);\n}\n\n"),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("OutlinesShader.fragmentShader","\nprecision highp float;\n\nuniform sampler2D highlightDataTexture;\nuniform vec2 highlightDataTextureSize;\n\nvarying vec2 v_texCoord;\n\n\nbool isFilledPixel(vec4 p) {\n    return p.r > 0.01 || p.g > 0.01 || p.b > 0.01;\n}\nvoid accumOutlinePixel(vec2 fragCoord, inout vec4 res) {\n    vec3 p = texture2D(highlightDataTexture, fragCoord/highlightDataTextureSize).rgb;\n    if(p.r > 0.01 || p.g > 0.01 || p.b > 0.01) {\n        res.r += p.r;\n        res.g += p.g;\n        res.b += p.b;\n        res.a += 1.0;\n    }\n}\nvec4 getOutlinePixelColor(vec2 fragCoord) {\n    vec4 M = texture2D(highlightDataTexture, fragCoord/highlightDataTextureSize);\n    \n    /// To display a fill instead of an outline.\n    // return M;\n\n    if( isFilledPixel(M) ) {\n        // Note: the filled pixel has an alpha value\n        // that determines how much fill is applied\n        // The outline is a solid color. \n        return M;\n    }\n    // Search surrounding pixels for selected geoms.\n    vec4 res;\n    accumOutlinePixel(fragCoord+vec2( 1, 1), res); // NW\n    accumOutlinePixel(fragCoord+vec2(-1, 1), res); // NE\n    accumOutlinePixel(fragCoord+vec2( 1,-1), res); // SW\n    accumOutlinePixel(fragCoord+vec2(-1,-1), res); // SE\n    accumOutlinePixel(fragCoord+vec2( 0, 2), res); // NN\n    accumOutlinePixel(fragCoord+vec2(-2, 0), res); // EE\n    accumOutlinePixel(fragCoord+vec2( 2, 0), res); // WW\n    accumOutlinePixel(fragCoord+vec2( 0,-2), res); // SS\n    accumOutlinePixel(fragCoord+vec2( 1, 2), res); // NNW\n    accumOutlinePixel(fragCoord+vec2(-1, 2), res); // NNE\n    accumOutlinePixel(fragCoord+vec2(-2, 1), res); // EEN\n    accumOutlinePixel(fragCoord+vec2(-2,-1), res); // EES\n    accumOutlinePixel(fragCoord+vec2( 2, 1), res); // WWN\n    accumOutlinePixel(fragCoord+vec2( 2,-1), res); // WWS\n    accumOutlinePixel(fragCoord+vec2( 1,-2), res); // SSW\n    accumOutlinePixel(fragCoord+vec2(-1,-2), res); // SSE\n\n    if(isFilledPixel(res))\n        return vec4(res.rgb / res.a, 1.0);\n    else\n        return vec4(0.0, 0.0, 0.0, 0.0);\n}\n\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\nvoid main(void) {\n\n    // fragColor = texture2D(highlightDataTexture, v_texCoord);;\n    //can also use gl_FragCoord.xy\n    mediump vec2 fragCoord = v_texCoord * highlightDataTextureSize; \n    /////////////////\n    // Selection Outlines\n    vec4 outlineColor = getOutlinePixelColor(fragCoord);\n    if(outlineColor.a > 0.0001){\n#ifndef ENABLE_ES3\n        gl_FragColor = outlineColor;\n#else\n        fragColor = outlineColor;\n#endif\n    }\n    else {\n        discard;\n    }\n}\n\n")}}const hc=Lc.OPAQUE|Lc.TRANSPARENT|Lc.OVERLAY;class uc extends mc{constructor(F,U={}){super(F,U,{antialias:!0,depth:!0}),this.__exposure=1,this.__tonemap=!0,this.__gamma=2.2,this.__glEnvMap=void 0,this.__glBackgroundMap=void 0,this.__displayEnvironment=!0,this.__debugMode=0,this._planeDist=0,this.__cutPlaneNormal=new Z(1,0,0);const c=this.__gl;if(this.__debugTextures=[void 0],this.addShaderPreprocessorDirective("ENABLE_INLINE_GAMMACORRECTION"),U.disableTextures||this.addShaderPreprocessorDirective("ENABLE_TEXTURES"),l.isMobileDevice||U.disableSpecular||this.addShaderPreprocessorDirective("ENABLE_SPECULAR"),this.__outlineShader=new Cc(c),this.quad=new WU(c,new FF(1,1)),this.createSelectedGeomsFbo(),this.createRayCastRenderTarget(),!U.hideSplash){(l=>{const U=new Blob(['<?xml version="1.0" encoding="UTF-8" standalone="no"?>\r\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\r\n<svg width="100%" height="100%" viewBox="0 0 789 220" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">\r\n    <g id="Layer-1" serif:id="Layer 1" transform="matrix(4.16667,0,0,4.16667,-196.224,-480.93)">\r\n        <g transform="matrix(1,0,0,1,159.455,129.109)">\r\n            <path d="M0,25.306L-35.309,25.306L-35.309,0L-6.305,0L-6.305,6.284L-30.049,6.284L-30.049,12.276C-30.049,16.473 -26.646,19.875 -22.449,19.875L7.321,19.875L7.323,-6.135C7.323,-10.272 3.97,-13.625 -0.167,-13.626L-41.638,-13.627C-45.774,-13.627 -49.128,-10.274 -49.128,-6.137L-49.129,31.442C-49.129,35.578 -45.776,38.931 -41.64,38.932L7.489,38.933L7.489,32.796C7.489,28.66 4.136,25.306 0,25.306" style="fill:rgb(249,206,3);fill-rule:nonzero;"/>\r\n        </g>\r\n        <g transform="matrix(1,0,0,1,230.966,129.075)">\r\n            <path d="M0,25.314L0,-5.032C0,-9.787 -3.854,-13.643 -8.609,-13.644L-45.856,-13.652C-50.613,-13.653 -54.47,-9.797 -54.47,-5.04L-54.47,30.338C-54.47,35.092 -50.618,38.947 -45.864,38.951L-18.935,38.967L-18.935,32.949C-18.935,28.741 -22.346,25.329 -26.555,25.329L-40.636,25.328L-40.636,-0.003L-13.639,-0.003L-13.639,31.262C-13.639,35.517 -10.189,38.967 -5.935,38.967L5.405,38.967L5.405,29.282C5.405,27.09 3.629,25.314 1.437,25.314L0,25.314Z" style="fill:rgb(249,206,3);fill-rule:nonzero;"/>\r\n        </g>\r\n        <g transform="matrix(1,0,0,1,69.5968,129.035)">\r\n            <path d="M0,25.455L27.636,0.617C29.238,-0.823 30.153,-2.876 30.153,-5.03L30.153,-13.553L-13.422,-13.553C-17.542,-13.553 -20.881,-10.213 -20.881,-6.094L-20.881,-0.009L7.586,-0.008L-19.993,24.844C-21.591,26.284 -22.503,28.334 -22.503,30.484L-22.503,39.008L24.316,39.008C28.436,39.008 31.775,35.668 31.775,31.549L31.775,25.465L0,25.455Z" style="fill:rgb(249,206,3);fill-rule:nonzero;"/>\r\n        </g>\r\n    </g>\r\n</svg>'],{type:"image/svg+xml"}),c=URL.createObjectURL(U),s=document.createElement("img");s.addEventListener("load",()=>{URL.revokeObjectURL(c),s.style.opacity=1;const U=()=>{!s.parentElement!=F&&F.appendChild(s),s.style.opacity=+s.style.opacity-.02,+s.style.opacity>0?window.requestAnimationFrame&&requestAnimationFrame(U)||setTimeout(U,16):F.removeChild(s)};setTimeout(U,l)}),s.style.width=.3*F.clientWidth+"px",s.style.position="absolute",s.style.top="50%",s.style.left="50%",s.style.transform="translate(-50%, -50%)",s.style["pointer-events"]="none",s.src=c,F.appendChild(s)})(1500)}}__bindEnvMap(l){const F=this.__gl;if(l instanceof NF)this.__glEnvMap=l.getMetadata("gltexture"),this.__glEnvMap||("FLOAT"===l.type?(this.addShaderPreprocessorDirective("ENABLE_SPECULAR"),this.__glEnvMap=new Ic(this,l,this.__preproc)):l.isStreamAtlas()?this.__glEnvMap=new GLImageStream(F,l):this.__glEnvMap=new CU(F,l)),this.__glEnvMap.on("loaded",this.requestRedraw),this.__glEnvMap.on("updated",this.requestRedraw),this.emit("envMapAssigned",{envMap:this.__glEnvMap});else{const U=l;if(this.__glBackgroundMap=U.getMetadata("gltexture"),this.__glBackgroundMap||("FLOAT"===U.type?this.__glBackgroundMap=new AU(F,U):this.__glBackgroundMap=new CU(F,U)),this.__glBackgroundMap.on("loaded",this.requestRedraw),this.__glBackgroundMap.on("updated",this.requestRedraw),!this.__backgroundMapShader){switch(F.__quadVertexIdsBuffer||F.setupInstancedQuad(),U.getMapping()){case"octahedral":this.__backgroundMapShader=new Bc(F);break;case"latlong":this.__backgroundMapShader=new dc(F);break;case"steriolatlong":this.__backgroundMapShader=new ic(F);break;case"dualfisheye":this.__backgroundMapShader=new tc(F);break;case"uv":default:this.__backgroundMapShader=new sc(F)}const l=this.__backgroundMapShader.compileForTarget();this.__backgroundMapShaderBinding=SU(F,l.attrs,F.__quadattrbuffers,F.__quadIndexBuffer)}}}getGLEnvMap(){return this.__glEnvMap}getEnvMapTex(){return console.warn("Deprecated Function"),this.__glEnvMap}setScene(l){const F=l.settings.getParameter("EnvMap");null!=F.getValue()&&this.__bindEnvMap(F.getValue()),F.on("valueChanged",()=>{this.__bindEnvMap(F.getValue())});const U=l.settings.getParameter("Display EnvMap");this.__displayEnvironment=U.getValue(),U.on("valueChanged",()=>{this.__displayEnvironment=U.getValue(),this.requestRedraw()}),super.setScene(l)}addViewport(l){return super.addViewport(l)}onKeyPressed(l,F){switch(l){case"b":this.__displayEnvironment=!this.__displayEnvironment,this.requestRedraw();break;default:super.onKeyPressed(l,F)}}get exposure(){return this.__exposure}set exposure(l){this.__exposure=l,this.requestRedraw()}get gamma(){return this.__gamma}set gamma(l){this.__gamma=l,this.requestRedraw()}get displayEnvironment(){return this.__displayEnvironment}set displayEnvironment(l){this.__displayEnvironment=l,this.requestRedraw()}get planeDist(){return this._planeDist}set planeDist(l){this._planeDist=l,this.requestRedraw()}get cutPlaneNormal(){return this.__cutPlaneNormal}set cutPlaneNormal(l){this.__cutPlaneNormal=l,this.requestRedraw()}resizeFbos(l,F){super.resizeFbos(),this.__fbo&&this.__fbo.colorTexture.resize(l,F),this.__highlightedGeomsBufferFbo&&this.__highlightedGeomsBuffer.resize(l,F)}createSelectedGeomsFbo(){const l=this.__gl;this.__highlightedGeomsBuffer=new CU(l,{type:"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:this.__glcanvas.width<=1?1:this.__glcanvas.width,height:this.__glcanvas.height<=1?1:this.__glcanvas.height}),this.__highlightedGeomsBufferFbo=new TU(l,this.__highlightedGeomsBuffer,!0),this.__highlightedGeomsBufferFbo.setClearColor([0,0,0,0])}getFbo(){return this.__fbo}createOffscreenFbo(l="RGB"){const F=this.__glcanvas.width,U=this.__glcanvas.height,c=this.__gl;this.__fwBuffer=new CU(c,{type:"FLOAT",format:l,filter:"NEAREST",width:F,height:U}),this.__fbo=new TU(c,this.__fwBuffer,!0),this.__fbo.setClearColor(this.__backgroundColor.asArray())}createRayCastRenderTarget(){const l=this.__gl;this.__rayCastRenderTarget=new PU(l,{type:"FLOAT",format:"RGBA",filter:"NEAREST",width:3,height:3,numColorChannels:1}),this.__rayCastRenderTargetProjMatrix=new L,this.rayCastDist=0,this.rayCastArea=0}raycastWithRay(l,F,U=.01,c=hc){const s=new h;return s.setLookAt(l.start,l.start.add(l.dir)),this.raycast(s,l,F,U,c)}raycastWithXfo(l,F,U=.01,c=hc){const s=new C(l.tr,l.ori.getZaxis().negate());return this.raycast(l,s,F,U,c)}raycast(l,F,U,c=.01,s=hc){this.rayCastDist==U&&this.rayCastArea==c||(this.__rayCastRenderTargetProjMatrix.setOrthographicMatrix(-.5*c,.5*c,-.5*c,.5*c,0,U),this.rayCastDist=U,this.rayCastArea=c);const B=this.__gl,d={cameraMatrix:l.toMat4(),viewports:[{region:[0,0,3,3],viewMatrix:l.inverse().toMat4(),projectionMatrix:this.__rayCastRenderTargetProjMatrix,isOrthographic:!0}]};this.__rayCastRenderTarget.bindForWriting(d,!0),B.enable(B.CULL_FACE),B.enable(B.DEPTH_TEST),B.depthFunc(B.LEQUAL),B.depthMask(!0),this.drawSceneGeomData(d,s),B.finish(),this.__rayCastRenderTarget.unbindForWriting(),this.__rayCastRenderTarget.bindForReading();const i=new Float32Array(36);B.readPixels(0,0,3,3,B.RGBA,B.FLOAT,i),this.__rayCastRenderTarget.unbindForReading();const Q=[4,3,5,1,7];let t;for(const l of Q)if(0!=i[4*l+3]){t=i.subarray(4*l,4*l+4);break}if(!t)return;const I=63&Math.round(t[0]),V=this.getPass(I).getGeomItemAndDist(t);if(V){const l=F.start.add(F.dir.scale(V.dist));return{ray:F,intersectionPos:l,geomItem:V.geomItem,dist:V.dist,geomData:t}}}drawBackground(l){if(this.__glBackgroundMap){if(!this.__glBackgroundMap.isLoaded())return;const F=this.__gl;F.depthMask(!1),this.__backgroundMapShader.bind(l);const U=l.unifs;this.__glBackgroundMap.bindToUniform(l,U.backgroundImage),this.__backgroundMapShaderBinding.bind(l),F.drawQuad()}else this.__glEnvMap&&this.__glEnvMap.draw&&this.__glEnvMap.draw(l)}bindGLRenderer(l){super.bindGLBaseRenderer(l),l.envMap=this.__glEnvMap,l.exposure=this.__exposure,l.gamma=this.__gamma;const F=this.__gl,U=l.bindRendererUnifs;l.bindRendererUnifs=c=>{if(U(c),this.__glEnvMap){const F=c.envMapPyramid;if(F&&this.__glEnvMap.bindProbeToUniform)this.__glEnvMap.bindProbeToUniform(l,F);else{const{envMapTex:F,envMapTexType:U}=c;F&&this.__glEnvMap.bindToUniform(l,F,{textureTypeUnif:U})}}{const l=c.exposure;l&&F.uniform1f(l.location,this.__exposure)}{const l=c.gamma;l&&F.uniform1f(l.location,this.__gamma)}}}drawScene(l){if(this.bindGLRenderer(l),this.__displayEnvironment&&this.drawBackground(l),super.drawScene(l),this.__highlightedGeomsBufferFbo){const F=this.__gl;this.__highlightedGeomsBufferFbo.bindForWriting(l),this.__highlightedGeomsBufferFbo.clear(),F.disable(F.BLEND),F.enable(F.DEPTH_TEST),F.depthFunc(F.LESS),F.depthMask(!0),this.drawHighlightedGeoms(l),this.__highlightedGeomsBufferFbo.unbindForWriting(l),F.viewport(...l.region),this.__outlineShader.bind(l),F.enable(F.BLEND),F.blendEquation(F.FUNC_ADD),F.blendFunc(F.SRC_ALPHA,F.ONE_MINUS_SRC_ALPHA);const U=l.unifs;this.__highlightedGeomsBuffer.bindToUniform(l,U.highlightDataTexture),F.uniform2f(U.highlightDataTextureSize.location,l.region[2],l.region[3]),this.quad.bindAndDraw(l),F.disable(F.BLEND)}this.emit("redrawOccured",{})}}rU.setShaderModule("drawItemId.glsl","\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\nattribute float instancedIds;    // instanced attribute..\nuniform int instancedDraw;\nuniform int transformIndex;\n\nint getDrawItemId() {\n    if(instancedDraw == 0){\n       return transformIndex;\n    }\n    else{\n       return int(instancedIds);\n    }\n}\n\n\n#else\n\nuniform int transformIndex;\n\nint getDrawItemId() {\n    return transformIndex;\n}\n\n#endif\n\n"),rU.setShaderModule("drawItemTexture.glsl",'\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\nuniform sampler2D instancesTexture;\nuniform highp int instancesTextureSize;\n\n<%include file="GLSLUtils.glsl"/>\n\nconst int pixelsPerItem = 6;\n\nvec4 getInstanceData(int id) {\n    return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 0);\n}\n\n#else\n\nuniform vec4 drawItemData;\n\nvec4 getInstanceData(int id) {\n    return drawItemData;\n}\n\n#endif\n\n\n'),rU.setShaderModule("modelMatrix.glsl","\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\nmat4 getMatrix(sampler2D texture, int textureSize, int index) {\n    // Unpack 3 x 4 matix columns into a 4 x 4 matrix.\n    vec4 col0 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 1);\n    vec4 col1 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 2);\n    vec4 col2 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 3);\n    mat4 result = mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0));\n    return transpose(result);\n    // return mat4(1.0);\n}\n\nmat4 getModelMatrix(int id) {\n    return getMatrix(instancesTexture, instancesTextureSize, id);\n}\n\n#else\n\nuniform mat4 modelMatrix;\n\nmat4 getModelMatrix(int id) {\n    return modelMatrix;\n}\n\n#endif\n\n\n"),rU.setShaderModule("materialparams.glsl","\n\n////////////////////////\n// Material Param Helpers.\n\nvec4 getColorParamValue(vec4 value, sampler2D tex, int texType, vec2 texCoord) {\n    if(texType == 0){\n        return toLinear(value);\n    }\n    else if(texType == 1 || texType == 2){\n        // TODO: Use SRGB textures.\n        return toLinear(texture2D(tex, texCoord));\n    }\n    else if(texType == 3){\n        // Float HDR Texture\n        return texture2D(tex, texCoord);\n    }\n    else\n        return value;\n}\n\n\n\nfloat luminanceFromRGB(vec3 rgb) {\n    return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;\n}\n\nfloat getLuminanceParamValue(float value, sampler2D tex, int texType, vec2 texCoord) {\n    if(texType == 0)\n        return value;\n    else\n        return luminanceFromRGB(texture2D(tex, texCoord).rgb);\n}\n"),rU.setShaderModule("debugColors.glsl","\n\nfloat modI(float a, float b) {\n    float m=a-floor((a+0.5)/b)*b;\n    return floor(m+0.5);\n}\n\nvec3 getDebugColor(float id) {\n#ifdef GLSL_ES3\n    const vec3 clusterColors[4] = vec3[4]( vec3(0.0, 0.25, 0.25), vec3(0.0, 0.85, 0.25), vec3(0.0, 0.25, 0.85), vec3(0.0, 0.85, 0.85) );\n#else\n    vec3 clusterColors[8];\n    clusterColors[0] = vec3(0.0, 0.15, 0.15);\n    clusterColors[1] = vec3(0.0, 0.85, 0.15);\n    clusterColors[2] = vec3(0.0, 0.15, 0.85);\n    clusterColors[3] = vec3(0.0, 0.85, 0.85);\n    clusterColors[4] = vec3(0.75, 0.15, 0.15);\n    clusterColors[5] = vec3(0.75, 0.85, 0.15);\n    clusterColors[6] = vec3(0.75, 0.15, 0.85);\n    clusterColors[7] = vec3(0.75, 0.85, 0.85);\n#endif\n\n    if(modI(id, 8.0) == 0.0)\n        return clusterColors[0];\n    else if(modI(id, 8.0) == 1.0)\n        return clusterColors[1];\n    else if(modI(id, 8.0) == 2.0)\n        return clusterColors[2];\n    else if(modI(id, 8.0) == 3.0)\n        return clusterColors[3];\n    else if(modI(id, 8.0) == 4.0)\n        return clusterColors[4];\n    else if(modI(id, 8.0) == 5.0)\n        return clusterColors[5];\n    else if(modI(id, 8.0) == 6.0)\n        return clusterColors[6];\n    else if(modI(id, 8.0) == 7.0)\n        return clusterColors[7];\n\n    return vec3(1,0,0);\n}\n\n\n");class Sc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("BillboardShader.vertexShader",'\nprecision highp float;\n\n\n<%include file="utils/quadVertexFromID.glsl"/>\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 cameraMatrix;\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\ninstancedattribute float instanceIds;\n\n<%include file="GLSLUtils.glsl"/>\n<%include file="stack-gl/transpose.glsl"/>\n<%include file="utils/imageAtlas.glsl"/>\n\nuniform sampler2D atlasBillboards_layout;\nuniform vec4 atlasBillboards_desc;\n\nuniform sampler2D instancesTexture;\nuniform int instancesTextureSize;\n\n\nconst int cols_per_instance = 5;\n\nmat4 getMatrix(sampler2D texture, int textureSize, int index) {\n  // Unpack 3 x 4 matix columns into a 4 x 4 matrix.\n  vec4 col0 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 0);\n  vec4 col1 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 1);\n  vec4 col2 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 2);\n  mat4 result = mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0));\n  return transpose(result);\n  // return mat4(1.0);\n}\n\nmat4 getModelMatrix(int id) {\n  return getMatrix(instancesTexture, instancesTextureSize, id);\n}\nvec4 getInstanceData(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 3);\n}\nvec4 getTintColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 4);\n}\n\n\n#else\n\nuniform vec4 atlasBillboards_desc;\n\nuniform mat4 modelMatrix;\nuniform vec4 billboardData;\nuniform vec4 tintColor;\nuniform vec4 layoutData;\n\n#endif\n\nuniform int inVR;\n\nmat4 calcLookAtMatrix(vec3 origin, vec3 target, float roll) {\n  // vec3 rr = vec3(sin(roll), 0.0, cos(roll));\n  vec3 rr = vec3(0.0, 0.0, 1.0);\n  vec3 ww = normalize(target - origin);\n  vec3 uu = normalize(cross(rr, ww));\n  vec3 vv = normalize(cross(ww, uu));\n\n  return mat4(vec4(uu, 0.0), vec4(vv, 0.0), vec4(ww, 0.0), vec4(origin, 1.0));\n}\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\nvarying float v_alpha;\nvarying vec4 v_tint;\n\nvoid main(void) {\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\n  int instanceID = int(instanceIds);\n\n  mat4 modelMatrix = getModelMatrix(instanceID);\n  vec4 billboardData = getInstanceData(instanceID);\n  vec4 layoutData = fetchTexel(atlasBillboards_layout, int(atlasBillboards_desc.z), int(billboardData.z));\n  v_tint = getTintColor(instanceID);\n\n#else\n\n  v_tint = tintColor;\n\n#endif\n\n  vec2 quadVertex = getQuadVertexPositionFromID();\n\n\n  v_texCoord = vec2(quadVertex.x, -quadVertex.y) + 0.5;\n  v_alpha = billboardData.w;\n  v_texCoord *= layoutData.zw;\n  v_texCoord += layoutData.xy;\n\n  float scl = billboardData.x;\n  float width = layoutData.z * atlasBillboards_desc.x * scl;\n  float height = layoutData.w * atlasBillboards_desc.y * scl;\n  int flags = int(billboardData.y);\n  bool alignedToCamera = (flags & (1<<2)) != 0;\n  mat4 modelViewProjectionMatrix;\n  if(alignedToCamera){\n    if (inVR == 0) {\n      gl_Position = (viewMatrix * modelMatrix) * vec4(0.0, 0.0, 0.0, 1.0);\n      gl_Position += vec4(quadVertex.x * width, (quadVertex.y + 0.5) * height, 0.0, 0.0);\n      gl_Position = projectionMatrix * gl_Position;\n    } else {\n      vec3 cameraPos = vec3(cameraMatrix[3][0], cameraMatrix[3][1], cameraMatrix[3][2]);\n      vec3 billboardPos = vec3(modelMatrix[3][0], modelMatrix[3][1], modelMatrix[3][2]);\n      mat4 lookAt = calcLookAtMatrix(billboardPos, cameraPos, 0.0);\n      mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * lookAt;\n      gl_Position = modelViewProjectionMatrix * vec4(quadVertex.x * width, (quadVertex.y + 0.5) * height, 0.0, 1.0);\n    }\n  }\n  else{\n    modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n    gl_Position = modelViewProjectionMatrix * vec4(quadVertex.x * width, (quadVertex.y + 0.5) * height, 0.0, 1.0);\n  }\n\n  // Note: nowhere are we setting this flag\n  bool drawOnTop = (flags & (1<<3)) != 0;\n  if(drawOnTop){\n    gl_Position.z -= 0.05;\n  }\n}\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("BillboardShader.fragmentShader",'\nprecision highp float;\n\n<%include file="stack-gl/gamma.glsl"/>\n<%include file="GLSLUtils.glsl"/>\n<%include file="materialparams.glsl"/>\n<%include file="utils/imageAtlas.glsl"/>\n\nuniform sampler2D atlasBillboards;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\nvarying float v_alpha;\nvarying vec4 v_tint;\n\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  fragColor = texture2D(atlasBillboards, v_texCoord) * v_tint;\n  fragColor.a *= v_alpha;\n\n  // fragColor.r = 1.0;\n  // fragColor.a = 1.0;\n  \n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n')}}class oc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("DepthMapShader.vertexShader","\nprecision highp float;\n\nattribute vec3 positions;    //(location = 0)\n\nuniform mat4 modelMatrix;\nuniform mat4 lightViewMatrix;\nuniform mat4 lightProjectionMatrix;\n\n/* VS Outputs */\nvarying vec3 v_viewPos;\n\nvoid main(void) {\n  mat4 modelViewMatrix = lightViewMatrix * modelMatrix;\n  v_viewPos = modelViewMatrix * vec4(positions, 1.0);\n  gl_Position = lightProjectionMatrix * v_viewPos;\n}\n\n"),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("DepthMapShader.fragmentShader","\n#extension GL_OES_standard_derivatives : enable\nprecision highp float;\n\nuniform float near;\nuniform float far;\n\nvarying vec3 v_viewPos;\n\nfloat linstep(float edge0, float edge1, float value){\n  return clamp((value-edge0)/(edge1-edge0), 0.0, 1.0);\n}\n\nvoid main(void) {\n  float depth = linstep(near, far, -v_viewPos.z);\n  //gl_FragColor = vec4(depth, depth, depth,  1.0);\n\n  float dx = dFdx(depth);\n  float dy = dFdy(depth);\n  gl_FragColor = vec4(depth, pow(depth, 2.0) + 0.25*(dx*dx + dy*dy), 0.0, 1.0);\n}\n")}}class Wc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("EnvProjectionShader.vertexShader",'\nprecision highp float;\n\nattribute vec3 positions;    //(location = 0)\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform vec3 projectionCenter;\n\n<%include file="stack-gl/inverse.glsl"/>\n<%include file="stack-gl/transpose.glsl"/>\n<%include file="drawItemTexture.glsl"/>\n<%include file="modelMatrix.glsl"/>\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\n \nvoid main()\n{\n  int drawItemId = getDrawItemId();\n  vec4 pos = vec4(positions, 1.);\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n\n  gl_Position = modelViewProjectionMatrix * pos;\n\n  vec4 worldPos = modelMatrix * pos;\n  v_worldDir = worldPos.xyz - projectionCenter;\n}\n\n'),this.finalize()}static getParamDeclarations(){const l=super.getParamDeclarations();return l.push({name:"projectionCenter",defaultValue:new Z(0,0,1.7)}),l}}class Jc extends Wc{constructor(l){super(l),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("OctahedralEnvProjectionShader.fragmentShader",'\nprecision highp float;\n\n<%include file="math/constants.glsl"/>\n<%include file="GLSLUtils.glsl"/>\n<%include file="pragmatic-pbr/envmap-octahedral.glsl"/>\n<%include file="stack-gl/gamma.glsl"/>\n<%include file="materialparams.glsl"/>\n\n\nuniform color envMap;\nuniform sampler2D envMapTex;\nuniform int envMapTexType;\n\n\nuniform float exposure;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 texCoord = dirToSphOctUv(normalize(v_worldDir));\n  vec4 env = getColorParamValue(envMap, envMapTex, envMapTexType, texCoord);\n\n  fragColor = vec4(env.rgb/env.a, 1.0);\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n'),this.finalize()}}e.register("OctahedralEnvProjectionShader",Jc);class Ec extends Wc{constructor(l){super(l),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("LatLongEnvProjectionShader.fragmentShader",'\nprecision highp float;\n\n<%include file="math/constants.glsl"/>\n<%include file="GLSLUtils.glsl"/>\n<%include file="pragmatic-pbr/envmap-equirect.glsl"/>\n<%include file="stack-gl/gamma.glsl"/>\n<%include file="materialparams.glsl"/>\n\nuniform color envMap;\nuniform sampler2D envMapTex;\nuniform int envMapTexType;\n\nuniform float exposure;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 texCoord = latLongUVsFromDir(normalize(v_worldDir));\n  vec4 env = getColorParamValue(envMap, envMapTex, envMapTexType, texCoord);\n  fragColor = vec4(env.rgb/env.a, 1.0);\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n'),this.finalize()}}e.register("LatLongEnvProjectionShader",Ec);class Hc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("FatLinesShader.vertexShader",'\nprecision highp float;\n\ninstancedattribute vec2 segmentIndices;\nattribute float vertexIDs;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n<%include file="stack-gl/transpose.glsl"/>\n<%include file="drawItemId.glsl"/>\n<%include file="drawItemTexture.glsl"/>\n<%include file="modelMatrix.glsl"/>\n\nuniform sampler2D positionsTexture;\nuniform int positionsTextureSize;\n\nuniform float LineThickness;\n\n/* VS Outputs */\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\nvarying vec2 v_texCoord;\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  int vertexID = int(vertexIDs);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  int seqentialIndex_0 = int(mod(segmentIndices.x, 2.));\n  int seqentialIndex_1 = int(mod(segmentIndices.y, 2.));\n  int index_0 = int(segmentIndices.x) / 2;\n  int index_1 = int(segmentIndices.y) / 2;\n\n  vec3 viewPos;\n  vec4 data_0 = fetchTexel(positionsTexture, positionsTextureSize, index_0);\n  vec4 data_1 = fetchTexel(positionsTexture, positionsTextureSize, index_1);\n\n  vec4 pos_0 = modelViewMatrix * vec4(data_0.xyz, 1.0);\n  vec4 pos_1 = modelViewMatrix * vec4(data_1.xyz, 1.0);\n  // Note: multiply the per-vertex line thickness with the line thickness uniform value;\n  float lineThickness_0 = LineThickness * data_0.w;\n  float lineThickness_1 = LineThickness * data_1.w;\n\n  if(vertexID < 2){\n    viewPos = pos_0.xyz;\n  }\n  else{\n    viewPos = pos_1.xyz;\n  }\n  if(pos_1 != pos_0){\n    vec3 segmentDir = normalize(pos_1.xyz - pos_0.xyz);\n    vec3 viewVector = normalize(viewPos);\n\n    if(vertexID < 2){\n      vec3 segmentStartDir = segmentDir;\n      if(seqentialIndex_0 != 0){\n        //if index_0 == 0, get the last index in the line as previous\n        int index_prev = (index_0 > 0) ? (index_0-1) : (positionsTextureSize-1);\n        vec4 data_prev = fetchTexel(positionsTexture, positionsTextureSize, index_prev);\n        vec4 pos_prev = modelViewMatrix * vec4(data_prev.xyz, 1.0);\n        segmentStartDir = normalize(segmentDir + normalize(pos_0.xyz - pos_prev.xyz));\n      }\n      vec3 startBiTangent = normalize(cross(segmentStartDir, viewVector));\n      v_viewNormal = normalize(cross(segmentStartDir, startBiTangent));\n      // Move the endpoints to overlap a bit more.\n      //viewPos -= vec3(segmentStartDir * lineThickness_0 * 0.25);\n      if(mod(vertexIDs, 2.0) == 0.0){\n        viewPos += vec3(startBiTangent * lineThickness_0);\n        v_texCoord.x = 1.0;\n      }\n      else{\n        viewPos -= vec3(startBiTangent * lineThickness_0);\n        v_texCoord.x = 0.0;\n      }\n      v_texCoord.y = 0.0;\n    }\n    else{\n      vec3 segmentEndDir = segmentDir;\n      if(seqentialIndex_1 != 0){\n        //if index_1 == numPoints-1, get the first index in the line as next\n        int index_next = (index_1 < (positionsTextureSize-1)) ? (index_1+1) : 0;\n        vec4 data_next = fetchTexel(positionsTexture, positionsTextureSize, index_next);\n        vec4 pos_next = modelViewMatrix * vec4(data_next.xyz, 1.0);\n        segmentEndDir = normalize(segmentDir + normalize(pos_next.xyz - pos_1.xyz));\n      }\n      vec3 endBiTangent = normalize(cross(segmentEndDir, viewVector));\n      v_viewNormal = normalize(cross(segmentEndDir, endBiTangent));\n      // Move the endpoints to overlap a bit more.\n      //viewPos += vec3(segmentEndDir * lineThickness_1 * 0.25);\n      if(mod(vertexIDs, 2.0) == 0.0){\n        viewPos += vec3(endBiTangent * lineThickness_1);\n        v_texCoord.x = 1.0;\n      }\n      else{\n        viewPos -= vec3(endBiTangent * lineThickness_1);\n        v_texCoord.x = 0.0;\n      }\n      v_texCoord.y = 1.0;\n    }\n\n    // Move the line towards the viewer by the line thickness.\n    // this is to avoid depth issues when lines are rendered over meshes. \n    viewPos.z -= (lineThickness_0 + lineThickness_1) * 0.25;\n  }\n\n  v_viewPos       = viewPos;\n  gl_Position     = projectionMatrix * vec4(viewPos, 1.0);\n}\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("FatLinesShader.fragmentShader","\nprecision highp float;\n\n/* VS Outputs */\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\nvarying vec2 v_texCoord;\n\nuniform color BaseColor;\nuniform mat4 cameraMatrix;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int debugLevel = 0;\n  if(debugLevel == 0){\n\n    vec3 viewVector = mat3(cameraMatrix) * normalize(-v_viewPos);\n    vec3 normal = mat3(cameraMatrix) * v_viewNormal;\n    float NdotV = dot(normalize(normal), normalize(viewVector));\n\n    // Modulate the lighting using the texture coord so the line looks round.\n    NdotV *= cos((v_texCoord.x - 0.5) * 2.0);\n\n    vec4 color = BaseColor * NdotV;\n    fragColor = vec4(color.rgb, BaseColor.a);\n  }\n  else{\n    fragColor = vec4(v_texCoord.x, 0.0, 0.0, 1.0);\n  }\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n"),this.finalize()}bind(l){return!!super.bind(l)&&(l.supportsInstancing=!1,!0)}static getParamDeclarations(){const l=super.getParamDeclarations();return l.push({name:"BaseColor",defaultValue:new R(1,1,.5)}),l.push({name:"Opacity",defaultValue:1}),l}}e.register("FatLinesShader",Hc),rU.setShaderModule("stack-gl/gamma.glsl","\n\nconst float gamma_const = 2.2;\n\nfloat toLinear(float v) {\n  return pow(v, gamma_const);\n}\n\nvec2 toLinear(vec2 v) {\n  return pow(v, vec2(gamma_const));\n}\n\nvec3 toLinear(vec3 v) {\n  return pow(v, vec3(gamma_const));\n}\n\nvec4 toLinear(vec4 v) {\n  return vec4(toLinear(v.rgb), v.a);\n}\n\n\nfloat toGamma(float v) {\n  return pow(v, 1.0 / gamma_const);\n}\n\nvec2 toGamma(vec2 v) {\n  return pow(v, vec2(1.0 / gamma_const));\n}\n\nvec3 toGamma(vec3 v) {\n  return pow(v, vec3(1.0 / gamma_const));\n}\n\nvec4 toGamma(vec4 v) {\n  return vec4(toGamma(v.rgb), v.a);\n}\n\nfloat toGamma(float v, float gamma) {\n  return pow(v, 1.0 / gamma);\n}\n\nvec2 toGamma(vec2 v, float gamma) {\n  return pow(v, vec2(1.0 / gamma));\n}\n\nvec3 toGamma(vec3 v, float gamma) {\n  return pow(v, vec3(1.0 / gamma));\n}\n\nvec4 toGamma(vec4 v, float gamma) {\n  return vec4(toGamma(v.rgb, gamma), v.a);\n}\n\n\n");class rc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("FlatSurfaceShader.vertexShader",'\nprecision highp float;\n\nattribute vec3 positions;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n<%include file="stack-gl/transpose.glsl"/>\n<%include file="drawItemId.glsl"/>\n<%include file="drawItemTexture.glsl"/>\n<%include file="modelMatrix.glsl"/>\n\n/* VS Outputs */\nvarying vec3 v_viewPos;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\n\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n    mat4 modelMatrix = getModelMatrix(drawItemId);\n    mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n    vec4 viewPos = (modelViewMatrix * vec4(positions, 1.0));\n    gl_Position = projectionMatrix * viewPos;\n\n    v_viewPos = viewPos.xyz;\n    v_textureCoord = texCoords;\n    v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n}\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("FlatSurfaceShader.fragmentShader",'\nprecision highp float;\n\n<%include file="stack-gl/gamma.glsl"/>\n<%include file="materialparams.glsl"/>\n\nuniform color BaseColor;\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\n#endif\n\n/* VS Outputs */\nvarying vec3 v_viewPos;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\n\n\n#ifdef ENABLE_ES3\n    out vec4 fragColor;\n#endif\nvoid main(void) {\n\n#ifndef ENABLE_TEXTURES\n    vec4 baseColor = BaseColor;\n#else\n    vec4 baseColor = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n#endif\n\n#ifndef ENABLE_ES3\n    vec4 fragColor;\n#endif\n    fragColor = baseColor;\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n    fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n#ifndef ENABLE_ES3\n    gl_FragColor = fragColor;\n#endif\n}\n'),this.finalize()}static getParamDeclarations(){const l=super.getParamDeclarations();return l.push({name:"BaseColor",defaultValue:new R(1,1,.5)}),l}static getGeomDataShaderName(){return"StandardSurfaceGeomDataShader"}static getSelectedShaderName(){return"StandardSurfaceSelectedGeomsShader"}}e.register("FlatSurfaceShader",rc);class Yc extends rc{static isTransparent(){return!0}bind(l,F){return"ADD"==l.pass&&super.bind(l,F)}}e.register("FlatAlphaSurfaceShader",Yc);class pc extends pU{constructor(l){super(l,"LinesShader"),this.__shaderStages.VERTEX_SHADER=rU.parseShader("LinesShader.vertexShader",'\nprecision highp float;\n\nattribute vec3 positions;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n<%include file="stack-gl/transpose.glsl"/>\n<%include file="drawItemId.glsl"/>\n<%include file="drawItemTexture.glsl"/>\n<%include file="modelMatrix.glsl"/>\n\n/* VS Outputs */\n\nvoid main(void) {\n    int drawItemId = getDrawItemId();\n    mat4 modelMatrix = getModelMatrix(drawItemId);\n    mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n    gl_Position = modelViewProjectionMatrix * vec4(positions, 1.0);\n}\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("LinesShader.fragmentShader","\nprecision highp float;\n\nuniform color BaseColor;\nuniform float Opacity;\n\n#ifdef ENABLE_ES3\n    out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n    vec4 fragColor;\n#endif\n    fragColor = BaseColor;\n    fragColor.a *= Opacity;\n    \n#ifndef ENABLE_ES3\n    gl_FragColor = fragColor;\n#endif\n}\n"),this.finalize()}static getParamDeclarations(){const l=super.getParamDeclarations();return l.push({name:"BaseColor",defaultValue:new R(1,1,.5)}),l.push({name:"Opacity",defaultValue:1}),l}static getGeomDataShaderName(){return"StandardSurfaceGeomDataShader"}static getSelectedShaderName(){return"StandardSurfaceSelectedGeomsShader"}static isTransparent(){return!0}bind(l,F){return"ADD"==l.pass&&super.bind(l,F)}}e.register("LinesShader",pc);class Nc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("NormalsShader.vertexShader",'\nprecision highp float;\n\ninstancedattribute vec3 positions;\ninstancedattribute vec3 normals;\nattribute vec2 vertexIDs;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nuniform float normalLength;\n\n<%include file="stack-gl/transpose.glsl"/>\n<%include file="drawItemTexture.glsl"/>\n<%include file="modelMatrix.glsl"/>\n\n\n/* VS Outputs */\nvarying float v_weight;\n\nvoid main(void) {\n  mat4 modelMatrix = getModelMatrix(transformIndex);\n  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n  if(vertexIDs.x == 0.0){\n    gl_Position = modelViewProjectionMatrix * vec4(positions, 1.0);\n    v_weight = 1.0;\n  }\n  else{\n    gl_Position = modelViewProjectionMatrix * vec4(positions+(normals*normalLength), 1.0);\n    v_weight = 0.0;\n  }\n}\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("NormalsShader.fragmentShader","\nprecision highp float;\n\nuniform color normalColor;\n\n/* VS Outputs */\nvarying float v_weight;\n\n\nvoid main(void) {\n  gl_FragColor = normalColor;\n  gl_FragColor.a = v_weight;\n}\n")}}class Tc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("PointsShader.vertexShader",'\nprecision highp float;\n\nattribute vec3 positions;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform float PointSize;\n\n<%include file="stack-gl/transpose.glsl"/>\n<%include file="stack-gl/inverse.glsl"/>\n<%include file="drawItemId.glsl"/>\n<%include file="drawItemTexture.glsl"/>\n<%include file="modelMatrix.glsl"/>\n\n/* VS Outputs */\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n  gl_Position = modelViewProjectionMatrix * vec4(positions, 1.);\n  \n  gl_PointSize = PointSize;\n}\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("PointsShader.fragmentShader","\nprecision highp float;\n\nuniform color BaseColor;\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  fragColor = BaseColor;\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}static getParamDeclarations(){const l=super.getParamDeclarations();return l.push({name:"BaseColor",defaultValue:new R(1,1,.5)}),l.push({name:"PointSize",defaultValue:2}),l}}e.register("PointsShader",Tc);class Ac extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("FatPointsShader.vertexShader",'\nprecision highp float;\n\ninstancedattribute vec3 positions;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n<%include file="stack-gl/transpose.glsl"/>\n<%include file="stack-gl/inverse.glsl"/>\n<%include file="drawItemId.glsl"/>\n<%include file="drawItemTexture.glsl"/>\n<%include file="modelMatrix.glsl"/>\n<%include file="utils/quadVertexFromID.glsl"/>\n\nuniform float PointSize;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\nvarying vec3 v_viewPos;\nvarying float v_drawItemId;\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  vec2 quadPointPos = getQuadVertexPositionFromID();\n  v_texCoord = quadPointPos + 0.5;\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  \n  vec4 viewPos = modelViewMatrix * vec4(positions, 1.);\n\n  viewPos += vec4(vec3(quadPointPos, 0.0) * PointSize, 0.);\n\n  // Generate a quad which is 0.5 * PointSize closer towards\n  // us. This allows points to be visualized even if snug on \n  // a surface. (else they get fully clipped)\n  viewPos.z += 0.5 * PointSize;\n\n  v_drawItemId = float(getDrawItemId());\n  v_viewPos = -viewPos.xyz;\n  \n  gl_Position = projectionMatrix * viewPos;\n}\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("FatPointsShader.fragmentShader",'\nprecision highp float;\n\n<%include file="math/constants.glsl"/>\n\nuniform color BaseColor;\nuniform float Rounded;\nuniform float BorderWidth;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\nvarying vec3 v_viewPos;\nvarying float v_drawItemId;\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  float dist = length(v_texCoord - 0.5);\n  if(dist > 0.5)\n    discard;\n  if(dist > 0.5 - (BorderWidth * 0.5))\n    fragColor = vec4(0.,0.,0.,1.);\n  else {\n    // Modulate the lighting using the texture coord so the point looks round.\n    float NdotV = cos(dist * PI);\n\n    fragColor = BaseColor * mix(1.0, NdotV, Rounded);\n  }\n  \n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n')}bind(l){return!!super.bind(l)&&(l.supportsInstancing=!1,!0)}static getParamDeclarations(){const l=super.getParamDeclarations();return l.push({name:"BaseColor",defaultValue:new R(1,1,.5)}),l.push({name:"PointSize",defaultValue:.05}),l.push({name:"Rounded",defaultValue:1}),l.push({name:"BorderWidth",defaultValue:.2}),l}static getGeomDataShaderName(){return"FatPointsGeomDataShader"}static getSelectedShaderName(){return"FatPointsSelectedShader"}}class Mc extends Ac{constructor(l){super(l),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("FatPointsGeomDataShader.fragmentShader",'\nprecision highp float;\n\n<%include file="math/constants.glsl"/>\n<%include file="GLSLBits.glsl"/>\n\nuniform int floatGeomBuffer;\nuniform int passId;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\nvarying vec3 v_viewPos;\nvarying float v_drawItemId;\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  float dist = length(v_texCoord - 0.5);\n  if(dist > 0.5)\n    discard;\n    \n\n  float viewDist = length(v_viewPos);\n\n  if(floatGeomBuffer != 0) {\n    fragColor.r = float(passId); \n    fragColor.g = float(v_drawItemId);\n    fragColor.b = 0.0;// TODO: store poly-id or something.\n    fragColor.a = viewDist;\n  }\n  else {\n    ///////////////////////////////////\n    // UInt8 buffer\n    fragColor.r = (mod(v_drawItemId, 256.) + 0.5) / 255.;\n    fragColor.g = (floor(v_drawItemId / 256.) + 0.5) / 255.;\n\n    // encode the dist as a 16 bit float\n    vec2 float16bits = encode16BitFloatInto2xUInt8(viewDist);\n    fragColor.b = float16bits.x;\n    fragColor.a = float16bits.y;\n  }\n\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n')}}class zc extends Ac{constructor(l){super(l),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("FatPointsSelectedShader.fragmentShader",'\nprecision highp float;\n\n<%include file="math/constants.glsl"/>\n<%include file="GLSLBits.glsl"/>\n\nuniform int floatGeomBuffer;\nuniform int passId;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\nvarying vec3 v_viewPos;\nvarying float v_drawItemId;\n\n\n<%include file="drawItemTexture.glsl"/>\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getHighlightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\n}\n#else\n\nuniform vec4 highlightColor;\n\nvec4 getHighlightColor() {\n    return highlightColor;\n}\n\n#endif\n\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  float dist = length(v_texCoord - 0.5);\n  if(dist > 0.5)\n    discard;\n  \n  int drawItemId = int(v_drawItemId + 0.5);\n  fragColor = getHighlightColor(drawItemId);\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n')}}e.register("FatPointsShader",Ac),e.register("FatPointsGeomDataShader",Mc),e.register("FatPointsSelectedShader",zc),rU.setShaderModule("pragmatic-pbr/exposure.glsl","\n\n/*\n* Get an exposure using the Saturation-based Speed method.\n*/\nfloat getSaturationBasedExposure(float aperture,\n                                 float shutterSpeed,\n                                 float iso)\n{\n    float l_max = (7800.0 / 65.0) * sqrt(aperture) / (iso * shutterSpeed);\n    return 1.0 / l_max;\n}\n\n//White balance middle grey we are targetting for a good scene exposure\n//https://en.wikipedia.org/wiki/Middle_gray\nconst float MIDDLE_GREY = 0.18;\n\n/*\n* Get an exposure using the Standard Output Sensitivity method.\n* Accepts an additional parameter of the target middle grey.\n*/\nfloat getStandardOutputBasedExposure(float aperture,\n                                     float shutterSpeed,\n                                     float iso)\n{\n    //https://placeholderart.wordpress.com/2014/11/21/implementing-a-physically-based-camera-manual-exposure/\n    //https://en.wikipedia.org/wiki/Film_speed#Standard_output_sensitivity_.28SOS.29\n    //photometric exposure magic\n    //represents the properties of lens\n    float q = 0.65;\n\n    //float l_avg = (1000.0f / 65.0f) * sqrt(aperture) / (iso * shutterSpeed);\n    float l_avg = (1.0 / q) * sqrt(aperture) / (iso * shutterSpeed);\n    //float l_avg = sqrt(aperture) / (iso * shutterSpeed);\n    return MIDDLE_GREY / l_avg;\n}\n\n"),rU.setShaderModule("pragmatic-pbr/tonemap-filmic.glsl","\n\n//Based on Filmic Tonemapping Operators http://filmicgames.com/archives/75\nvec3 tonemapFilmic(vec3 color) {\n    vec3 x = max(vec3(0.0), color - 0.004);\n    return (x * (6.2 * x + 0.5)) / (x * (6.2 * x + 1.7) + 0.06);\n}\n\n"),rU.setShaderModule("mattdesl/fxaa-texcoords.glsl","\n//To save 9 dependent texture reads, you can compute\n//these in the vertex shader and use the optimized\n//frag.glsl function in your frag shader. \n\n//This is best suited for mobile devices, like iOS.\n\nvoid texcoords(vec2 fragCoord, vec2 resolution,\n            out vec2 v_rgbNW, out vec2 v_rgbNE,\n            out vec2 v_rgbSW, out vec2 v_rgbSE,\n            out vec2 v_rgbM) {\n    vec2 inverseVP = 1.0 / resolution.xy;\n    v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\n    v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\n    v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\n    v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\n    v_rgbM = vec2(fragCoord * inverseVP);\n}\n\n"),rU.setShaderModule("mattdesl/fxaa.glsl",'\n\n/**\nBasic FXAA implementation based on the code on geeks3d.com with the\nmodification that the texture2DLod stuff was removed since it\'s\nunsupported by WebGL.\n--\nFrom:\nhttps://github.com/mitsuhiko/webgl-meincraft\nCopyright (c) 2011 by Armin Ronacher.\nSome rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n    * The names of the contributors may not be used to endorse or\n      promote products derived from this software without specific\n      prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#ifndef FXAA_REDUCE_MIN\n    #define FXAA_REDUCE_MIN   (1.0/ 128.0)\n#endif\n#ifndef FXAA_REDUCE_MUL\n    #define FXAA_REDUCE_MUL   (1.0 / 8.0)\n#endif\n#ifndef FXAA_SPAN_MAX\n    #define FXAA_SPAN_MAX     8.0\n#endif\n\n//optimized version for mobile, where dependent \n//texture reads can be a bottleneck\nvec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 resolution,\n            vec2 v_rgbNW, vec2 v_rgbNE, \n            vec2 v_rgbSW, vec2 v_rgbSE, \n            vec2 v_rgbM) {\n    vec4 color;\n    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\n    vec4 texColor = texture2D(tex, v_rgbM);\n    vec3 rgbM  = texColor.xyz;\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(rgbNW, luma);\n    float lumaNE = dot(rgbNE, luma);\n    float lumaSW = dot(rgbSW, luma);\n    float lumaSE = dot(rgbSE, luma);\n    float lumaM  = dot(rgbM,  luma);\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n    \n    mediump vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n    \n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n    \n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n              dir * rcpDirMin)) * inverseVP;\n    \n    vec3 rgbA = 0.5 * (\n        texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\n        texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\n\n    float lumaB = dot(rgbB, luma);\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\n        color = vec4(rgbA, texColor.a);\n    else\n        color = vec4(rgbB, texColor.a);\n    return color;\n}\n\n'),rU.setShaderModule("mattdesl/fxaa-apply.glsl",'\n\n<%include file="mattdesl/fxaa.glsl"/>\n\nvec4 apply(sampler2D tex, vec2 fragCoord, vec2 resolution) {\n    mediump vec2 v_rgbNW;\n    mediump vec2 v_rgbNE;\n    mediump vec2 v_rgbSW;\n    mediump vec2 v_rgbSE;\n    mediump vec2 v_rgbM;\n\n    //compute the texture coords\n    texcoords(fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n    \n    //compute FXAA\n    return fxaa(tex, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n}\n\n');class kc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("PostProcessing.vertexShader",'\nprecision highp float;\n\n<%include file="utils/quadVertexFromID.glsl"/>\n<%include file="mattdesl/fxaa-texcoords.glsl"/>\n\nuniform vec2 textureSize;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n\n//texcoords computed in vertex step\n//to avoid dependent texture reads\nvarying vec2 v_rgbNW;\nvarying vec2 v_rgbNE;\nvarying vec2 v_rgbSW;\nvarying vec2 v_rgbSE;\nvarying vec2 v_rgbM;\n\n \nvoid main()\n{\n    vec2 position = getQuadVertexPositionFromID();\n    v_texCoord = position+0.5;\n    gl_Position = vec4(position*2.0, 0.0, 1.0);\n\n    vec2 fragCoord = v_texCoord * textureSize;\n    texcoords(fragCoord, textureSize, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n}\n\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("PostProcessing.fragmentShader",'\nprecision highp float;\n\n<%include file="pragmatic-pbr/exposure.glsl"/>\n<%include file="pragmatic-pbr/tonemap-filmic.glsl"/>\n<%include file="stack-gl/gamma.glsl"/>\n\n<%include file="mattdesl/fxaa.glsl"/>\n\n//texcoords computed in vertex step\n//to avoid dependent texture reads\nvarying vec2 v_rgbNW;\nvarying vec2 v_rgbNE;\nvarying vec2 v_rgbSW;\nvarying vec2 v_rgbSE;\nvarying vec2 v_rgbM;\n\nuniform sampler2D texture;\nuniform vec2 textureSize;\n\nuniform bool antialiase;\nuniform bool tonemap;\nuniform float exposure;\nuniform float gamma;\n\nvarying vec2 v_texCoord;\n\n#ifdef ENABLE_ES3\n    out vec4 fragColor;\n#endif\nvoid main(void) {\n    //can also use gl_FragCoord.xy\n    mediump vec2 fragCoord = v_texCoord * textureSize; \n\n    if (antialiase) {\n        fragColor = fxaa(texture, fragCoord, textureSize, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n    } else {\n        fragColor = texture2D(texture, v_texCoord);\n    }\n    \n    //fragColor.rgb *= getStandardOutputBasedExposure(aperture, shutterSpeed, iso);\n    fragColor.rgb *= exposure;\n    \n    if (tonemap) \n        fragColor.rgb = tonemapFilmic(fragColor.rgb);\n    else\n        fragColor.rgb = toGamma(fragColor.rgb, gamma);\n\n    \n    //fragColor.rgb = toGamma(fragColor.rgb, gamma);\n    \n    fragColor.a = 1.0;\n\n#ifndef ENABLE_ES3\n    gl_FragColor = fragColor;\n#endif\n}'),this.finalize()}}class vc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("SimpleSurfaceShader.vertexShader",'\nprecision highp float;\n\nattribute vec3 positions;\nattribute vec3 normals;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n<%include file="stack-gl/transpose.glsl"/>\n<%include file="stack-gl/inverse.glsl"/>\n<%include file="drawItemId.glsl"/>\n<%include file="drawItemTexture.glsl"/>\n<%include file="modelMatrix.glsl"/>\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n\nvoid main(void) {\n    int drawItemId = getDrawItemId();\n    v_drawItemId = float(drawItemId);\n    v_geomItemData  = getInstanceData(drawItemId);\n\n    vec4 pos = vec4(positions, 1.);\n    mat4 modelMatrix = getModelMatrix(drawItemId);\n    mat4 modelViewMatrix = viewMatrix * modelMatrix;\n    vec4 viewPos    = modelViewMatrix * pos;\n    gl_Position     = projectionMatrix * viewPos;\n\n    mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));\n    v_viewPos       = -viewPos.xyz;\n    v_viewNormal    = normalMatrix * normals;\n\n#ifdef ENABLE_TEXTURES\n    v_textureCoord  = texCoords;\n    // v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n#endif\n\n    v_worldPos      = (modelMatrix * pos).xyz;\n}\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("SimpleSurfaceShader.fragmentShader",'\nprecision highp float;\n\n<%include file="drawItemTexture.glsl"/>\n<%include file="cutaways.glsl"/>\n<%include file="stack-gl/gamma.glsl"/>\n<%include file="materialparams.glsl"/>\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n\nuniform mat4 cameraMatrix;\n\nuniform color BaseColor;\nuniform float Opacity;\n\n#ifdef ENABLE_TEXTURES\n\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\nuniform sampler2D OpacityTex;\nuniform int OpacityTexType;\n\nuniform color cutColor;\nvec4 getCutaway(int id) {\n    return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n}\n\n#endif\n\n#ifdef ENABLE_ES3\n    out vec4 fragColor;\n#endif\n\nvoid main(void) {\n    int drawItemId = int(v_drawItemId + 0.5);\n\n    int flags = int(v_geomItemData.r + 0.5);\n    // Cutaways\n    if(testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n    {\n        vec4 cutAwayData   = getCutaway(drawItemId);\n        vec3 planeNormal = cutAwayData.xyz;\n        float planeDist = cutAwayData.w;\n        if(cutaway(v_worldPos, planeNormal, planeDist)){\n            discard;\n            return;\n        }\n        else if(!gl_FrontFacing){\n            fragColor = cutColor;\n#ifndef ENABLE_ES3\n            gl_FragColor = fragColor;\n#endif\n            return;\n        }\n    }\n\n#ifndef ENABLE_TEXTURES\n    vec4 baseColor      = BaseColor;\n    float opacity       = baseColor.a * Opacity;\n#else\n    vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n    float opacity       = baseColor.a * getLuminanceParamValue(Opacity, OpacityTex, OpacityTexType, v_textureCoord);\n#endif\n\n    // Hacky simple irradiance. \n    vec3 viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));\n    vec3 normal = normalize(mat3(cameraMatrix) * v_viewNormal);\n    float ndotv = dot(normal, viewVector);\n    if(ndotv < 0.0){\n        normal = -normal;\n        ndotv = dot(normal, viewVector);\n\n        // Note: these 2 lines can be used to debug inverted meshes.\n        //baseColor = vec4(1.0, 0.0, 0.0, 1.0);\n        //ndotv = 1.0;\n    }\n\n#ifndef ENABLE_ES3\n    vec4 fragColor;\n#endif\n    fragColor = vec4(ndotv * baseColor.rgb, opacity);\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n    fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n#ifndef ENABLE_ES3\n    gl_FragColor = fragColor;\n#endif\n}\n'),this.finalize()}static getParamDeclarations(){const l=super.getParamDeclarations();return l.push({name:"BaseColor",defaultValue:new R(1,1,.5)}),l.push({name:"Opacity",defaultValue:1,range:[0,1]}),l}static getGeomDataShaderName(){return"StandardSurfaceGeomDataShader"}static getSelectedShaderName(){return"StandardSurfaceSelectedGeomsShader"}}e.register("SimpleSurfaceShader",vc),rU.setShaderModule("math/constants.glsl","\n\n#define PI 3.141592653589793\n#define TwoPI (2.0 * PI)\n#define HalfPI (0.5 * PI)\n\n"),rU.setShaderModule("GGX_Specular.glsl",'\n\n\n<%include file="pragmatic-pbr/envmap-octahedral.glsl"/>\n<%include file="utils/imagePyramid.glsl"/>\n\n// uniform ImageAtlas envMap;\n// see: GLImageAtlas.js: line 460.\nuniform sampler2D   envMapPyramid;\nuniform sampler2D   envMapPyramid_layout;\nuniform vec4        envMapPyramid_desc;\n\n\nvec3 sampleEnvMap(vec3 dir, float roughness) {\n    return sampleImagePyramid(dirToSphOctUv(dir), roughness, envMapPyramid_layout, envMapPyramid, envMapPyramid_desc).rgb;\n}\n\n\n// Borrowed heavily from here: http://www.codinglabs.net/article_physically_based_rendering_cook_torrance.aspx\n\nvec3 Fresnel_Schlick(float cosT, vec3 F0)\n{\n    return F0 + (vec3(1.0)-F0) * vec3(pow( 1.0 - cosT, 5.0));\n\n    // for now we calculate this in the suface shader\n    // float schlick = reflectance + pow((1.0-reflectance)*(1.0-dot(N,V)), 5.0);\n}\n\nfloat chiGGX(float v)\n{\n    return v > 0.0 ? 1.0 : 0.0;\n}\n\nfloat saturate(float v)\n{\n    return clamp(v, 0.0, 1.0);\n}\n\nvec3 saturate(vec3 v)\n{\n    return clamp(v, vec3(0.0), vec3(1.0));\n}\n\nfloat saturatedDot( in vec3 a, in vec3 b )\n{\n    return max( dot( a, b ), 0.0 );   \n}\n\nfloat GGX_PartialGeometryTerm(vec3 v, vec3 n, vec3 h, float alpha)\n{\n    float VoH2 = saturate(dot(v,h));\n    float chi = chiGGX( VoH2 / saturate(dot(v,n)) );\n    VoH2 = VoH2 * VoH2;\n    float tan2 = ( 1.0 - VoH2 ) / VoH2;\n    return (chi * 2.0) / ( 1.0 + sqrt( 1.0 + alpha * alpha * tan2 ) );\n}\n\nvec3 GGX_Specular_PrefilteredEnv(vec3 normal, vec3 viewVector, float roughness, float fresnel)\n{\n    vec3 reflectionVector = reflect(-viewVector, normal);\n    vec3 radiance = vec3(0.0);\n    float NoV = saturate(dot(normal, viewVector));\n\n    vec3 sampleVector = reflectionVector;\n\n    // Calculate the half vector\n    vec3 halfVector = normalize(sampleVector + viewVector);\n    float cosT = saturatedDot(reflectionVector, normal);\n    float sinT = sqrt( 1.0 - cosT * cosT);\n\n    // Calculate fresnel\n    // vec3 fresnel = Fresnel_Schlick( saturate(dot( halfVector, viewVector ) ), F0 );\n    // Geometry term\n    float geometry = GGX_PartialGeometryTerm(viewVector, normal, halfVector, clamp(roughness, 0.01, 1.0)) * GGX_PartialGeometryTerm(reflectionVector, normal, halfVector, clamp(roughness, 0.01, 1.0));\n\n    // Calculate the Cook-Torrance denominator\n    float denominator = clamp( 4.0 * (NoV * saturate(dot(halfVector, normal)) + 0.05), 0.0, 1.0 );\n    // kS += fresnel;\n\n    // Accumulate the radiance\n    vec3 envColor = sampleEnvMap(reflectionVector, roughness);\n    radiance += envColor * geometry * fresnel * sinT / denominator;\n    //radiance += envColor * fresnel; // Removing "geometry" for now until we construct a better geometric shading term\n\n    return radiance;        \n}\n'),rU.setShaderModule("PBRSurfaceRadiance.glsl","\n\nstruct MaterialParams {\n    vec3 baseColor;\n    float metallic;\n    float roughness;\n    float reflectance;\n};\n\nvec4 pbrSpecularReflectance(in MaterialParams materialParams, vec3 normal, in vec3 viewVector) {\n\n    float NdotV = dot(normal, viewVector);\n    \n    // -------------------------- Specular Reflectance --------------------------\n    // vec3 ks = vec3(0.0);\n    // vec3 specular = GGX_Specular_PrefilteredEnv(normal, viewVector, materialParams.roughness, F0, ks );\n    // vec3 kd = (vec3(1.0) - ks) * vec3(1.0 - metallic);    \n\n    float schlickFresnel = materialParams.reflectance + pow((1.0-materialParams.reflectance)*(1.0-NdotV), 5.0);\n\n    vec3 specularReflectance = GGX_Specular_PrefilteredEnv(normal, viewVector, materialParams.roughness, schlickFresnel);\n\n\n    // -------------------------- Specular Occlusion --------------------------\n    // Fast and quick way of reducing specular reflection in areas that are less exposed to the environment\n    // A better approch is to try screen space specular occlusion but need to check performance and feasibility in webGL\n    //float specularOcclusion = clamp(length(irradiance), 0.01, 1.0);    \n    //specularReflectance = (specularReflectance * specularOcclusion); \n\n    return vec4(specularReflectance, schlickFresnel);\n}\n\n\nvec3 pbrSurfaceRadiance(in MaterialParams materialParams, vec3 irradiance, vec3 normal, in vec3 viewVector) {\n\n    float NdotV = dot(normal, viewVector);\n    vec3 specularReflectance;\n\n    // -------------------------- Diffuse Reflectance --------------------------\n\n    vec3 diffuseReflectance = materialParams.baseColor * irradiance;\n\n    // From the Disney dielectric BRDF    \n    // Need to check if this is useful for us but the implementation works based on their paper\n    //diffuseReflectance = (diffuseReflectance / PI); // << [PT 18-08-2018] What did this line do??? (makes everything 3.1x darker.)\n    // diffuseReflectance = vec3(mix(diffuseReflectance, diffuseReflectance * mix(0.5, 2.5, materialParams.roughness), pow(1.0 - NdotV, 5.0)));\n    diffuseReflectance = vec3(mix(diffuseReflectance, diffuseReflectance * mix(0.5, 1.0, materialParams.roughness), pow(1.0 - NdotV, 5.0)));\n\n\n    // -------------------------- Color at normal incidence --------------------------\n    \n    // Need to use 'Reflectance' here instead of 'ior'\n    //vec3 F0 = vec3(abs((1.0 - ior) / (1.0 + ior)));    \n    //F0 = F0 * F0;\n    //F0 = mix(F0, materialParams.baseColor, materialParams.metallic);      \n\n\n    // -------------------------- Specular Reflectance --------------------------\n    // vec3 ks = vec3(0.0);\n    // vec3 specular = GGX_Specular_PrefilteredEnv(normal, viewVector, materialParams.roughness, F0, ks );\n    // vec3 kd = (vec3(1.0) - ks) * vec3(1.0 - metallic);    \n\n    float schlickFresnel = materialParams.reflectance + pow((1.0-materialParams.reflectance)*(1.0-NdotV), 5.0);\n\n    specularReflectance = GGX_Specular_PrefilteredEnv(normal, viewVector, materialParams.roughness, schlickFresnel);\n\n\n    // -------------------------- Specular Occlusion --------------------------\n    // Fast and quick way of reducing specular reflection in areas that are less exposed to the environment\n    // A better approch is to try screen space specular occlusion but need to check performance and feasibility in webGL\n    //float specularOcclusion = clamp(length(irradiance), 0.01, 1.0);    \n    //specularReflectance = (specularReflectance * specularOcclusion);  \n      \n\n    // -------------------------- Metallic --------------------------\n    // We need to do few things given a higher > 0 metallic value\n    //      1. tint specular reflectance by the albedo color (not at grazing angles)\n    //      2. almost elliminate all diffuse reflectance (in reality metals have some diffuse due to layering (i.e. dust, prints, etc.))\n    //      3. set \"specular\" artistic value to metallic range (0.6 - 0.85)\n\n    specularReflectance = mix(specularReflectance, specularReflectance * materialParams.baseColor, materialParams.metallic);\n    diffuseReflectance = mix(diffuseReflectance, vec3(0.0,0.0,0.0), materialParams.metallic); // Leaveing at pure black for now but always need some %3 diffuse left for imperfection of pulished pure metal\n    // Would be best to compute reflectace internally and set here to 0.6-0.85 for metals\n    \n\n    // -------------------------- Final color --------------------------\n    // Energy conservation already taken into account in both the diffuse and specular reflectance\n    vec3 radiance = diffuseReflectance + specularReflectance;\n\n    // radiance = vec4( kd * diffuse + /*ks */ specular, 1);\n    return radiance;\n}\n"),rU.setShaderModule("cutaways.glsl","\n\n\nconst int GEOMITEM_FLAG_CUTAWAY =  1; // 1<<0;\n\n#define RAY_EPS 0.0000001\nstruct Ray {\n    vec3 start;\n    vec3 dir;\n};\n\nfloat intersectRayPlane(Ray ray, Ray plane) {\n    vec3 w = ray.start - plane.start;\n    float D = dot(plane.dir, ray.dir);\n    float N = dot(-plane.dir, w);\n\n    if (abs(D) < RAY_EPS) {\n        // segment is parallel to plane\n        if (N == 0.0)\n            return -1.0; // segment lies in plane\n        else\n            return -1.0; // no intersection\n    }\n    // they are not parallel\n    // compute intersect param\n    float sI = N / D;\n    if (sI < -RAY_EPS) {\n        return -1.0; // no intersection\n    }\n    return sI;\n}\n\n\nbool cutaway(vec3 worldPos, vec3 planeNormal, float planeDist) {\n\n    vec3 planePos = planeNormal * planeDist;\n    vec3 planeDir = worldPos + planePos;\n    float planeOffset = dot(planeDir, planeNormal);\n    if(planeOffset > 0.0){\n        return true;\n    }\n    return  false;\n}\n");class Kc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("StandardSurfaceShader.vertexShader",'\nprecision highp float;\n\nattribute vec3 positions;\nattribute vec3 normals;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n<%include file="stack-gl/transpose.glsl"/>\n<%include file="stack-gl/inverse.glsl"/>\n<%include file="drawItemId.glsl"/>\n<%include file="drawItemTexture.glsl"/>\n<%include file="modelMatrix.glsl"/>\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\n\nvoid main(void) {\n    int drawItemId = getDrawItemId();\n    v_drawItemId = float(drawItemId);\n    v_geomItemData = getInstanceData(drawItemId);\n\n    vec4 pos = vec4(positions, 1.);\n    mat4 modelMatrix = getModelMatrix(drawItemId);\n    mat4 modelViewMatrix = viewMatrix * modelMatrix;\n    vec4 viewPos    = modelViewMatrix * pos;\n    gl_Position     = projectionMatrix * viewPos;\n\n    mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));\n    v_viewPos       = -viewPos.xyz;\n    v_viewNormal    = normalMatrix * normals;\n\n#ifdef ENABLE_TEXTURES\n    v_textureCoord  = texCoords;\n#endif\n\n    v_worldPos      = (modelMatrix * pos).xyz;\n}\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("StandardSurfaceShader.fragmentShader",'\nprecision highp float;\n\n<%include file="math/constants.glsl"/>\n<%include file="drawItemTexture.glsl"/>\n<%include file="cutaways.glsl"/>\n\n\n<%include file="stack-gl/gamma.glsl"/>\n<%include file="materialparams.glsl"/>\n\n<%include file="GGX_Specular.glsl"/>\n<%include file="PBRSurfaceRadiance.glsl"/>\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\nuniform color cutColor;\nvec4 getCutaway(int id) {\n    return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n}\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\nuniform float exposure;\n#endif\n\nuniform mat4 cameraMatrix;\n\nuniform color BaseColor;\nuniform float EmissiveStrength;\n\n\n#ifdef ENABLE_SPECULAR\nuniform float Roughness;\nuniform float Metallic;\nuniform float Reflectance;\n#endif\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\n\n#ifdef ENABLE_SPECULAR\nuniform sampler2D RoughnessTex;\nuniform int RoughnessTexType;\n\nuniform sampler2D MetallicTex;\nuniform int MetallicTexType;\n\nuniform sampler2D ReflectanceTex;\nuniform int ReflectanceTexType;\n\nuniform sampler2D NormalTex;\nuniform int NormalTexType;\n// uniform float NormalScale;\n#endif\n\nuniform sampler2D EmissiveStrengthTex;\nuniform int EmissiveStrengthTexType;\n\n\n#endif\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n\n#endif\n\nvoid main(void) {\n    int drawItemId = int(v_drawItemId + 0.5);\n\n    int flags = int(v_geomItemData.r + 0.5);\n    // Cutaways\n    if(testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n        vec4 cutAwayData   = getCutaway(drawItemId);\n        vec3 planeNormal = cutAwayData.xyz;\n        float planeDist = cutAwayData.w;\n        if(cutaway(v_worldPos, planeNormal, planeDist)){\n            discard;\n            return;\n        }\n        else if(!gl_FrontFacing){\n            fragColor = cutColor;\n#ifndef ENABLE_ES3\n            gl_FragColor = fragColor;\n#endif\n            return;\n        }\n    }\n\n\n    MaterialParams material;\n\n#ifndef ENABLE_TEXTURES\n    material.BaseColor     = BaseColor.rgb;\n    float emission         = EmissiveStrength;\n\n#ifdef ENABLE_SPECULAR\n    material.roughness     = Roughness;\n    material.metallic      = Metallic;\n    material.reflectance   = Reflectance;\n#endif\n\n#else\n    // Planar YZ projection for texturing, repeating every meter.\n    // vec2 texCoord       = v_worldPos.xz * 0.2;\n    vec2 texCoord          = vec2(v_textureCoord.x, 1.0 - v_textureCoord.y);\n    material.baseColor     = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, texCoord).rgb;\n\n#ifdef ENABLE_SPECULAR\n    material.roughness     = getLuminanceParamValue(Roughness, RoughnessTex, RoughnessTexType, texCoord);\n    material.metallic      = getLuminanceParamValue(Metallic, MetallicTex, MetallicTexType, texCoord);\n    material.reflectance   = getLuminanceParamValue(Reflectance, ReflectanceTex, ReflectanceTexType, texCoord);\n#endif\n    float emission         = getLuminanceParamValue(EmissiveStrength, EmissiveStrengthTex, EmissiveStrengthTexType, texCoord);\n#endif\n\n    vec3 viewNormal = normalize(v_viewNormal);\n    //vec3 surfacePos = -v_viewPos;\n\n#ifdef ENABLE_TEXTURES\n#ifdef ENABLE_SPECULAR\n    if(NormalTexType != 0){\n        vec3 textureNormal_tangentspace = normalize(texture2D(NormalTex, texCoord).rgb * 2.0 - 1.0);\n        viewNormal = normalize(mix(viewNormal, textureNormal_tangentspace, 0.3));\n    }\n#endif\n#endif\n\n    vec3 viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));\n    vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);\n    if(dot(normal, viewVector) < 0.0){\n        normal = -normal;\n        // Note: this line can be used to debug inverted meshes.\n        //material.baseColor = vec3(1.0, 0.0, 0.0);\n    }\n\n    vec3 irradiance;\n#ifndef ENABLE_SPECULAR\n      irradiance = sampleEnvMap(normal, 1.0);\n#else\n      irradiance = vec3(dot(normal, viewVector));\n#endif\n\n#ifndef ENABLE_SPECULAR\n    vec3 radiance = material.baseColor * irradiance;\n#else\n    vec3 radiance = pbrSurfaceRadiance(material, irradiance, normal, viewVector);\n#endif\n\n#ifndef ENABLE_ES3\n    vec4 fragColor;\n#endif\n    // fragColor = vec4(material.baseColor, 1.0);\n    // fragColor = vec4(material.baseColor * irradiance, 1.0);\n    fragColor = vec4(radiance + (emission * material.baseColor), 1.0);\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n    fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n#ifndef ENABLE_ES3\n    gl_FragColor = fragColor;\n#endif\n}\n'),this.finalize()}static getParamDeclarations(){const l=super.getParamDeclarations();return l.push({name:"BaseColor",defaultValue:new R(1,1,.5)}),l.push({name:"Metallic",defaultValue:0,range:[0,1]}),l.push({name:"Roughness",defaultValue:.85,range:[0,1]}),l.push({name:"Reflectance",defaultValue:.1,range:[0,1]}),l.push({name:"EmissiveStrength",defaultValue:0,range:[0,1]}),l}static getGeomDataShaderName(){return"StandardSurfaceGeomDataShader"}static getSelectedShaderName(){return"StandardSurfaceSelectedGeomsShader"}}e.register("StandardSurfaceShader",Kc),rU.setShaderModule("GLSLBits.glsl",'\n    \n/////////////////////////////////////////////////////////////////\n// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js\nfloat shift_right(float v, float amt) {\n  v = floor(v) + 0.5;\n  return floor(v / exp2(amt));\n}\nfloat shift_left(float v, float amt) {\n  return floor(v * exp2(amt) + 0.5);\n}\n\nfloat mask_last(float v, float bits) {\n  return mod(v, shift_left(1.0, bits));\n}\nfloat extract_bits(float num, float from, float to) {\n  from = floor(from + 0.5);\n  to = floor(to + 0.5);\n  return mask_last(shift_right(num, from), to - from);\n}\n\n/////////////////////////////////////////////////////////////////\n// https://stackoverflow.com/questions/18453302/how-do-you-pack-one-32bit-int-into-4-8bit-ints-in-glsl-webgl\n\nconst vec4 bitEnc = vec4(1.,255.,65025.,16581375.);\nconst vec4 bitDec = 1./bitEnc;\nvec4 EncodeFloatRGBA (float v) {\n    vec4 enc = bitEnc * v;\n    enc = fract(enc);\n    enc -= enc.yzww * vec2(1./255., 0.).xxxy;\n    return enc;\n}\nfloat DecodeFloatRGBA (vec4 v) {\n    return dot(v, bitDec);\n}\n\n\n\n/////////////////////////////////////////////////////////////////\n// https://gist.github.com/Flexi23/1713774\n// \nvec2 encode16BitFloatInto2xUInt8(float v){\n    vec2 c = vec2(0.);\n\n    int signum = (v >= 0.) ? 128 : 0;\n    v = abs(v);\n    int exponent = 15;\n    float limit = 1024.; // considering the bias from 2^-5 to 2^10 (==1024)\n    for(int exp = 15; exp > 0; exp--){\n        if( v < limit){\n            limit /= 2.;\n            exponent--;\n        }\n    }\n\n    float rest;\n    if(exponent == 0){\n        rest = v / limit / 2.;      // "subnormalize" implicite preceding 0. \n    }else{\n        rest = (v - limit)/limit;   // normalize accordingly to implicite preceding 1.\n    }\n\n    int mantissa = int(rest * 2048.);   // 2048 = 2^11 for the (split) 11 bit mantissa\n    int msb = mantissa / 256;           // the most significant 3 bits go into the lower part of the first byte\n    int lsb = mantissa - msb * 256;     // there go the other 8 bit of the lower significance\n\n    c.x = float(signum + exponent * 8 + msb) / 255.;    // color normalization for texture2D\n    c.y = float(lsb) / 255.;\n\n    if(v >= 2048.){\n        c.y = 1.;\n    }\n\n    return c;\n}\n\nfloat decode16BitFloatFrom2xUInt8(vec2 c){\n    float v = 0.;\n\n    int ix = int(c.x*255.); // 1st byte: 1 bit signum, 4 bits exponent, 3 bits mantissa (MSB)\n    int iy = int(c.y*255.); // 2nd byte: 8 bit mantissa (LSB)\n\n    int s = (c.x >= 0.5) ? 1 : -1;\n    ix = (s > 0) ? ix - 128 : ix;   // remove the signum bit from exponent\n    int iexp = ix / 8;              // cut off the last 3 bits of the mantissa to select the 4 exponent bits\n    int msb = ix - iexp * 8;        // subtract the exponent bits to select the 3 most significant bits of the mantissa\n\n    int norm = (iexp == 0) ? 0 : 2048;          // distinguish between normalized and subnormalized numbers\n    int mantissa = norm + msb * 256 + iy;       // implicite preceding 1 or 0 added here\n    norm = (iexp == 0) ? 1 : 0;                 // normalization toggle\n    float exponent = pow( 2., float(iexp + norm) - 16.); // -5 for the the exponent bias from 2^-5 to 2^10 plus another -11 for the normalized 12 bit mantissa \n    v = float( s * mantissa ) * exponent;\n\n    return v;\n}\n\n\n// TODO : Encoding Float32 to 4x UInt8\n// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js\n// http://ultraist.hatenablog.com/entry/20110608/1307539319\n\n');class wc extends pU{constructor(l,F){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("StandardSurfaceGeomDataShader.vertexShader",'\nprecision highp float;\n\nattribute vec3 positions;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n<%include file="stack-gl/transpose.glsl"/>\n<%include file="drawItemId.glsl"/>\n<%include file="drawItemTexture.glsl"/>\n<%include file="modelMatrix.glsl"/>\n\n\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying float v_drawItemID;\nvarying vec3 v_worldPos;\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData = getInstanceData(drawItemId);\n\n  vec4 pos = vec4(positions, 1.);\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  vec4 viewPos = modelViewMatrix * pos;\n  gl_Position = projectionMatrix * viewPos;\n\n  v_viewPos = -viewPos.xyz;\n\n  v_drawItemID = float(getDrawItemId());\n  \n  v_worldPos      = (modelMatrix * pos).xyz;\n}\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("StandardSurfaceGeomDataShader.fragmentShader",'\nprecision highp float;\n\n<%include file="drawItemTexture.glsl"/>\n<%include file="cutaways.glsl"/>\n<%include file="GLSLBits.glsl"/>\n\nuniform int floatGeomBuffer;\nuniform int passId;\n\nuniform color cutColor;\nvec4 getCutaway(int id) {\n    return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n}\n\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying float v_drawItemID;\nvarying vec3 v_worldPos;\n\n\n#ifdef ENABLE_ES3\n    out vec4 fragColor;\n#endif\nvoid main(void) {\n  int drawItemId = int(v_drawItemId + 0.5);\n\n#ifndef ENABLE_ES3\n    vec4 fragColor;\n#endif\n\n  int flags = int(v_geomItemData.r + 0.5);\n  // Cutaways\n  if(testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n      vec4 cutAwayData   = getCutaway(drawItemId);\n      vec3 planeNormal = cutAwayData.xyz;\n      float planeDist = cutAwayData.w;\n      if(cutaway(v_worldPos, planeNormal, planeDist)){\n          discard;\n          return;\n      }\n      else if(!gl_FrontFacing){\n          fragColor = cutColor;\n  #ifndef ENABLE_ES3\n          gl_FragColor = fragColor;\n  #endif\n          return;\n      }\n  }\n\n    float dist = length(v_viewPos);\n\n    if(floatGeomBuffer != 0) {\n        fragColor.r = float(passId); \n        fragColor.g = float(v_drawItemID);\n        fragColor.b = 0.0;// TODO: store poly-id or something.\n        fragColor.a = dist;\n    }\n    else {\n        ///////////////////////////////////\n        // UInt8 buffer\n        fragColor.r = (mod(v_drawItemID, 256.) + 0.5) / 255.;\n        fragColor.g = (floor(v_drawItemID / 256.) + 0.5) / 255.;\n\n\n        // encode the dist as a 16 bit float\n        vec2 float16bits = encode16BitFloatInto2xUInt8(dist);\n        fragColor.b = float16bits.x;\n        fragColor.a = float16bits.y;\n    }\n\n\n#ifndef ENABLE_ES3\n    gl_FragColor = fragColor;\n#endif\n}\n')}}e.register("StandardSurfaceGeomDataShader",wc);class fc extends pU{constructor(l,F){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("StandardSurfaceSelectedGeomsShader.vertexShader",'\nprecision highp float;\n\nattribute vec3 positions;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n<%include file="stack-gl/transpose.glsl"/>\n<%include file="drawItemId.glsl"/>\n<%include file="drawItemTexture.glsl"/>\n<%include file="modelMatrix.glsl"/>\n\nvarying float v_drawItemId;\n\nvoid main(void) {\n    int drawItemId = getDrawItemId();\n    v_drawItemId = float(drawItemId);\n    mat4 modelMatrix = getModelMatrix(drawItemId);\n    mat4 modelViewMatrix = viewMatrix * modelMatrix;\n    vec4 viewPos = modelViewMatrix * vec4(positions, 1.0);\n    gl_Position = projectionMatrix * viewPos;\n\n}\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("StandardSurfaceSelectedGeomsShader.fragmentShader",'\nprecision highp float;\n\nvarying float v_drawItemId;\n\n\n<%include file="drawItemTexture.glsl"/>\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getHighlightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\n}\n#else\n\nuniform vec4 highlightColor;\n\nvec4 getHighlightColor() {\n    return highlightColor;\n}\n\n#endif\n\n#ifdef ENABLE_ES3\n    out vec4 fragColor;\n#endif\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n    vec4 fragColor;\n#endif\n    int drawItemId = int(v_drawItemId + 0.5);\n    fragColor = getHighlightColor(drawItemId);\n\n#ifndef ENABLE_ES3\n    gl_FragColor = fragColor;\n#endif\n}\n')}}e.register("StandardSurfaceSelectedGeomsShader",fc);class Dc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("TransparentSurfaceShader.vertexShader",'\nprecision highp float;\n\n\nattribute vec3 positions;\nattribute vec3 normals;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n<%include file="stack-gl/transpose.glsl"/>\n<%include file="stack-gl/inverse.glsl"/>\n<%include file="drawItemTexture.glsl"/>\n<%include file="modelMatrix.glsl"/>\n\n/* VS Outputs */\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\nvoid main(void) {\n    int drawItemId = getDrawItemId();\n\n    vec4 geomItemData = getInstanceData(drawItemId);\n\n    vec4 pos = vec4(positions, 1.);\n    mat4 modelMatrix = getModelMatrix(drawItemId);\n    mat4 modelViewMatrix = viewMatrix * modelMatrix;\n    vec4 viewPos    = modelViewMatrix * pos;\n    gl_Position     = projectionMatrix * viewPos;\n\n    v_worldPos      = (modelMatrix * pos).xyz;\n\n    mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));\n    v_viewPos       = -viewPos.xyz;\n    v_viewNormal    = normalMatrix * normals;\n}\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("TransparentSurfaceShader.fragmentShader",'\nprecision highp float;\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n<%include file="stack-gl/gamma.glsl"/>\n#endif\n<%include file="GLSLUtils.glsl"/>\n\n/* VS Outputs */\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\nuniform float exposure;\n#endif\n\nuniform mat4 cameraMatrix;\nuniform float planeDist;\nuniform float planeAngle;\n\nuniform color BaseColor;\nuniform float Opacity;\n\n#ifdef ENABLE_SPECULAR\n<%include file="math/constants.glsl"/>\n<%include file="GGX_Specular.glsl"/>\n<%include file="PBRSurfaceRadiance.glsl"/>\nuniform float Roughness;\nuniform float Metallic;\nuniform float Reflectance;\n#endif\n\n#ifdef __ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform bool BaseColorTexType;\n\nuniform sampler2D OpacityTex;\nuniform bool OpacityTexType;\n\nuniform sampler2D RoughnessTex;\nuniform bool RoughnessTexType;\n\nuniform sampler2D ReflectanceTex;\nuniform bool ReflectanceTexType;\n\nuniform sampler2D NormalTex;\nuniform bool NormalTexType;\nuniform float NormalScale;\n\n\n#endif\n\n#ifdef ENABLE_ES3\n    out vec4 fragColor;\n#endif\nvoid main(void) {\n\n    MaterialParams material;\n\n#ifndef __ENABLE_TEXTURES\n    material.baseColor      = BaseColor.rgb;\n    float opacity           = Opacity;\n\n#ifdef ENABLE_SPECULAR\n    material.roughness      = Roughness;\n    material.metallic       = Metallic;\n    material.reflectance    = Reflectance;\n#endif\n\n#else\n    // Planar YZ projection for texturing, repeating every meter.\n    // vec2 texCoord        = v_worldPos.xz * 0.2;\n    vec2 texCoord           = vec2(v_textureCoord.x, 1.0 - v_textureCoord.y);\n    material.baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, texCoord).rgb;\n    material.roughness      = getLuminanceParamValue(Roughness, RoughnessTex, RoughnessTexType, texCoord);\n    material.metallic       = getLuminanceParamValue(Metallic, MetallicTex, MetallicTexType, texCoord);\n    material.reflectance    = Reflectance;//getLuminanceParamValue(Reflectance, ReflectanceTex, ReflectanceTexType, texCoord);\n\n    float opacity           = getLuminanceParamValue(Opacity, OpacityTex, OpacityTexType, texCoords);\n#endif\n\n#ifndef ENABLE_SPECULAR\n    gl_FragColor = vec4(material.baseColor.rgb, opacity);\n#else\n\n    vec3 viewNormal = normalize(v_viewNormal);\n    //vec3 surfacePos = -v_viewPos;\n\n#ifdef __ENABLE_TEXTURES\n    if(NormalTexType != 0){\n        vec3 textureNormal_tangentspace = normalize(texture2D(NormalTex, texCoord).rgb * 2.0 - 1.0);\n        viewNormal = normalize(mix(viewNormal, textureNormal_tangentspace, 0.3));\n    }\n#endif\n\n    vec3 viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));\n    vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);\n    if(dot(normal, viewVector) < 0.0){\n        normal = -normal;\n        // Note: this line can be used to debug inverted meshes.\n        //material.baseColor = vec3(1.0, 0.0, 0.0);\n    }\n\n    vec4 specularReflectance = pbrSpecularReflectance(material, normal, viewVector);\n\n#ifndef ENABLE_ES3\n    vec4 fragColor;\n#endif\n\n    fragColor = vec4(specularReflectance.rgb, mix(opacity, 1.0, specularReflectance.a));\n\n#endif\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n    fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n#ifndef ENABLE_ES3\n    gl_FragColor = fragColor;\n#endif\n}\n'),this.finalize()}static getParamDeclarations(){const l=super.getParamDeclarations();return l.push({name:"BaseColor",defaultValue:new R(1,1,.5)}),l.push({name:"Opacity",defaultValue:1,range:[0,1]}),l.push({name:"Roughness",defaultValue:.85}),l.push({name:"Reflectance",defaultValue:1e-4}),l}static getGeomDataShaderName(){return"StandardSurfaceGeomDataShader"}static getSelectedShaderName(){return"StandardSurfaceSelectedGeomsShader"}static isTransparent(){return!0}bind(l,F){return"ADD"==l.pass&&super.bind(l,F)}}e.register("TransparentSurfaceShader",Dc);class Pc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("ScreenSpaceShader.vertexShader",'\nprecision highp float;\n\nattribute vec3 positions;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\n<%include file="stack-gl/transpose.glsl"/>\n<%include file="drawItemId.glsl"/>\n<%include file="drawItemTexture.glsl"/>\n<%include file="modelMatrix.glsl"/>\n\n/* VS Outputs */\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\n\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n    mat4 modelMatrix = getModelMatrix(drawItemId);\n\n    gl_Position = (modelMatrix * vec4(positions, 1.0));\n\n    v_textureCoord = texCoords;\n    v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n}\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("ScreenSpaceShader.fragmentShader",'\nprecision highp float;\n\n<%include file="stack-gl/gamma.glsl"/>\n<%include file="materialparams.glsl"/>\n\nuniform color BaseColor;\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\n#endif\n\n/* VS Outputs */\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\n\n\n#ifdef ENABLE_ES3\n    out vec4 fragColor;\n#endif\nvoid main(void) {\n\n#ifndef ENABLE_TEXTURES\n    vec4 baseColor = BaseColor;\n#else\n    vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n#endif\n\n#ifndef ENABLE_ES3\n    vec4 fragColor;\n#endif\n    fragColor = baseColor;\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n    fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n#ifndef ENABLE_ES3\n    gl_FragColor = fragColor;\n#endif\n}\n'),this.finalize()}static isOverlay(){return!0}static getParamDeclarations(){const l=super.getParamDeclarations();return l.push({name:"BaseColor",defaultValue:new R(1,1,.5)}),l}static getGeomDataShaderName(){return null}static getSelectedShaderName(){return null}}e.register("ScreenSpaceShader",Pc);class _c extends rc{constructor(l){super(l),this.invisibleToGeomBuffer=!0}}e.register("ToolIconShader",_c);class jc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("UnpackLDRAlphaImageShader.vertexShader",'\nprecision highp float;\n\n<%include file="utils/quadVertexFromID.glsl"/>\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n    vec2 position = getQuadVertexPositionFromID();\n    v_texCoord = position+0.5;\n    gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n'),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("UnpackLDRAlphaImageShader.fragmentShader","\nprecision highp float;\n\nvarying vec2 v_texCoord;\nuniform sampler2D ldrSampler;\nuniform sampler2D alphaSampler;\n\nfloat luminanceFromRGB(vec3 rgb) {\n    return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;\n}\n\n\n#ifdef ENABLE_ES3\n    out vec4 fragColor;\n#endif\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n    vec4 fragColor;\n#endif\n\n    fragColor = vec4(texture2D(ldrSampler, v_texCoord).rgb, luminanceFromRGB(texture2D(alphaSampler, v_texCoord).rgb));\n\n#ifndef ENABLE_ES3\n    gl_FragColor = fragColor;\n#endif\n}\n\n")}}class Oc extends pU{constructor(l){super(l),this.__shaderStages.VERTEX_SHADER=rU.parseShader("WireShader.vertexShader","\nprecision highp float;\n\nattribute vec3 positions;    //(location = 0)\n\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n/* VS Outputs */\n\nvoid main(void) {\n    mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n    gl_Position = modelViewProjectionMatrix * vec4(positions, 1.0);\n\n    // Apply the perspective transform, and then move the vertices\n    //  towards the camera by a tiny little bit...\n    gl_Position.z -= 0.001 / gl_Position.w;\n    //gl_Position.z *= 0.999;\n}\n"),this.__shaderStages.FRAGMENT_SHADER=rU.parseShader("WireShader.fragmentShader","\nprecision highp float;\n\nuniform color wireColor;\n\n#ifdef ENABLE_ES3\n    out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifdef ENABLE_ES3\n    gl_FragColor = color;\n#else\n    fragColor = color;\n#endif  \n}\n")}}const qc=0,$c=1,ls=2,Fs=3;class Us extends H{constructor(l,F,U,c,s=null){if(super(),this.gl=l,this.geomItem=F,this.glGeom=U,this.id=c,this.flags=s,this.visible=this.geomItem.isVisible(),this.culled=!1,this.updateVisibility=this.updateVisibility.bind(this),this.destroy=this.destroy.bind(this),l.floatTexturesSupported?this.geomMatrixChanged=()=>{this.emit("updated",{type:qc})}:(this.geomMatrixDirty=!0,this.geomMatrixChanged=()=>{this.geomMatrixDirty=!0,this.updateGeomMatrix()}),this.cutAwayChanged=()=>{this.emit("updated",{type:qc})},this.highlightChanged=()=>{this.emit("updated",{type:Fs}),this.emit("highlightChanged")},this.glGeomUpdated=()=>{this.emit("updated",{type:$c})},this.geomItem.getParameter("GeomMat").on("valueChanged",this.geomMatrixChanged),this.geomItem.on("visibilityChanged",this.updateVisibility),this.geomItem.on("cutAwayChanged",this.cutAwayChanged),this.geomItem.on("highlightChanged",this.highlightChanged),this.glGeom.on("updated",this.glGeomUpdated),!l.floatTexturesSupported){const l=0;let F=0;if(this.geomItem.isCutawayEnabled()){F|=1}this.geomData=[F,l,0,0]}}getGeomItem(){return this.geomItem}getGLGeom(){return this.glGeom}isVisible(){return this.geomItem.isVisible()}getId(){return this.id}getFlags(){return this.flags}updateVisibility(){const l=this.geomItem.isVisible()&&!this.culled;this.visible!=l&&(this.visible=l,this.emit("visibilityChanged",{visible:l}),this.emit("updated",{}))}setCullState(l){this.culled=l,this.updateVisibility()}bind(l){const F=this.gl,U=l.unifs;if(!F.floatTexturesSupported){const l=U.modelMatrix;l&&(this.geomMatrixDirty&&(this.modelMatrixArray=this.geomItem.getGeomMat4().asArray()),F.uniformMatrix4fv(l.location,!1,this.modelMatrixArray));const c=U.drawItemData;c&&F.uniform4f(c.location,this.geomData)}const c=U.transformIndex;return c&&F.uniform1i(c.location,this.id),!0}destroy(){this.geomItem.getParameter("GeomMat").off("valueChanged",this.geomMatrixChanged),this.geomItem.off("visibilityChanged",this.updateVisibility),this.geomItem.off("cutAwayChanged",this.cutAwayChanged),this.geomItem.off("highlightChanged",this.highlightChanged),this.glGeom.off("updated",this.glGeomUpdated)}}class cs extends nc{constructor(){super(),this.__drawItems=[void 0],this.__drawItemsIndexFreeList=[],this.__dirtyItemIndices=[]}init(l,F){super.init(l,F),this.__renderer.registerPass(l=>{if(l instanceof UU){const F=l;if(F.getMetadata("glgeomItem"))return!1;{const l=l=>{if(this.filterGeomItem(l)){const F=l.getParameter("Geometry");if(null==F.getValue()){const U=()=>{this.addGeomItem(l),F.off("valueChanged",U)};F.on("valueChanged",U)}else this.addGeomItem(l);return!0}return!1};return null==F.getParameter("Material").getValue()?(console.warn("Scene item :"+F.getPath()+" has no material"),!1):l(F)}}return!1},l=>!!(l instanceof UU&&l.getMetadata("glgeomItem"))&&this.removeGeomItem(l))}filterGeomItem(l){return!0}addShader(l){return this.__renderer.getOrCreateShader(l.getShaderName())}constructShaders(l){let F,U;const c=this.__renderer.getOrCreateShader(l);return c.constructor.getGeomDataShaderName()&&(F=this.__renderer.getOrCreateShader(c.constructor.getGeomDataShaderName())),c.constructor.getSelectedShaderName()&&(U=this.__renderer.getOrCreateShader(c.constructor.getSelectedShaderName())),{glshader:c,glgeomdatashader:F,glselectedshader:U}}addMaterial(l){let F=l.getMetadata("glmaterial");if(F)return F;const U=this.__renderer.getOrCreateShader(l.getShaderName());return F=new DU(this.__gl,l,U),F.on("updated",l=>{this.__renderer.requestRedraw()}),l.setMetadata("glmaterial",F),F}addGeom(l){let F=l.getMetadata("glgeom");if(F)return F.addRef(this),F;const U=this.__gl;if(l instanceof Ml||l instanceof Kl)F=new WU(U,l);else if(l instanceof Al||l instanceof vl)F=new JU(U,l);else{if(!(l instanceof Tl||l instanceof kl))throw new Error("Unsupported geom type:"+l.constructor.name);F=new EU(U,l)}return l.setMetadata("glgeom",F),F.addRef(this),F}removeGeom(l){let F=l.getMetadata("glgeom");if(F)return F.removeRef(this),F}addGeomItem(l){const F=this.addGeom(l.getParameter("Geometry").getValue());let U;this.__drawItemsIndexFreeList.length>0?U=this.__drawItemsIndexFreeList.pop():(U=this.__drawItems.length,this.__drawItems.push(null)),this.__dirtyItemIndices.push(U);const c=this.__gl,s=new Us(c,l,F,U,1);return l.setMetadata("glgeomItem",s),s.on("updated",l=>{switch(l.type){case qc:if(-1!=this.__dirtyItemIndices.indexOf(U))return;this.__dirtyItemIndices.push(U);break;case $c:case ls:break;case Fs:if(-1!=this.__dirtyItemIndices.indexOf(U))return;return this.__dirtyItemIndices.push(U),void this.__renderer.requestRedraw()}this.__renderer.drawItemChanged()}),this.__drawItems[U]=s,this.__renderer.requestRedraw(),l.setMetadata("glpass",this),s}removeGeomItem(l){if(l.getMetadata("glpass")!=this)return;const F=l.getMetadata("glgeomItem"),U=F.getId();return this.__drawItems[U]=null,this.__drawItemsIndexFreeList.push(U),this.__renderer.requestRedraw(),l.getMetadata("glpass"),l.deleteMetadata("glgeomItem"),F}removeGLGeom(l,F){const U=F.geomItemMappings.indexOf(l);F.geomItemMappings.splice(U,1)}getGeomItem(l){if(!(l>=this.__drawItems.length))return this.__drawItems[l];console.warn("Invalid Draw Item id:"+l+" NumItems:"+(this.__drawItems.length-1))}__populateDrawItemDataArray(l,F,U){const c=24*F;let s=0;if(l.isCutawayEnabled()){s|=1}x.createFromBuffer(U.buffer,4*(c+0)).set(s,0,0,0);const B=l.getGeomMat4(),d=x.createFromBuffer(U.buffer,4*(c+4)),i=x.createFromBuffer(U.buffer,4*(c+8)),Q=x.createFromBuffer(U.buffer,4*(c+12));d.set(B.xAxis.x,B.yAxis.x,B.zAxis.x,B.translation.x),i.set(B.xAxis.y,B.yAxis.y,B.zAxis.y,B.translation.y),Q.set(B.xAxis.z,B.yAxis.z,B.zAxis.z,B.translation.z);const t=x.createFromBuffer(U.buffer,4*(c+16));if(l.isHighlighted()){const F=l.getHighlight();t.set(F.r,F.g,F.b,F.a)}const I=x.createFromBuffer(U.buffer,4*(c+20));if(l.isCutawayEnabled()){const F=l.getCutVector(),U=l.getCutDist();I.set(F.x,F.y,F.z,U)}}newItemsReadyForLoading(){return this.__dirtyItemIndices.length>0}uploadGeomItems(){const l=this.__gl;if(!l.floatTexturesSupported){const l=this.__dirtyItemIndices.length;for(let F=0;F<l;F++){const l=this.__drawItems[this.__dirtyItemIndices[F]];l&&l.updateGeomMatrix()}return void(this.__dirtyItemIndices=[])}let F=Math.round(Math.sqrt(6*this.__drawItems.length)+.5);F=Q.nextPow2(F),F%6!=0&&(F+=6-F%6),this.__drawItemsTexture?this.__drawItemsTexture.width!=F&&(this.__drawItemsTexture.resize(F,F),this.__dirtyItemIndices=Array(F*F/6).fill().map((l,F)=>F)):(this.__drawItemsTexture=new CU(l,{format:"RGBA",type:"FLOAT",width:F,height:F,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.__drawItemsTexture.clear()),l.bindTexture(l.TEXTURE_2D,this.__drawItemsTexture.glTex);const U=this.__drawItemsTexture.getTypeID();for(let c=0;c<this.__dirtyItemIndices.length;c++){const s=this.__dirtyItemIndices[c],B=Math.floor(6*s/F);let d=s+1;for(let l=c+1;l<this.__dirtyItemIndices.length;l++){const U=this.__dirtyItemIndices[l];if(Math.floor(6*U/F)!=B)break;if(U!=d)break;d++}const i=d-s,t=6*s%F,I=6*i,V=1,e=new Float32Array(24*i);for(let l=s;l<d;l++){const F=this.__drawItems[l];F&&this.__populateDrawItemDataArray(F.getGeomItem(),l-s,e)}if(U==l.FLOAT)this.__drawItemsTexture.populate(e,I,V,t,B,!1);else{const l=Q.convertFloat32ArrayToUInt16Array(e);this.__drawItemsTexture.populate(l,I,V,t,B,!1)}c+=i-1}this.__dirtyItemIndices=[]}finalize(){0!=this.__dirtyItemIndices.length&&this.uploadGeomItems()}bind(l){const F=this.__gl,U=l.unifs;return this.__drawItemsTexture&&U.instancesTexture&&(this.__drawItemsTexture.bindToUniform(l,U.instancesTexture),F.uniform1i(U.instancesTextureSize.location,this.__drawItemsTexture.width)),!0}bindShader(l,F){return!!F.bind(l)&&!!this.bind(l)}bindMaterial(l,F,U){return F.bind(l,U)}}class ss extends H{constructor(l,F){super(),this.gl=l,this.glgeom=F,this.glgeomItems=[],this.glgeomItems_freeIndices=[],this.glgeomItemEventHandlers=[],this.drawIdsArray=null,this.drawIdsBuffer=null,this.drawIdsBufferDirty=!0,this.highlightedIdsArray=null,this.highlightedIdsBuffer=null,this.highlightedIdsBufferDirty=!0,this.visibleItems=[],this.highlightedItems=[]}getGLGeom(){return this.glgeom}getDrawCount(){return this.visibleItems.length}addGeomItem(l){let F;this.glgeomItems_freeIndices.length>0?F=this.glgeomItems_freeIndices.pop():(F=this.glgeomItems.length,this.glgeomItems.push(null)),l.visible&&(this.visibleItems.push(F),this.emit("drawCountChanged",{count:1})),l.getGeomItem().isHighlighted()&&(this.highlightedItems.push(F),this.highlightedIdsBufferDirty=!0);const U={};U.highlightChanged=()=>{if(l.getGeomItem().isHighlighted()){if(-1!=this.highlightedItems.indexOf(F))return;this.highlightedItems.push(F)}else this.highlightedItems.splice(this.highlightedItems.indexOf(F),1);this.highlightedIdsBufferDirty=!0},l.on("highlightChanged",U.highlightChanged),U.visibilityChanged=l=>{l.visible?(this.visibleItems.push(F),this.emit("drawCountChanged",{count:1})):(this.visibleItems.splice(this.visibleItems.indexOf(F),1),this.emit("drawCountChanged",{count:-1})),this.drawIdsBufferDirty=!0},l.on("visibilityChanged",U.visibilityChanged),this.glgeomItems[F]=l,this.glgeomItemEventHandlers[F]=U,this.drawIdsBufferDirty=!0}removeGeomItem(l){const F=this.glgeomItems.indexOf(l),U=this.glgeomItemEventHandlers[F];l.off("highlightChanged",U.highlightChanged),l.off("visibilityChanged",U.visibilityChanged),this.glgeomItems[F]=null,this.glgeomItemEventHandlers[F]=null,this.glgeomItems_freeIndices.push(F),l.visible&&(this.visibleItems.splice(this.visibleItems.indexOf(F),1),this.emit("drawCountChanged",{count:-1}));l.getGeomItem().isHighlighted()&&this.highlightedItems.splice(this.highlightedItems.indexOf(F),1),this.drawIdsBufferDirty=!0,0==this.glgeomItems.length&&this.destroy()}updateDrawIDsBuffer(){const l=this.gl;l.floatTexturesSupported?(this.drawIdsBuffer&&this.glgeomItems.length!=this.drawIdsArray.length&&(this.gl.deleteBuffer(this.drawIdsBuffer),this.drawIdsBuffer=null),this.drawIdsBuffer||(this.drawIdsArray=new Float32Array(this.glgeomItems.length),this.drawIdsBuffer=l.createBuffer(),l.bindBuffer(l.ARRAY_BUFFER,this.drawIdsBuffer)),this.visibleItems.forEach((l,F)=>{this.drawIdsArray[F]=this.glgeomItems[l].getId()}),l.bindBuffer(l.ARRAY_BUFFER,this.drawIdsBuffer),l.bufferData(l.ARRAY_BUFFER,this.drawIdsArray,l.STATIC_DRAW),this.drawIdsBufferDirty=!1):this.drawIdsBufferDirty=!1}updateHighlightedIDsBuffer(){const l=this.gl;l.floatTexturesSupported?(this.highlightedIdsBuffer&&this.glgeomItems.length!=this.highlightedIdsArray.length&&(this.gl.deleteBuffer(this.highlightedIdsBuffer),this.highlightedIdsBuffer=null),(!this.highlightedIdsArray||this.highlightedItems.length>this.highlightedIdsArray.length)&&(this.highlightedIdsArray=new Float32Array(this.highlightedItems.length),this.highlightedIdsBuffer&&(l.deleteBuffer(this.highlightedIdsBuffer),this.highlightedIdsBuffer=null)),this.highlightedItems.forEach((l,F)=>{this.highlightedIdsArray[F]=this.glgeomItems[l].getId()}),this.highlightedIdsBuffer||(this.highlightedIdsBuffer=l.createBuffer()),l.bindBuffer(l.ARRAY_BUFFER,this.highlightedIdsBuffer),l.bufferData(l.ARRAY_BUFFER,this.highlightedIdsArray,l.STATIC_DRAW),this.highlightedIdsBufferDirty=!1):this.highlightedIdsBufferDirty=!1}draw(l){0!=this.visibleItems.length&&(this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(),this.__bindAndRender(l,this.visibleItems,this.drawIdsBuffer))}drawHighlighted(l){0!=this.highlightedItems.length&&(this.highlightedIdsBufferDirty&&this.updateHighlightedIDsBuffer(),this.__bindAndRender(l,this.highlightedItems,this.highlightedIdsBuffer))}__bindAndRender(l,F,U){const c=this.gl,s=l.unifs;if(l.glgeom!=this.glgeom&&(this.glgeom.bind(l),l.glgeom=this.glgeom),c.floatTexturesSupported&&c.drawElementsInstanced&&l.supportsInstancing){c.uniform1i(l.unifs.instancedDraw.location,1);const B=l.attrs.instancedIds.location;c.enableVertexAttribArray(B),c.bindBuffer(c.ARRAY_BUFFER,U),c.vertexAttribPointer(B,1,c.FLOAT,!1,4,0),c.vertexAttribDivisor(B,1),l.bindViewports(s,()=>{this.glgeom.drawInstanced(F.length)})}else l.unifs.instancedDraw&&c.uniform1i(l.unifs.instancedDraw.location,0),F.forEach(F=>{this.glgeomItems[F].bind(l),l.bindViewports(s,()=>{this.glgeom.draw(l)})})}destroy(){this.emit("destructing",{})}}class Bs{constructor(l){this.glshader=l.glshader,this.glgeomdatashader=l.glgeomdatashader,this.glselectedshader=l.glselectedshader,this.glmaterialGeomItemSets=[]}findMaterialGeomItemSets(l){for(const F of this.glmaterialGeomItemSets)if(F.glmaterial==l)return F}addMaterialGeomItemSets(l){this.glmaterialGeomItemSets.push(l)}removeMaterialGeomItemSets(l){const F=this.glmaterialGeomItemSets.indexOf(l);this.glmaterialGeomItemSets.splice(F,1)}getMaterialGeomItemSets(){return this.glmaterialGeomItemSets}}class ds{constructor(l){this.glmaterial=l,this.geomItemSets=[],this.drawCount=0,this.visibleInGeomDataBuffer=l.getMaterial().visibleInGeomDataBuffer,this.__drawCountChanged=this.__drawCountChanged.bind(this)}getGLMaterial(){return this.glmaterial}__drawCountChanged(l){this.drawCount+=l.count}addGeomItemSet(l){-1==this.geomItemSets.indexOf(l)?(this.geomItemSets.push(l),l.on("drawCountChanged",this.__drawCountChanged)):console.warn("geomItemSet already added to GLMaterialGeomItemSets")}removeGeomItemSet(l){const F=this.geomItemSets.indexOf(l);this.geomItemSets.splice(F,1),l.off("drawCountChanged",this.__drawCountChanged)}findGeomItemSet(l){for(const F of this.geomItemSets)if(F.getGLGeom()==l)return F;return null}getGeomItemSets(){return this.geomItemSets}}class is extends cs{constructor(){super(),this.__glshadermaterials={}}init(l,F){super.init(l,F)}filterGeomItem(l){const F=l.getParameter("Material").getValue(),U=F.getShaderClass();if(U){if(U.isTransparent())return!1;if(U.isOverlay())return!1;const l=F.getParameter("BaseColor");return!(l&&l.getValue().a<1)}return!1}addGeomItem(l){const F=l.getParameter("Material").getValue(),U=F.getShaderName(),c=this.constructShaders(U);c.glshader,c.glgeomdatashader,c.glselectedshader;const s=this.addMaterial(F),B=super.addGeomItem(l);let d=this.__glshadermaterials[U];d||(d=new Bs(c),this.__glshadermaterials[U]=d);let i=d.findMaterialGeomItemSets(s);i||(i=new ds(s),d.addMaterialGeomItemSets(i));let Q=i.findGeomItemSet(B.glGeom);return Q||(Q=new ss(this.__gl,B.glGeom),i.addGeomItemSet(Q)),l.setMetadata("geomItemSet",Q),Q.addGeomItem(B),!0}removeGeomItem(l){const F=super.removeGeomItem(l);if(!F)return!1;const U=l.getMetadata("geomItemSet");return U&&(U.removeGeomItem(F),l.deleteMetadata("geomItemSet")),!0}removeMaterial(l){const F=this.__glshadermaterials[l.hash];if(!F||F!=l.getMetadata("glshaderMaterials"))return void console.warn("Material not found in pass");const U=l.getMetadata("glmaterialGeomItemSets");F.removeMaterialGeomItemSets(U)}__traverseTreeAndDraw(l){for(const F in this.__glshadermaterials){const U=this.__glshadermaterials[F],c=U.glshader;if(this.bindShader(l,c)){const F=U.getMaterialGeomItemSets();for(const U of F)if(0!=U.drawCount&&this.bindMaterial(l,U.getGLMaterial(),!0)){const F=U.getGeomItemSets();for(const U of F)U.draw(l)}}c.unbind(l)}l.glgeom&&l.glgeom.unbind(l)}draw(l){this.newItemsReadyForLoading()&&this.finalize();const F=this.__gl;F.disable(F.BLEND),F.disable(F.CULL_FACE),F.enable(F.DEPTH_TEST),F.depthFunc(F.LESS),F.depthMask(!0),this.__traverseTreeAndDraw(l)}drawHighlightedGeoms(l){const F=this.__gl;F.disable(F.CULL_FACE);for(const F in this.__glshadermaterials){const U=this.__glshadermaterials[F];if(!U.glselectedshader)continue;if(!this.bindShader(l,U.glselectedshader))continue;const c=U.getMaterialGeomItemSets();for(const F of c){const U=F.getGeomItemSets();for(const F of U)F.drawHighlighted(l)}}l.glgeom&&l.glgeom.unbind(l)}getGeomItemAndDist(l){let F,U;this.__gl.floatGeomBuffer?(F=Math.round(l[1]),U=l[3]):(F=l[0]+(l[1]<<8),U=Q.decode16BitFloatFrom2xUInt8([l[2],l[3]]));const c=this.__drawItems[F];if(c)return{geomItem:c.getGeomItem(),dist:U}}drawGeomData(l){this.newItemsReadyForLoading()&&this.finalize();const F=this.__gl;F.disable(F.BLEND),F.disable(F.CULL_FACE),F.enable(F.DEPTH_TEST),F.depthFunc(F.LESS),F.depthMask(!0);for(const U in this.__glshadermaterials){const c=this.__glshadermaterials[U];if(!c.glgeomdatashader)continue;if(!this.bindShader(l,c.glgeomdatashader))continue;{const U=l.unifs.floatGeomBuffer;U&&F.uniform1i(U.location,F.floatGeomBuffer?1:0)}{const U=l.unifs.passId;U&&F.uniform1i(U.location,this.__passIndex)}const s=c.getMaterialGeomItemSets();for(const F of s)if(0!=F.drawCount&&F.visibleInGeomDataBuffer&&this.bindMaterial(l,F.getGLMaterial(),!1)){const U=F.getGeomItemSets();for(const F of U)F.draw(l)}}l.glgeom&&l.glgeom.unbind(l)}}uc.registerPass(is,Lc.OPAQUE);class Qs extends cs{constructor(){super()}init(l,F){super.init(l,F),this.transparentItems=[],this.freeList=[],this.visibleItems=[],this.prevSortCameraPos=new Z(999,999,999),this.resort=!1}filterGeomItem(l){const F=l.getParameter("Material").getValue(),U=F.getShaderClass();if(U){if(U.isTransparent())return!0;if(U.isOverlay())return!1;const l=F.getParameter("BaseColor");if(l&&l.getValue().a<.999)return!0}return!1}addGeomItem(l){const F=l.getParameter("Material").getValue(),U=F.getShaderName(),c=this.constructShaders(U),s=this.addMaterial(F),B=super.addGeomItem(l),d=l=>{if(l.visible)this.visibleItems.push(Q);else{const l=this.visibleItems.indexOf(Q);this.visibleItems.splice(l,1)}},i=()=>{this.resort=!0};l.on("visibilityChanged",d),l.getParameter("GeomMat").on("valueChanged",i);const Q={geomItem:l,shaders:c,glmaterial:s,glgeomitem:B,visibilityChanged:d,geomXfoChanged:i};let t;t=this.freeList.length>0?this.freeList.pop():this.transparentItems.length,this.transparentItems[t]=Q,l.setMetadata("itemIndex",t),l.isVisible()&&this.visibleItems.push(Q),this.resort=!0}removeGeomItem(l){if(!super.removeGeomItem(l))return;const F=l.getMetadata("itemIndex"),U=this.transparentItems[F];l.off("visibilityChanged",U.visibilityChanged),l.getParameter("GeomMat").off("valueChanged",U.geomXfoChanged),this.transparentItems[F]=null,this.freeList.push(F);const c=this.visibleItems.indexOf(U);-1!=c&&this.visibleItems.splice(c,1)}sortItems(l){for(const F of this.visibleItems){const U=F.glgeomitem.geomItem.getGeomMat4();F.dist=U.translation.distanceTo(l)}this.visibleItems.sort((l,F)=>l.dist>F.dist?-1:l.dist<F.dist?1:0),this.prevSortCameraPos=l,this.resort=!1}_drawItem(l,F,U){if(U.currentglMaterial!=F.glmaterial&&(U.currentglMaterial=F.glmaterial,!U.currentglMaterial.bind(l)))return;const c=F.glgeomitem;if((U.currentglGeom==c.glGeom||(U.currentglGeom=c.glGeom,U.currentglGeom.bind(l)))&&c.bind(l)){if(l.unifs.instancedDraw){const F=this.__gl;F.uniform1i(l.unifs.instancedDraw.location,0),F.disableVertexAttribArray(l.attrs.instancedIds.location)}l.bindViewports(l.unifs,()=>{U.currentglGeom.draw(l)})}}_drawItems(l){const F={currentglShader:null,currentglMaterial:null,currentglGeom:null};for(const U of this.visibleItems){const c=U.shaders.glshader;if(F.currentglShader!=c){if(!this.bindShader(l,c))continue;F.currentglShader=c}this._drawItem(l,U,F)}F.currentglGeom&&F.currentglGeom.unbind(l)}draw(l){if(0==this.visibleItems.length)return;this.newItemsReadyForLoading()&&this.finalize();const F=this.__gl,U=l.viewXfo.tr;(this.resort||U.distanceTo(this.prevSortCameraPos)>.3)&&this.sortItems(U),F.enable(F.DEPTH_TEST),F.depthFunc(F.LESS),F.depthMask(!0),F.enable(F.BLEND),F.blendEquation(F.FUNC_ADD),l.pass="MULTIPLY",F.blendFunc(F.DST_COLOR,F.ZERO),this._drawItems(l),l.pass="ADD",F.blendFunc(F.SRC_ALPHA,F.ONE_MINUS_SRC_ALPHA),this._drawItems(l),F.disable(F.BLEND)}drawHighlightedGeoms(l){const F=this.__gl;F.disable(F.CULL_FACE);const U={currentglShader:null,currentglMaterial:null,currentglGeom:null};for(const F of this.visibleItems){if(!F.geomItem.isHighlighted())continue;if(!F.shaders.glselectedshader)continue;const c=F.shaders;if(U.currentglShader!=c.glselectedshader){if(!this.bindShader(l,c.glselectedshader))continue;U.currentglShader=c.glselectedshader}this._drawItem(l,F,U)}U.currentglGeom&&U.currentglGeom.unbind(l)}getGeomItemAndDist(l){let F,U;this.__gl.floatGeomBuffer?(F=Math.round(l[1]),U=l[3]):(F=l[0]+(l[1]<<8),U=Q.decode16BitFloatFrom2xUInt8([l[2],l[3]]));const c=this.__drawItems[F];if(c)return{geomItem:c.getGeomItem(),dist:U}}drawGeomData(l){this.newItemsReadyForLoading()&&this.finalize();const F=this.__gl;F.disable(F.BLEND),F.disable(F.CULL_FACE),F.enable(F.DEPTH_TEST),F.depthFunc(F.LESS),F.depthMask(!0);const U={currentglShader:null,currentglMaterial:null,currentglGeom:null};for(const c of this.visibleItems){const s=c.shaders;if(!s.glgeomdatashader){if(U.currentglShader!=s.glgeomdatashader){if(!this.bindShader(l,s.glgeomdatashader))continue;U.currentglShader=s.glgeomdatashader}{const U=l.unifs.floatGeomBuffer;U&&F.uniform1i(U.location,F.floatGeomBuffer?1:0)}{const U=l.unifs.passId;U&&F.uniform1i(U.location,this.__passIndex)}this._drawItem(l,c,U)}}U.currentglGeom&&U.currentglGeom.unbind(l)}}uc.registerPass(Qs,Lc.TRANSPARENT);class ts extends nc{constructor(){super()}init(l,F){super.init(l,F),this.__billboards=[],this.__dirtyBillboards=new Set,this.__freeIndices=[],this.__drawCount=0,this.__threshold=0,this.__updateRequested=!1,this.__prevSortCameraPos=new Z,this.__atlas=new $U(this.__renderer.gl,"Billboards","RGBA","UNSIGNED_BYTE",[1,1,1,0]);const U=l=>this.emit("updated",l);this.__atlas.on("loaded",U),this.__atlas.on("updated",U),this.__renderer.registerPass(l=>l instanceof VU&&(this.addBillboard(l),!0),l=>l instanceof VU&&(this.removeBillboard(l),!0))}filterRenderTree(){}addBillboard(l){const F=l.getParameter("Image"),U=F.getValue();if(!U)return void F.on("valueChanged",()=>this.addBillboard(l));let c;c=this.__freeIndices.length>0?this.__freeIndices.pop():this.__billboards.length;const s=this.__atlas.addSubImage(U);l.setMetadata("GLBillboardsPass_Index",c);const B=()=>{l.isVisible()?(this.__drawCount++,this.__dirtyBillboards.add(c)):this.__drawCount--,this.__reqUpdateIndexArray()};l.on("visibilityChanged",B);const d=()=>{l.isVisible()&&(this.__dirtyBillboards.add(c),this.emit("updated",{}))};l.getParameter("GlobalXfo").on("valueChanged",d);const i=()=>{l.isVisible()&&(this.__dirtyBillboards.add(c),this.emit("updated",{}))};l.getParameter("Alpha").on("valueChanged",i),l.isVisible()&&this.__drawCount++,this.__billboards[c]={billboard:l,imageIndex:s,visibilityChanged:B,xfoChanged:d,alphaChanged:i},this.indexArrayUpdateNeeded=!0,this.__requestUpdate()}removeBillboard(l){const F=l.getMetadata("GLBillboardsPass_Index");if(-1==F)return void console.warn("Billboard already removed.");const U=this.__billboards[F],c=U.billboard.getParameter("Image").getValue();this.__atlas.removeSubImage(c),l.off("visibilityChanged",U.visibilityChanged),l.getParameter("GlobalXfo").off("valueChanged",U.xfoChanged),l.getParameter("Alpha").off("valueChanged",U.alphaChanged),this.__billboards[F]=null,this.__freeIndices.push(F),l.isVisible()&&this.__drawCount--,this.indexArrayUpdateNeeded=!0,this.__requestUpdate()}__populateBillboardDataArray(l,F,U){const c=l.billboard,s=c.getParameter("GlobalXfo").getValue().toMat4(),B=1/c.getParameter("PixelsPerMeter").getValue();let d=0;c.getParameter("AlignedToCamera").getValue()&&(d|=4),c.getParameter("DrawOnTop").getValue()&&(d|=8);const i=c.getParameter("Alpha").getValue(),Q=c.getParameter("Color").getValue(),t=5*F*4,I=x.createFromBuffer(U.buffer,4*t),V=x.createFromBuffer(U.buffer,4*(t+4)),e=x.createFromBuffer(U.buffer,4*(t+8)),X=x.createFromBuffer(U.buffer,4*(t+12));I.set(s.xAxis.x,s.yAxis.x,s.zAxis.x,s.translation.x),V.set(s.xAxis.y,s.yAxis.y,s.zAxis.y,s.translation.y),e.set(s.xAxis.z,s.yAxis.z,s.zAxis.z,s.translation.z),X.set(B,d,l.imageIndex,i);x.createFromBuffer(U.buffer,4*(t+16)).set(Q.r,Q.g,Q.b,Q.a)}__requestUpdate(){this.__updateRequested||(this.__updateRequested=!0,setTimeout(()=>{this.__updateBillboards()},100))}__reqUpdateIndexArray(){this.indexArrayUpdateNeeded||(this.indexArrayUpdateNeeded=!0,this.updateIndexArrayId=setTimeout(()=>{this.indexArrayUpdateNeeded&&(this.__updateIndexArray(),this.emit("updated",{}))},1))}__updateIndexArray(){const l=this.__gl;this.__indexArray&&this.__indexArray.length!=this.__drawCount&&(l.deleteBuffer(this.__instanceIdsBuffer),this.__instanceIdsBuffer=null),this.__indexArray=new Float32Array(this.__drawCount);let F=0;for(let l=0;l<this.__billboards.length;l++)this.__billboards[l]&&this.__billboards[l].billboard.isVisible()&&(this.__indexArray[F]=l,F++);this.__instanceIdsBuffer||(this.__instanceIdsBuffer=l.createBuffer()),l.bindBuffer(l.ARRAY_BUFFER,this.__instanceIdsBuffer),l.bufferData(l.ARRAY_BUFFER,this.__indexArray,l.STATIC_DRAW),this.indexArrayUpdateNeeded=!1}__updateBillboards(){const l=()=>{this.indexArrayUpdateNeeded&&this.__updateIndexArray();const l=this.__gl;if(!this.__glshader){l.__quadVertexIdsBuffer||l.setupInstancedQuad(),this.__glshader=new Sc(l);const F=this.__glshader.compileForTarget("GLBillboardsPass",this.__renderer.getShaderPreproc());this.__shaderBinding=SU(l,F.attrs,l.__quadattrbuffers,l.__quadIndexBuffer)}if(this.__atlas.renderAtlas(),!l.floatTexturesSupported||!l.drawElementsInstanced)return this.__modelMatrixArray=[],this.__billboardDataArray=[],this.__tintColorArray=[],this.__indexArray.forEach(l=>{const F=this.__billboards[l],U=F.billboard,c=U.getParameter("GlobalXfo").getValue().toMat4(),s=1/U.getParameter("PixelsPerMeter").getValue();let B=0;U.getParameter("AlignedToCamera").getValue()&&(B|=4);const d=U.getParameter("Alpha").getValue(),i=U.getParameter("Color").getValue();this.__modelMatrixArray[l]=c.asArray(),this.__billboardDataArray[l]=[s,B,F.imageIndex,d],this.__tintColorArray[l]=[i.r,i.g,i.b,i.a]}),void(this.__updateRequested=!1);let F=Math.round(Math.sqrt(5*(this.__billboards.length-this.__freeIndices.length))+.5);F%5!=0&&(F+=5-F%5),this.__width=F,this.__drawItemsTexture?this.__drawItemsTexture.resize(F,F):(this.__drawItemsTexture=new CU(l,{format:"RGBA",type:"FLOAT",width:F,height:F,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.__drawItemsTexture.clear()),this.__indexArray.forEach(l=>{-1!=l&&this.__updateBillboard(l)}),this.__updateRequested=!1};this.__atlas.isLoaded()?l():this.__atlas.on("loaded",l)}__updateBillboard(l){if(0==this.__drawCount||!this.__drawItemsTexture)return;const F=this.__billboards[l];if(!F.billboard.isVisible())return;const U=this.__gl,c=new Float32Array(20);this.__populateBillboardDataArray(F,0,c),U.bindTexture(U.TEXTURE_2D,this.__drawItemsTexture.glTex);const s=5*l%this.__width,B=Math.floor(5*l/this.__width),d=this.__drawItemsTexture.getType(),i=this.__drawItemsTexture.getFormat();if("FLOAT"==d)U.texSubImage2D(U.TEXTURE_2D,0,s,B,5,1,U[i],U[d],c);else{const l=Q.convertFloat32ArrayToUInt16Array(c);U.texSubImage2D(U.TEXTURE_2D,0,s,B,5,1,U[i],U[d],l)}}sort(l){for(const F of this.__billboards){const{billboard:U}=F;if(U&&U.isVisible()){const c=U.getParameter("GlobalXfo").getValue();F.dist=c.tr.distanceTo(l)}}this.__indexArray.sort((l,F)=>-1==l?1:-1==F||this.__billboards[l].dist>this.__billboards[F].dist?-1:this.__billboards[l].dist<this.__billboards[F].dist?1:0);const F=this.__gl;F.floatTexturesSupported&&this.__instanceIdsBuffer&&(F.bindBuffer(F.ARRAY_BUFFER,this.__instanceIdsBuffer),F.bufferData(F.ARRAY_BUFFER,this.__indexArray,F.STATIC_DRAW))}draw(l){if(0==this.__drawCount||!this.__atlas.isReady()||this.__updateRequested)return;this.__dirtyBillboards.size>0&&(this.__dirtyBillboards.forEach(l=>{this.__updateBillboard(l)}),this.__dirtyBillboards.clear()),this.indexArrayUpdateNeeded&&this.__updateIndexArray();const F=this.__gl;F.disable(F.CULL_FACE),F.enable(F.BLEND),F.blendEquation(F.FUNC_ADD),F.blendFunc(F.SRC_ALPHA,F.ONE_MINUS_SRC_ALPHA);const U=l.viewXfo.tr;if(U.distanceTo(this.__prevSortCameraPos)>this.__threshold)if(this.sort(U),this.__prevSortCameraPos=U.clone(),this.__drawCount>1){const l=this.__billboards[this.__indexArray[0]].billboard.getParameter("GlobalXfo").getValue().tr,F=this.__billboards[this.__indexArray[1]].billboard.getParameter("GlobalXfo").getValue().tr;this.__threshold=l.distanceTo(F)}else this.__threshold=9999;this.__glshader.bind(l),this.__shaderBinding.bind(l);const c=l.unifs;this.__atlas.bindToUniform(l,c.atlasBillboards);const s=1==l.vrPresenting;if(F.uniform1i(c.inVR.location,s),F.floatTexturesSupported&&F.drawElementsInstanced){this.__drawItemsTexture.bindToUniform(l,c.instancesTexture),F.uniform1i(c.instancesTextureSize.location,this.__width);{const U=l.attrs.instanceIds.location;F.enableVertexAttribArray(U),F.bindBuffer(F.ARRAY_BUFFER,this.__instanceIdsBuffer),F.vertexAttribPointer(U,1,F.FLOAT,!1,4,0),F.vertexAttribDivisor(U,1)}l.bindViewports(c,()=>{F.drawElementsInstanced(F.TRIANGLES,6,F.UNSIGNED_SHORT,0,this.__drawCount)})}else{const U=this.__indexArray.length;for(let s=0;s<U;s++)F.uniformMatrix4fv(c.modelMatrix.location,!1,this.__modelMatrixArray[s]),F.uniform4fv(c.billboardData.location,this.__billboardDataArray[s]),F.uniform4fv(c.tintColor.location,this.__tintColorArray[s]),F.uniform4fv(c.layoutData.location,this.__atlas.getLayoutData(this.__billboards[s].imageIndex)),l.bindViewports(c,()=>{F.drawQuad()})}F.disable(F.BLEND)}}uc.registerPass(ts,Lc.TRANSPARENT);class Is extends is{constructor(){super()}init(l,F){super.init(l,F)}filterGeomItem(l){if(l.isOverlay())return!0;const F=l.getParameter("Material").getValue().getShaderClass();return!(!F||!F.isOverlay())}draw(l){this.newItemsReadyForLoading()&&this.finalize();const F=this.__gl;F.clear(F.DEPTH_BUFFER_BIT),F.enable(F.CULL_FACE),F.cullFace(F.BACK),F.enable(F.BLEND),F.blendEquation(F.FUNC_ADD),l.pass="ADD",F.blendFunc(F.SRC_ALPHA,F.ONE_MINUS_SRC_ALPHA),this.__traverseTreeAndDraw(l),F.disable(F.BLEND)}drawGeomData(l){const F=this.__gl;F.clear(F.DEPTH_BUFFER_BIT),F.enable(F.BLEND),F.blendEquation(F.FUNC_ADD),l.pass="ADD",F.blendFunc(F.SRC_ALPHA,F.ONE_MINUS_SRC_ALPHA),super.drawGeomData(l),F.disable(F.BLEND),F.enable(F.DEPTH_TEST)}}uc.registerPass(Is,Lc.OVERLAY);const Vs=globalThis.navigator&&(window.AudioContext||window.webkitAudioContext||!1);let es;Vs?es=new Vs:globalThis.navigator&&alert("Sorry, but the Web Audio API is not supported by your browser. Please, consider upgrading to the latest version or downloading Google Chrome or Mozilla Firefox");class Xs extends nc{constructor(){super(),this.__audioItems=[]}init(l,F){super.init(l,F),es&&this.__renderer.registerPass(l=>{if(l instanceof jF)return l.on("audioSourceCreated",F=>{const{audioSource:U}=F;this.addAudioSource(l,U,l)}),!0;if(l instanceof UU){const F=l.getParameter("Material").getValue();if(F){const U=F.getParameter("BaseColor");if(U&&U.getImage&&U.getImage()){const F=U.getImage();F.on("loaded",()=>{if(F.getAudioSource){const U=F.getAudioSource();(U instanceof HTMLMediaElement||U instanceof AudioBufferSourceNode)&&this.addAudioSource(l,U,F)}})}}return!1}},l=>{})}addAudioSource(l,F,U){if(F.addedToCollector)return;let c;c=F instanceof HTMLMediaElement?es.createMediaElementSource(F):F instanceof AudioBufferSourceNode?F:es.createMediaStreamSource(F);const s=es.createGain(),B=U.getParameter("Gain");var d,i;B&&(d=B,i=s.gain,d&&(i.setValueAtTime(d.getValue(),0),i.setValueAtTime(d.getValue(),5),d.on("valueChanged",()=>{i.value=d.getValue()}))),inNode;const Q=U.getParameter("SpatializeAudio");if(Q&&0==Q.getValue())dioCtx.destination;else{const F=es.createPanner();F.panningModel="HRTF",F.distanceModel="inverse"("pasource",nner)("aupanner",dioCtx.destination);const c=l=>{const c=U.getParameter(l);c&&(F[l]=c.getValue(),c.on("valueChanged",()=>{F[l]=c.getValue()}))};c("coneInnerAngle"),c("coneOuterAngle"),c("coneOuterGain");const s=()=>{let U;U=l instanceof UU?l.getGeomMat4():l.getParameter("GlobalXfo").getValue().toMat4();const c=U.translation;F.setPosition(c.x,c.y,c.z);const s=U.zAxis;F.setOrientation(s.x,s.y,s.z)};s(),l.on("globalXfoChanged",l=>{s()})}F.addedToCollector=!0,this.__audioItems.push({treeItem:l,audioSource:F,parameterOwner:U}),this.emit("updated",{})}__updateListenerPosition(l){if(!es)return;const F=es.listener;F.setPosition(l.tr.x,l.tr.y,l.tr.z);const U=l.ori.getYaxis(),c=l.ori.getZaxis().negate();F.setOrientation(c.x,c.y,c.z,U.x,U.y,U.z)}draw(l){0!=this.__audioItems.length&&this.__updateListenerPosition(l.viewXfo)}}uc.registerPass(Xs,Lc.OVERLAY),globalThis.navigator&&window&&(window.ZeaAudioaudioCtx=es);const gs={SystemDesc:l,Registry:e,...E,...N,...LU,...Object.freeze({__proto__:null,create3DContext:nU,GLTexture2D:CU,GLMesh:WU,GLLines:JU,GLPoints:EU,GLMaterial:DU,GLShader:pU,GLFbo:TU,GLRenderTarget:PU,GLRenderer:uc,GLBaseViewport:Xc,GLViewport:gc,shaderLibrary:rU,generateShaderGeomBinding:SU,BillboardShader:Sc,ConvolverShader:lc,DepthMapShader:oc,EnvMapShader:cc,BackgroundImageShader:sc,OctahedralEnvMapShader:Bc,LatLongEnvMapShader:dc,SterioLatLongEnvMapShader:ic,DualFishEyeEnvMapShader:Qc,DualFishEyeToLatLongBackgroundShader:tc,EnvProjectionShader:Wc,OctahedralEnvProjectionShader:Jc,LatLongEnvProjectionShader:Ec,FatLinesShader:Hc,FlatSurfaceShader:rc,FlatAlphaSurfaceShader:Yc,LinesShader:pc,NormalsShader:Nc,PointsShader:Tc,FatPointsShader:Ac,FatPointsGeomDataShader:Mc,FatPointsSelectedShader:zc,PostProcessing:kc,ScreenQuadShader:Vc,SimpleSurfaceShader:vc,StandardSurfaceShader:Kc,StandardSurfaceGeomDataShader:wc,StandardSurfaceSelectedGeomsShader:fc,TransparentSurfaceShader:Dc,ScreenSpaceShader:Pc,ToolIconShader:_c,UnpackHDRShader:NU,UnpackLDRAlphaImageShader:jc,WireShader:Oc,GLPass:nc,PassType:Lc,GLStandardGeomsPass:cs,GLOpaqueGeomsPass:is,GLTransparentGeomsPass:Qs,GLBillboardsPass:ts,GLOverlayPass:Is,GLAudioItemsPass:Xs,get audioCtx(){return es},VRViewport:Zc})};export default gs;export{IU as AssetItem,Y as Async,g as AttrValue,Yl as Attribute,jF as AudioItem,sc as BackgroundImageShader,pl as BaseGeom,lU as BaseGeomItem,El as BaseImage,K as BaseItem,VU as BillboardItem,Sc as BillboardShader,k as BinReader,il as BinWriter,el as BooleanParameter,u as Box2,o as Box3,eU as Camera,yU as CameraMouseAndKeyboard,Dl as Circle,Ll as CodeParameter,R as Color,Zl as ColorParameter,Ol as Cone,lc as ConvolverShader,Pl as Cross,ql as Cuboid,$l as Cylinder,sF as DataImage,oc as DepthMapShader,lF as Disc,Qc as DualFishEyeEnvMapShader,tc as DualFishEyeToLatLongBackgroundShader,NF as EnvMap,cc as EnvMapShader,Wc as EnvProjectionShader,y as EulerAngles,H as EventEmitter,Hc as FatLinesShader,Mc as FatPointsGeomDataShader,zc as FatPointsSelectedShader,Ac as FatPointsShader,OF as FileAudioItem,mF as FileImage,LF as FileImage2D,Wl as FilePathParameter,Yc as FlatAlphaSurfaceShader,rc as FlatSurfaceShader,i as Float32,J as Frustum,uF as GIFImage,Xs as GLAudioItemsPass,Xc as GLBaseViewport,ts as GLBillboardsPass,TU as GLFbo,JU as GLLines,DU as GLMaterial,WU as GLMesh,is as GLOpaqueGeomsPass,Is as GLOverlayPass,nc as GLPass,EU as GLPoints,PU as GLRenderTarget,uc as GLRenderer,pU as GLShader,cs as GLStandardGeomsPass,CU as GLTexture2D,Qs as GLTransparentGeomsPass,gc as GLViewport,UU as GeomItem,QU as GeomLibrary,ol as GeometryParameter,jl as Grid,dU as Group,r as GrowingPacker,yl as ImageParameter,_F as InstanceItem,ul as ItemSetParameter,CF as LDRImage,hF as LDRVideo,AF as Label,dc as LatLongEnvMapShader,Ec as LatLongEnvProjectionShader,Al as Lines,_l as LinesCuboid,vl as LinesProxy,pc as LinesShader,nl as ListParameter,m as Mat3,xl as Mat3Parameter,L as Mat4,Gl as Mat4Parameter,$F as Material,rl as MaterialColorParam,Hl as MaterialFloatParam,tU as MaterialLibrary,Jl as MaterialParameter,Q as MathFunctions,Ml as Mesh,Kl as MeshProxy,Vl as MultiChoiceParameter,Nc as NormalsShader,Il as NumberParameter,GU as ObjAsset,Bc as OctahedralEnvMapShader,Jc as OctahedralEnvProjectionShader,vF as Operator,zF as OperatorInput,kF as OperatorOutput,Ql as OperatorOutputMode,tl as Parameter,z as ParameterOwner,Lc as PassType,FF as Plane,W as PlaneType,wl as PointGrid,Tl as Points,kl as PointsProxy,Tc as PointsShader,kc as PostProcessing,Sl as ProxyParameter,n as Quat,G as RGBA,C as Ray,fl as Rect,A as RefCounted,e as Registry,RU as RouterOperator,s as SInt16,d as SInt32,U as SInt8,xU as Scene,Vc as ScreenQuadShader,Pc as ScreenSpaceShader,vc as SimpleSurfaceShader,UF as Sphere,S as SphereType,wc as StandardSurfaceGeomDataShader,fc as StandardSurfaceSelectedGeomsShader,Kc as StandardSurfaceShader,ic as SterioLatLongEnvMapShader,X as StringFunctions,ml as StringParameter,Cl as StructParameter,l as SystemDesc,_c as ToolIconShader,cF as Torus,Dc as TransparentSurfaceShader,PF as TreeItem,hl as TreeItemParameter,c as UInt16,B as UInt32,F as UInt8,NU as UnpackHDRShader,jc as UnpackLDRAlphaImageShader,aU as VLAAsset,Zc as VRViewport,a as Vec2,Xl as Vec2Parameter,Z as Vec3,al as Vec3Parameter,x as Vec4,bl as Vec4Parameter,dl as Version,Nl as VertexAttribute,MF as VideoStreamImage2D,Oc as WireShader,h as Xfo,Rl as XfoParameter,es as audioCtx,nU as create3DContext,p as decodeText,SU as generateShaderGeomBinding,w as getFileFolder,TF as labelManager,O as loadBinfile,P as loadJSONfile,D as loadTextfile,_ as loadXMLfile,Bl as resourceLoader,mU as sgFactory,rU as shaderLibrary};
