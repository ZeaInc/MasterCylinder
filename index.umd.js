(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.zeaEngine = {}));
})(this, (function (exports) { 'use strict';

  var version = "4.13.0";

  /**
   * Libraries registry.
   */
  class LibsRegistry {
      registry;
      version;
      /**
       * Construct a new libraries registry for the specific version.
       * @param version - The version of the Zea Engine that will be validated against the registered libraries.
       */
      constructor(version) {
          this.version = version;
          this.registry = {};
      }
      /**
       * Validate and register a library.
       * @param packageJson - The package.json of the library to register.
       */
      registerLib(packageJson) {
          const libName = packageJson.name;
          const libVersion = packageJson.version;
          if (this.registry[libName]) {
              console.warn("Library already registered:" + libName);
          }
          this.registry[libName] = libVersion;
          console.log(`Registered lib '${libName}' v${libVersion}`);
      }
      /**
       * List the registered libraries with their versions.
       * @return Libraries list.
       */
      listLibs() {
          return this.registry;
      }
  }

  // https://stackoverflow.com/questions/57776001/how-to-detect-ipad-pro-as-ipad-using-javascript
  function isIOSDevice() {
      if (/iPad|iPhone|iPod/.test(navigator.platform)) {
          return true;
      }
      else {
          return navigator.maxTouchPoints && navigator.maxTouchPoints > 2 && /MacIntel/.test(navigator.platform);
      }
  }
  // https://stackdiary.com/detect-mobile-browser-javascript/
  function isMobileDevice() {
      return (navigator.maxTouchPoints && navigator.maxTouchPoints > 0 && /Android|iPhone|iPad|iPod/i.test(navigator.userAgent));
  }
  function getBrowserDesc() {
      const nAgt = navigator.userAgent;
      let browserName = navigator.appName;
      let fullVersion = '' + parseFloat(navigator.appVersion);
      let majorVersion = parseInt(navigator.appVersion, 10);
      let nameOffset;
      let verOffset;
      let ix;
      if (navigator.brave) {
          browserName = 'Brave';
          verOffset = nAgt.indexOf('Chrome');
          fullVersion = nAgt.substring(verOffset + 7, nAgt.indexOf(' ', verOffset + 7));
      }
      // In Opera, the true version is after "Opera" or after "Version"
      else if ((verOffset = nAgt.indexOf('Opera')) != -1) {
          browserName = 'Opera';
          fullVersion = nAgt.substring(verOffset + 6);
          if ((verOffset = nAgt.indexOf('Version')) != -1)
              fullVersion = nAgt.substring(verOffset + 8);
      }
      // In MSIE, the true version is after "MSIE" in userAgent
      else if ((verOffset = nAgt.indexOf('MSIE')) != -1) {
          browserName = 'Microsoft Internet Explorer';
          fullVersion = nAgt.substring(verOffset + 5);
      }
      else if ((verOffset = nAgt.indexOf('Edge')) != -1) {
          browserName = 'Edge';
          fullVersion = nAgt.substring(verOffset + 4);
      }
      // In Chrome, the true version is after "Chrome"
      else if ((verOffset = nAgt.indexOf('Chrome')) != -1) {
          browserName = 'Chrome';
          fullVersion = nAgt.substring(verOffset + 7, nAgt.indexOf(' ', verOffset + 7));
      }
      // TOOD: Parse Samsung userAgent
      // https://developer.samsung.com/technical-doc/view.do?v=T000000203
      // In Safari, the true version is after "Safari" or after "Version"
      else if ((verOffset = nAgt.indexOf('Safari')) != -1) {
          browserName = 'Safari';
          fullVersion = nAgt.substring(verOffset + 7);
          if ((verOffset = nAgt.indexOf('Version')) != -1)
              fullVersion = nAgt.substring(verOffset + 8);
      }
      // In Firefox, the true version is after "Firefox"
      else if ((verOffset = nAgt.indexOf('Firefox')) != -1) {
          browserName = 'Firefox';
          fullVersion = nAgt.substring(verOffset + 8);
      }
      // In most other browsers, "name/version" is at the end of userAgent
      else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) < (verOffset = nAgt.lastIndexOf('/'))) {
          browserName = nAgt.substring(nameOffset, verOffset);
          fullVersion = nAgt.substring(verOffset + 1);
          if (browserName.toLowerCase() == browserName.toUpperCase()) {
              browserName = navigator.appName;
          }
      }
      // trim the fullVersion string at semicolon/space if present
      if ((ix = fullVersion.indexOf(';')) != -1)
          fullVersion = fullVersion.substring(0, ix);
      if ((ix = fullVersion.indexOf(' ')) != -1)
          fullVersion = fullVersion.substring(0, ix);
      majorVersion = parseInt('' + fullVersion, 10);
      if (isNaN(majorVersion)) {
          fullVersion = '' + parseFloat(navigator.appVersion);
          majorVersion = parseInt(navigator.appVersion, 10);
      }
      return {
          browserName,
          fullVersion,
          majorVersion,
          appName: navigator.appName,
          userAgent: navigator.userAgent,
      };
  }
  // eslint-disable-next-line require-jsdoc
  function getGPUDesc() {
      let webgl;
      try {
          webgl = document.createElement('canvas').getContext('webgl');
      }
      catch (e) { }
      if (!webgl) {
          return {
              vendor: 'Unknown',
              renderer: 'Unknown',
              gpuVendor: 'Unknown',
              maxTextureSize: 0,
              supportsWebGL: false,
              supportsWebGL2: false,
          };
      }
      let webgl2;
      try {
          webgl2 = document.createElement('canvas').getContext('webgl2');
      }
      catch (e) { }
      const debugInfo = webgl.getExtension('WEBGL_debug_renderer_info');
      if (!debugInfo) {
          console.warn('Unable to determine GPU Info:');
          return {
              vendor: 'Unknown',
              renderer: 'Unknown',
              gpuVendor: 'Unknown',
              maxTextureSize: 0,
              supportsWebGL: webgl != undefined,
              supportsWebGL2: webgl2 != undefined,
          };
      }
      const vendor = webgl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);
      const renderer = webgl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);
      const maxTextureSize = webgl.getParameter(webgl.MAX_TEXTURE_SIZE);
      let gpuVendor;
      if (renderer.match(/NVIDIA/i)) {
          gpuVendor = 'NVidia';
      }
      else if (renderer.match(/AMD/i) || renderer.match(/Radeon/i)) {
          gpuVendor = 'AMD';
      }
      else if (renderer.match(/Intel/i)) {
          gpuVendor = 'Intel';
      }
      else if (renderer.match(/Mali/i)) {
          gpuVendor = 'ARM';
      }
      else if (renderer.match(/Apple/i)) {
          gpuVendor = 'Apple';
      }
      else if (renderer.match(/Adreno/i)) {
          gpuVendor = 'Adreno';
      }
      else if (renderer.match(/Swiftshader/i)) {
          gpuVendor = 'Google';
          console.warn('Hardware rendering is disabled or not working on your system. Falling back to the Swiftshader. Expect poor performance:', renderer);
      }
      else {
          console.warn('Unable to determine GPU vendor:', renderer);
      }
      return {
          vendor,
          renderer,
          gpuVendor,
          maxTextureSize,
          supportsWebGL: true,
          supportsWebGL2: webgl2 != undefined,
      };
  }
  const getOS = () => {
      const userAgent = window.navigator.userAgent;
      let os = null;
      if (/macintosh/i.test(userAgent)) {
          os = 'macOS';
      }
      else if (/ios/i.test(userAgent)) {
          os = 'iOS';
      }
      else if (/win/i.test(userAgent)) {
          os = 'Windows';
      }
      else if (/android/i.test(userAgent)) {
          os = 'Android';
      }
      else if (/linux/i.test(userAgent)) {
          os = 'Linux';
      }
      return os;
  };
  const SystemDesc = (function () {
      if (!globalThis.navigator) {
          // When running in NodeJS
          return {
              OS: 'Node',
              isMobileDevice: false,
              isIOSDevice: false,
              browserName: 'Node',
              webGLSupported: false,
              deviceCategory: 'High',
              hardwareConcurrency: 4,
          };
      }
      const isMobile = isMobileDevice();
      const browserDesc = getBrowserDesc();
      const gpuDesc = getGPUDesc();
      let deviceCategory = 'Low';
      if (gpuDesc.supportsWebGL) {
          // We divide devices into 3 categories.
          // 0: low end, we dial everything down as much as possible
          // 1: mid-range, Enb maps and Textures go to mid-lods.
          //    Typically these devices are laptops, so the textures can't be too blurry
          // 2: High-end: turn up as much as needed.
          if (!isMobile) {
              // Remove braces and split into parts
              const parts = gpuDesc.renderer.replace(/[()]/g, '').split(' ');
              if (gpuDesc.gpuVendor == 'NVidia') {
                  const gtxIdx = parts.indexOf('GTX');
                  if (gtxIdx != -1) {
                      const model = parts[gtxIdx + 1];
                      if (model.endsWith('M')) {
                          // laptop GPU.
                          const modelNumber = parseInt(model.substring(0, model.length - 2));
                          if (modelNumber >= 900) {
                              deviceCategory = 'Medium';
                          }
                          else {
                              deviceCategory = 'Low';
                          }
                      }
                      else {
                          const modelNumber = parseInt(model);
                          if (modelNumber >= 1030) {
                              deviceCategory = 'High';
                          }
                          else {
                              deviceCategory = 'Medium';
                          }
                      }
                  }
                  else {
                      if (parts.includes('RTX') || parts.includes('TITAN') || parts.includes('Quadro')) {
                          deviceCategory = 'High';
                      }
                      else {
                          deviceCategory = 'Low';
                      }
                  }
              }
              else if (gpuDesc.gpuVendor == 'AMD') {
                  const radeonIdx = parts.indexOf('Radeon');
                  if (radeonIdx != -1) {
                      const rxIdx = parts.indexOf('RX');
                      if (rxIdx != -1) {
                          if (parts[rxIdx + 1] == 'Vega') {
                              deviceCategory = 'High';
                          }
                          else {
                              const model = parts[rxIdx + 1];
                              let modelNumber;
                              if (model.endsWith('X')) {
                                  modelNumber = parseInt(model.substring(0, model.length - 2));
                                  deviceCategory = 'High';
                              }
                              else {
                                  modelNumber = parseInt(model);
                              }
                              if (modelNumber >= 480) {
                                  deviceCategory = 'High';
                              }
                              else {
                                  deviceCategory = 'Medium';
                              }
                          }
                      }
                      else if (parts[radeonIdx + 1] == 'Pro') {
                          const modelNumber = parseInt(parts[rxIdx + 1]);
                          if (modelNumber >= 450) {
                              deviceCategory = 'Medium';
                          }
                          else {
                              deviceCategory = 'Low';
                          }
                      }
                      else if (parts[radeonIdx + 1] == 'Sky') {
                          const modelNumber = parseInt(parts[rxIdx + 1]);
                          if (modelNumber >= 700) {
                              deviceCategory = 'Medium';
                          }
                          else {
                              deviceCategory = 'Low';
                          }
                      }
                      else {
                          deviceCategory = 'Low';
                      }
                  }
                  else {
                      if (parts.includes('FirePro') || parts.includes('Quadro')) {
                          deviceCategory = 'High';
                      }
                      else {
                          deviceCategory = 'Low';
                      }
                  }
              }
              else if (gpuDesc.gpuVendor == 'Adreno') {
                  deviceCategory = 'Low';
              }
              else if (gpuDesc.gpuVendor == 'Intel') {
                  deviceCategory = 'Low';
              }
              else if (gpuDesc.gpuVendor == 'Google') {
                  deviceCategory = 'Low';
              }
          }
          else {
              deviceCategory = 'Low';
          }
      }
      let hardwareConcurrency = globalThis.navigator.hardwareConcurrency;
      if (!hardwareConcurrency) {
          if (isMobile)
              hardwareConcurrency = 4;
          else
              hardwareConcurrency = 6;
      }
      return {
          OS: getOS(),
          isMobileDevice: isMobile,
          isIOSDevice: isIOSDevice(),
          browserName: browserDesc.browserName,
          fullVersion: browserDesc.fullVersion,
          majorVersion: browserDesc.majorVersion,
          appName: browserDesc.appName,
          userAgent: browserDesc.userAgent,
          webGLSupported: gpuDesc.supportsWebGL,
          gpuDesc,
          deviceCategory,
          hardwareConcurrency,
      };
  })();
  // @ts-ignore
  if (!globalThis.ZeaSystemDesc) {
      // @ts-ignore
      globalThis.ZeaSystemDesc = SystemDesc;
  }

  let registeredClasses = {};
  let classNames = {};
  let classDefinitions = [];
  /**
   * Registry is a static factory that handles registration/reconstruction of
   * classes bases on BaseClass. Registered classes can then be constructed by the Registry by name.
   *
   * Note: className is required because on minification process
   * the name of classes change and we can't simply use '....constructor.name'.
   * So, we need a way of relating minified class names to the one stored for persistency.
   *
   * i.e.
   * ```javascript
   * // Import registry class
   * class Foo() extends BaseClass {}
   *
   * Registry.register('Foo', Foo)
   * // In case 'Foo' class gets its name changed to 'c' on minification,
   * // and the persisted data type is 'Foo', we would know how to relate them.
   * ```
   *
   * @static
   * @class Registry
   */
  class Registry {
      /**
       * Registers a new class to the factory.
       *
       * @param className - Name of the registered class
       * @param classDef - Class representation(Class function, type)
       */
      static register(className, classDef) {
          if (className in registeredClasses) {
              console.warn(`There's a class registered with '${className}' name. Second registration failed.`);
              return;
          }
          // Note: To provide backwards compatibility, same classDef can be stored under multiple names.
          // Thats the reason behind using indexes instead of the classDef.
          const index = classDefinitions.length;
          classDefinitions.push(classDef);
          classNames[index] = className;
          registeredClasses[className] = index;
      }
      /**
       * Returns class definition using the name it was registered with.
       *
       * @param className - Name of the registered class
       * @return - Class representation(Class function, type)
       */
      static getClassDefinition(className) {
          if (!(className in registeredClasses))
              throw new Error(`${className} class is not registered`);
          return classDefinitions[registeredClasses[className]];
      }
      /**
       * Returns class name registered for the instantiated object.
       * @param classDefinition - Class type definition.
       * @return - Name of the registered class
       */
      static getClassName(classDefinition) {
          const classId = classDefinitions.indexOf(classDefinition);
          if (classId >= 0 && classNames[classId])
              return classNames[classId];
          throw new Error(`class is not registered`);
      }
      /**
       * The factory function that construct the class registered under the given name.
       *
       * @param className - Name of the registered class
       * @return - Instantiated object of the specified class
       */
      static constructClass(className) {
          const classDefinition = classDefinitions[registeredClasses[className]];
          if (!classDefinition)
              throw new Error(`${className} class is not registered`);
          return new classDefinition();
      }
      /**
       * For testing purpose only, never call this outside of the test scope.
       *
       * @private
       */
      static flush() {
          registeredClasses = {};
          classNames = {};
          classDefinitions = [];
      }
  }

  /**
   * String functions
   *
   */
  class StringFunctions {
      /**
       * Replaces all matches in a string.
       *
       * @static
       * @param str -
       * @param pattern -
       * @param replacement -
       * @return -
       */
      static replaceAll(str, pattern, replacement) {
          return str.replace(new RegExp(pattern, 'g'), replacement);
      }
      /**
       * Returns JSON object as a formatted string, but the numeric values are fixed to the specified precision.
       *
       * @static
       * @param val -
       * @param space -
       * @param precision -
       * @return -
       */
      static stringifyJSONWithFixedPrecision(val, space = 0, precision = 5) {
          return JSON.stringify(val, (_, val) => {
              return val ? (val.toFixed ? Number(val.toFixed(precision)) : val) : val;
          }, space);
      }
      /**
       * Transforms the given string into a numeric value.
       *
       * @static
       * @param str -
       * @return -
       */
      static hashStr(str) {
          let hash = 0;
          let i;
          let chr;
          let len;
          if (str.length === 0)
              return hash;
          for (i = 0, len = str.length; i < len; i++) {
              chr = str.charCodeAt(i);
              hash = (hash << 5) - hash + chr;
              hash |= 0; // Convert to 32bit integer
          }
          return Math.abs(hash);
      }
  }

  /**
   * Representing a Vec2(two-dimensional floating point vector). A Vec2 is for representing 2 dimensional values, such as screen coordinates or pixel coordinates within an image.
   *
   * Math types internally store values in {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array|Float32Array} and
   * expose getters and setters for the component values.
   *
   */
  class Vec2 {
      x;
      y;
      /**
       * Creates a Vec2.
       *
       * ```javascript
       *  const myVec2 = new Vec2(1.2, 3.4)
       * ```
       *
       */
      constructor(x = 0, y = 0) {
          this.x = x;
          this.y = y;
      }
      /**
       * Setter from scalar components.
       * @param x - The x component.
       * @param y  - The y component.
       */
      set(x, y) {
          this.x = x;
          this.y = y;
      }
      /**
       * Replaces this Vec2 data with the Vec2 data passed as parameter.
       *
       * @param other - The other Vec2 to set from.
       */
      setFromOther(other) {
          this.x = other.x;
          this.y = other.y;
      }
      /**
       * Checks if this Vec2 contains the same values as the other Vec2.
       *
       * @param other - The other Vec2 to compare with.
       * @return - Returns `true` if are the same Vector, otherwise, `false`.
       */
      isEqual(other) {
          return this.x == other.x && this.y == other.y;
      }
      /**
       * Checks if this Vec2 is different from another Vec2.
       *
       * @param other - The other Vec2 to compare with.
       * @return - Returns `true` if the Vec2s are different, otherwise, `false`.
       */
      notEqual(other) {
          return this.x != other.x && this.y != other.y;
      }
      /**
       * Returns true if this Vec2 is approximately the same as other.
       *
       * @param other - The other Vec2 to compare with.
       * @param precision - The precision to which the values must match.
       * @return - Returns true or false.
       */
      approxEqual(other, precision = Number.EPSILON) {
          return Math.abs(this.x - other.x) < precision && Math.abs(this.y - other.y) < precision;
      }
      /**
       * Adds other to this Vec2 and returns the result as a new Vec2.
       *
       * @param other - The other Vec2 to add.
       * @return - Returns a new Vec2.
       */
      add(other) {
          return new Vec2(this.x + other.x, this.y + other.y);
      }
      /**
       * Adds a Vec2 to this Vec2.
       *
       * @param other - The other Vec2 to add.
       */
      addInPlace(other) {
          this.x += other.x;
          this.y += other.y;
      }
      /**
       * Subtracts a Vec2 from this Vec2 and returns the result as a new Vec2.
       *
       * @param other - The other Vec2 to subtract.
       * @return - Returns a new Vec2.
       */
      subtract(other) {
          return new Vec2(this.x - other.x, this.y - other.y);
      }
      /**
       * Subtracts a Vec2 from this Vec2.
       *
       * @param other - The other Vec2 to subtract.
       * @return - Returns a new Vec2.
       */
      subtractInPlace(other) {
          this.x -= other.x;
          this.y -= other.y;
          return this;
      }
      /**
       * Scales this Vec2 by scalar and returns the result as a new Vec2.
       *
       * @param scalar - The scalar value.
       * @return - Returns a new Vec2.
       */
      scale(scalar) {
          return new Vec2(this.x * scalar, this.y * scalar);
      }
      /**
       * Scales this Vec2 by scalar.
       *
       * @param scalar - The scalar value.
       */
      scaleInPlace(scalar) {
          this.x *= scalar;
          this.y *= scalar;
      }
      /**
       * Inverts this Vec2 and returns the result as a new Vec2.
       *
       * @return - Returns a new Vec2.
       */
      invert() {
          return new Vec2(1.0 / this.x, 1.0 / this.y);
      }
      /**
       * Inverts this Vec2.
       *
       * @return - The return value.
       */
      invertInPlace() {
          this.x = 1.0 / this.x;
          this.y = 1.0 / this.y;
          return this;
      }
      /**
       * Multiplies a Vec2 with this Vec2 and returns the result as a new Vec2.
       *
       * @param other - The other Vec2 to multiply with.
       * @return - Returns a new Vec2.
       */
      multiply(other) {
          return new Vec2(this.x * other.x, this.y * other.y);
      }
      /**
       * Multiplies a Vec2 with this Vec2.
       *
       * @param other - The other Vec2 to multiply with.
       */
      multiplyInPlace(other) {
          this.x *= other.x;
          this.y *= other.y;
      }
      /**
       * Calculates the squared length of this Vec2.
       *
       * @return - Returns the length squared.
       */
      lengthSquared() {
          const x = this.x;
          const y = this.y;
          return x * x + y * y;
      }
      /**
       * Calculates the length of this Vec2.
       *
       * @return - Returns the length.
       */
      length() {
          return Math.sqrt(this.lengthSquared());
      }
      /**
       * Calculates the distance to another vector.
       *
       * @param other - The other value.
       * @return - Returns the distance between vectors.
       */
      distanceTo(other) {
          const x = this.x - other.x;
          const y = this.y - other.y;
          return Math.sqrt(x * x + y * y);
      }
      /**
       * Normalizes the Vec2 and returns it as a new Vec2.
       * Multiplies coordinates value by the inverse of the vector length.
       *
       * @return - Returns the Vec2 normalized.
       */
      normalize() {
          const x = this.x;
          const y = this.y;
          let len = x * x + y * y;
          if (len < Number.EPSILON) {
              return new Vec2();
          }
          // TODO: evaluate use of glm_invsqrt here?
          len = 1 / Math.sqrt(len);
          return new Vec2(x * len, y * len);
      }
      /**
       * Normalizes this Vec2 multiplying coordinate values by the inverse of the vector length.
       */
      normalizeInPlace() {
          const x = this.x;
          const y = this.y;
          let len = x * x + y * y;
          if (len < Number.EPSILON) {
              return;
          }
          len = 1 / Math.sqrt(len);
          this.set(x * len, y * len);
      }
      /**
       * Calculates the dot product of this Vec2 against another Vec2.
       *
       * @param other - The other Vec2 to compare with.
       * @return - Returns the dot product.
       */
      dot(other) {
          return this.x * other.x + this.y * other.y;
      }
      /**
       * Calculates the cross product of this Vec2 against another Vec2.
       *
       * @param other - The other Vec2 to compare with.
       * @return - Returns the cross product.
       */
      cross(other) {
          // just calculate the z-component
          return this.x * other.y - this.y * other.x;
      }
      /**
       * Gets the angle between this Vec2 and other assuming both are normalized vectors.
       *
       * @param other - The other Vec2 to compare with.
       * @return - Returns the angle in radians.
       */
      angleTo(other) {
          const cosine = this.normalize().dot(other.normalize());
          if (cosine > 1.0)
              return 0.0;
          else if (cosine < -1.0)
              return Math.PI;
          else
              return Math.acos(cosine);
      }
      /**
       * Gets the angle between this Vec2 and other.
       *
       * @param other - The other Vec2 to compare with.
       * @return - Returns the angle in radians.
       */
      signedAngleTo(other) {
          const angle = this.angleTo(other);
          if (this.cross(other) < 0.0)
              return -angle;
          else
              return angle;
      }
      /**
       * Rotates a Vec2 in a clockwise direction and returns a new rotated Vec2.
       *
       * @param angle - The angle of rotation.
       * @return - Returns the rotated vector.
       */
      rotate(angle) {
          const cosA = Math.cos(angle);
          const sinA = Math.sin(angle);
          return new Vec2(this.x * cosA - this.y * sinA, this.x * sinA + this.y * cosA);
      }
      /**
       * Performs a linear interpolation between this Vec2 and other Vec2.
       *
       * @param other - The other Vec2 to interpolate between.
       * @param t - Interpolation amount between the two inputs.
       * @return - Returns a new Vec2.
       */
      lerp(other, t) {
          const ax = this.x;
          const ay = this.y;
          return new Vec2(ax + t * (other.x - ax), ay + t * (other.y - ay));
      }
      /**
       * Generates a random vector with the given scale.
       *
       * @param scale - Length of the resulting vector. If omitted, a unit vector will be returned.
       * @return - The return value.
       */
      setRandomDir(scale = 1.0) {
          const r = Math.random() * 2.0 * Math.PI;
          this.x = Math.cos(r) * scale;
          this.y = Math.sin(r) * scale;
          return this;
      }
      /**
       * Randomizes the scale of this Vec2 coordinates.
       *
       * @param scale - The scale value.
       * @return - The return value.
       */
      setRandom(scale = 1.0) {
          this.x = Math.random() * scale;
          this.y = Math.random() * scale;
          return this;
      }
      /**
       * Clones this Vec2 and returns a new Vec2.
       *
       * @return - Returns a new Vec2.
       */
      clone() {
          return new Vec2(this.x, this.y);
      }
      /**
       * Returns current Vec2 data as array. Often used to pass types to the GPU.
       *
       * @return - Returns as an array.
       */
      asArray() {
          return [this.x, this.y];
      }
      /**
       * Setter from an array.
       */
      fromArray(vals) {
          this.x = vals[0];
          this.y = vals[1];
      }
      // ///////////////////////////
      // Persistence
      /**
       * Converts this Vec3 to a string in JSON format.
       *
       * @return - The return value.
       */
      toString() {
          // eslint-disable-next-line new-cap
          return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());
      }
      /**
       * Encodes Vec2 Class as a JSON object for persistence.
       *
       * @return - The json object.
       */
      toJSON() {
          return {
              x: this.x,
              y: this.y,
          };
      }
      /**
       * Decodes a JSON object to set the state of this class.
       *
       * @param j - The json object.
       */
      fromJSON(j) {
          this.x = j.x;
          this.y = j.y;
      }
      /**
       * Loads the state of the value from a binary reader.
       *
       * @param reader - The reader value.
       */
      readBinary(reader) {
          this.x = reader.loadFloat32();
          this.y = reader.loadFloat32();
      }
      /**
       * Calculate the intersection point of 2 2d lines, returning the parameters values for each line.
       *
       * @param p0 - The point of the first line
       * @param d0 - The direction of the first line
       * @param p1 - The point of the second line
       * @param d1 - The direction of the second line
       * @return - Returns an array containing 2 parameter values for the 2 lines.
       */
      static intersectionOfLines(p1, p2, p3, p4) {
          // https://dirask.com/posts/JavaScript-how-to-calculate-intersection-point-of-two-lines-for-given-4-points-VjvnAj
          // down part of intersection point formula
          const d1 = (p1.x - p2.x) * (p3.y - p4.y); // (x1 - x2) * (y3 - y4)
          const d2 = (p1.y - p2.y) * (p3.x - p4.x); // (y1 - y2) * (x3 - x4)
          const d = d1 - d2;
          if (d == 0) {
              return null;
          }
          // upper part of intersection point formula
          const u1 = p1.x * p2.y - p1.y * p2.x; // (x1 * y2 - y1 * x2)
          const u4 = p3.x * p4.y - p3.y * p4.x; // (x3 * y4 - y3 * x4)
          const u2x = p3.x - p4.x; // (x3 - x4)
          const u3x = p1.x - p2.x; // (x1 - x2)
          const u2y = p3.y - p4.y; // (y3 - y4)
          const u3y = p1.y - p2.y; // (y1 - y2)
          // intersection point formula
          const px = (u1 * u2x - u3x * u4) / d;
          const py = (u1 * u2y - u3y * u4) / d;
          return new Vec2(px, py);
      }
      isValid() {
          for (const v of this.asArray()) {
              if (v == Infinity || isNaN(v))
                  return false;
          }
          return true;
      }
  }

  /**
   * Represents a three dimensional coordinate, such as 3D scene values, or mesh vertex positions.
   */
  class Vec3 {
      x;
      y;
      z;
      /**
       * Creates a Vec3.
       */
      constructor(x = 0, y = 0, z = 0) {
          this.x = x;
          this.y = y;
          this.z = z;
      }
      /**
       * Getter for `xy` swizzel.
       *
       * @return - Returns the xy components as a Vec2.
       */
      get xy() {
          return new Vec2(this.x, this.y);
      }
      /**
       * Getter for `yz` swizzel.
       *
       * @return - Returns the yz components as a Vec2.
       */
      get yz() {
          return new Vec2(this.y, this.z);
      }
      /**
       * Setter from scalar components.
       *
       * @param x - The x component.
       * @param y - The y component.
       * @param z - The y component.
       */
      set(x, y, z) {
          this.x = x;
          this.y = y !== undefined ? y : x;
          this.z = z !== undefined ? z : x;
      }
      /**
       * Sets the state of a Vec3 Object from another Vec3.
       *
       * @param other - The other Vec3 to set from.
       */
      setFromOther(other) {
          this.x = other.x;
          this.y = other.y;
          this.z = other.z;
      }
      /**
       * Checks if the coordinates of this Vec3 are 0 0 0.
       *
       * @return - Returns `true` if the coordinates are(0, 0, 0), otherwise, `false`.
       */
      isNull() {
          return Math.abs(this.x) < Number.EPSILON && Math.abs(this.y) < Number.EPSILON && Math.abs(this.z) < Number.EPSILON;
      }
      /**
       * Checks if the coordinates of this Vec3 are 1 1 1.
       *
       * @return - Returns `true` if the coordinates are(1, 1, 1), otherwise, `false`.
       */
      is111() {
          return (Math.abs(1.0 - this.x) < Number.EPSILON &&
              Math.abs(1.0 - this.y) < Number.EPSILON &&
              Math.abs(1.0 - this.z) < Number.EPSILON);
      }
      /**
       * Checks if this Vec3 contains the same values as the other Vec3.
       *
       * @param other - The other Vec3 to compare with.
       * @return - Returns `true` if the values are the same, otherwise, `false`.
       */
      isEqual(other) {
          return this.x == other.x && this.y == other.y && this.z == other.z;
      }
      /**
       * Checks if this Vec2 is different from another Vec2.
       *
       * @param other - The other Vec3 to compare with.
       * @return - Returns `true` if the Vec3s are different, otherwise, `false`.
       */
      notEqual(other) {
          return this.x != other.x && this.y != other.y && this.z != other.z;
      }
      /**
       * Returns true if this Vec2 is approximately the same as other.
       *
       * @param other - The other Vec3 to compare with.
       * @param precision - The precision to which the values must match.
       * @return - Returns true or false.
       */
      approxEqual(other, precision = Number.EPSILON) {
          return (Math.abs(this.x - other.x) < precision &&
              Math.abs(this.y - other.y) < precision &&
              Math.abs(this.z - other.z) < precision);
      }
      /**
       * Adds other to this Vec3 and return the result as a new Vec3.
       *
       * @param other - The other Vec3 to add.
       * @return - Returns a new Vec3.
       */
      add(other) {
          return new Vec3(this.x + other.x, this.y + other.y, this.z + other.z);
      }
      /**
       * Adds other to this Vec3.
       *
       * @param other - The other Vec3 to add.
       */
      addInPlace(other) {
          this.x += other.x;
          this.y += other.y;
          this.z += other.z;
      }
      /**
       * Subtracts other from this Vec3 and returns the result as a new Vec3.
       *
       * @param other - The other Vec3 to subtract.
       * @return - Returns a new Vec3.
       */
      subtract(other) {
          return new Vec3(this.x - other.x, this.y - other.y, this.z - other.z);
      }
      /**
       * Subtracts other from this Vec3.
       *
       * @param other - The other Vec3 to subtract.
       */
      subtractInPlace(other) {
          this.x -= other.x;
          this.y -= other.y;
          this.z -= other.z;
      }
      /**
       * Multiplies two Vec3s and returns the result as a new Vec3.
       *
       * @param other - The other Vec3 to multiply with.
       * @return - Returns a new Vec3.
       */
      multiply(other) {
          return new Vec3(this.x * other.x, this.y * other.y, this.z * other.z);
      }
      /**
       * Multiplies two Vec3s.
       *
       * @param other - The other Vec3 to multiply with.
       */
      multiplyInPlace(other) {
          this.x *= other.x;
          this.y *= other.y;
          this.z *= other.z;
      }
      /**
       * Divides two Vec3s and returns the result as a new Vec3.
       *
       * @param vec3 - The other Vec3 to divide by.
       * @return - Returns a new Vec3.
       */
      divide(vec3) {
          return new Vec3(this.x / vec3.x, this.y / vec3.y, this.z / vec3.z);
      }
      /**
       * Divides two Vec3s.
       *
       * @param vec3 - The other Vec3 to divide by.
       */
      divideInPlace(vec3) {
          this.x /= vec3.x;
          this.y /= vec3.y;
          this.z /= vec3.z;
      }
      /**
       * Scales this Vec3 by scalar and returns the result as a new Vec3.
       *
       * @param scalar - The scalar value.
       * @return - Returns a new Vec3.
       */
      scale(scalar) {
          return new Vec3(this.x * scalar, this.y * scalar, this.z * scalar);
      }
      /**
       * Scales this Vec3 by scalar.
       *
       * @param scalar - The scalar value.
       */
      scaleInPlace(scalar) {
          this.x *= scalar;
          this.y *= scalar;
          this.z *= scalar;
      }
      /**
       * Negates this Vec3 (x = -x, y = -y and z = -z), but returns the result as a new Vec3.
       *
       * @return - Returns a new Vec3.
       */
      negate() {
          return new Vec3(-this.x, -this.y, -this.z);
      }
      /**
       * Returns the inverse of this Vec3, but returns. the result as a new Vec3
       *
       * @return - Returns a new Vec3.
       */
      inverse() {
          return new Vec3(1.0 / this.x, 1.0 / this.y, 1.0 / this.z);
      }
      /**
       * Calculates the squared length of this Vec3.
       *
       * @return - Returns the length.
       */
      lengthSquared() {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          return x * x + y * y + z * z;
      }
      /**
       * Calculates the length of this Vec3.
       *
       * @return - Returns the length.
       */
      length() {
          return Math.sqrt(this.lengthSquared());
      }
      /**
       * Calculates the distance to another Vec3.
       *
       * @param other - The other Vec3 to calculate the distance to.
       * @return - Returns the distance between vectors.
       */
      distanceTo(other) {
          const x = this.x - other.x;
          const y = this.y - other.y;
          const z = this.z - other.z;
          return Math.sqrt(x * x + y * y + z * z);
      }
      /**
       * Normalizes the Vec3 and returns it as a new Vec3.
       * Multiplies coordinates value by the inverse of the vector length.
       *
       * @return - Returns the Vec3 normalized.
       */
      normalize() {
          let len = this.x * this.x + this.y * this.y + this.z * this.z;
          if (len < Number.EPSILON) {
              return new Vec3();
          }
          // TODO: evaluate use of glm_invsqrt here?
          len = 1.0 / Math.sqrt(len);
          return new Vec3(this.x * len, this.y * len, this.z * len);
      }
      /**
       * Normalizes this Vec3 multiplying coordinate values by the inverse of the vector length.
       *
       * @return - The return value.
       */
      normalizeInPlace() {
          let len = this.x * this.x + this.y * this.y + this.z * this.z;
          if (len < Number.EPSILON) {
              return;
          }
          len = Math.sqrt(len);
          const tmp = 1.0 / len;
          this.x *= tmp;
          this.y *= tmp;
          this.z *= tmp;
          return len;
      }
      /**
       * Creates and returns a new Vec3 with the new coordinates(calculated with this Vec3 coordinates and the specified length).
       *
       * @param length - The length value.
       * @return - The return value.
       */
      resize(length) {
          const currLen = this.x * this.x + this.y * this.y + this.z * this.z;
          if (currLen < Number.EPSILON) {
              return;
          }
          const scl = length / Math.sqrt(currLen);
          return new Vec3(this.x * scl, this.y * scl, this.z * scl);
      }
      /**
       * Modifies current coordinates using the specified length.
       *
       * @param length - The length value.
       */
      resizeInPlace(length) {
          const currLen = this.x * this.x + this.y * this.y + this.z * this.z;
          if (currLen < Number.EPSILON) {
              return;
          }
          const scl = length / Math.sqrt(currLen);
          this.x *= scl;
          this.y *= scl;
          this.z *= scl;
      }
      /**
       * Calculates the dot product of this Vec3 against another Vec3.
       *
       * @param other - The other Vec3 to compare with.
       * @return - Returns the dot product.
       */
      dot(other) {
          return this.x * other.x + this.y * other.y + this.z * other.z;
      }
      /**
       * Calculates the cross product of two Vec3s and returns the result as a new Vec3.
       *
       * @param other - The other Vec3 to calculate with.
       * @return - Returns the cross product as a new Vec3.
       */
      cross(other) {
          const ax = this.x;
          const ay = this.y;
          const az = this.z;
          const bx = other.x;
          const by = other.y;
          const bz = other.z;
          return new Vec3(ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx);
      }
      /**
       * Gets the angle between this Vec3 and b.
       *
       * @param other - The other Vec3 to compare with.
       * @return - Returns the angle in radians.
       */
      angleTo(other) {
          const cosine = this.dot(other);
          if (cosine > 1.0) {
              return 0;
          }
          else {
              return Math.acos(cosine);
          }
      }
      /**
       * Performs a linear interpolation between this Vec3 and other.
       *
       * @param other - The other Vec3 to interpolate towards.
       * @param t - Interpolation ratio.
       * @return - Returns a new Vec3.
       */
      lerp(other, t) {
          const ax = this.x;
          const ay = this.y;
          const az = this.z;
          return new Vec3(ax + t * (other.x - ax), ay + t * (other.y - ay), az + t * (other.z - az));
      }
      /**
       * Returns a new Vec3 whose component values are the abs of this Vec3s component values.
       *
       * @return - Returns a new Vec3.
       */
      abs() {
          return new Vec3(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z));
      }
      /**
       * Sets the vector a random vector on the surface of a sphere with the radius of the given scale value.
       *
       * @param scale - The radius of the surface sphere.
       * @return - The random Vec3.
       */
      setRandomDir(scale = 1.0) {
          const r = Math.random() * 2.0 * Math.PI;
          const z = Math.random() * 2.0 - 1.0;
          const zScale = Math.sqrt(1.0 - z * z) * scale;
          this.x = Math.cos(r) * zScale;
          this.y = Math.sin(r) * zScale;
          this.z = z * scale;
          return this;
      }
      /**
       * Generates a random vector anywhere in the sphere defined by the provided scale value.
       *
       * @param scale - The radius of the bounding sphere.
       * @return - The random Vec3.
       */
      setRandom(scale = 1.0) {
          this.x = (Math.random() - 0.5) * scale;
          this.y = (Math.random() - 0.5) * scale;
          this.z = (Math.random() - 0.5) * scale;
          return this;
      }
      /**
       * Clones this Vec3 and returns a new Vec3.
       *
       * @return - Returns a new Vec3.
       */
      clone() {
          return new Vec3(this.x, this.y, this.z);
      }
      /**
       * Returns the type as an array. Often used to pass types to the GPU.
       *
       * @return - Returns as an array.
       */
      asArray() {
          return [this.x, this.y, this.z];
      }
      /**
       * Setter from an array.
       */
      fromArray(vals) {
          this.x = vals[0];
          this.y = vals[1];
          this.z = vals[1];
      }
      // ///////////////////////////
      // Persistence
      /**
       * Converts this Vec3 to a string in JSON format.
       *
       * @return - The return value.
       */
      toString() {
          // eslint-disable-next-line new-cap
          return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());
      }
      /**
       * Encodes Vec3 Class as a JSON object for persistence.
       *
       * @return - The json object.
       */
      toJSON() {
          return {
              x: this.x,
              y: this.y,
              z: this.z,
          };
      }
      /**
       * Decodes a JSON object to set the state of this class.
       *
       * @param j - The json object.
       */
      fromJSON(j) {
          this.x = j.x;
          this.y = j.y;
          this.z = j.z;
      }
      /**
       * Loads the state of the value from a binary reader.
       *
       * @param reader - The reader value.
       */
      readBinary(reader) {
          this.x = reader.loadFloat32();
          this.y = reader.loadFloat32();
          this.z = reader.loadFloat32();
      }
      isValid() {
          for (const v of this.asArray()) {
              if (v == Infinity || isNaN(v))
                  return false;
          }
          return true;
      }
  }

  /* eslint-disable new-cap */
  /**
   * Represents a four-dimensional coordinate.
   * Math types internally store values in {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array|Float32Array} and
   * expose getters and setters for the component values.
   *
   */
  class Vec4 {
      x;
      y;
      z;
      w;
      /**
       * Creates a Vec4.
       *
       */
      constructor(x = 0, y = 0, z = 0, w = 0) {
          this.x = x;
          this.y = y;
          this.z = z;
          this.w = w;
      }
      /**
       * Getter for `xyz` swizzel.
       *
       * @return - Returns the z value.
       */
      get xyz() {
          return new Vec3(this.x, this.y, this.z);
      }
      /**
       * Setter from scalar components.
       *
       * @param x - The x value.
       * @param y  - The y value.
       * @param z  - The y value.
       * @param w  - The w value.
       */
      set(x, y, z, w) {
          this.x = x;
          this.y = y;
          this.z = z;
          this.w = w;
      }
      /**
       * Sets the state of a Vec4 Object from another Vec4.
       *
       * @param other - The other Vec4 to set from.
       */
      setFromOther(other) {
          this.x = other.x;
          this.y = other.y;
          this.z = other.z;
          this.w = other.w;
      }
      /**
       * Checks if this Vec4 contains the same values as the other Vec4.
       *
       * @param other - The other Vec4 to compare with.
       * @return - Returns true or false.
       */
      isEqual(other) {
          return this.x == other.x && this.y == other.y && this.z == other.z && this.w == other.w;
      }
      /**
       * Checks if this Vec4 is different from another Vec4.
       *
       * @param other - The other Vec4 to compare with.
       * @return - Returns true or false.
       */
      notEqual(other) {
          return this.x != other.x && this.y != other.y && this.z != other.z && this.w != other.w;
      }
      /**
       * Returns true if this Vec4 is approximately the same as other.
       *
       * @param other - The other Vec4 to compare with.
       * @param precision - The precision to which the values must match.
       * @return - The return value.
       */
      approxEqual(other, precision = Number.EPSILON) {
          return (Math.abs(this.x - other.x) < precision &&
              Math.abs(this.y - other.y) < precision &&
              Math.abs(this.z - other.z) < precision &&
              Math.abs(this.w - other.w) < precision);
      }
      /**
       * Adds other to this Vec4 and returns the result as a new Vec4.
       *
       * @param other - The other Vec4 to add.
       * @return - Returns a new Vec4.
       */
      add(other) {
          return new Vec4(this.x + other.x, this.y + other.y, this.z + other.z, this.w + other.w);
      }
      /**
       * Adds other to this Vec4 mutating the values of this instance
       *
       * @param other - The other Vec4 to add.
       */
      addInPlace(other) {
          this.x += other.x;
          this.y += other.y;
          this.z += other.z;
          this.w += other.w;
      }
      /**
       * Subtracts other from this Vec4 and returns then result as a new Vec4.
       *
       * @param other - The other Vec4 to subtract.
       * @return - Returns a new Vec4.
       */
      subtract(other) {
          return new Vec4(this.x - other.x, this.y - other.y, this.z - other.z, this.w - other.w);
      }
      /**
       * Subtracts other from this Vec4 mutating the values of this instance
       *
       * @param other - The other Vec4 to subtract.
       */
      subtractInPlace(other) {
          this.x -= other.x;
          this.y -= other.y;
          this.z -= other.z;
          this.w -= other.w;
      }
      /**
       * Multiplies two Vec4s and returns the result as a new Vec4.
       *
       * @param other - The other Vec4 to multiply with.
       * @return - Returns a new Vec4.
       */
      multiply(other) {
          return new Vec4(this.x * other.x, this.y * other.y, this.z * other.z, this.w * other.w);
      }
      /**
       * Multiplies two Vec4s mutating the values of this instance
       *
       * @param other - The other Vec4 to multiply with.
       */
      multiplyInPlace(other) {
          this.x *= other.x;
          this.y *= other.y;
          this.z *= other.z;
          this.w *= other.w;
      }
      /**
       * Divides two Vec4s and returns the result as a new Vec4.
       *
       * @param other - The other Vec4 to divide by.
       * @return - Returns a new Vec4.
       */
      divide(other) {
          return new Vec4(this.x / other.x, this.y / other.y, this.z / other.z, this.w / other.w);
      }
      /**
       * Divides two Vec4s.
       *
       * @param other - The other Vec4 to divide by.
       */
      divideInPlace(other) {
          this.x /= other.x;
          this.y /= other.y;
          this.z /= other.z;
          this.w /= other.w;
      }
      /**
       * Scales this Vec4 by scalar and returns the result as a new Vec4.
       *
       * @param scalar - The scalar value.
       * @return - The return value.
       */
      scale(scalar) {
          return new Vec4(this.x * scalar, this.y * scalar, this.z * scalar, this.w * scalar);
      }
      /**
       * Scales this Vec4 by scalar.
       *
       * @param scalar - The scalar value.
       */
      scaleInPlace(scalar) {
          this.set(this.x * scalar, this.y * scalar, this.z * scalar, this.w * scalar);
      }
      /**
       * Calculates the length of this Vec4.
       *
       * @return - Returns the length.
       */
      length() {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          const w = this.w;
          return Math.sqrt(x * x + y * y + z * z + w * w);
      }
      /**
       * Calculates the squared length of this Vec4.
       *
       * @return - Returns the length.
       */
      lengthSquared() {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          const w = this.w;
          return x * x + y * y + z * z + w * w;
      }
      /**
       * Normalizes the Vec4 and returns it as a new Vec4.
       * Multiplies coordinates value by the inverse of the vector length.
       *
       * @return - Returns the Vec4 normalized.
       */
      normalize() {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          const w = this.w;
          let len = x * x + y * y + z * z + w * w;
          if (len < Number.EPSILON) {
              return new Vec4();
          }
          // TODO: evaluate use of glm_invsqrt here?
          len = 1 / Math.sqrt(len);
          return new Vec4(x * len, y * len, z * len);
      }
      /**
       * Normalizes this Vec4 multiplying coordinate values by the inverse of the vector length.
       */
      normalizeInPlace() {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          const w = this.w;
          let len = x * x + y * y + z * z + w * w;
          if (len < Number.EPSILON) {
              return;
          }
          len = 1 / Math.sqrt(len);
          this.set(x * len, y * len, z * len, w * len);
      }
      /**
       * Calculates the dot product of this Vec4 against another Vec4.
       *
       * @param other - The other Vec4 to compare with.
       * @return - Returns the dot product.
       */
      dot(other) {
          return this.x * other.x + this.y * other.y + this.z * other.z + this.w * other.w; // TODO: other.w used to be b.w?
      }
      /**
       * Calculates the cross product of two Vec4s and returns the result as a new Vec4.
       *
       * @param other - The other Vec4 to calculate with.
       * @return - Returns the cross product as a new Vec4.
       */
      cross(other) {
          const ax = this.x;
          const ay = this.y;
          const az = this.z;
          const at = this.w;
          const bx = other.x;
          const by = other.y;
          const bz = other.z;
          const bt = other.w;
          return new Vec4(ay * bz - az * by, az * bt - at * bz, at * bx - ax * bt, ax * by - ay * bx);
      }
      /**
       * Gets the angle between this Vec4 and b.
       *
       * @param other - The other Vec4 to compare with.
       * @return - Returns the angle in radians.
       */
      angleTo(other) {
          const tempA = this.normalize();
          const tempB = other.normalize();
          const cosine = tempA.dot(tempB);
          if (cosine > 1.0) {
              return 0;
          }
          else {
              return Math.acos(cosine);
          }
      }
      /**
       * Performs a linear interpolation between this Vec4 and other.
       *
       * @param other - The other Vec4 to interpolate between.
       * @param w - Interpolation amount between the two inputs.
       * @return - Returns a new Vec4.
       */
      lerp(other, t) {
          const ax = this.x;
          const ay = this.y;
          const az = this.z;
          const at = this.w;
          return new Vec4(ax + t * (other.x - ax), ay + t * (other.y - ay), az + t * (other.z - az), at + t * (other.w - at));
      }
      /**
       * Generates a random vector with the given scale.
       *
       * @param scale - Length of the resulting vector. If omitted, a unit vector will be returned.
       * @return - The return value.
       */
      // random(scale = 1.0) {
      //   const r = glMatrix.RANDOM() * 2.0 * Math.PI
      //   const z = glMatrix.RANDOM() * 2.0 - 1.0
      //   const zScale = Math.sqrt(1.0 - z * z) * scale
      //   out[0] = Math.cos(r) * zScale
      //   out[1] = Math.sin(r) * zScale
      //   out[2] = z * scale
      //   return out
      // }
      /**
       * Clones this Vec4 and returns a new Vec4.
       *
       * @return - Returns a new Vec4.
       */
      clone() {
          return new Vec4(this.x, this.y, this.z, this.w);
      }
      /**
       * Converts this Vec4 into a Vec3.
       *
       * @return - Returns the value as a new Vec3.
       */
      toVec3() {
          return new Vec3(this.x, this.y, this.z);
      }
      /**
       * Returns the type as an array. Often used to pass types to the GPU.
       *
       * @return - Returns as an array.
       */
      asArray() {
          return [this.x, this.y, this.z, this.w];
      }
      /**
       * Setter from an array.
       */
      fromArray(vals) {
          this.x = vals[0];
          this.y = vals[1];
          this.z = vals[1];
          this.w = vals[1];
      }
      // ///////////////////////////
      // Persistence
      /**
       * Converts this Vec3 to a string in JSON format.
       *
       * @return - The return value.
       */
      toString() {
          // eslint-disable-next-line new-cap
          return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());
      }
      /**
       * The toJSON method encodes this type as a json object for persistence.
       * @return - The json object.
       */
      toJSON() {
          return {
              x: this.x,
              y: this.y,
              z: this.z,
              w: this.w,
          };
      }
      /**
       * Decodes a JSON object to set the state of this class.
       *
       * @param j - The json object.
       */
      fromJSON(j) {
          this.x = j.x;
          this.y = j.y;
          this.z = j.z;
          this.w = j.w;
      }
      /**
       * Loads the state of the value from a binary reader.
       *
       * @param reader - The reader value.
       */
      readBinary(reader) {
          this.x = reader.loadFloat32();
          this.y = reader.loadFloat32();
          this.z = reader.loadFloat32();
          this.w = reader.loadFloat32();
      }
      /**
       * Verifies if the values stored in this Math type are valid numeric values.
       * Returns `false` If at least one of the values is either {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Referencia/Objetos_globales/Infinity|Infinity} or
       * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Referencia/Objetos_globales/NaN|NaN}.
       *
       * @return - Returns the result as a boolean.
       */
      isValid() {
          for (const v of this.asArray()) {
              if (v == Infinity || isNaN(v))
                  return false;
          }
          return true;
      }
  }

  /* eslint-disable require-jsdoc */
  /**
   * Class representing the red, green, blue and alpha channel of a color as 8bit values.
   *
   */
  class RGBA {
      r = 0;
      g = 0;
      b = 0;
      a = 255;
      /**
       * Create a RGBA.
       * @param r - The red channel of a color.
       * @param g - The green channel of a color.
       * @param b - The blue channel of a color.
       * @param a - The alpha (transparency) channel of a color.
       */
      constructor(r = 0, g = 0, b = 0, a = 255) {
          if (typeof r == 'string') {
              if (r.startsWith('#')) {
                  this.setFromHex(r);
              }
              else {
                  this.setFromCSSColorName(r);
              }
          }
          else {
              this.r = r;
              this.g = g;
              this.b = b;
              this.a = a;
          }
      }
      /**
       * Setter from scalar components.
       *
       * @param r - The red channel.
       * @param g  - The green channel.
       * @param b  - The blue channel.
       * @param a  - The alpha channel.
       */
      set(r, g, b, a = 255) {
          this.r = r;
          this.g = g;
          this.b = b;
          this.a = a;
      }
      /**
       * Setter from another RGBA color.
       *
       * @param other - The other RGBA to set from.
       */
      setFromOther(other) {
          this.r = other.r;
          this.g = other.g;
          this.b = other.b;
          this.a = other.a;
      }
      /**
       * Setter from a scalar array.
       *
       * @param values - The array of values.
       */
      setFromArray(values) {
          this.r = values[0];
          this.g = values[1];
          this.b = values[2];
          this.a = values.length == 4 ? values[3] : 1.0;
      }
      /**
       * Setter from a hexadecimal value.
       * E.g. #ff0000
       *
       * @param hex - The hex value.
       */
      setFromHex(hex) {
          function hexToRgb(hex) {
              const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
              return result
                  ? {
                      r: parseInt(result[1], 16),
                      g: parseInt(result[2], 16),
                      b: parseInt(result[3], 16),
                  }
                  : null;
          }
          const rgb = hexToRgb(hex);
          if (!rgb) {
              console.warn('Invalid hex code:' + hex);
              return;
          }
          this.set(rgb.r, rgb.g, rgb.b);
      }
      /**
       * Setter from a CSS color name.
       * E.g. "red"
       *
       * @param name - The CSS color name.
       */
      setFromCSSColorName(name) {
          const colourNameToHex = (colour) => {
              const colors = {
                  aliceblue: '#f0f8ff',
                  antiquewhite: '#faebd7',
                  aqua: '#00ffff',
                  aquamarine: '#7fffd4',
                  azure: '#f0ffff',
                  beige: '#f5f5dc',
                  bisque: '#ffe4c4',
                  black: '#000000',
                  blanchedalmond: '#ffebcd',
                  blue: '#0000ff',
                  blueviolet: '#8a2be2',
                  brown: '#a52a2a',
                  burlywood: '#deb887',
                  cadetblue: '#5f9ea0',
                  chartreuse: '#7fff00',
                  chocolate: '#d2691e',
                  coral: '#ff7f50',
                  cornflowerblue: '#6495ed',
                  cornsilk: '#fff8dc',
                  crimson: '#dc143c',
                  cyan: '#00ffff',
                  darkblue: '#00008b',
                  darkcyan: '#008b8b',
                  darkgoldenrod: '#b8860b',
                  darkgray: '#a9a9a9',
                  darkgreen: '#006400',
                  darkkhaki: '#bdb76b',
                  darkmagenta: '#8b008b',
                  darkolivegreen: '#556b2f',
                  darkorange: '#ff8c00',
                  darkorchid: '#9932cc',
                  darkred: '#8b0000',
                  darksalmon: '#e9967a',
                  darkseagreen: '#8fbc8f',
                  darkslateblue: '#483d8b',
                  darkslategray: '#2f4f4f',
                  darkturquoise: '#00ced1',
                  darkviolet: '#9400d3',
                  deeppink: '#ff1493',
                  deepskyblue: '#00bfff',
                  dimgray: '#696969',
                  dodgerblue: '#1e90ff',
                  firebrick: '#b22222',
                  floralwhite: '#fffaf0',
                  forestgreen: '#228b22',
                  fuchsia: '#ff00ff',
                  gainsboro: '#dcdcdc',
                  ghostwhite: '#f8f8ff',
                  gold: '#ffd700',
                  goldenrod: '#daa520',
                  gray: '#808080',
                  green: '#008000',
                  greenyellow: '#adff2f',
                  honeydew: '#f0fff0',
                  hotpink: '#ff69b4',
                  'indianred ': '#cd5c5c',
                  indigo: '#4b0082',
                  ivory: '#fffff0',
                  khaki: '#f0e68c',
                  lavender: '#e6e6fa',
                  lavenderblush: '#fff0f5',
                  lawngreen: '#7cfc00',
                  lemonchiffon: '#fffacd',
                  lightblue: '#add8e6',
                  lightcoral: '#f08080',
                  lightcyan: '#e0ffff',
                  lightgoldenrodyellow: '#fafad2',
                  lightgrey: '#d3d3d3',
                  lightgreen: '#90ee90',
                  lightpink: '#ffb6c1',
                  lightsalmon: '#ffa07a',
                  lightseagreen: '#20b2aa',
                  lightskyblue: '#87cefa',
                  lightslategray: '#778899',
                  lightsteelblue: '#b0c4de',
                  lightyellow: '#ffffe0',
                  lime: '#00ff00',
                  limegreen: '#32cd32',
                  linen: '#faf0e6',
                  magenta: '#ff00ff',
                  maroon: '#800000',
                  mediumaquamarine: '#66cdaa',
                  mediumblue: '#0000cd',
                  mediumorchid: '#ba55d3',
                  mediumpurple: '#9370d8',
                  mediumseagreen: '#3cb371',
                  mediumslateblue: '#7b68ee',
                  mediumspringgreen: '#00fa9a',
                  mediumturquoise: '#48d1cc',
                  mediumvioletred: '#c71585',
                  midnightblue: '#191970',
                  mintcream: '#f5fffa',
                  mistyrose: '#ffe4e1',
                  moccasin: '#ffe4b5',
                  navajowhite: '#ffdead',
                  navy: '#000080',
                  oldlace: '#fdf5e6',
                  olive: '#808000',
                  olivedrab: '#6b8e23',
                  orange: '#ffa500',
                  orangered: '#ff4500',
                  orchid: '#da70d6',
                  palegoldenrod: '#eee8aa',
                  palegreen: '#98fb98',
                  paleturquoise: '#afeeee',
                  palevioletred: '#d87093',
                  papayawhip: '#ffefd5',
                  peachpuff: '#ffdab9',
                  peru: '#cd853f',
                  pink: '#ffc0cb',
                  plum: '#dda0dd',
                  powderblue: '#b0e0e6',
                  purple: '#800080',
                  rebeccapurple: '#663399',
                  red: '#ff0000',
                  rosybrown: '#bc8f8f',
                  royalblue: '#4169e1',
                  saddlebrown: '#8b4513',
                  salmon: '#fa8072',
                  sandybrown: '#f4a460',
                  seagreen: '#2e8b57',
                  seashell: '#fff5ee',
                  sienna: '#a0522d',
                  silver: '#c0c0c0',
                  skyblue: '#87ceeb',
                  slateblue: '#6a5acd',
                  slategray: '#708090',
                  snow: '#fffafa',
                  springgreen: '#00ff7f',
                  steelblue: '#4682b4',
                  tan: '#d2b48c',
                  teal: '#008080',
                  thistle: '#d8bfd8',
                  tomato: '#ff6347',
                  turquoise: '#40e0d0',
                  violet: '#ee82ee',
                  wheat: '#f5deb3',
                  white: '#ffffff',
                  whitesmoke: '#f5f5f5',
                  yellow: '#ffff00',
                  yellowgreen: '#9acd32',
              };
              return colors[colour.toLowerCase()];
          };
          if (name.startsWith('#')) {
              this.setFromHex(name);
          }
          else {
              const hexColor = colourNameToHex(name);
              if (hexColor)
                  this.setFromHex(hexColor);
          }
      }
      /**
       * Returns the hexadecimal value of this RGBA color.
       *
       * @return - Returns the hex value.
       */
      toHex() {
          function componentToHex(int) {
              const hex = int.toString(16);
              return hex.length == 1 ? '0' + hex : hex;
          }
          return '#' + componentToHex(this.r) + componentToHex(this.g) + componentToHex(this.b);
      }
      /**
       * Returns true if this RGBA color is exactly the same as other.
       *
       * @param other - The other RGBA to compare with.
       * @return - Returns true or false.
       */
      equal(other) {
          return this.r == other.r && this.g == other.g && this.b == other.b && this.a == other.a;
      }
      /**
       * Returns true if this RGBA color is NOT exactly the same as other.
       *
       * @param other -  The other RGBA to compare with.
       * @return - Returns true or false.
       */
      notEquals(other) {
          return this.r != other.r && this.g != other.g && this.b != other.b && this.a != other.a;
      }
      /**
       * Returns true if this RGBA color is approximately the same as other.
       *
       * @param other - The other RGBA to compare with.
       * @param precision - The precision to which the values must match.
       * @return - Returns true or false.
       */
      approxEqual(other, precision = Number.EPSILON) {
          return (Math.abs(this.r - other.r) < precision &&
              Math.abs(this.g - other.g) < precision &&
              Math.abs(this.b - other.b) < precision &&
              Math.abs(this.a - other.a) < precision);
      }
      /**
       * Returns a new RGBA color which is this RGBA color added to other.
       *
       * @param other - The other RGBA to add.
       * @return - Returns a new RGBA.
       */
      add(other) {
          return new RGBA(this.r + other.r, this.g + other.g, this.b + other.b, this.a + other.a);
      }
      /**
       * Returns a new RGBA color which is this RGBA color subtracted from other.
       *
       * @param other - The other RGBA to subtract.
       * @return - Returns a new RGBA.
       */
      subtract(other) {
          return new RGBA(this.r - other.r, this.g - other.g, this.b - other.b, this.a - other.a);
      }
      /**
       * Returns a new RGBA color which is this vector scaled by scalar.
       *
       * @param scalar - The scalar value.
       * @return - Returns a new RGBA.
       */
      scale(scalar) {
          return new RGBA(this.r * scalar, this.g * scalar, this.b * scalar, this.a * scalar);
      }
      /**
       * Scales this RGBA color by scalar.
       *
       * @param scalar - The scalar value.
       */
      scaleInPlace(scalar) {
          this.r *= scalar;
          this.g *= scalar;
          this.b *= scalar;
          this.a *= scalar;
      }
      /**
       * Apply gamma correction to this RGBA color.
       *
       * @param gamma - The gamma value.
       */
      applyGamma(gamma) {
          this.set(Math.pow(this.r, gamma), Math.pow(this.g, gamma), Math.pow(this.b, gamma), this.a);
      }
      /**
       * Converts to linear color space and returns a new color.
       * @param gamma - The gamma value.
       * @return - Returns a new RGBA.
       */
      toLinear(gamma = 2.2) {
          return new RGBA(Math.pow(this.r, gamma), Math.pow(this.g, gamma), Math.pow(this.b, gamma), this.a);
      }
      /**
       * Converts to gamma color space and returns a new RGBA color.
       *
       * @param gamma - The gamma value.
       * @return - Returns a new RGBA.
       */
      toGamma(gamma = 2.2) {
          return new RGBA(Math.pow(this.r, 1.0 / gamma), Math.pow(this.g, 1.0 / gamma), Math.pow(this.b, 1.0 / gamma), this.a);
      }
      /**
       * Calculates and returns the relative luminance of the linear RGB component.
       *
       * @return - The return value.
       */
      luminance() {
          return 0.2126 * this.r + 0.7152 * this.g + 0.0722 * this.b;
      }
      /**
       * Performs a linear interpolation between this RGBA color and other.
       *
       * @param other - The other RGBA to interpolate between.
       * @param t - Interpolation amount between the two inputs.
       * @return - Returns a new RGBA.
       */
      lerp(other, t) {
          const ar = this.r;
          const ag = this.g;
          const ab = this.b;
          const aa = this.a;
          return new RGBA(ar + t * (other.r - ar), ag + t * (other.g - ag), ab + t * (other.b - ab), aa + t * (other.a - aa));
      }
      /**
       * Creates a random RGBA.
       *
       * @param gammaOffset - The gamma offset.
       * @param randomAlpha - Determines whether the alpha channel is random.
       * @return - Returns a new random RGBA.
       */
      static random(gammaOffset = 0.0, randomAlpha = false) {
          if (gammaOffset > 0.0) {
              return new RGBA(gammaOffset + Math.random() * (1.0 - gammaOffset), gammaOffset + Math.random() * (1.0 - gammaOffset), gammaOffset + Math.random() * (1.0 - gammaOffset), randomAlpha ? gammaOffset + Math.random() * (1.0 - gammaOffset) : 1.0);
          }
          else if (gammaOffset < 0.0) {
              return new RGBA(Math.random() * (1.0 + gammaOffset), Math.random() * (1.0 + gammaOffset), Math.random() * (1.0 + gammaOffset), randomAlpha ? Math.random() * (1.0 + gammaOffset) : 1.0);
          }
          else {
              return new RGBA(Math.random(), Math.random(), Math.random(), randomAlpha ? Math.random() : 1.0);
          }
      }
      /**
       * Clones this RGBA color and returns a new RGBA color.
       *
       * @return - Returns a new RGBA.
       */
      clone() {
          return new RGBA(this.r, this.g, this.b, this.a);
      }
      /**
       * Returns the type as an array. Often used to pass types to the GPU.
       *
       * @return - Returns as an array.
       */
      asArray() {
          return [this.r, this.g, this.b, this.a];
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @return - The json object.
       */
      toJSON() {
          return {
              r: this.r,
              g: this.g,
              b: this.b,
              a: this.a,
          };
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object.
       */
      fromJSON(j) {
          this.r = j.r;
          this.g = j.g;
          this.b = j.b;
          this.a = j.a;
      }
      /**
       * Returns the CSS rgba string.
       *
       * @return - The return value.
       */
      toCSSString() {
          return ('rgba(' +
              Math.round(this.r * 255) +
              ', ' +
              Math.round(this.g * 255) +
              ', ' +
              Math.round(this.b * 255) +
              ', ' +
              this.a +
              ')');
      }
  }

  /* eslint-disable @typescript-eslint/no-explicit-any */
  let counter$1 = 0;
  /**
   * Class representing a BaseClass.
   * The BaseClass is the foundation class of the SceneTree, as almost all classes derive from it.
   */
  class BaseClass {
      __id;
      /**
       * Create an BaseClass.
       */
      constructor() {
          this.__id = ++counter$1;
      }
      /**
       * Every instance of each class based on BaseClass is assigned a unique number.
       * This number is not persistent in between different loads of a scene.
       * Returns the unique id of the object.
       * @return - The Id of the object.
       */
      getId() {
          return this.__id;
      }
      /**
       * Returns the unmangled name of the class.
       * @return - The name of the class definition.
       */
      getClassName() {
          return Registry.getClassName(Object.getPrototypeOf(this).constructor);
      }
  }

  /** Class representing a BaseEvent. */
  class BaseEvent {
      /**
       * Create an BaseEvent.
       */
      constructor() { }
  }

  /* eslint-disable @typescript-eslint/no-explicit-any */
  /**
   * Provides an interface for emitting events under given names, and registering listeners to those events.
   * This is a base class for most classes in the Scene Tree and Renderer, enabling observers to listen to changes throughout the system.
   * The interface exposed is similar to [EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter) in Node.
   *
   * Similar to how the DOM event system in the browser works, events are registered by name.
   * Example: Registering a listener for a custom event, and then emitting that event.
   * ```javascript
   *  const ee = new EventEmitter()
   *
   *  const eventID = ee.on('myEvent', (event) => {
   *    console.log('My Event was emitted:', event)
   *  })
   *
   *  ee.emit('myEvent', { data: 42 })
   *  // We no longer want to listen to this event, so let's remove the listener.
   *  ee.off('myEvent', eventID)
   * ```
   *
   *
   */
  class EventEmitter extends BaseClass {
      listeners = {};
      /**
       * Initializes an empty `listeners` map that will host all the events,
       * which implies that it doesn't allow multiple events with the same name.
       *
       */
      constructor() {
          super();
      }
      /**
       * Adds a listener function for a given event name.
       *
       * @param eventName - The name of the event.
       * @param listener - The listener function(callback).
       * @return - the id that can be used to remove the listener.
       */
      on(eventName, listener) {
          if (!listener) {
              throw new Error('Missing listener.');
          }
          if (!this.listeners[eventName]) {
              this.listeners[eventName] = [];
          }
          const listeners = this.listeners[eventName];
          if (listeners.includes(listener)) {
              throw new Error(`Listener "${listener.name}" already connected to event "${eventName}".`);
          }
          // TODO: Deprecate alongside #addListener.
          const id = listeners.length;
          listeners[id] = listener;
          return id;
      }
      /**
       * Similar to the `on` method with the difference that when the event is triggered,
       * it is automatically unregistered meaning that the event listener will be triggered at most one time.
       *
       * Useful for events that we expect to trigger one time, such as when assets load.
       * ```javascript
       * const asset = new Asset();
       * asset.once('loaded', () => {
       *   console.log("Yay! the asset is loaded")
       * })
       * ```
       *
       * @param eventName - The eventName value
       * @param listener - The listener value
       * @return - the id that can be used to remove the listener.
       */
      once(eventName, listener) {
          const cb = (event) => {
              this.off(eventName, cb);
              listener(event);
          };
          return this.on(eventName, cb);
      }
      /**
       * Removes a listener from the specified event, using either the function or the index id. Depends on what is passed in.
       *
       * @param eventName - The name of the event.
       * @param listenerOrId - The listener function or the id number returned by 'on'.
       */
      off(eventName, listenerOrId) {
          if (listenerOrId == undefined) {
              throw new Error('Missing callback function (listener).');
          }
          const listeners = this.listeners[eventName] || [];
          if (typeof listenerOrId == 'number') {
              const id = listenerOrId;
              // Note: do not splice the array as that would change the indexes of existing listeners.
              listeners[id] = null;
              return;
          }
          const listener = listenerOrId;
          listeners.forEach((e, i) => {
              if (e === listener) {
                  // Note: do not splice the array as that would change the indexes of existing listeners.
                  listeners[i] = null;
              }
          });
      }
      /**
       * remove listener by ID returned from #on
       *
       * @param eventName - The name of the event.
       * @param id - The id returned by addListener
       */
      removeListenerById(eventName, id) {
          this.off(eventName, id);
      }
      /**
       * Triggers all listener functions in an event.
       *
       * @param eventName - The name of the event.
       * @param event - The data you want to pass down to all listener functions as parameter.
       *
       */
      emit(eventName, event = new BaseEvent()) {
          const listeners = this.listeners[eventName] || [];
          listeners.forEach((fn) => {
              // Skip disconnected listeners.
              if (fn) {
                  fn(event);
              }
          });
      }
  }

  class ResizedEvent extends BaseEvent {
      width;
      height;
      constructor(newWidth, newHeight) {
          super();
          this.width = newWidth;
          this.height = newHeight;
      }
  }

  // Taken from here: https://github.com/jakesgordon/bin-packing/blob/master/js/packer.growing.js
  /******************************************************************************

  This is a binary tree based bin packing algorithm that is more complex than
  the simple Packer (packer.js). Instead of starting off with a fixed width and
  height, it starts with the width and height of the first block passed and then
  grows as necessary to accommodate each subsequent block. As it grows it attempts
  to maintain a roughly square ratio by making 'smart' choices about whether to
  grow right or down.

  When growing, the algorithm can only grow to the right OR down. Therefore, if
  the new block is BOTH wider and taller than the current target then it will be
  rejected. This makes it very important to initialize with a sensible starting
  width and height. If you are providing sorted input (largest first) then this
  will not be an issue.

  A potential way to solve this limitation would be to allow growth in BOTH
  directions at once, but this requires maintaining a more complex tree
  with 3 children (down, right and center) and that complexity can be avoided
  by simply choosing a sensible starting block.

  Best results occur when the input blocks are sorted by height, or even better
  when sorted by max(width,height).

  Inputs:
  ------

    blocks: array of any objects that have .w and .h attributes

  Outputs:
  -------

    marks each block that fits with a .fit attribute pointing to a
    node with .x and .y coordinates

  Example:
  -------

    var blocks = [
      { w: 100, h: 100 },
      { w: 100, h: 100 },
      { w:  80, h:  80 },
      { w:  80, h:  80 },
      etc
      etc
    ];

    var packer = new GrowingPacker();
    packer.fit(blocks);

    for(var n = 0 ; n < blocks.length ; n++) {
      var block = blocks[n];
      if (block.fit) {
        Draw(block.fit.x, block.fit.y, block.w, block.h);
      }
    }


  ******************************************************************************/
  class GrowingPacker extends EventEmitter {
      root;
      constructor(w = 0, h = 0) {
          super();
          this.root = {
              x: 0,
              y: 0,
              w: w,
              h: h,
          };
      }
      fit(blocks) {
          const len = blocks.length;
          if (len == 0)
              return;
          let resized = false;
          if (this.root.w < blocks[0].w) {
              this.root.w = blocks[0].w;
              resized = true;
          }
          if (this.root.h < blocks[0].h) {
              this.root.h = blocks[0].h;
              resized = true;
          }
          if (resized) {
              const event = new ResizedEvent(this.root.w, this.root.h);
              this.emit('resized', event);
          }
          const eachBlock = (block) => {
              block.fit = this.__addBlock(block);
          };
          blocks.forEach(eachBlock);
      }
      __addBlock(block) {
          const node = this.findNode(this.root, block.w, block.h);
          if (node)
              return this.splitNode(node, block.w, block.h);
          else
              return this.growNode(block.w, block.h);
      }
      addBlock(block) {
          let resized = false;
          if (this.root.w < block.w) {
              this.root.w = block.w;
              resized = true;
          }
          if (this.root.h < block.h) {
              this.root.h = block.h;
              resized = true;
          }
          if (resized) {
              const event = new ResizedEvent(this.root.w, this.root.h);
              this.emit('resized', event);
          }
          const node = this.findNode(this.root, block.w, block.h);
          if (node)
              return this.splitNode(node, block.w, block.h);
          else
              return this.growNode(block.w, block.h);
      }
      findNode(root, w, h) {
          if (root.used)
              return this.findNode(root.right, w, h) || this.findNode(root.down, w, h);
          else if (w <= root.w && h <= root.h)
              return root;
          else
              return null;
      }
      splitNode(node, w, h) {
          node.used = true;
          node.down = {
              x: node.x,
              y: node.y + h,
              w: node.w,
              h: node.h - h,
          };
          node.right = {
              x: node.x + w,
              y: node.y,
              w: node.w - w,
              h: h,
          };
          return node;
      }
      growNode(w, h) {
          const canGrowDown = w <= this.root.w;
          const canGrowRight = h <= this.root.h;
          const shouldGrowRight = canGrowRight && this.root.h >= this.root.w + w; // attempt to keep square-ish by growing right when height is much greater than width
          const shouldGrowDown = canGrowDown && this.root.w >= this.root.h + h; // attempt to keep square-ish by growing down  when width  is much greater than height
          if (shouldGrowRight)
              return this.growRight(w, h);
          else if (shouldGrowDown)
              return this.growDown(w, h);
          else if (canGrowRight)
              return this.growRight(w, h);
          else if (canGrowDown)
              return this.growDown(w, h);
          else
              return null; // need to ensure sensible root starting size to avoid this happening
      }
      growRight(w, h) {
          this.root = {
              used: true,
              x: 0,
              y: 0,
              w: this.root.w + w,
              h: this.root.h,
              down: this.root,
              right: {
                  x: this.root.w,
                  y: 0,
                  w: w,
                  h: this.root.h,
              },
          };
          const node = this.findNode(this.root, w, h);
          let res;
          if (node)
              res = this.splitNode(node, w, h);
          const event = new ResizedEvent(this.root.w, this.root.h);
          this.emit('resized', event);
          return res;
      }
      growDown(w, h) {
          this.root = {
              used: true,
              x: 0,
              y: 0,
              w: this.root.w,
              h: this.root.h + h,
              down: {
                  x: 0,
                  y: this.root.h,
                  w: this.root.w,
                  h: h,
              },
              right: this.root,
          };
          const node = this.findNode(this.root, w, h);
          let res;
          if (node)
              res = this.splitNode(node, w, h);
          const event = new ResizedEvent(this.root.w, this.root.h);
          this.emit('resized', event);
          return res;
      }
  }

  /* eslint-disable @typescript-eslint/no-explicit-any */
  /* eslint-disable @typescript-eslint/explicit-module-boundary-types */
  const UInt8 = 0;
  const SInt8 = 1;
  const UInt16 = 2;
  const SInt16 = 3;
  const UInt32 = 4;
  const SInt32 = 5;
  const Float32 = 6;
  /**
   * Math Functions
   */
  class MathFunctions {
      /**
       * Converts Radians to Degrees
       *
       * @static
       * @param rad - Radians value
       * @return - Degrees equivalent
       */
      static radToDeg(rad) {
          return rad / (Math.PI / 180);
      }
      /**
       * Converts Degrees to Radiants
       *
       * @static
       * @param deg - Degrees value
       * @return -  Radians equivalent
       */
      static degToRad(deg) {
          return deg * (Math.PI / 180);
      }
      /**
       * Verifies if the specified parameter is numeric.
       *
       * @static
       * @param number - Number to test
       * @return - `true` when is a valid number
       */
      static isNumeric(number) {
          return !isNaN(parseFloat(number)) && isFinite(number);
      }
      /**
       * Generates and returns a random integer within the specified range.
       *
       * @static
       * @param min - Lower value random int can be.
       * @param max - Highest value random int can be.
       * @return - Random number inside range.
       */
      static randomInt(min, max) {
          min = Math.ceil(min);
          max = Math.floor(max);
          return Math.floor(Math.random() * (max - min)) + min;
      }
      /**
       * Calculates a lineal interpolation between two inputs for the specified parameter(t).
       *
       * @static
       * @param v0 -
       * @param v1 -
       * @param t -
       * @return -
       */
      static lerp(v0, v1, t) {
          return v0 + t * (v1 - v0);
      }
      /**
       * Restricts the specified value between two numbers
       *
       * @static
       * @param value
       * @param min
       * @param max
       * @return
       */
      static clamp(value, min, max) {
          return Math.min(Math.max(value, min), max);
      }
      /**
       * Returns the nearest pow of two value of the specified number.
       *
       * @static
       * @param value -
       * @return -
       */
      static nearestPow2(value) {
          return Math.pow(2, Math.round(Math.log(value) / Math.log(2)));
      }
      /**
       * Returns the nearest pow of ten value of the specified number.
       *
       * @static
       * @param value -
       * @return -
       */
      static nearestPow10(value) {
          return Math.pow(10, Math.round(Math.log10(value) / Math.log10(10)));
      }
      /**
       * Returns the next pow of two value of the specified number.
       *
       * @static
       * @param value -
       * @return -
       */
      static nextPow2(value) {
          if (this.fract(Math.log2(value)) == 0) {
              return value;
          }
          let exp = 0;
          while (value > 0) {
              exp++;
              value = value >> 1;
          }
          return 1 << exp;
      }
      /**
       * Returns the fractional component of a number
       *
       * @static
       * @param value -
       * @return -
       */
      static fract(value) {
          if (value == 0)
              return 0;
          if (value < 0) {
              if (value > -1.0)
                  return -value;
              return -value % Math.floor(-value);
          }
          if (value < 1.0)
              return value;
          return value % Math.floor(value);
      }
      /**
       * Moves the specified value from one numeric domain(range) to another.
       *
       * @static
       * @param value -
       * @param start1 -
       * @param end1 -
       * @param start2 -
       * @param end2 -
       * @return -
       */
      static remap(value, start1, end1, start2, end2) {
          return start2 + (end2 - start2) * ((value - start1) / (end1 - start1));
      }
      /**
       * Perform Hermite interpolation between two values
       *
       * @static
       * @param edge0 -
       * @param edge1 -
       * @param x -
       * @return -
       */
      static smoothStep(edge0, edge1, x) {
          const t = this.clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);
          return t * t * (3.0 - 2.0 * t);
      }
      /**
       * Performs - interpolation between two values
       *
       * @static
       * @param edge0 -
       * @param edge1 -
       * @param x -
       * @return -
       */
      static linStep(edge0, edge1, x) {
          return this.clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);
      }
      /**
       * Decodes a Float16 from two unsigned Int8
       *
       * @static
       * @param c - Array with the two UInt8
       * @return - Decoded Float16
       */
      static decode16BitFloatFrom2xUInt8(c) {
          const ix = c[0]; // 1st byte: 1 bit signed num, 4 bits exponent, 3 bits mantissa (MSB)
          const iy = c[1]; // 2nd byte: 8 bit mantissa (LSB)
          const s = ix & 0x80 ? 1 : -1; // get bit 8
          const iexp = (ix & 0x78) >> 3; // mask bits 7-4
          const msb = ix & 0x7; // mask bits 3-1
          let norm = iexp == 0 ? 0 : 2048; // distinguish between normalized and sub-normalized numbers
          const mantissa = norm + (msb << 8) + iy; // implicit preceding 1 or 0 added here
          norm = iexp == 0 ? 1 : 0; // normalization toggle
          const exponent = Math.pow(2, iexp + norm - 16); // -5 for the the exponent bias from 2^-5 to 2^10 plus another -11 for the normalized 12 bit mantissa
          const v = s * mantissa * exponent;
          return v;
      }
      /**
       * Encodes an array of two unsigned Int8 to a Float16
       *
       * @static
       * @param v - Float16 number
       * @return - Encoded Unsigned Int8 array
       */
      static encode16BitFloatInto2xUInt8(v) {
          const c = new Uint8Array(2);
          // const c = [0, 0];
          const signum = v >= 0 ? 128 : 0;
          v = Math.abs(v);
          let exponent = 15;
          let limit = 1024; // considering the bias from 2^-5 to 2^10 (==1024)
          for (let exp = 15; exp > 0; exp--) {
              if (v < limit) {
                  limit /= 2;
                  exponent--;
              }
          }
          let rest;
          if (exponent == 0) {
              rest = v / limit / 2; // "sub-normalize" implicit preceding 0.
          }
          else {
              rest = (v - limit) / limit; // normalize accordingly to implicit preceding 1.
          }
          const mantissa = Math.round(rest * 2048); // 2048 = 2^11 for the (split) 11 bit mantissa
          const msb = mantissa / 256; // the most significant 3 bits go into the lower part of the first byte
          const lsb = mantissa - msb * 256; // there go the other 8 bit of the lower significance
          c[0] = signum + exponent * 8 + msb; // color normalization for texture2D
          c[1] = lsb;
          if (v >= 2048) {
              c[0] = 255;
          }
          return c;
      }
      /**
       * Transforms a 16 bit float to an encoded integer.
       *
       * @static
       * @param v - Float16 number to encode
       * @return - Encoded number
       */
      static encode16BitFloat(v) {
          const float32Array = new Float32Array(1);
          float32Array[0] = v;
          const int32View = new Int32Array(float32Array.buffer);
          const toUInt16 = (x) => {
              let bits = (x >> 16) & 0x8000; /* Get the sign */
              let m = (x >> 12) & 0x07ff; /* Keep one extra bit for rounding */
              const e = (x >> 23) & 0xff; /* Using int is faster here */
              /* If zero, or de-normal, or exponent underflows too much for a de-normal
               * half, return signed zero. */
              if (e < 103) {
                  return bits;
              }
              /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */
              if (e > 142) {
                  bits |= 0x7c00;
                  /* If exponent was 0xff and one mantissa bit was set, it means NaN,
                   * not Inf, so make sure we set one mantissa bit too. */
                  bits |= (e == 255 ? 0 : 1) && x & 0x007fffff;
                  return bits;
              }
              /* If exponent underflows but not too much, return a de-normal */
              if (e < 113) {
                  m |= 0x0800;
                  /* Extra rounding may overflow and set mantissa to 0 and exponent
                   * to 1, which is OK. */
                  bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);
                  return bits;
              }
              bits |= ((e - 112) << 10) | (m >> 1);
              /* Extra rounding. An overflow will set mantissa to 0 and increment
               * the exponent, which is OK. */
              bits += m & 1;
              return bits;
          };
          return toUInt16(int32View[0]);
      }
      /**
       * As opposite of the `encode16BitFloat` method, this takes an encoded integer value,
       * and returns the 16 bit float.
       *
       * @static
       * @param h - Encoded integer
       * @return - Decoded 16 bit float.
       */
      static decode16BitFloat(h) {
          const s = (h & 0x8000) >> 15;
          const e = (h & 0x7c00) >> 10;
          const f = h & 0x03ff;
          if (e == 0) {
              return (s ? -1 : 1) * Math.pow(2, -14) * (f / Math.pow(2, 10));
          }
          else if (e == 0x1f) {
              return f ? NaN : (s ? -1 : 1) * Infinity;
          }
          return (s ? -1 : 1) * Math.pow(2, e - 15) * (1 + f / Math.pow(2, 10));
      }
      /**
       * Transforms an array of Float 32 to an array of unsigned Int16.
       *
       * @static
       * @param float32Array -
       * @return - Unsigned Int16 array representative of the Float32Array
       */
      static convertFloat32ArrayToUInt16Array(float32Array) {
          const unit16s = new Uint16Array(float32Array.length);
          const int32View = new Int32Array(float32Array.buffer);
          const toUInt16 = (x) => {
              let bits = (x >> 16) & 0x8000; /* Get the sign */
              let m = (x >> 12) & 0x07ff; /* Keep one extra bit for rounding */
              const e = (x >> 23) & 0xff; /* Using int is faster here */
              /* If zero, or de-normal, or exponent underflows too much for a de-normal
               * half, return signed zero. */
              if (e < 103) {
                  return bits;
              }
              /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */
              if (e > 142) {
                  bits |= 0x7c00;
                  /* If exponent was 0xff and one mantissa bit was set, it means NaN,
                   * not Inf, so make sure we set one mantissa bit too. */
                  bits |= (e == 255 ? 0 : 1) && x & 0x007fffff;
                  return bits;
              }
              /* If exponent underflows but not too much, return a de-normal */
              if (e < 113) {
                  m |= 0x0800;
                  /* Extra rounding may overflow and set mantissa to 0 and exponent
                   * to 1, which is OK. */
                  bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);
                  return bits;
              }
              bits |= ((e - 112) << 10) | (m >> 1);
              /* Extra rounding. An overflow will set mantissa to 0 and increment
               * the exponent, which is OK. */
              bits += m & 1;
              return bits;
          };
          for (let i = 0; i < float32Array.length; i++) {
              unit16s[i] = toUInt16(int32View[i]);
          }
          return unit16s;
      }
  }

  // import { BaseEvent } from './BaseEvent'
  // TODO:
  // class AllocatorResized extends BaseEvent {
  //   id: number
  //   allocation: any
  //   constructor() {
  //     super()
  //   }
  // }
  /**
   * An Allocation1D represents an allocated block of memory.
   *
   */
  class Allocation1D {
      start;
      size;
      /**
       * Initializes the allocation
       * @param start - The start of the allocated block of memory.
       * @param size - The size of the allocated block of memory.
       */
      constructor(start = 0, size = 0) {
          this.start = start;
          this.size = size;
      }
  }
  /**
   * An 1D allocator is used to manage packing multiple smaller blocks of data
   * into a single large block of memory, supporting resizing and re-allocating.
   * As allocations are changed, fragmentation occurs as blocks must be moved
   *
   * Example:
   * ```javascript
   * const allocator = new Allocator1D()
   *
   * let memory = new Uint32Array(25)
   * allocator.on('resize', () => {
   *   memory = new Uint32Array(allocator.reservedSpace)
   * })
   * allocator.on('dataReallocated', (event) => {
   *   // during allocation, a defragment might occur, which means
   *   // we need to reload some of our data.
   * })
   *
   * allocator.allocate(1, 5)
   * allocator.allocate(2, 10)
   * allocator.allocate(3, 10)
   * allocator.allocate(4, 20)
   * allocator.allocate(3, 20) // resize 3 to grow the allocated space.
   * allocator.allocate(1, 7) // resize 1 to fit into the previous space of 3, leaving a new free block.
   * allocator.allocate(1, 10) // resize 1 to fit into the previous space of 3, consuming the free block.
   * ```
   *
   */
  class Allocator1D extends EventEmitter {
      freeList = [];
      allocations = [];
      allocationsMap = {}; // A mapping of id to index within the allocations list
      allocatedSpace = 0;
      reservedSpace = 0;
      freeSpace = 0;
      /**
       * Initializes the allocator ready to start work
       */
      constructor() {
          super();
      }
      /**
       * Returns the Allocates for the given Id.
       *
       * @param id - The unique numerical identifer for the block.
       * @return - The allocation
       */
      getAllocation(id) {
          return this.allocations[this.allocationsMap[id]];
      }
      /**
       * Allocates space for a new or existing item. The id is a handle that the consuming code uses to
       * track allocations.
       *
       * @param id - The unique numerical identifer for the block.
       * @param size - The name of the event.
       * @return - The new allocation
       */
      allocate(id, size) {
          if (this.allocationsMap[id] != undefined) {
              const index = this.allocationsMap[id];
              const allocation = this.allocations[index];
              // Resizing smaller
              if (size == allocation.size) {
                  return allocation;
              }
              else if (size < allocation.size) {
                  // Split this block into 2. We use the first one for our item, and the second is put on the free list.
                  const splitBlockSize = allocation.size - size;
                  // this.allocations.splice(index + 1, 0, new Allocation1D(allocation.start + size, splitBlockSize))
                  this.addBlock(index + 1, new Allocation1D(allocation.start + size, splitBlockSize));
                  this.freeBlock(index + 1);
                  allocation.size = size;
                  return allocation;
              }
              else {
                  // Try to consume any free blocks directly to our right.
                  const nextIndex = index + 1;
                  if (this.freeList.includes(nextIndex) && allocation.size + this.allocations[nextIndex].size >= size) {
                      const freeBlock = this.allocations[nextIndex];
                      if (allocation.size + freeBlock.size == size) {
                          // consume this free block
                          allocation.size += freeBlock.size;
                          this.freeSpace -= freeBlock.size;
                          this.freeList.splice(this.freeList.indexOf(nextIndex), 1);
                          // this.allocations.splice(nextIndex, 1)
                          this.removeBlock(nextIndex);
                          return allocation;
                      }
                      else {
                          // We want to shrink the next block by the amount we consumed
                          const consumed = size - allocation.size;
                          allocation.size += consumed;
                          this.freeSpace -= consumed;
                          freeBlock.start += consumed;
                          freeBlock.size -= consumed;
                          return allocation;
                      }
                  }
                  else {
                      // free up this slot an find a new one
                      // If the slot was at the end of the allocated memory, just decrement
                      // the allocated space making it immediately available for use.
                      delete this.allocationsMap[id];
                      if (allocation.start + allocation.size == this.allocatedSpace) {
                          this.removeBlock(index);
                          this.allocatedSpace -= allocation.size;
                      }
                      else {
                          this.freeBlock(index);
                      }
                  }
              }
          }
          let freeItemIndex = -1;
          for (let i = 0; i < this.freeList.length; i++) {
              const freeIndex = this.freeList[i];
              const allocation = this.allocations[freeIndex];
              if (allocation.size == size) {
                  freeItemIndex = freeIndex;
                  break;
              }
              else if (allocation.size > size) {
                  freeItemIndex = freeIndex;
              }
          }
          if (freeItemIndex != -1) {
              const freeItem = this.allocations[freeItemIndex];
              this.freeSpace -= freeItem.size;
              this.freeList.splice(this.freeList.indexOf(freeItemIndex), 1);
              if (freeItem.size > size) {
                  // Split this block into 2. We use the first one for our item, and the second is put on the free list.
                  const splitBlockSize = freeItem.size - size;
                  // this.allocations.splice(freeItemIndex + 1, 0, new Allocation1D(freeItem.start + size, splitBlockSize))
                  this.addBlock(freeItemIndex + 1, new Allocation1D(freeItem.start + size, splitBlockSize));
                  this.freeBlock(freeItemIndex + 1);
                  this.allocations[freeItemIndex].size = size;
              }
              this.allocationsMap[id] = freeItemIndex;
          }
          else {
              const start = this.allocatedSpace;
              const index = this.allocations.length;
              this.allocatedSpace += size;
              const reserved = MathFunctions.nextPow2(this.allocatedSpace);
              // Only re-allocate if we  need more space than is reserved.
              // this means we won't resize smaller, even if we free up all allocated space
              // In general, we don't want that anyway, as we would prefer to grow memory, and then
              // keep it.
              if (reserved > this.reservedSpace) {
                  this.reservedSpace = reserved;
                  this.emit('resized', { reservedSpace: this.reservedSpace });
              }
              this.allocations.push(new Allocation1D(start, size));
              this.allocationsMap[id] = index;
          }
          return this.allocations[this.allocationsMap[id]];
      }
      /**
       * Adds a new block
       * @private
       *
       * @param index - The index where the block should be inserted.
       * @param allocation - The allocation to insert
       */
      addBlock(index, allocation) {
          this.allocations.splice(index, 0, allocation);
          for (const id in this.allocationsMap) {
              if (this.allocationsMap[id] >= index) {
                  this.allocationsMap[id]++;
              }
          }
          for (let i = 0; i < this.freeList.length; i++) {
              if (this.freeList[i] >= index) {
                  this.freeList[i]++;
              }
          }
      }
      /**
       * Remove a new block
       * @private
       *
       * @param index - The index where the block should be removed
       */
      removeBlock(index) {
          this.allocations.splice(index, 1);
          for (const id in this.allocationsMap) {
              if (this.allocationsMap[id] > index) {
                  this.allocationsMap[id]--;
              }
          }
          for (let i = 0; i < this.freeList.length; i++) {
              if (this.freeList[i] > index) {
                  this.freeList[i]--;
              }
          }
      }
      /**
       * Frees a block by either growing neighboring blocks or adding a new free block
       * @private
       *
       * @param index - The index of the block to free.
       */
      freeBlock(index) {
          const allocation = this.allocations[index];
          this.freeSpace += allocation.size;
          // check for free blocks on either side of the allocated space
          // and allow them to consume this block instead of adding a new smaller
          // block.
          const prevIndex = index - 1;
          if (this.freeList.includes(prevIndex)) {
              const prevAllocation = this.allocations[prevIndex];
              prevAllocation.size += allocation.size;
              this.removeBlock(index);
              return;
          }
          const nextIndex = index + 1;
          if (this.freeList.includes(nextIndex)) {
              const nextAllocation = this.allocations[nextIndex];
              nextAllocation.start -= allocation.size;
              nextAllocation.size += allocation.size;
              this.removeBlock(index);
              return;
          }
          this.freeList.push(index);
          // Sort the free blocks by size so we use the smallest ones first.
          // This reduces the chance of fragmentation by always consuming the smallerest free blocks first.
          this.freeList.sort((a, b) => this.allocations[a].size - this.allocations[b].size);
      }
      /**
       * Deallocate space for an existing item, making it free for other uses.
       *
       * @param id - The unique numerical identifer for the block.
       */
      deallocate(id) {
          const index = this.allocationsMap[id];
          if (index == undefined) {
              throw new Error(`allocation ${id} does not exist.`);
          }
          this.freeBlock(index);
          delete this.allocationsMap[id];
      }
      /**
       * Returns the ratio of fragmented memory over reserved memory.
       *
       * @return The fragmentation ratio. Between 0 and some value less than 1
       */
      getFragmentation() {
          return this.freeSpace / this.allocatedSpace;
      }
      /**
       * Defragment the memory space reducing memory requirements.
       * TODO: Implement this method.
       */
      defragment() {
          // move the freeblocks to the end of the memory so that
          // we can then reduce the memory used.
      }
      /**
       * Checks that the allocations are consistent and not corrupt in any way.
       */
      verifyConsistency() {
          if (Object.keys(this.allocationsMap).length + this.freeList.length != this.allocations.length) {
              throw new Error('number of blocks does not match the number of allocations');
          }
          // eslint-disable-next-line guard-for-in
          for (const id in this.allocationsMap) {
              const index = this.allocationsMap[id];
              if (this.freeList.includes(index)) {
                  // eslint-disable-next-line no-throw-literal
                  throw new Error('block of used memory is also on the free list');
              }
          }
          let size = 0;
          for (let i = 0; i < this.allocations.length; i++) {
              const allocation = this.allocations[i];
              if (allocation.start != size) {
                  // eslint-disable-next-line no-throw-literal
                  throw 'blocks of memory are not sequential';
              }
              size += allocation.size;
          }
          if (size != this.allocatedSpace) {
              // eslint-disable-next-line no-throw-literal
              throw `allocated size: ${this.allocatedSpace}  does not match allocated blocks: ${size}`;
          }
          if (this.reservedSpace < this.allocatedSpace) {
              // eslint-disable-next-line no-throw-literal
              throw `reserved space: ${this.reservedSpace} is less than allocated space: ${this.allocatedSpace}`;
          }
      }
  }

  class IntersectionData {
      screenPos;
      pointerRay;
      intersectionPos;
      geomData;
      geomItem;
      componentId;
      dist;
      constructor(screenPos, pointerRay, intersectionPos, geomData, geomItemAndDist) {
          this.screenPos = screenPos;
          this.pointerRay = pointerRay;
          this.intersectionPos = intersectionPos;
          this.geomData = geomData;
          this.geomItem = geomItemAndDist.geomItem;
          this.componentId = geomItemAndDist.componentId;
          this.dist = geomItemAndDist.dist;
      }
  }

  class ChildAddedEvent extends BaseEvent {
      index;
      childItem;
      constructor(index, childItem) {
          super();
          this.index = index;
          this.childItem = childItem;
      }
  }

  class ControllerAddedEvent extends BaseEvent {
      controller;
      constructor(controller) {
          super();
          this.controller = controller;
      }
  }

  class CountChangedEvent extends BaseEvent {
      change;
      count;
      constructor(change, count) {
          super();
          this.change = change;
          this.count = count;
      }
  }

  class EnvMapAssignedEvent extends BaseEvent {
      envMap;
      constructor(envMap) {
          super();
          this.envMap = envMap;
      }
  }

  class IndexEvent extends BaseEvent {
      index;
      constructor(index) {
          super();
          this.index = index;
      }
  }

  /**
   * ZeaUIEvent are emitted from a 2D UI, such as from a HTMLCanvas element generated from
   * a mouse or touch interaction, or key presses
   */
  class ZeaUIEvent extends BaseEvent {
      viewport;
      propagating = true;
      constructor() {
          super();
      }
  }

  class ZeaKeyboardEvent extends ZeaUIEvent {
      sourceEvent;
      propagating = true;
      // Returns a boolean value that is true if the Alt (Option or ⌥ on OS X) key was active when the key event was generated.
      altKey;
      // Returns a DOMString with the code value of the physical key represented by the event.
      code;
      // Returns a boolean value that is true if the Ctrl key was active when the key event was generated.
      ctrlKey;
      // Returns a boolean value that is true if the event is fired between after compositionstart and before compositionend.
      isComposing;
      // Returns a DOMString representing the key value of the key represented by the event.
      key;
      // Returns a Number representing the location of the key on the keyboard or other input device. A list of the constants identifying the locations is shown above in Keyboard locations.
      location;
      // Returns a boolean value that is true if the Meta key (on Mac keyboards, the ⌘ Command key; on Windows keyboards, the Windows key (⊞)) was active when the key event was generated.
      metaKey;
      // Returns a boolean value that is true if the key is being held down such that it is automatically repeating.
      repeat;
      // Returns a boolean value that is true if the Shift key was active when the key event was generated.
      shiftKey;
      // Returns a Number representing a system and implementation dependent numeric code identifying the unmodified value of the pressed key; this is usually the same as keyCode.
      which;
      constructor(sourceEvent) {
          super();
          if (sourceEvent) {
              this.sourceEvent = sourceEvent;
              this.altKey = sourceEvent.altKey;
              this.code = sourceEvent.code;
              this.ctrlKey = sourceEvent.ctrlKey;
              this.isComposing = sourceEvent.isComposing;
              this.key = sourceEvent.key;
              this.location = sourceEvent.location;
              this.metaKey = sourceEvent.metaKey;
              this.repeat = sourceEvent.repeat;
              this.shiftKey = sourceEvent.shiftKey;
          }
      }
      stopPropagation() {
          this.propagating = false;
          if (this.sourceEvent)
              this.sourceEvent.stopPropagation();
      }
      preventDefault() {
          if (this.sourceEvent)
              this.sourceEvent.preventDefault();
      }
  }
  // deprecated class. Please stop using it.
  class KeyboardEvent extends ZeaKeyboardEvent {
  }

  class NameChangedEvent extends BaseEvent {
      oldName;
      newName;
      constructor(oldName, newName) {
          super();
          this.oldName = oldName;
          this.newName = newName;
      }
  }

  class OpacityStateChangedEvent extends BaseEvent {
      isOpaque;
      isOpaqueStateChanged;
      constructor(isOpaque, isOpaqueStateChanged) {
          super();
          this.isOpaque = isOpaque;
          this.isOpaqueStateChanged = isOpaqueStateChanged;
      }
  }

  class ParameterAddedEvent extends BaseEvent {
      name;
      constructor(name) {
          super();
          this.name = name;
      }
  }

  class ParameterRemovedEvent extends BaseEvent {
      name;
      constructor(name) {
          super();
          this.name = name;
      }
  }

  class RangeLoadedEvent extends BaseEvent {
      range;
      constructor(range) {
          super();
          this.range = range;
      }
  }

  class SceneSetEvent extends BaseEvent {
      scene;
      constructor(scene) {
          super();
          this.scene = scene;
      }
  }

  class SelectabilityChangedEvent extends BaseEvent {
      value;
      constructor(value) {
          super();
          this.value = value;
      }
  }

  class SelectedEvent extends BaseEvent {
      selected;
      constructor(selected) {
          super();
          this.selected = selected;
      }
  }

  class ShaderNameChangedEvent extends BaseEvent {
      shaderName;
      constructor(shaderName) {
          super();
          this.shaderName = shaderName;
      }
  }

  class StateChangedEvent extends BaseEvent {
      state;
      constructor(state) {
          super();
          this.state = state;
      }
  }

  class StreamFileParsedEvent extends BaseEvent {
      geomFileID;
      geomCount;
      constructor(geomFileID, geomCount) {
          super();
          this.geomFileID = geomFileID;
          this.geomCount = geomCount;
      }
  }

  //{ isTextured, param }
  class TexturedChangedEvent extends BaseEvent {
      isTextured;
      param;
      constructor(isTextured, param) {
          super();
          this.isTextured = isTextured;
          this.param = param;
      }
  }

  class ViewChangedEvent extends BaseEvent {
      interfaceType;
      viewXfo;
      viewport;
      constructor(interfaceType, viewXfo) {
          super();
          this.interfaceType = interfaceType;
          this.viewXfo = viewXfo;
      }
  }

  class VisibilityChangedEvent extends BaseEvent {
      visible;
      constructor(visible) {
          super();
          this.visible = visible;
      }
  }

  class ProgressEvent extends BaseEvent {
      percent;
      constructor(percent) {
          super();
          this.percent = percent;
      }
  }

  const POINTER_TYPES = {
      mouse: 'mouse',
      touch: 'touch',
      xr: 'xr',
  };
  let capturedItem$1 = null;
  /**
   * ZeaPointerEvent are emitted from mouse or touch interactions or from WebXR controllers.
   */
  class ZeaPointerEvent extends ZeaUIEvent {
      pointerType;
      pointerRay;
      pointerPos;
      detail;
      intersectionData;
      leftGeometry;
      constructor(pointerType) {
          super();
          this.pointerType = pointerType;
      }
      stopPropagation() {
          this.propagating = false;
      }
      setCapture(item) {
          capturedItem$1 = item;
      }
      getCapture() {
          return capturedItem$1;
      }
      releaseCapture() {
          capturedItem$1 = null;
      }
  }

  const captureItems = [];
  class XRControllerEvent extends ZeaPointerEvent {
      controller;
      button;
      buttonPressed = 0;
      constructor(viewport, controller, button, buttonPressed) {
          super(POINTER_TYPES.xr);
          this.viewport = viewport;
          this.controller = controller;
          this.button = button;
          this.buttonPressed = buttonPressed;
      }
      stopPropagation() {
          this.propagating = false;
      }
      setCapture(item) {
          captureItems[this.controller.id] = item;
      }
      getCapture() {
          return captureItems[this.controller.id];
      }
      releaseCapture() {
          captureItems[this.controller.id] = null;
      }
  }

  let capturedItem = null;
  class XRPointerEvent extends ZeaPointerEvent {
      xfo;
      xrSelectEvent;
      hitTestResults;
      constructor(viewport, xfo, xrSelectEvent, hitTestResults) {
          super(POINTER_TYPES.xr);
          this.viewport = viewport;
          this.xfo = xfo;
          this.xrSelectEvent = xrSelectEvent;
          this.hitTestResults = hitTestResults;
      }
      stopPropagation() {
          this.propagating = false;
      }
      setCapture(item) {
          capturedItem = item;
      }
      getCapture() {
          return capturedItem;
      }
      releaseCapture() {
          capturedItem = null;
      }
  }

  // TODO: Once we start the migration to AssemblyScript
  // we will need to extract the cotroller data and package
  // into this struct. Untill then, we will just put the whole
  // controller.
  // class XRControllerPose {
  //   controller: XRController
  //   constructor(controller: XRController) {
  //     this.controller = controller
  //   }
  // }
  class XRPoseEvent extends ZeaPointerEvent {
      viewXfo;
      controllers = [];
      constructor(viewport, viewXfo, controllers = []) {
          super(POINTER_TYPES.xr);
          this.viewport = viewport;
          this.viewXfo = viewXfo;
          controllers.forEach((controller) => {
              this.controllers.push(controller);
          });
      }
  }

  class XRViewChangedEvent extends ViewChangedEvent {
      hmd = '';
      controllers = [];
      xrviewport;
      constructor(viewXfo) {
          super('VR', viewXfo);
      }
  }

  class XrViewportEvent extends BaseEvent {
      xrViewport;
      constructor(xrViewport) {
          super();
          this.xrViewport = xrViewport;
      }
  }

  class ZeaMouseEvent extends ZeaPointerEvent {
      button;
      clientX;
      clientY;
      rendererX;
      rendererY;
      altKey;
      metaKey;
      ctrlKey;
      shiftKey;
      sourceEvent;
      constructor(sourceEvent, rect) {
          super(POINTER_TYPES.mouse);
          this.sourceEvent = sourceEvent;
          this.button = sourceEvent.button;
          this.clientX = sourceEvent.clientX;
          this.clientY = sourceEvent.clientY;
          // Note: the rendererX/Y values are relative to the viewport,
          // but are available outside the viewport. So when a mouse
          // drag occurs, and drags outside the viewport, these values
          // provide consistent coords.
          // offsetX/Y are only valid inside the viewport and so cause
          // jumps when the mouse leaves the viewport.
          this.rendererX = this.clientX - rect.left;
          this.rendererY = this.clientY - rect.top;
          this.altKey = sourceEvent.altKey;
          this.metaKey = sourceEvent.metaKey;
          this.ctrlKey = sourceEvent.ctrlKey;
          this.shiftKey = sourceEvent.shiftKey;
      }
      stopPropagation() {
          super.stopPropagation();
          if (this.sourceEvent)
              this.sourceEvent.stopPropagation();
      }
      preventDefault() {
          if (this.sourceEvent)
              this.sourceEvent.preventDefault();
      }
  }

  /* eslint-disable new-cap */
  /**
   * Class representing a ray that starts from an origin in a specified direction.
   */
  class Ray {
      dir;
      start;
      /**
       * Create a ray.
       *
       * @param start - The origin of the ray.
       * @param dir - The direction of the ray.
       */
      constructor(start, dir) {
          if (start instanceof Vec3) {
              this.start = start;
          }
          else {
              this.start = new Vec3();
          }
          if (dir instanceof Vec3) {
              this.dir = dir;
          }
          else {
              this.dir = new Vec3();
          }
      }
      /**
       * Get the closest point on the ray to the given point.
       *
       * @param point - The point in 3D space.
       * @return - returns a number
       */
      closestPoint(point) {
          const w = point.subtract(this.start);
          const c1 = w.dot(this.dir);
          if (c1 < Number.EPSILON)
              return 0;
          const c2 = this.dir.dot(this.dir);
          if (c2 < Number.EPSILON)
              return 0;
          return c1 / c2;
      }
      /**
       * Get the closest point between the ray and the given line segment made of the 2 points.
       *
       * @param p0 - The point in 3D space.
       * @param p1 - The point in 3D space.
       * @return - Returns an array containing 2 scalar values indicating 0: the fraction of the line segment, 1: distance along the Ray
       */
      closestPointOnLineSegment(p0, p1) {
          const u = this.dir;
          const v = p1.subtract(p0);
          const v_len = v.length();
          v.normalizeInPlace();
          const w = this.start.subtract(p0);
          const a = u.dot(u); // always >= 0
          const b = u.dot(v);
          const c = v.dot(v); // always >= 0
          const d = u.dot(w);
          const e = v.dot(w);
          if (a == 0.0 && c == 0.0) {
              return [this.start.distanceTo(p0), 0.0];
          }
          if (a == 0.0) {
              return [0.0, 0.0];
          }
          if (c == 0.0) {
              return [this.closestPoint(p0), 0.0];
          }
          const D = a * c - b * b; // always >= 0
          // compute the ray parameters of the two closest points
          let this_t;
          let seg_t;
          if (D < 0.001) {
              // the lines are almost parallel
              this_t = 0.0;
              if (b > c) {
                  // use the largest denominator
                  seg_t = d / b;
              }
              else {
                  seg_t = e / c;
              }
          }
          else {
              this_t = (b * e - c * d) / D;
              seg_t = (a * e - b * d) / D;
          }
          return [this_t, MathFunctions.clamp(seg_t / v_len, 0, 1)];
      }
      /**
       * Get the closest point at a distance.
       *
       * @param dist - The distance value.
       * @return - Returns a Vec3.
       */
      pointAtDist(dist) {
          return this.start.add(this.dir.scale(dist));
      }
      /**
       * Returns the two ray params that represent the closest point between the two rays.
       *
       * @param ray - The ray value.
       * @return - Returns a Ray.
       */
      intersectRayVector(ray) {
          const u = this.dir;
          const v = ray.dir;
          const w = this.start.subtract(ray.start);
          const a = u.dot(u); // always >= 0
          const b = u.dot(v);
          const c = v.dot(v); // always >= 0
          const d = u.dot(w);
          const e = v.dot(w);
          if (a == 0.0 && c == 0.0) {
              return this.start.distanceTo(ray.start);
          }
          if (a == 0.0) {
              return ray.closestPoint(this.start);
          }
          if (c == 0.0) {
              return this.closestPoint(ray.start);
          }
          const D = a * c - b * b; // always >= 0
          // compute the ray parameters of the two closest points
          let this_t;
          let ray_t;
          if (D < 0.001) {
              // the lines are almost parallel
              this_t = 0.0;
              if (b > c) {
                  // use the largest denominator
                  ray_t = d / b;
              }
              else {
                  ray_t = e / c;
              }
          }
          else {
              this_t = (b * e - c * d) / D;
              ray_t = (a * e - b * d) / D;
          }
          return [this_t, ray_t];
      }
      /**
       * Returns one ray param representing the intersection
       * of this ray against the plane defined by the given ray.
       *
       * @param plane - The plane to intersect with.
       * @return - The return value.
       */
      intersectRayPlane(plane) {
          const w = this.start.subtract(plane.start);
          const D = plane.dir.dot(this.dir);
          const N = -plane.dir.dot(w);
          if (Math.abs(D) < Number.PRECISION) {
              // segment is parallel to plane
              if (N == 0.0)
                  return -1.0;
              // segment lies in plane
              else
                  return -1.0; // no intersection
          }
          // they are not parallel
          // compute intersect param
          const sI = N / D;
          if (sI < -Number.PRECISION) {
              return -1; // no intersection
          }
          return sI;
      }
      /**
       * Determines if this Box3 intersects a ray.
       *
       * @param box3 - The box to check for intersection against.
       * @param tolerance - The tolerance of the test.
       * @return - The return value.
       */
      intersectRayBox3(box3, tolerance = 0) {
          // https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-box-intersection
          const invDir = new Vec3(1 / this.dir.x, 1 / this.dir.y, 1 / this.dir.z);
          const sign = [];
          sign[0] = invDir.x < 0 ? 1 : 0;
          sign[1] = invDir.y < 0 ? 1 : 0;
          sign[2] = invDir.z < 0 ? 1 : 0;
          const bounds = [];
          if (tolerance > 0) {
              const diag = box3.diagonal();
              diag.normalizeInPlace();
              diag.scaleInPlace(tolerance);
              bounds[0] = box3.p0.subtract(diag);
              bounds[1] = box3.p1.add(diag);
          }
          else {
              bounds[0] = box3.p0;
              bounds[1] = box3.p1;
          }
          let tMin = (bounds[sign[0]].x - this.start.x) * invDir.x;
          let tMax = (bounds[1 - sign[0]].x - this.start.x) * invDir.x;
          const tyMin = (bounds[sign[1]].y - this.start.y) * invDir.y;
          const tyMax = (bounds[1 - sign[1]].y - this.start.y) * invDir.y;
          if (tMin > tyMax || tyMin > tMax)
              return false;
          if (tyMin > tMin)
              tMin = tyMin;
          if (tyMax < tMax)
              tMax = tyMax;
          const tzMin = (bounds[sign[2]].z - this.start.z) * invDir.z;
          const tzMax = (bounds[1 - sign[2]].z - this.start.z) * invDir.z;
          if (tMin > tzMax || tzMin > tMax)
              return false;
          if (tzMin > tMin)
              tMin = tzMin;
          if (tzMax < tMax)
              tMax = tzMax;
          return true;
      }
      /**
       * Clones this Ray and returns a new Ray.
       *
       * @return - Returns a new Ray.
       */
      clone() {
          return new Ray(this.start.clone(), this.dir.clone());
      }
      // ///////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @return - The json object.
       */
      toJSON() {
          return {
              start: this.start.toJSON(),
              dir: this.dir.toJSON(),
          };
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object.
       */
      fromJSON(j) {
          this.start.fromJSON(j.start);
          this.dir.fromJSON(j.dir);
      }
      /**
       * Calls `toJSON` method and stringifies it.
       *
       * @return - The return value.
       */
      toString() {
          return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());
      }
  }

  class Touch {
      identifier;
      clientX = 0;
      clientY = 0;
      screenX = 0;
      screenY = 0;
      pageX = 0;
      pageY = 0;
      radiusX = 0;
      radiusY = 0;
      rotationAngle = 0;
      force = 0;
      altitudeAngle = 0;
      azimuthAngle = 0;
      touchType = 'direct';
      rendererX;
      rendererY;
      touchPos;
      touchRay;
      constructor(touch, rect) {
          this.identifier = touch.identifier;
          this.clientX = touch.clientX;
          this.clientY = touch.clientY;
          this.screenX = touch.screenX;
          this.screenY = touch.screenY;
          this.pageX = touch.pageX;
          this.pageY = touch.pageY;
          this.radiusX = touch.radiusX;
          this.radiusY = touch.radiusY;
          this.rotationAngle = touch.rotationAngle;
          this.force = touch.force;
          // this.altitudeAngle = touch.altitudeAngle
          // this.azimuthAngle = touch.azimuthAngle
          // this.touchType = touch.touchType
          // Note: the rendererX/Y values are relative to the viewport,
          // but are available outside the viewport. So when a mouse
          // drag occurs, and drags outside the viewport, these values
          // provide consistent coords.
          // offsetX/Y are only valid inside the viewport and so cause
          // jumps when the mouse leaves the viewport.
          this.rendererX = this.clientX - rect.left;
          this.rendererY = this.clientY - rect.top;
          this.touchPos = new Vec2(this.rendererX, this.rendererY);
          this.touchRay = new Ray();
      }
  }
  class ZeaTouchEvent extends ZeaPointerEvent {
      touches = [];
      changedTouches = [];
      targetTouches = [];
      altKey = false;
      metaKey = false;
      ctrlKey = false;
      shiftKey = false;
      sourceEvent;
      constructor(sourceEvent, rect) {
          super(POINTER_TYPES.touch);
          this.sourceEvent = sourceEvent;
          this.sourceEvent.stopPropagation();
          this.altKey = sourceEvent.altKey;
          this.metaKey = sourceEvent.metaKey;
          this.ctrlKey = sourceEvent.ctrlKey;
          this.shiftKey = sourceEvent.shiftKey;
          for (let i = 0; i < sourceEvent.touches.length; i++) {
              this.touches.push(new Touch(sourceEvent.touches[i], rect));
          }
          if (sourceEvent.changedTouches) {
              for (let i = 0; i < sourceEvent.changedTouches.length; i++) {
                  this.changedTouches.push(new Touch(sourceEvent.changedTouches[i], rect));
              }
          }
          if (sourceEvent.targetTouches) {
              for (let i = 0; i < sourceEvent.targetTouches.length; i++) {
                  this.targetTouches.push(new Touch(sourceEvent.targetTouches[i], rect));
              }
          }
      }
      stopPropagation() {
          super.stopPropagation();
          if (this.sourceEvent)
              this.sourceEvent.stopPropagation();
      }
      // Touch events are passive and so cannot call prevent default
      // replace with a stub here...
      preventDefault() { }
  }

  class ZeaWheelEvent extends ZeaMouseEvent {
      wheelDelta;
      deltaMode;
      deltaX;
      deltaY;
      deltaZ;
      constructor(sourceEvent, rect) {
          super(sourceEvent, rect);
          // @ts-ignore
          this.wheelDelta = sourceEvent.wheelDelta;
          this.deltaMode = sourceEvent.deltaMode;
          this.deltaX = sourceEvent.deltaX;
          this.deltaY = sourceEvent.deltaY;
          this.deltaZ = sourceEvent.deltaZ;
      }
  }

  /**
   * Class representing a color as 4 floating point values.
   */
  class Color {
      r = 0;
      g = 0;
      b = 0;
      a = 255;
      /**
       * Creates a `Color` object with an RGBA structure.
       *
       * @param r - The red channel of a color.
       * @param g - The green channel of a color.
       * @param b - The blue channel of a color.
       * @param a - The alpha (transparency) channel of a color.
       */
      constructor(r = 0, g = 0, b = 0, a = 1.0) {
          if (typeof r == 'string') {
              if (r.startsWith('#')) {
                  this.setFromHex(r);
              }
              else {
                  this.setFromCSSColorName(r);
              }
          }
          else {
              this.r = r;
              this.g = g;
              this.b = b;
              this.a = a;
          }
      }
      /**
       * Setter from scalar components.
       *
       * @param r - The red channel.
       * @param g  - The green channel.
       * @param b  - The blue channel.
       * @param a  - The alpha channel.
       */
      set(r, g, b, a = 1.0) {
          this.r = r;
          this.g = g;
          this.b = b;
          this.a = a;
      }
      /**
       * Sets current color state with another `Color` object.
       *
       * @param other - The other color to set from.
       */
      setFromOther(other) {
          this.r = other.r;
          this.g = other.g;
          this.b = other.b;
          this.a = other.a;
      }
      /**
       * Getter from an RGB array.
       *
       * @return - The return value.
       */
      getAsRGBArray() {
          return [this.r * 255, this.g * 255, this.b * 255];
      }
      /**
       * Getter from an RGB dict.
       *
       * @return - The return value.
       */
      getAsRGBDict() {
          return {
              r: this.r * 255,
              g: this.g * 255,
              b: this.b * 255,
          };
      }
      /**
       * Setter from a RGB value.
       *
       * @param r - The red channel.
       * @param g  - The green channel.
       * @param b  - The blue channel.
       * @param a  - The alpha channel.
       */
      setFromRGB(r, g, b, a) {
          this.r = r / 255;
          this.g = g / 255;
          this.b = b / 255;
          this.a = a ? a / 255 : 1.0;
      }
      /**
       * Setter from an RGB dict.
       *
       * @param vals - The vals param.
       */
      setFromRGBDict(vals) {
          this.r = vals.r / 255;
          this.g = vals.g / 255;
          this.b = vals.b / 255;
          this.a = vals.a == 4 ? vals.a / 255 : 1.0;
      }
      /**
       * Setter from a hexadecimal value.
       * E.g. #ff0000
       * @param hex - The hex value.
       */
      setFromHex(hex) {
          function hexToRgb(hex) {
              const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
              return result
                  ? {
                      r: parseInt(result[1], 16),
                      g: parseInt(result[2], 16),
                      b: parseInt(result[3], 16),
                  }
                  : null;
          }
          const rgb = hexToRgb(hex);
          if (!rgb) {
              console.warn('Invalid hex code:' + hex);
              return;
          }
          this.setFromRGB(rgb.r, rgb.g, rgb.b);
      }
      /**
       * Sets the Color values from a CSS color name.
       * E.g. "red"
       * @param name - The CSS color name.
       */
      setFromCSSColorName(name) {
          const colourNameToHex = (colour) => {
              const colors = {
                  aliceblue: '#f0f8ff',
                  antiquewhite: '#faebd7',
                  aqua: '#00ffff',
                  aquamarine: '#7fffd4',
                  azure: '#f0ffff',
                  beige: '#f5f5dc',
                  bisque: '#ffe4c4',
                  black: '#000000',
                  blanchedalmond: '#ffebcd',
                  blue: '#0000ff',
                  blueviolet: '#8a2be2',
                  brown: '#a52a2a',
                  burlywood: '#deb887',
                  cadetblue: '#5f9ea0',
                  chartreuse: '#7fff00',
                  chocolate: '#d2691e',
                  coral: '#ff7f50',
                  cornflowerblue: '#6495ed',
                  cornsilk: '#fff8dc',
                  crimson: '#dc143c',
                  cyan: '#00ffff',
                  darkblue: '#00008b',
                  darkcyan: '#008b8b',
                  darkgoldenrod: '#b8860b',
                  darkgray: '#a9a9a9',
                  darkgreen: '#006400',
                  darkkhaki: '#bdb76b',
                  darkmagenta: '#8b008b',
                  darkolivegreen: '#556b2f',
                  darkorange: '#ff8c00',
                  darkorchid: '#9932cc',
                  darkred: '#8b0000',
                  darksalmon: '#e9967a',
                  darkseagreen: '#8fbc8f',
                  darkslateblue: '#483d8b',
                  darkslategray: '#2f4f4f',
                  darkturquoise: '#00ced1',
                  darkviolet: '#9400d3',
                  deeppink: '#ff1493',
                  deepskyblue: '#00bfff',
                  dimgray: '#696969',
                  dodgerblue: '#1e90ff',
                  firebrick: '#b22222',
                  floralwhite: '#fffaf0',
                  forestgreen: '#228b22',
                  fuchsia: '#ff00ff',
                  gainsboro: '#dcdcdc',
                  ghostwhite: '#f8f8ff',
                  gold: '#ffd700',
                  goldenrod: '#daa520',
                  gray: '#808080',
                  green: '#008000',
                  greenyellow: '#adff2f',
                  honeydew: '#f0fff0',
                  hotpink: '#ff69b4',
                  'indianred ': '#cd5c5c',
                  indigo: '#4b0082',
                  ivory: '#fffff0',
                  khaki: '#f0e68c',
                  lavender: '#e6e6fa',
                  lavenderblush: '#fff0f5',
                  lawngreen: '#7cfc00',
                  lemonchiffon: '#fffacd',
                  lightblue: '#add8e6',
                  lightcoral: '#f08080',
                  lightcyan: '#e0ffff',
                  lightgoldenrodyellow: '#fafad2',
                  lightgrey: '#d3d3d3',
                  lightgreen: '#90ee90',
                  lightpink: '#ffb6c1',
                  lightsalmon: '#ffa07a',
                  lightseagreen: '#20b2aa',
                  lightskyblue: '#87cefa',
                  lightslategray: '#778899',
                  lightsteelblue: '#b0c4de',
                  lightyellow: '#ffffe0',
                  lime: '#00ff00',
                  limegreen: '#32cd32',
                  linen: '#faf0e6',
                  magenta: '#ff00ff',
                  maroon: '#800000',
                  mediumaquamarine: '#66cdaa',
                  mediumblue: '#0000cd',
                  mediumorchid: '#ba55d3',
                  mediumpurple: '#9370d8',
                  mediumseagreen: '#3cb371',
                  mediumslateblue: '#7b68ee',
                  mediumspringgreen: '#00fa9a',
                  mediumturquoise: '#48d1cc',
                  mediumvioletred: '#c71585',
                  midnightblue: '#191970',
                  mintcream: '#f5fffa',
                  mistyrose: '#ffe4e1',
                  moccasin: '#ffe4b5',
                  navajowhite: '#ffdead',
                  navy: '#000080',
                  oldlace: '#fdf5e6',
                  olive: '#808000',
                  olivedrab: '#6b8e23',
                  orange: '#ffa500',
                  orangered: '#ff4500',
                  orchid: '#da70d6',
                  palegoldenrod: '#eee8aa',
                  palegreen: '#98fb98',
                  paleturquoise: '#afeeee',
                  palevioletred: '#d87093',
                  papayawhip: '#ffefd5',
                  peachpuff: '#ffdab9',
                  peru: '#cd853f',
                  pink: '#ffc0cb',
                  plum: '#dda0dd',
                  powderblue: '#b0e0e6',
                  purple: '#800080',
                  rebeccapurple: '#663399',
                  red: '#ff0000',
                  rosybrown: '#bc8f8f',
                  royalblue: '#4169e1',
                  saddlebrown: '#8b4513',
                  salmon: '#fa8072',
                  sandybrown: '#f4a460',
                  seagreen: '#2e8b57',
                  seashell: '#fff5ee',
                  sienna: '#a0522d',
                  silver: '#c0c0c0',
                  skyblue: '#87ceeb',
                  slateblue: '#6a5acd',
                  slategray: '#708090',
                  snow: '#fffafa',
                  springgreen: '#00ff7f',
                  steelblue: '#4682b4',
                  tan: '#d2b48c',
                  teal: '#008080',
                  thistle: '#d8bfd8',
                  tomato: '#ff6347',
                  turquoise: '#40e0d0',
                  violet: '#ee82ee',
                  wheat: '#f5deb3',
                  white: '#ffffff',
                  whitesmoke: '#f5f5f5',
                  yellow: '#ffff00',
                  yellowgreen: '#9acd32',
              };
              return colors[colour.toLowerCase()];
              //  if (typeof colors[colour.toLowerCase()] != 'undefined') return colors[colour.toLowerCase()]
              // return false
          };
          if (name.startsWith('#')) {
              this.setFromHex(name);
          }
          else {
              const hexColor = colourNameToHex(name);
              if (hexColor)
                  this.setFromHex(hexColor);
          }
      }
      /**
       * Returns the hexadecimal value of this color, including the leading "#" character.
       *
       * @return - Returns the hex value.
       */
      toHex() {
          function componentToHex(c) {
              const int = Math.round(c * 255);
              const hex = int.toString(16);
              return hex.length == 1 ? '0' + hex : hex;
          }
          return '#' + componentToHex(this.r) + componentToHex(this.g) + componentToHex(this.b);
      }
      /**
       * Checks if this Color  contains the same values as the other.
       *
       * @param other - The other Color to compare with.
       * @return - Returns `true` if the values are the same, otherwise, `false`.
       */
      isEqual(other) {
          return this.r == other.r && this.g == other.g && this.b == other.b && this.a == other.a;
      }
      /**
       * Returns true if this color is NOT exactly the same as other.
       *
       * @param other - The other color to compare with.
       * @return - Returns true or false.
       */
      notEquals(other) {
          return this.r != other.r && this.g != other.g && this.b != other.b && this.a != other.a;
      }
      /**
       * Returns true if this color is approximately the same as other.
       *
       * @param other - The other color to compare with.
       * @param precision - The precision to which the values must match.
       * @return - Returns true or false.
       */
      approxEqual(other, precision = Number.EPSILON) {
          return (Math.abs(this.r - other.r) < precision &&
              Math.abs(this.g - other.g) < precision &&
              Math.abs(this.b - other.b) < precision &&
              Math.abs(this.a - other.a) < precision);
      }
      /**
       * Returns a new Color which is this Color added to other.
       *
       * @param other - The other color to add.
       * @return - Returns a new color.
       */
      add(other) {
          return new Color(this.r + other.r, this.g + other.g, this.b + other.b, this.a + other.a);
      }
      /**
       * Updates this Color by adding the values from the other color.
       *
       * @param other - The other color to add.
       */
      addInPlace(other) {
          this.r += other.r;
          this.g += other.g;
          this.b += other.b;
          this.a += other.a;
      }
      /**
       * Returns a new color which is this color subtracted from other.
       *
       * @param other - The other color to subtract.
       * @return - Returns a new color.
       */
      subtract(other) {
          return new Color(this.r - other.r, this.g - other.g, this.b - other.b, this.a - other.a);
      }
      /**
       * Scales this color by scalar and return the result as a new Vec4.
       *
       * @param scalar - The scalar value.
       * @return - Returns a new color.
       */
      scale(scalar) {
          return new Color(this.r * scalar, this.g * scalar, this.b * scalar, this.a * scalar);
      }
      /**
       * Scales this color by scalar.
       *
       * @param scalar - The scalar value.
       */
      scaleInPlace(scalar) {
          this.r *= scalar;
          this.g *= scalar;
          this.b *= scalar;
          this.a *= scalar;
      }
      /**
       * Apply gamma correction to this color
       *
       * @param gamma - The gamma value.
       */
      applyGamma(gamma) {
          this.set(Math.pow(this.r, gamma), Math.pow(this.g, gamma), Math.pow(this.b, gamma), this.a);
      }
      /**
       * Converts to linear color space and returns a new color
       *
       * @param gamma - The gamma value.
       * @return - Returns a new color.
       */
      toLinear(gamma = 2.2) {
          return new Color(Math.pow(this.r, gamma), Math.pow(this.g, gamma), Math.pow(this.b, gamma), this.a);
      }
      /**
       * returns a new color value value is mapped into a gamma curve
       *
       * @param gamma - The gamma value.
       * @return - Returns a new color.
       */
      toGamma(gamma = 2.2) {
          return new Color(Math.pow(this.r, 1.0 / gamma), Math.pow(this.g, 1.0 / gamma), Math.pow(this.b, 1.0 / gamma), this.a);
      }
      /**
       * Calculates and returns the luminance of the linear RGB components.
       *
       * @return - The return value.
       */
      luminance() {
          return 0.2126 * this.r + 0.7152 * this.g + 0.0722 * this.b;
      }
      /**
       * Performs a linear interpolation between this color and other.
       *
       * @param other - The other color to interpolate between.
       * @param t - Interpolation amount between the two inputs.
       * @return - Returns a new color.
       */
      lerp(other, t) {
          const ar = this.r;
          const ag = this.g;
          const ab = this.b;
          const aa = this.a;
          return new Color(ar + t * (other.r - ar), ag + t * (other.g - ag), ab + t * (other.b - ab), aa + t * (other.a - aa));
      }
      /**
       * Creates a random color.
       *
       * @param gammaOffset - The gamma offset. Values between 0 and 1 increase the average brightness of the generated color. Values between 0 and -1 darken the generated color values.
       * @param randomAlpha - Determines whether the alpha channel is random. If not, the alpha values will be 1.0.
       * @return - The new random color.
       */
      static random(gammaOffset = 0.0, randomAlpha = false) {
          if (gammaOffset > 0.0) {
              return new Color(gammaOffset + Math.random() * (1.0 - gammaOffset), gammaOffset + Math.random() * (1.0 - gammaOffset), gammaOffset + Math.random() * (1.0 - gammaOffset), randomAlpha ? gammaOffset + Math.random() * (1.0 - gammaOffset) : 1.0);
          }
          if (gammaOffset < 0.0) {
              return new Color(Math.random() * (1.0 + gammaOffset), Math.random() * (1.0 + gammaOffset), Math.random() * (1.0 + gammaOffset), randomAlpha ? Math.random() * (1.0 + gammaOffset) : 1.0);
          }
          return new Color(Math.random(), Math.random(), Math.random(), randomAlpha ? Math.random() : 1.0);
      }
      /**
       * Clones this color and returns a new color.
       *
       * @return - Returns a new color.
       */
      clone() {
          return new Color(this.r, this.g, this.b, this.a);
      }
      /**
       * Returns the type as an array. Often used to pass types to the GPU.
       *
       * @return - Returns as an array.
       */
      asArray() {
          return [this.r, this.g, this.b, this.a];
      }
      /**
       * Setter from an RGB array.
       *
       * @param vals - The vals param.
       */
      fromArray(vals) {
          this.r = vals[0] / 255;
          this.g = vals[1] / 255;
          this.b = vals[2] / 255;
          this.a = vals.length == 4 ? vals[3] / 255 : 1.0;
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @return - The json object.
       */
      toJSON() {
          return {
              r: this.r,
              g: this.g,
              b: this.b,
              a: this.a,
          };
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object.
       */
      fromJSON(j) {
          this.r = j.r;
          this.g = j.g;
          this.b = j.b;
          this.a = j.a;
      }
      /**
       * Loads the state of the value from a binary reader.
       *
       * @param reader - The reader value.
       */
      readBinary(reader) {
          this.r = reader.loadFloat32();
          this.g = reader.loadFloat32();
          this.b = reader.loadFloat32();
          this.a = reader.loadFloat32();
      }
      /**
       * Returns the CSS rgba string.
       *
       * @return - The return value.
       */
      toCSSString() {
          return ('rgba(' +
              Math.round(this.r * 255) +
              ', ' +
              Math.round(this.g * 255) +
              ', ' +
              Math.round(this.b * 255) +
              ', ' +
              this.a +
              ')');
      }
      /**
       * Converts this Vec3 to a string in JSON format.
       *
       * @return - The return value.
       */
      toString() {
          // eslint-disable-next-line new-cap
          return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());
      }
  }

  exports.EulerAnglesAxisOrder = void 0;
  (function (EulerAnglesAxisOrder) {
      EulerAnglesAxisOrder[EulerAnglesAxisOrder["XYZ"] = 0] = "XYZ";
      EulerAnglesAxisOrder[EulerAnglesAxisOrder["YZX"] = 1] = "YZX";
      EulerAnglesAxisOrder[EulerAnglesAxisOrder["ZXY"] = 2] = "ZXY";
      EulerAnglesAxisOrder[EulerAnglesAxisOrder["XZY"] = 3] = "XZY";
      EulerAnglesAxisOrder[EulerAnglesAxisOrder["ZYX"] = 4] = "ZYX";
      EulerAnglesAxisOrder[EulerAnglesAxisOrder["YXZ"] = 5] = "YXZ";
  })(exports.EulerAnglesAxisOrder || (exports.EulerAnglesAxisOrder = {}));
  /**
   * Class representing euler angles. Euler angles describe rotating an object
   * around its various axis in a specified axis order.
   *
   */
  class EulerAngles {
      x;
      y;
      z;
      order;
      /**
       * Create a euler angle. Receives the xyz values in radians and the order that the rotations are applied.
       *
       * Order parameter values: `XYZ: 0`, `YZX: 1`, `ZXY: 2`, `XZY: 3`, `ZYX: 4`, `YXZ: 5`
       *
       * It could be either the `string` or the `number` value.
       *
       * @param x - The angle of the x axis in radians. Default is 0.
       * @param y - The angle of the y axis in radians. Default is 0.
       * @param z - The angle of the z axis in radians. Default is 0.
       * @param order - The order in which the rotations are applied.
       */
      constructor(x = 0, y = 0, z = 0, order = 0) {
          this.x = x;
          this.y = y;
          this.z = z;
          if (typeof order === 'number' && !isNaN(order))
              this.order = order;
          else {
              switch (order) {
                  case 'XYZ':
                      this.order = 0;
                      break;
                  case 'YZX':
                      this.order = 1;
                      break;
                  case 'ZXY':
                      this.order = 2;
                      break;
                  case 'XZY':
                      this.order = 3;
                      break;
                  case 'ZYX':
                      this.order = 4;
                      break;
                  case 'YXZ':
                      this.order = 5;
                      break;
                  default:
                      throw new Error('Invalid Euler Angles Order:' + order);
              }
          }
      }
      /**
       * Sets the EulerAngles
       *
       * @param x - The x axis rotation in radians.
       * @param y - The y axis rotation in radians.
       * @param z - The z axis rotation in radians.
       */
      set(x, y, z) {
          this.x = x;
          this.y = y;
          this.z = z;
      }
      // ///////////////////////////
      // Persistence
      /**
       * Converts this Vec3 to a string in JSON format.
       *
       * @return - The return value.
       */
      toString() {
          // eslint-disable-next-line new-cap
          return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());
      }
      toJSON() {
          return {
              x: this.x,
              y: this.y,
              z: this.z,
              order: this.order,
          };
      }
      fromJSON(json) {
          this.x = json.x;
          this.y = json.y;
          this.z = json.z;
          this.order = json.order;
      }
  }

  /* eslint-disable new-cap */
  /**
   * A class representing a 3x3 matrix.
   * This matrix class is based on GLM, and is column major.
   *
   */
  class Mat3 {
      m00 = 1;
      m01 = 0;
      m02 = 0;
      m10 = 0;
      m11 = 1;
      m12 = 0;
      m20 = 0;
      m21 = 0;
      m22 = 1;
      /**
       * Initializes the Mat3 class with given data.
       *
       * @param m00 - Row 0, column 0.
       * @param m01 - Row 0, column 1.
       * @param m02 - Row 0, column 2.
       * @param m10 - Row 1, column 0.
       * @param m11 - Row 1, column 1.
       * @param m12 - Row 1, column 2.
       * @param m20 - Row 2, column 0.
       * @param m21 - Row 2, column 1.
       * @param m22 - Row 2, column 2.
       */
      constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {
          if (m00 instanceof Vec3 && m01 instanceof Vec3 && m02 instanceof Vec3) {
              this.set(m00.x, m00.y, m00.z, m01.x, m01.y, m01.z, m02.x, m02.y, m02.z);
          }
          else {
              this.set(m00, m01, m02, m10, m11, m12, m20, m21, m22);
          }
      }
      /**
       * Getter for the `x` axis.
       *
       * @return - Returns the `x` axis as a Vec3.
       */
      get xAxis() {
          return new Vec3(this.m00, this.m01, this.m02);
      }
      /**
       * Setter for the `x` axis.
       *
       * @param vec3 - The vec3 value.
       */
      set xAxis(vec3) {
          this.xAxis.set(vec3.x, vec3.y, vec3.z);
      }
      /**
       * Getter for the `y` axis.
       * * @return - Returns the `y` axis as a Vec3.
       */
      get yAxis() {
          return new Vec3(this.m10, this.m11, this.m12);
      }
      /**
       * Setter for the `y` axis.
       * @param vec3 - The vec3 value.
       */
      set yAxis(vec3) {
          this.yAxis.set(vec3.x, vec3.y, vec3.z);
      }
      /**
       * Getter for the `z` axis.
       * * @return - Returns the `z` axis as a Vec3.
       */
      get zAxis() {
          return new Vec3(this.m20, this.m21, this.m22);
      }
      /**
       * Setter for the `z` axis.
       * @param vec3 - The vec3 value.
       */
      set zAxis(vec3) {
          this.zAxis.set(vec3.x, vec3.y, vec3.z);
      }
      // /////////////////////////////////////////
      // Setters
      /**
       * Sets the state of the Mat3 class
       *
       * @param m00 - Row 0, column 0.
       * @param m01 - Row 0, column 1.
       * @param m02 - Row 0, column 2.
       * @param m10 - Row 1, column 0.
       * @param m11 - Row 1, column 1.
       * @param m12 - Row 1, column 2.
       * @param m20 - Row 2, column 0.
       * @param m21 - Row 2, column 1.
       * @param m22 - Row 2, column 2.
       */
      set(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {
          this.m00 = m00;
          this.m01 = m01;
          this.m02 = m02;
          this.m10 = m10;
          this.m11 = m11;
          this.m12 = m12;
          this.m20 = m20;
          this.m21 = m21;
          this.m22 = m22;
      }
      /**
       * Sets state of the Mat3 with the identity  Matrix
       */
      setIdentity() {
          this.set();
      }
      /**
       * Sets state of the Mat3 from another Mat3
       *
       * Note: works with either Mat3 or Mat4.
       *
       * @param mat - The mat value.
       */
      setFromMat(mat) {
          this.m00 = mat.m00;
          this.m01 = mat.m01;
          this.m02 = mat.m02;
          this.m10 = mat.m10;
          this.m11 = mat.m11;
          this.m12 = mat.m12;
          this.m20 = mat.m20;
          this.m21 = mat.m21;
          this.m22 = mat.m22;
      }
      /**
       * Scales and calculates the cross product of the `Vec3` and sets the result in the Mat3
       * Note: the resulting matrix +Z axis is aligned with the provided direction value.
       *
       * @param dir - The dir value.
       * @param up - The up value.
       */
      setFromDirectionAndUpvector(dir, up) {
          const zAxis = dir;
          const zLen = zAxis.length();
          if (zLen < Number.EPSILON) {
              this.setIdentity();
              return;
          }
          zAxis.scaleInPlace(1 / zLen);
          const xAxis = up.cross(zAxis);
          const xLen = xAxis.length();
          if (xLen > Number.EPSILON)
              xAxis.scaleInPlace(1 / xLen);
          const yAxis = zAxis.cross(xAxis);
          const yLen = yAxis.length();
          if (yLen > Number.EPSILON)
              yAxis.scaleInPlace(1 / yLen);
          this.set(xAxis.x, xAxis.y, xAxis.z, yAxis.x, yAxis.y, yAxis.z, zAxis.x, zAxis.y, zAxis.z);
      }
      /**
       * Inverts a Mat3 and returns the result as a new instance.
       *
       * @return - Returns a new Mat3.
       */
      inverse() {
          const a00 = this.m00;
          const a01 = this.m01;
          const a02 = this.m02;
          const a10 = this.m10;
          const a11 = this.m11;
          const a12 = this.m12;
          const a20 = this.m20;
          const a21 = this.m21;
          const a22 = this.m22;
          const b01 = a22 * a11 - a12 * a21;
          const b11 = -a22 * a10 + a12 * a20;
          const b21 = a21 * a10 - a11 * a20;
          // Calculate the determinant
          let det = a00 * b01 + a01 * b11 + a02 * b21;
          if (!det) {
              console.warn('Unable to invert Mat3');
              return new Mat3();
          }
          det = 1.0 / det;
          return new Mat3(b01 * det, (-a22 * a01 + a02 * a21) * det, (a12 * a01 - a02 * a11) * det, b11 * det, (a22 * a00 - a02 * a20) * det, (-a12 * a00 + a02 * a10) * det, b21 * det, (-a21 * a00 + a01 * a20) * det, (a11 * a00 - a01 * a10) * det);
      }
      /**
       * Inverts a Mat3 in place modifying its values.
       *
       * @return - The return value.
       */
      invertInPlace() {
          const a00 = this.m00;
          const a01 = this.m01;
          const a02 = this.m02;
          const a10 = this.m10;
          const a11 = this.m11;
          const a12 = this.m12;
          const a20 = this.m20;
          const a21 = this.m21;
          const a22 = this.m22;
          const b01 = a22 * a11 - a12 * a21;
          const b11 = -a22 * a10 + a12 * a20;
          const b21 = a21 * a10 - a11 * a20;
          // Calculate the determinant
          let det = a00 * b01 + a01 * b11 + a02 * b21;
          if (!det) {
              console.warn('Unable to invert Mat3');
              return false;
          }
          det = 1.0 / det;
          this.set(b01 * det, (-a22 * a01 + a02 * a21) * det, (a12 * a01 - a02 * a11) * det, b11 * det, (a22 * a00 - a02 * a20) * det, (-a12 * a00 + a02 * a10) * det, b21 * det, (-a21 * a00 + a01 * a20) * det, (a11 * a00 - a01 * a10) * det);
          return true;
      }
      /**
       * Transposes (exchanges columns with rows) this matrix
       * and returns the result as a new instance.
       *
       * @return - Return a new transposed Mat3.
       */
      transpose() {
          return new Mat3(this.m00, this.m10, this.m20, this.m01, this.m11, this.m21, this.m02, this.m12, this.m22);
      }
      /**
       * Transposes (exchanges columns with rows) this matrix modifying its values.
       */
      transposeInPlace() {
          // If we are transposing ourselves we can skip a few steps but have to cache some values
          const a01 = this.m01;
          const a02 = this.m02;
          const a12 = this.m12;
          this.m01 = this.m10;
          this.m02 = this.m20;
          this.m10 = a01;
          this.m12 = this.m21;
          this.m20 = a02;
          this.m21 = a12;
      }
      /**
       * Transforms the Vec3 with a Mat3.
       *
       * @param vec3 - The vec3 value.
       * @return - Return the result as a new Vec3.
       */
      transformVec3(vec3) {
          return new Vec3(this.m00 * vec3.x + this.m01 * vec3.y + this.m02 * vec3.z, this.m10 * vec3.x + this.m11 * vec3.y + this.m12 * vec3.z, this.m20 * vec3.x + this.m21 * vec3.y + this.m22 * vec3.z);
      }
      /**
       * Clones this Mat3 returning a new instance.
       *
       * @return - Returns a new Mat3.
       */
      clone() {
          return new Mat3(this.m00, this.m01, this.m02, this.m10, this.m11, this.m12, this.m20, this.m21, this.m22);
      }
      // ///////////////////////////
      // Persistence
      /**
       * Loads the state of the value from a binary reader.
       *
       * @param reader - The reader value.
       */
      readBinary(reader) {
          const data = reader.loadFloat32Array(9);
          this.fromArray(data);
      }
      /**
       * The toJSON method encodes this type as a json object for persistence.
       */
      toJSON() {
          return this.asArray();
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param json - The json param.
       */
      fromJSON(json) {
          this.fromArray(json);
      }
      // ///////////////////////////
      // Debugging
      /**
       * Converts this Vec3 to a string in JSON format.
       *
       * @return - The return value.
       */
      toString() {
          // eslint-disable-next-line new-cap
          return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());
      }
      /**
       * Returns current Math type data as array. Often used to pass types to the GPU.
       *
       * @return - Returns the result as an array.
       */
      asArray() {
          return [this.m00, this.m01, this.m02, this.m10, this.m11, this.m12, this.m20, this.m21, this.m22];
      }
      fromArray(array) {
          this.m00 = array[0];
          this.m01 = array[1];
          this.m02 = array[2];
          this.m10 = array[3];
          this.m11 = array[4];
          this.m12 = array[5];
          this.m20 = array[6];
          this.m21 = array[7];
          this.m22 = array[8];
      }
  }

  /**
   * A class representing a 4x4 matrix.
   * This matrix class is based on GLM, and is column major.
   *
   */
  class Mat4 {
      m00;
      m01;
      m02;
      m03;
      m10;
      m11;
      m12;
      m13;
      m20;
      m21;
      m22;
      m23;
      m30;
      m31;
      m32;
      m33;
      constructor(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m10 = 0, m11 = 1, m12 = 0, m13 = 0, m20 = 0, m21 = 0, m22 = 1, m23 = 0, m30 = 0, m31 = 0, m32 = 0, m33 = 1) {
          this.m00 = m00;
          this.m01 = m01;
          this.m02 = m02;
          this.m03 = m03;
          this.m10 = m10;
          this.m11 = m11;
          this.m12 = m12;
          this.m13 = m13;
          this.m20 = m20;
          this.m21 = m21;
          this.m22 = m22;
          this.m23 = m23;
          this.m30 = m30;
          this.m31 = m31;
          this.m32 = m32;
          this.m33 = m33;
      }
      /**
       * Getter for the `x` axis.
       *
       * @return - Returns the `x` axis as a Vec3.
       */
      get xAxis() {
          return new Vec3(this.m00, this.m01, this.m02);
      }
      /**
       * Setter for the `x` axis.
       *
       * @param vec3 - The vec3 value.
       */
      set xAxis(vec3) {
          this.xAxis.set(vec3.x, vec3.y, vec3.z);
      }
      /**
       * Getter for the `y` axis.
       *
       * @return - Returns the `y` axis as a Vec3.
       */
      get yAxis() {
          return new Vec3(this.m10, this.m11, this.m12);
      }
      /**
       * Setter for the `y` axis.
       *
       * @param vec3 - The vec3 value.
       */
      set yAxis(vec3) {
          this.yAxis.set(vec3.x, vec3.y, vec3.z);
      }
      /**
       * Getter for the `z` axis.
       *
       * @return - Returns the `z` axis as a Vec3.
       */
      get zAxis() {
          return new Vec3(this.m20, this.m21, this.m22);
      }
      /**
       * Setter for the `z` axis.
       *
       * @param vec3 - The vec3 value.
       */
      set zAxis(vec3) {
          this.zAxis.set(vec3.x, vec3.y, vec3.z);
      }
      /**
       * Getter for the translation of the matrix. Assumes the translation values are 12, 13, & 14.
       *
       * @return - Returns the translation.
       */
      get translation() {
          return new Vec3(this.m30, this.m31, this.m32);
      }
      /**
       * Setter for the translation of the matrix. Assumes the translation values are 12, 13, & 14.
       *
       * @param vec3 - The translation.
       */
      set translation(vec3) {
          this.m30 = vec3.x;
          this.m31 = vec3.y;
          this.m32 = vec3.z;
      }
      // /////////////////////////////////////////
      // Setters
      /**
       * Sets the state of the Mat4 class
       *
       * @param m00 - Row 0, column 0.
       * @param m01 - Row 0, column 1.
       * @param m02 - Row 0, column 2.
       * @param m03 - Row 0, column 3.
       * @param m10 - Row 1, column 0.
       * @param m11 - Row 1, column 1.
       * @param m12 - Row 1, column 2.
       * @param m13 - Row 1, column 3.
       * @param m20 - Row 2, column 0.
       * @param m21 - Row 2, column 1.
       * @param m22 - Row 2, column 2.
       * @param m23 - Row 2, column 3.
       * @param m30 - Row 3, column 0.
       * @param m31 - Row 3, column 1.
       * @param m32 - Row 3, column 2.
       * @param m33 - Row 3, column 3.
       */
      set(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m10 = 0, m11 = 1, m12 = 0, m13 = 0, m20 = 0, m21 = 0, m22 = 1, m23 = 0, m30 = 0, m31 = 0, m32 = 0, m33 = 1) {
          this.m00 = m00;
          this.m01 = m01;
          this.m02 = m02;
          this.m03 = m03;
          this.m10 = m10;
          this.m11 = m11;
          this.m12 = m12;
          this.m13 = m13;
          this.m20 = m20;
          this.m21 = m21;
          this.m22 = m22;
          this.m23 = m23;
          this.m30 = m30;
          this.m31 = m31;
          this.m32 = m32;
          this.m33 = m33;
      }
      /**
       * Sets state of the Mat4 with the identity  Matrix
       */
      setIdentity() {
          this.set();
      }
      /**
       * Sets state of the Mat4 from another Mat4
       *
       * Note: works with either Mat3 or Mat4.
       *
       * @param mat4 - The mat4 value.
       */
      setFromMat4(mat4) {
          this.m00 = mat4.m00;
          this.m01 = mat4.m01;
          this.m02 = mat4.m02;
          this.m03 = mat4.m03;
          this.m10 = mat4.m10;
          this.m11 = mat4.m11;
          this.m12 = mat4.m12;
          this.m13 = mat4.m13;
          this.m20 = mat4.m20;
          this.m21 = mat4.m21;
          this.m22 = mat4.m22;
          this.m23 = mat4.m23;
          this.m30 = mat4.m30;
          this.m31 = mat4.m31;
          this.m32 = mat4.m32;
          this.m33 = mat4.m33;
      }
      /**
       * Converts a Mat4 to a Mat3.
       *
       * @return - Returns a new Mat3.
       */
      toMat3() {
          return new Mat3(this.m00, this.m01, this.m02, this.m10, this.m11, this.m12, this.m20, this.m21, this.m22);
      }
      /**
       * Transposes (exchanges columns with rows) this matrix.
       */
      transposeInPlace() {
          // If we are transposing ourselves we can skip a few steps but have to cache some values
          const a01 = this.m01;
          const a02 = this.m02;
          const a03 = this.m03;
          const a12 = this.m12;
          const a13 = this.m13;
          const a23 = this.m23;
          this.m01 = this.m10;
          this.m02 = this.m20;
          this.m03 = this.m30;
          this.m10 = a01;
          this.m12 = this.m21;
          this.m13 = this.m31;
          this.m20 = a02;
          this.m21 = a12;
          this.m23 = this.m32;
          this.m30 = a03;
          this.m31 = a13;
          this.m32 = a23;
      }
      /**
       * Transposes (exchanges columns with rows) this matrix
       * and returns the result as a new instance.
       *
       * @return - Return a new transposed Mat4.
       */
      transpose() {
          return new Mat4(this.m00, this.m10, this.m20, this.m30, this.m01, this.m11, this.m21, this.m31, this.m02, this.m12, this.m22, this.m32, this.m03, this.m13, this.m23, this.m33);
      }
      /**
       * Inverts a Mat4 and returns the result as a new instance.
       *
       * @return - Returns a new Mat4.
       */
      inverse() {
          const a00 = this.m00;
          const a01 = this.m01;
          const a02 = this.m02;
          const a03 = this.m03;
          const a10 = this.m10;
          const a11 = this.m11;
          const a12 = this.m12;
          const a13 = this.m13;
          const a20 = this.m20;
          const a21 = this.m21;
          const a22 = this.m22;
          const a23 = this.m23;
          const a30 = this.m30;
          const a31 = this.m31;
          const a32 = this.m32;
          const a33 = this.m33;
          const b00 = a00 * a11 - a01 * a10;
          const b01 = a00 * a12 - a02 * a10;
          const b02 = a00 * a13 - a03 * a10;
          const b03 = a01 * a12 - a02 * a11;
          const b04 = a01 * a13 - a03 * a11;
          const b05 = a02 * a13 - a03 * a12;
          const b06 = a20 * a31 - a21 * a30;
          const b07 = a20 * a32 - a22 * a30;
          const b08 = a20 * a33 - a23 * a30;
          const b09 = a21 * a32 - a22 * a31;
          const b10 = a21 * a33 - a23 * a31;
          const b11 = a22 * a33 - a23 * a32;
          // Calculate the determinant
          let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
          if (!det) {
              console.warn('Unable to invert Mat4');
              return this;
          }
          det = 1.0 / det;
          return new Mat4((a11 * b11 - a12 * b10 + a13 * b09) * det, (a02 * b10 - a01 * b11 - a03 * b09) * det, (a31 * b05 - a32 * b04 + a33 * b03) * det, (a22 * b04 - a21 * b05 - a23 * b03) * det, (a12 * b08 - a10 * b11 - a13 * b07) * det, (a00 * b11 - a02 * b08 + a03 * b07) * det, (a32 * b02 - a30 * b05 - a33 * b01) * det, (a20 * b05 - a22 * b02 + a23 * b01) * det, (a10 * b10 - a11 * b08 + a13 * b06) * det, (a01 * b08 - a00 * b10 - a03 * b06) * det, (a30 * b04 - a31 * b02 + a33 * b00) * det, (a21 * b02 - a20 * b04 - a23 * b00) * det, (a11 * b07 - a10 * b09 - a12 * b06) * det, (a00 * b09 - a01 * b07 + a02 * b06) * det, (a31 * b01 - a30 * b03 - a32 * b00) * det, (a20 * b03 - a21 * b01 + a22 * b00) * det);
      }
      /**
       * Inverts a Mat4.
       *
       * @return - The return value.
       */
      invertInPlace() {
          const a00 = this.m00;
          const a01 = this.m01;
          const a02 = this.m02;
          const a03 = this.m03;
          const a10 = this.m10;
          const a11 = this.m11;
          const a12 = this.m12;
          const a13 = this.m13;
          const a20 = this.m20;
          const a21 = this.m21;
          const a22 = this.m22;
          const a23 = this.m23;
          const a30 = this.m30;
          const a31 = this.m31;
          const a32 = this.m32;
          const a33 = this.m33;
          const b00 = a00 * a11 - a01 * a10;
          const b01 = a00 * a12 - a02 * a10;
          const b02 = a00 * a13 - a03 * a10;
          const b03 = a01 * a12 - a02 * a11;
          const b04 = a01 * a13 - a03 * a11;
          const b05 = a02 * a13 - a03 * a12;
          const b06 = a20 * a31 - a21 * a30;
          const b07 = a20 * a32 - a22 * a30;
          const b08 = a20 * a33 - a23 * a30;
          const b09 = a21 * a32 - a22 * a31;
          const b10 = a21 * a33 - a23 * a31;
          const b11 = a22 * a33 - a23 * a32;
          // Calculate the determinant
          let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
          if (!det) {
              console.warn('Unable to invert Mat4');
              return false;
          }
          det = 1.0 / det;
          this.set((a11 * b11 - a12 * b10 + a13 * b09) * det, (a02 * b10 - a01 * b11 - a03 * b09) * det, (a31 * b05 - a32 * b04 + a33 * b03) * det, (a22 * b04 - a21 * b05 - a23 * b03) * det, (a12 * b08 - a10 * b11 - a13 * b07) * det, (a00 * b11 - a02 * b08 + a03 * b07) * det, (a32 * b02 - a30 * b05 - a33 * b01) * det, (a20 * b05 - a22 * b02 + a23 * b01) * det, (a10 * b10 - a11 * b08 + a13 * b06) * det, (a01 * b08 - a00 * b10 - a03 * b06) * det, (a30 * b04 - a31 * b02 + a33 * b00) * det, (a21 * b02 - a20 * b04 - a23 * b00) * det, (a11 * b07 - a10 * b09 - a12 * b06) * det, (a00 * b09 - a01 * b07 + a02 * b06) * det, (a31 * b01 - a30 * b03 - a32 * b00) * det, (a20 * b03 - a21 * b01 + a22 * b00) * det);
          return true;
      }
      /**
       * Sets this matrix as the inverse of the given Mat4.
       *
       * @param mat4 - The mat4 value.
       * @return - In case the `determinant` can't be calculated, a `null` will be returned, otherwise, nothing is returned
       */
      setInverse(mat4) {
          const a00 = mat4.m00;
          const a01 = mat4.m01;
          const a02 = mat4.m02;
          const a03 = mat4.m03;
          const a10 = mat4.m10;
          const a11 = mat4.m11;
          const a12 = mat4.m12;
          const a13 = mat4.m13;
          const a20 = mat4.m20;
          const a21 = mat4.m21;
          const a22 = mat4.m22;
          const a23 = mat4.m23;
          const a30 = mat4.m30;
          const a31 = mat4.m31;
          const a32 = mat4.m32;
          const a33 = mat4.m33;
          const b00 = a00 * a11 - a01 * a10;
          const b01 = a00 * a12 - a02 * a10;
          const b02 = a00 * a13 - a03 * a10;
          const b03 = a01 * a12 - a02 * a11;
          const b04 = a01 * a13 - a03 * a11;
          const b05 = a02 * a13 - a03 * a12;
          const b06 = a20 * a31 - a21 * a30;
          const b07 = a20 * a32 - a22 * a30;
          const b08 = a20 * a33 - a23 * a30;
          const b09 = a21 * a32 - a22 * a31;
          const b10 = a21 * a33 - a23 * a31;
          const b11 = a22 * a33 - a23 * a32;
          // Calculate the determinant
          let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
          if (!det) {
              throw new Error('Unable to invert Mat4');
          }
          det = 1.0 / det;
          this.set((a11 * b11 - a12 * b10 + a13 * b09) * det, (a02 * b10 - a01 * b11 - a03 * b09) * det, (a31 * b05 - a32 * b04 + a33 * b03) * det, (a22 * b04 - a21 * b05 - a23 * b03) * det, (a12 * b08 - a10 * b11 - a13 * b07) * det, (a00 * b11 - a02 * b08 + a03 * b07) * det, (a32 * b02 - a30 * b05 - a33 * b01) * det, (a20 * b05 - a22 * b02 + a23 * b01) * det, (a10 * b10 - a11 * b08 + a13 * b06) * det, (a01 * b08 - a00 * b10 - a03 * b06) * det, (a30 * b04 - a31 * b02 + a33 * b00) * det, (a21 * b02 - a20 * b04 - a23 * b00) * det, (a11 * b07 - a10 * b09 - a12 * b06) * det, (a00 * b09 - a01 * b07 + a02 * b06) * det, (a31 * b01 - a30 * b03 - a32 * b00) * det, (a20 * b03 - a21 * b01 + a22 * b00) * det);
      }
      /**
       * Multiplies two Mat4s and returns the result as a new instance.
       *
       * @param other - The other Mat4 to multiply with.
       * @return - Returns a new Mat4.
       */
      multiply(other) {
          const a00 = this.m00;
          const a01 = this.m01;
          const a02 = this.m02;
          const a03 = this.m03;
          const a10 = this.m10;
          const a11 = this.m11;
          const a12 = this.m12;
          const a13 = this.m13;
          const a20 = this.m20;
          const a21 = this.m21;
          const a22 = this.m22;
          const a23 = this.m23;
          const a30 = this.m30;
          const a31 = this.m31;
          const a32 = this.m32;
          const a33 = this.m33;
          // Cache only the current line of the second matrix
          const b = other.asArray();
          let b0 = b[0];
          let b1 = b[1];
          let b2 = b[2];
          let b3 = b[3];
          const result = new Mat4();
          result.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          result.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          result.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          result.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b[4];
          b1 = b[5];
          b2 = b[6];
          b3 = b[7];
          result.m10 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          result.m11 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          result.m12 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          result.m13 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b[8];
          b1 = b[9];
          b2 = b[10];
          b3 = b[11];
          result.m20 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          result.m21 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          result.m22 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          result.m23 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b[12];
          b1 = b[13];
          b2 = b[14];
          b3 = b[15];
          result.m30 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          result.m31 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          result.m32 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          result.m33 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          return result;
      }
      /**
       * Multiplies two Mat4s in place explicitly not using SIMD.
       *
       * @param other - The other Mat4 to multiply with.
       * @return - Returns a new Mat4.
       */
      multiplyInPlace(other) {
          const a = this.asArray();
          const a00 = a[0];
          const a01 = a[1];
          const a02 = a[2];
          const a03 = a[3];
          const a10 = a[4];
          const a11 = a[5];
          const a12 = a[6];
          const a13 = a[7];
          const a20 = a[8];
          const a21 = a[9];
          const a22 = a[10];
          const a23 = a[11];
          const a30 = a[12];
          const a31 = a[13];
          const a32 = a[14];
          const a33 = a[15];
          // Cache only the current line of the second matrix
          const b = other.asArray();
          let b0 = b[0];
          let b1 = b[1];
          let b2 = b[2];
          let b3 = b[3];
          this.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          this.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          this.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          this.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b[4];
          b1 = b[5];
          b2 = b[6];
          b3 = b[7];
          this.m10 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          this.m11 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          this.m12 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          this.m13 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b[8];
          b1 = b[9];
          b2 = b[10];
          b3 = b[11];
          this.m20 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          this.m21 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          this.m22 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          this.m23 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b[12];
          b1 = b[13];
          b2 = b[14];
          b3 = b[15];
          this.m30 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          this.m31 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          this.m32 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          this.m33 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          return this;
      }
      /**
       * Post multiplies two Mat4s in place explicitly not using SIMD.
       *
       * @param other - The other Mat4 to multiply with.
       * @return - Returns the result as a new Mat4.
       */
      postMultiplyInPlace(other) {
          const a = other.asArray();
          const a00 = a[0];
          const a01 = a[1];
          const a02 = a[2];
          const a03 = a[3];
          const a10 = a[4];
          const a11 = a[5];
          const a12 = a[6];
          const a13 = a[7];
          const a20 = a[8];
          const a21 = a[9];
          const a22 = a[10];
          const a23 = a[11];
          const a30 = a[12];
          const a31 = a[13];
          const a32 = a[14];
          const a33 = a[15];
          // Cache only the current line of the second matrix
          const b = this.asArray();
          let b0 = b[0];
          let b1 = b[1];
          let b2 = b[2];
          let b3 = b[3];
          this.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          this.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          this.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          this.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b[4];
          b1 = b[5];
          b2 = b[6];
          b3 = b[7];
          this.m10 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          this.m11 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          this.m12 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          this.m13 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b[8];
          b1 = b[9];
          b2 = b[10];
          b3 = b[11];
          this.m20 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          this.m21 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          this.m22 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          this.m23 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b[12];
          b1 = b[13];
          b2 = b[14];
          b3 = b[15];
          this.m30 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          this.m31 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          this.m32 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          this.m33 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          return this;
      }
      /**
       * Translate a Mat4 by the given vector not using SIMD.
       *
       * @param v3 - The given vector to translate along.
       * @return - The return value.
       */
      translateInPlace(v3) {
          const a = this.asArray();
          const x = v3.x;
          const y = v3.y;
          const z = v3.z;
          a[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
          a[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
          a[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
          a[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
          return this;
      }
      /**
       * Generates a look-at matrix with the given position, focal point, and up axis.
       *
       * @param pos - Position of the viewer.
       * @param target - Point the viewer is looking at.
       * @param up - Vec3 pointing up.
       */
      setLookAt(pos, target, up) {
          const zAxis = pos.subtract(target);
          const zLen = zAxis.length();
          if (zLen < Number.EPSILON) {
              this.setIdentity();
              return;
          }
          zAxis.scaleInPlace(1.0 / zLen);
          const xAxis = up.cross(zAxis);
          const xLen = xAxis.length();
          if (xLen > Number.EPSILON)
              xAxis.scaleInPlace(1.0 / xLen);
          const yAxis = zAxis.cross(xAxis);
          const yLen = yAxis.length();
          if (yLen > Number.EPSILON)
              yAxis.scaleInPlace(1.0 / yLen);
          /* eslint-disable prettier/prettier*/
          this.set(xAxis.x, xAxis.y, xAxis.z, 0, yAxis.x, yAxis.y, yAxis.z, 0, zAxis.x, zAxis.y, zAxis.z, 0, pos.x, pos.y, pos.z, 1);
          /* eslint-enable prettier/prettier*/
      }
      /**
       * Creates a matrix from a given angle around a given axis.
       * This is equivalent to (but much faster than):
       *
       *     mat4.identity(dest);
       *     mat4.rotate(dest, dest, rad, axis);
       *
       * @param axis - The axis to rotate around.
       * @param rad - The angle to rotate the matrix by.
       * @return - The return value.
       */
      setRotation(axis, rad) {
          const len = axis.length();
          if (Math.abs(len) < Number.EPSILON) {
              return null;
          }
          const x = axis.x / len;
          const y = axis.y / len;
          const z = axis.z / len;
          const s = Math.sin(rad);
          const c = Math.cos(rad);
          const t = 1 - c;
          // Perform rotation-specific matrix multiplication
          const a = this.asArray();
          a[0] = x * x * t + c;
          a[1] = y * x * t + z * s;
          a[2] = z * x * t - y * s;
          a[3] = 0;
          a[4] = x * y * t - z * s;
          a[5] = y * y * t + c;
          a[6] = z * y * t + x * s;
          a[7] = 0;
          a[8] = x * z * t + y * s;
          a[9] = y * z * t - x * s;
          a[10] = z * z * t + c;
          a[11] = 0;
          a[12] = 0;
          a[13] = 0;
          a[14] = 0;
          a[15] = 1;
          return this;
      }
      /**
       * Creates a matrix from the given angle around the X axis.
       * This is equivalent to (but much faster than):
       *
       *     mat4.identity(dest);
       *     mat4.rotateX(dest, dest, rad);
       *
       * @param rad - The angle to rotate the matrix by.
       * @return - The return value.
       */
      setXRotation(rad) {
          const s = Math.sin(rad);
          const c = Math.cos(rad);
          // Perform axis-specific matrix multiplication
          const a = this.asArray();
          /* eslint-disable prettier/prettier*/
          a[0] = 1;
          a[1] = 0;
          a[2] = 0;
          a[3] = 0;
          a[4] = 0;
          a[5] = c;
          a[6] = s;
          a[7] = 0;
          a[8] = 0;
          a[9] = -s;
          a[10] = c;
          a[11] = 0;
          a[12] = 0;
          a[13] = 0;
          a[14] = 0;
          a[15] = 1;
          /* eslint-enable prettier/prettier*/
          return this;
      }
      /**
       * Creates a matrix from the given angle around the Y axis.
       * This is equivalent to (but much faster than):
       *
       *     mat4.identity(dest);
       *     mat4.rotateY(dest, dest, rad);
       *
       * @param rad - The angle to rotate the matrix by.
       * @return - The return value.
       */
      setYRotation(rad) {
          const s = Math.sin(rad);
          const c = Math.cos(rad);
          // Perform axis-specific matrix multiplication
          const a = this.asArray();
          /* eslint-disable prettier/prettier*/
          a[0] = c;
          a[1] = 0;
          a[2] = -s;
          a[3] = 0;
          a[4] = 0;
          a[5] = 1;
          a[6] = 0;
          a[7] = 0;
          a[8] = s;
          a[9] = 0;
          a[10] = c;
          a[11] = 0;
          a[12] = 0;
          a[13] = 0;
          a[14] = 0;
          a[15] = 1;
          /* eslint-enable prettier/prettier*/
          return this;
      }
      /**
       * Creates a matrix from the given angle around the Z axis.
       * This is equivalent to (but much faster than):
       *
       *     mat4.identity(dest);
       *     mat4.rotateZ(dest, dest, rad);
       *
       * @param rad - The angle to rotate the matrix by.
       * @return - The return value.
       */
      setZRotation(rad) {
          const s = Math.sin(rad);
          const c = Math.cos(rad);
          // Perform axis-specific matrix multiplication
          const a = this.asArray();
          /* eslint-disable prettier/prettier*/
          a[0] = c;
          a[1] = s;
          a[2] = 0;
          a[3] = 0;
          a[4] = -s;
          a[5] = c;
          a[6] = 0;
          a[7] = 0;
          a[8] = 0;
          a[9] = 0;
          a[10] = 1;
          a[11] = 0;
          a[12] = 0;
          a[13] = 0;
          a[14] = 0;
          a[15] = 1;
          /* eslint-enable prettier/prettier*/
          return this;
      }
      /**
       * Transforms the Vec4 with a Mat4.
       *
       * @param vec - The vec value.
       * @return - Return the result as a new Vec4.
       */
      transformVec4(vec) {
          const a = this.asArray();
          const x = vec.x;
          const y = vec.y;
          const z = vec.z;
          const w = vec.w;
          return new Vec4(a[0] * x + a[4] * y + a[8] * z + a[12] * w, a[1] * x + a[5] * y + a[9] * z + a[13] * w, a[2] * x + a[6] * y + a[10] * z + a[14] * w, a[3] * x + a[7] * y + a[11] * z + a[15] * w);
      }
      /**
       * Transforms the Vec3 with a Mat4.
       *
       * @param vec - The vec value.
       * @return - Return the result as a new Vec3.
       */
      transformVec3(vec) {
          const a = this.asArray();
          const x = vec.x;
          const y = vec.y;
          const z = vec.z;
          return new Vec3(a[0] * x + a[4] * y + a[8] * z + a[12], a[1] * x + a[5] * y + a[9] * z + a[13], a[2] * x + a[6] * y + a[10] * z + a[14]);
      }
      /**
       * Rotates a given `Vec3` and the result is returned as a new `Vec3`, applying only the top left components of the matrix, so not applying any translation.
       * @param vec - The vec value.
       * @return - Return the result as a new Vec3.
       */
      rotateVec3(vec) {
          const a = this.asArray();
          const x = vec.x;
          const y = vec.y;
          const z = vec.z;
          return new Vec3(a[0] * x + a[4] * y + a[8] * z, a[1] * x + a[5] * y + a[9] * z, a[2] * x + a[6] * y + a[10] * z);
      }
      /**
       * Set the perspective from a Mat4.
       *
       * @param fovY - The fovY value.
       * @param aspect - The aspect value.
       * @param near - The near value.
       * @param far - The far value.
       */
      setPerspectiveMatrix(fovy, aspect, near, far) {
          const f = Math.tan(Math.PI * 0.5 - 0.5 * fovy);
          const rangeInv = 1.0 / (near - far);
          /* eslint-disable prettier/prettier*/
          this.set(f / aspect, 0, 0, 0, 0, f, 0, 0, 0, 0, (near + far) * rangeInv, -1, 0, 0, near * far * rangeInv * 2, 0);
          /* eslint-enable prettier/prettier*/
      }
      /**
       * Calculates the orthographic matrix and sets the state of the Mat4 class
       *
       * @param left - The left value.
       * @param right - The right value.
       * @param bottom - The bottom value.
       * @param top - The top value.
       * @param near - The near value.
       * @param far - The far value.
       */
      setOrthographicMatrix(left, right, bottom, top, near, far) {
          const lr = 1 / (left - right);
          const bt = 1 / (bottom - top);
          const nf = 1 / (near - far);
          /* eslint-disable prettier/prettier*/
          this.set(-2 * lr, 0, 0, 0, 0, -2 * bt, 0, 0, 0, 0, 2 * nf, 0, (left + right) * lr, (top + bottom) * bt, (far + near) * nf, 1);
          /* eslint-enable prettier/prettier*/
      }
      /**
       * Set the Matrix to be a scale matrix.
       *
       * @param x - The x value.
       * @param y - The y value.
       * @param z - The z value.
       */
      setScale(x, y, z) {
          /* eslint-disable prettier/prettier*/
          if (x instanceof Vec3) {
              this.set(x.x, 0, 0, 0, 0, x.y, 0, 0, 0, 0, x.z, 0, 0, 0, 0, 1);
          }
          else {
              this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
          }
          /* eslint-enable prettier/prettier*/
      }
      /**
       * Transforms a 3x4 matrix into a 4x4 matrix and set the result to the Math4 state.
       *
       * @param m3x4 - The m3x4 value.
       */
      setFromMat3x4Array(m3x4) {
          /* eslint-disable prettier/prettier*/
          this.set(m3x4[0], m3x4[1], m3x4[2], 0, m3x4[3], m3x4[4], m3x4[5], 0, m3x4[6], m3x4[7], m3x4[8], 0, m3x4[9], m3x4[10], m3x4[11], 1);
          /* eslint-enable prettier/prettier*/
      }
      /**
       * Clones this Mat4 returning a new instance.
       *
       * @return - Returns a new Mat4.
       */
      clone() {
          return new Mat4(this.m00, this.m01, this.m02, this.m03, this.m10, this.m11, this.m12, this.m13, this.m20, this.m21, this.m22, this.m23, this.m30, this.m31, this.m32, this.m33);
      }
      // ///////////////////////////
      // Persistence
      /**
       * Converts this Vec3 to a string in JSON format.
       *
       * @return - The return value.
       */
      toString() {
          // eslint-disable-next-line new-cap
          return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());
      }
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       */
      toJSON() {
          return this.asArray();
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       */
      fromJSON(json) {
          this.fromArray(json);
      }
      /**
       * Loads the state of the value from a binary reader.
       *
       * @param reader - The reader value.
       */
      readBinary(reader) {
          this.fromArray(reader.loadFloat32Array(16));
      }
      /**
       * Returns current Math type data as array. Often used to pass types to the GPU.
       *
       * @return - Returns the result as an array.
       */
      asArray() {
          return [
              this.m00,
              this.m01,
              this.m02,
              this.m03,
              this.m10,
              this.m11,
              this.m12,
              this.m13,
              this.m20,
              this.m21,
              this.m22,
              this.m23,
              this.m30,
              this.m31,
              this.m32,
              this.m33,
          ];
      }
      fromArray(array) {
          this.m00 = array[0];
          this.m01 = array[1];
          this.m02 = array[2];
          this.m03 = array[3];
          this.m10 = array[4];
          this.m11 = array[5];
          this.m12 = array[6];
          this.m13 = array[7];
          this.m20 = array[8];
          this.m21 = array[9];
          this.m22 = array[10];
          this.m23 = array[11];
          this.m30 = array[12];
          this.m31 = array[13];
          this.m32 = array[14];
          this.m33 = array[15];
      }
  }

  /* eslint-disable no-unused-vars */
  /**
   * Class representing a quaternion. Quaternions are used to represent 3 dimensional rotations.
   *
   * While Quaternions are difficult to understand they have important mathematical properties that make them very useful in 3d engines.
   * They can be directly multiplied together in the same was as matrices.
   * They can be interpolated from one value to another while maintaining constant angular velocity.
   * They can be converted to other more easily understood representations such as EulerAngles or Matrices.
   *

   */
  class Quat {
      x;
      y;
      z;
      w;
      /**
       * Creates a quaternion.
       */
      constructor(x = 0, y = 0, z = 0, w = 1) {
          this.x = x;
          this.y = y;
          this.z = z;
          this.w = w;
      }
      /**
       * Setter from scalar components.
       *
       * @param x - The x axis rotation.
       * @param y  - The y axis rotation.
       * @param z  - The z axis rotation.
       * @param w  - The w value.
       */
      set(x, y, z, w) {
          this.x = x;
          this.y = y;
          this.z = z;
          this.w = w;
      }
      /**
       * Setter from another vector.
       *
       * @param other - The other vector to set from.
       */
      setFromOther(other) {
          this.x = other.x;
          this.y = other.y;
          this.z = other.z;
          this.w = other.w;
      }
      /**
       * Set this Quat from a euler rotation.
       *
       * @param eulerAngles - The euler angles rotation.
       */
      setFromEulerAngles(eulerAngles) {
          const ordered = new Vec3();
          switch (eulerAngles.order) {
              case exports.EulerAnglesAxisOrder.XYZ:
                  ordered.set(eulerAngles.x, -eulerAngles.y, eulerAngles.z);
                  break;
              case exports.EulerAnglesAxisOrder.YZX:
                  ordered.set(eulerAngles.y, -eulerAngles.z, eulerAngles.x);
                  break;
              case exports.EulerAnglesAxisOrder.ZXY:
                  ordered.set(eulerAngles.z, -eulerAngles.x, eulerAngles.y);
                  break;
              case exports.EulerAnglesAxisOrder.XZY:
                  ordered.set(eulerAngles.x, eulerAngles.z, eulerAngles.y);
                  break;
              case exports.EulerAnglesAxisOrder.ZYX:
                  ordered.set(eulerAngles.z, eulerAngles.y, eulerAngles.x);
                  break;
              case exports.EulerAnglesAxisOrder.YXZ:
                  ordered.set(eulerAngles.y, eulerAngles.x, eulerAngles.z);
                  break;
              default:
                  throw new Error(`Invalid EulerAngles order: ${eulerAngles.order}`);
          }
          const ti = ordered.x * 0.5;
          const tj = ordered.y * 0.5;
          const tk = ordered.z * 0.5;
          const ci = Math.cos(ti);
          const cj = Math.cos(tj);
          const ck = Math.cos(tk);
          const si = Math.sin(ti);
          const sj = Math.sin(tj);
          const sk = Math.sin(tk);
          const cc = ci * ck;
          const cs = ci * sk;
          const sc = si * ck;
          const ss = si * sk;
          const ai = cj * sc - sj * cs;
          const aj = cj * ss + sj * cc;
          const ak = cj * cs - sj * sc;
          this.w = cj * cc + sj * ss;
          switch (eulerAngles.order) {
              case 0:
                  // ' XYZ'
                  this.x = ai;
                  this.y = -aj;
                  this.z = ak;
                  break;
              case 1:
                  // 'YZX'
                  this.x = ak;
                  this.y = ai;
                  this.z = -aj;
                  break;
              case 2:
                  // 'ZXY'
                  this.x = -aj;
                  this.y = ak;
                  this.z = ai;
                  break;
              case 3:
                  // 'XZY'
                  this.x = ai;
                  this.y = ak;
                  this.z = aj;
                  break;
              case 4:
                  // 'ZYX'
                  this.x = ak;
                  this.y = aj;
                  this.z = ai;
                  break;
              case 5:
                  // 'YXZ'
                  this.x = aj;
                  this.y = ai;
                  this.z = ak;
                  break;
              default:
                  throw new Error(`Invalid EulerAngles order: ${eulerAngles.order}`);
          }
      }
      /**
       * Converts Quat to an EulerAngles
       *
       * @param rotationOrder - The order in which the rotations are applied.
       * @return - The return value.
       */
      toEulerAngles(rotationOrder) {
          const ordered = new Vec3();
          switch (rotationOrder) {
              case exports.EulerAnglesAxisOrder.XYZ:
              case 'XYZ':
                  ordered.set(this.z, this.x, this.y);
                  break;
              case exports.EulerAnglesAxisOrder.YZX:
              case 'YZX':
                  ordered.set(this.x, this.y, this.z);
                  break;
              case exports.EulerAnglesAxisOrder.ZXY:
              case 'ZXY':
                  ordered.set(this.y, this.z, this.x);
                  break;
              case exports.EulerAnglesAxisOrder.XZY:
              case 'XZY':
                  ordered.set(this.y, -this.x, this.z);
                  break;
              case exports.EulerAnglesAxisOrder.ZYX:
              case 'ZYX':
                  ordered.set(this.x, -this.z, this.y);
                  break;
              case exports.EulerAnglesAxisOrder.YXZ:
              case 'YXZ':
                  ordered.set(this.z, -this.y, this.x);
                  break;
              default:
                  throw new Error('Invalid rotation order:' + rotationOrder);
          }
          const euler = new Vec3();
          const test = ordered.x * ordered.y + ordered.z * this.w;
          if (test > 0.49999) {
              // singularity at north pole
              euler.y = 2.0 * Math.atan2(ordered.x, this.w);
              euler.z = Math.PI * 0.5;
              euler.x = 0.0;
          }
          else if (test < -0.49999) {
              // singularity at south pole
              euler.y = -2.0 * Math.atan2(ordered.x, this.w);
              euler.z = Math.PI * -0.5;
              euler.x = 0.0;
          }
          else {
              const sqx = ordered.x * ordered.x;
              const sqy = ordered.y * ordered.y;
              const sqz = ordered.z * ordered.z;
              euler.y = Math.atan2(2.0 * ordered.y * this.w - 2.0 * ordered.x * ordered.z, 1.0 - 2.0 * sqy - 2.0 * sqz);
              euler.z = Math.asin(2.0 * test);
              euler.x = Math.atan2(2.0 * ordered.x * this.w - 2.0 * ordered.y * ordered.z, 1.0 - 2.0 * sqx - 2.0 * sqz);
          }
          switch (rotationOrder) {
              case exports.EulerAnglesAxisOrder.XYZ:
              case 'XYZ':
                  return new EulerAngles(euler.y, euler.z, euler.x, rotationOrder);
              case exports.EulerAnglesAxisOrder.YZX:
              case 'YZX':
                  return new EulerAngles(euler.x, euler.y, euler.z, rotationOrder);
              case exports.EulerAnglesAxisOrder.ZXY:
              case 'ZXY':
                  return new EulerAngles(euler.z, euler.x, euler.y, rotationOrder);
              case exports.EulerAnglesAxisOrder.XZY:
              case 'XZY':
                  return new EulerAngles(-euler.y, euler.x, euler.z, rotationOrder);
              case exports.EulerAnglesAxisOrder.ZYX:
              case 'ZYX':
                  return new EulerAngles(euler.x, euler.z, -euler.y, rotationOrder);
              case exports.EulerAnglesAxisOrder.YXZ:
              case 'YXZ':
                  return new EulerAngles(euler.z, -euler.y, euler.x, rotationOrder);
          }
      }
      /**
       * Set this Quat to a rotation defined by an axis and an angle (in radians).
       *
       * @param axis - The axis around which to rotate.
       * @param angle - The angle to rotate
       */
      setFromAxisAndAngle(axis, angle) {
          const halfAngle = angle / 2.0;
          const vec = axis.normalize().scale(Math.sin(halfAngle));
          this.set(vec.x, vec.y, vec.z, Math.cos(halfAngle));
      }
      /**
       * Sets the state of the Quat to look in a particular direction along the z axis.
       * > The camera looks down the negative z axis, so to set a rotation value
       * > for the camera, remember to negate the direction vector.
       *
       * @param dir - The direction value.
       * @param up - The up vector.
       */
      setFromDirectionAndUpvector(dir, up) {
          const mat3 = new Mat3();
          mat3.setFromDirectionAndUpvector(dir, up);
          this.setFromMat3(mat3);
      }
      /**
       * Sets the state of the `Quat` from two `Vec3`. The quaternion would then represent the rotation from v0 to v1 in 3d space.
       *
       * @param v0 - The v0 unit vector.
       * @param v1 - The v1 unit vector.
       */
      setFrom2Vectors(v0, v1) {
          const c = v0.cross(v1);
          const d = v0.dot(v1);
          const s = Math.sqrt((1 + d) * 2);
          // this.set( s/2, c.x / s, c.y / s, c.z / s );
          this.set(c.x / s, c.y / s, c.z / s, s / 2);
          this.normalizeInPlace();
      }
      /**
       * Set the Quat from a Mat3.
       *
       * @param mat3 - The mat3 value.
       */
      setFromMat3(mat3) {
          // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
          // article "Quaternion Calculus and Fast Animation".
          const data = mat3.asArray();
          const fTrace = data[0] + data[4] + data[8];
          let fRoot;
          if (fTrace > 0.0) {
              // |w| > 1/2, may as well choose w > 1/2
              fRoot = Math.sqrt(fTrace + 1); // 2w
              this.w = 0.5 * fRoot;
              fRoot = 0.5 / fRoot; // 1/(4w)
              this.x = (data[5] - data[7]) * fRoot;
              this.y = (data[6] - data[2]) * fRoot;
              this.z = (data[1] - data[3]) * fRoot;
          }
          else {
              // |w| <= 1/2
              let i = 0;
              if (data[4] > data[0])
                  i = 1;
              if (data[8] > data[i * 3 + i])
                  i = 2;
              const j = (i + 1) % 3;
              const k = (i + 2) % 3;
              fRoot = Math.sqrt(data[i * 3 + i] - data[j * 3 + j] - data[k * 3 + k] + 1.0);
              const array = [0, 0, 0, 0];
              array[i] = 0.5 * fRoot;
              fRoot = 0.5 / fRoot;
              array[3] = (data[j * 3 + k] - data[k * 3 + j]) * fRoot;
              array[j] = (data[j * 3 + i] + data[i * 3 + j]) * fRoot;
              array[k] = (data[k * 3 + i] + data[i * 3 + k]) * fRoot;
              this.fromArray(array);
          }
          this.normalizeInPlace();
      }
      /**
       * Set the Quat from a Mat4.
       *
       * @param mat4 - The mat4 value.
       */
      setFromMat4(mat4) {
          // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
          // article "Quaternion Calculus and Fast Animation".
          const data = mat4.asArray();
          const fTrace = data[0] + data[5] + data[10];
          let fRoot;
          if (fTrace > 0.0) {
              // |w| > 1/2, may as well choose w > 1/2
              fRoot = Math.sqrt(fTrace + 1); // 2w
              this.w = 0.5 * fRoot;
              fRoot = 0.5 / fRoot; // 1/(4w)
              this.x = (data[6] - data[9]) * fRoot;
              this.y = (data[8] - data[2]) * fRoot;
              this.z = (data[1] - data[4]) * fRoot;
          }
          else {
              // |w| <= 1/2
              let i = 0;
              if (data[5] > data[0])
                  i = 1;
              if (data[10] > data[i * 4 + i])
                  i = 2;
              const j = (i + 1) % 3;
              const k = (i + 2) % 3;
              fRoot = Math.sqrt(data[i * 4 + i] - data[j * 4 + j] - data[k * 4 + k] + 1.0);
              const array = [0, 0, 0, 0];
              array[i] = 0.5 * fRoot;
              fRoot = 0.5 / fRoot;
              array[3] = (data[j * 4 + k] - data[k * 4 + j]) * fRoot;
              array[j] = (data[j * 4 + i] + data[i * 4 + j]) * fRoot;
              array[k] = (data[k * 4 + i] + data[i * 4 + k]) * fRoot;
              this.fromArray(array);
          }
          this.normalizeInPlace();
      }
      /**
       * Checks if the angle of the Quat is less that ` Number.EPSILON`
       *
       * @return - Returns true or false.
       */
      isIdentity() {
          return this.getAngle() < Number.EPSILON;
      }
      /**
       * Return the angle of the Quat.
       *
       * @return - The return value.
       */
      getAngle() {
          return Math.acos(this.w) * 2.0;
      }
      /**
       * Checks if this Quat contains the same values as the other Quat.
       *
       * @param other - The other Quat to compare with.
       * @return - Returns `true` if are the same Vector, otherwise, `false`.
       */
      isEqual(other) {
          return this.x == other.x && this.y == other.y && this.z == other.z && this.w == other.w;
      }
      /**
       * Returns true if this Quat is NOT exactly the same other.
       *
       * @param other - The other Quat to compare with.
       * @return - Returns true or false.
       */
      notEquals(other) {
          return this.x != other.x && this.y != other.y && this.z != other.z && this.w != other.w;
      }
      /**
       * Returns true if this Quat is approximately the same as other
       *
       * @param other - The other Quat to compare with.
       * @param precision - The precision to which the values must match.
       * @return - Returns true or false.
       */
      approxEqual(other, precision = Number.EPSILON) {
          return (Math.abs(this.x - other.x) < precision &&
              Math.abs(this.y - other.y) < precision &&
              Math.abs(this.z - other.z) < precision &&
              Math.abs(this.w - other.w) < precision);
      }
      /**
       * Adds other to this Quat and return the result as a new Quat.
       *
       * @param other - The other Quat to add.
       * @return - Returns a new Quat.
       */
      add(other) {
          return new Quat(this.x + other.x, this.y + other.y, this.z + other.z, this.w + other.w);
      }
      /**
       * Adds other to this Quat.
       *
       * @param other - The other Quat to add.
       */
      addInPlace(other) {
          this.x += other.x;
          this.y += other.y;
          this.z += other.z;
          this.w += other.w;
      }
      /**
       * Subtracts other from this Quat and returns the result as a new Quat.
       *
       * @param other - The other Quat to subtract.
       * @return - Returns a new Quat.
       */
      subtract(other) {
          return new Quat(this.x - other.x, this.y - other.y, this.z - other.z, this.w - other.w);
      }
      /**
       * Scales this Quat by scalar and returns the result as a new Quat.
       *
       * @param scalar - The scalar value.
       * @return - Returns a new Vec3.
       */
      scale(scalar) {
          return new Quat(this.x * scalar, this.y * scalar, this.z * scalar, this.w * scalar);
      }
      /**
       * Scales this Quat by scalar.
       *
       * @param scalar - The scalar value.
       */
      scaleInPlace(scalar) {
          this.x *= scalar;
          this.y *= scalar;
          this.z *= scalar;
          this.w *= scalar;
      }
      /**
       * Calculates the length of this Quat.
       *
       * @return - Returns the length.
       */
      length() {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          const w = this.w;
          return Math.sqrt(x * x + y * y + z * z + w * w);
      }
      /**
       * Calculates the squared length of this Quat.
       *
       * @return - Returns the length.
       */
      lengthSquared() {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          const w = this.w;
          return x * x + y * y + z * z + w * w;
      }
      /**
       * Normalizes the Quat and returns it as a new Quat.
       *
       * @return - Returns the Quat normalized.
       */
      normalize() {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          const w = this.w;
          let len = x * x + y * y + z * z + w * w;
          if (len < Number.EPSILON) {
              return new Quat();
          }
          // TODO: evaluate use of glm_invsqrt here?
          len = 1 / Math.sqrt(len);
          return new Quat(x * len, y * len, z * len, w * len);
      }
      /**
       * Normalizes the Quat, modifying its values in place.
       */
      normalizeInPlace() {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          const w = this.w;
          let len = x * x + y * y + z * z + w * w;
          if (len < Number.EPSILON) {
              return;
          }
          len = 1 / Math.sqrt(len);
          this.set(x * len, y * len, z * len, w * len);
      }
      /**
       * Calculates the dot product of this quat against another.
       *
       * @param other - The other Quat to compare with.
       * @return - Returns the dot product.
       */
      dot(other) {
          return this.x * other.x + this.y * other.y + this.z * other.z + this.w * other.w;
      }
      /**
       * Calculates the cross product of two Quats and returns the result as a new Quat.
       *
       * @param other - The other Quat to calculate with.
       * @return - Returns the cross product as a new Quat.
       */
      cross(other) {
          const ax = this.x;
          const ay = this.y;
          const az = this.z;
          const at = this.w;
          const bx = other.x;
          const by = other.y;
          const bz = other.z;
          const bt = other.w;
          return new Quat(ay * bz - az * by, az * bt - at * bz, at * bx - ax * bt, ax * by - ay * bx);
      }
      /**
       * Returns the rotational conjugate of this Quat.
       * Conjugation represents the same rotation of the Quat but
       * in the opposite direction around the rotational axis.
       *
       * @return - the return value.
       */
      conjugate() {
          return new Quat(-this.x, -this.y, -this.z, this.w);
      }
      /**
       * Return the inverse of the `Quat`
       *
       * @return - Returns a new Quat.
       */
      inverse() {
          return this.conjugate();
      }
      /**
       * Aligns this quaternion with another one ensuring that the delta between
       * the Quat values is the shortest path over the hyper-sphere.
       *
       *  @param other - The other Quat to divide by.
       */
      alignWith(other) {
          if (this.dot(other) < 0.0) {
              this.set(-this.x, -this.y, -this.z, -this.w);
          }
      }
      /**
       * Multiplies two this quat by another returning the result as a new Quat.
       *
       * @param other - The other Quat to multiply.
       * @return - Returns a new Quat.
       */
      multiply(other) {
          const ax = this.x;
          const ay = this.y;
          const az = this.z;
          const aw = this.w;
          const bx = other.x;
          const by = other.y;
          const bz = other.z;
          const bw = other.w;
          return new Quat(ax * bw + aw * bx + ay * bz - az * by, ay * bw + aw * by + az * bx - ax * bz, az * bw + aw * bz + ax * by - ay * bx, aw * bw - ax * bx - ay * by - az * bz);
      }
      /**
       * Multiplies this quat by another, modifying its values in place.
       *
       * @param other - The other Quat to multiply.
       */
      multiplyInPlace(other) {
          const ax = this.x;
          const ay = this.y;
          const az = this.z;
          const aw = this.w;
          const bx = other.x;
          const by = other.y;
          const bz = other.z;
          const bw = other.w;
          this.set(ax * bw + aw * bx + ay * bz - az * by, ay * bw + aw * by + az * bx - ax * bz, az * bw + aw * bz + ax * by - ay * bx, aw * bw - ax * bx - ay * by - az * bz);
      }
      /**
       * Rotates a vector by this quaternion.
       * Don't forget to normalize the quaternion unless
       * you want axial translation as well as rotation.
       *
       * @param vec3 - The vec3 value.
       * @return - Returns a new Vec3.
       */
      rotateVec3(vec3) {
          const vq = new Quat(vec3.x, vec3.y, vec3.z, 0.0);
          const pq = this.multiply(vq).multiply(this.conjugate());
          return new Vec3(pq.x, pq.y, pq.z);
      }
      /**
       * Sets this quaternion to a rotation by the given angle about the X axis.
       *
       * @param rad - Angle (in radians) to rotate.
       */
      rotateX(rad) {
          rad *= 0.5;
          const ax = this.x;
          const ay = this.y;
          const az = this.z;
          const aw = this.w;
          const bx = Math.sin(rad);
          const bw = Math.cos(rad);
          this.x = ax * bw + aw * bx;
          this.y = ay * bw + az * bx;
          this.z = az * bw - ay * bx;
          this.w = aw * bw - ax * bx;
      }
      /**
       * Sets this quaternion to a rotation by the given angle about the Y axis.
       *
       * @param rad - Angle (in radians) to rotate.
       */
      rotateY(rad) {
          rad *= 0.5;
          const ax = this.x;
          const ay = this.y;
          const az = this.z;
          const aw = this.w;
          const by = Math.sin(rad);
          const bw = Math.cos(rad);
          this.x = ax * bw - az * by;
          this.y = ay * bw + aw * by;
          this.z = az * bw + ax * by;
          this.w = aw * bw - ay * by;
      }
      /**
       * Sets this quaternion to a rotation by the given angle about the Z axis.
       *
       * @param rad - Angle (in radians) to rotate.
       */
      rotateZ(rad) {
          rad *= 0.5;
          const ax = this.x;
          const ay = this.y;
          const az = this.z;
          const aw = this.w;
          const bz = Math.sin(rad);
          const bw = Math.cos(rad);
          this.x = ax * bw + ay * bz;
          this.y = ay * bw - ax * bz;
          this.z = az * bw + aw * bz;
          this.w = aw * bw - az * bz;
      }
      /**
       * Converts this Quat to a Mat3 (a 3x3 matrix).
       *
       * @return - TReturns a new Mat3.
       */
      toMat3() {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          const w = this.w;
          const x2 = x + x;
          const y2 = y + y;
          const z2 = z + z;
          const xx = x * x2;
          const yx = y * x2;
          const yy = y * y2;
          const zx = z * x2;
          const zy = z * y2;
          const zz = z * z2;
          const wx = w * x2;
          const wy = w * y2;
          const wz = w * z2;
          const mat3 = new Mat3();
          mat3.m00 = 1 - yy - zz;
          mat3.m10 = yx - wz;
          mat3.m20 = zx + wy;
          mat3.m01 = yx + wz;
          mat3.m11 = 1 - xx - zz;
          mat3.m21 = zy - wx;
          mat3.m02 = zx - wy;
          mat3.m12 = zy + wx;
          mat3.m22 = 1 - xx - yy;
          return mat3;
      }
      /**
       * Calculates a Vec3 value aligned with the X axis of this quaternion.
       *
       * @return - The resulting Vec3 value
       */
      getXaxis() {
          const xy = this.x * this.y;
          const xz = this.x * this.z;
          const yy = this.y * this.y;
          const yw = this.y * this.w;
          const zz = this.z * this.z;
          const zw = this.z * this.w;
          return new Vec3(1.0 - 2.0 * (zz + yy), 2.0 * (xy + zw), 2.0 * (xz - yw));
      }
      /**
       * Calculates a Vec3 value aligned with the Y axis of this quaternion.
       *
       * @return - The resulting Vec3 value
       */
      getYaxis() {
          const xx = this.x * this.x;
          const xy = this.x * this.y;
          const xw = this.x * this.w;
          const yz = this.y * this.z;
          const zz = this.z * this.z;
          const zw = this.z * this.w;
          return new Vec3(2.0 * (xy - zw), 1.0 - 2.0 * (zz + xx), 2.0 * (yz + xw));
      }
      /**
       * Calculates a Vec3 value aligned with the Z axis of this quaternion.
       *
       * @return - The resulting Vec3 value
       */
      getZaxis() {
          const xx = this.x * this.x;
          const xz = this.x * this.z;
          const xw = this.x * this.w;
          const yy = this.y * this.y;
          const yz = this.y * this.z;
          const yw = this.y * this.w;
          // const temp = new Vec3()
          return new Vec3(2.0 * (yw + xz), 2.0 * (yz - xw), 1.0 - 2.0 * (yy + xx));
      }
      /**
       * Reflects this quaternion according to the axis provided.
       *
       * @param axisIndex - An integer with value of 0 for the X axis, 1 for the Y axis, and 2 for the Z axis.
       * @return - Returns a new Quat.
       */
      mirror(axisIndex) {
          switch (axisIndex) {
              case 0:
                  return new Quat(this.z, this.w, this.x, this.y);
              case 1:
                  return new Quat(-this.w, this.z, this.y, -this.x);
              case 2:
                  return new Quat(this.x, this.y, this.z, -this.w);
              case 0:
              default:
                  return new Quat(this.z, this.w, this.x, this.y);
          }
      }
      /**
       * Converts this Quat to a Mat4 (a 4x4 matrix).
       *
       * @return - Returns a new Mat4.
       */
      toMat4() {
          const x = this.x;
          const y = this.y;
          const z = this.z;
          const w = this.w;
          const x2 = x + x;
          const y2 = y + y;
          const z2 = z + z;
          const xx = x * x2;
          const yx = y * x2;
          const yy = y * y2;
          const zx = z * x2;
          const zy = z * y2;
          const zz = z * z2;
          const wx = w * x2;
          const wy = w * y2;
          const wz = w * z2;
          // Set the columns
          const mat4 = new Mat4();
          mat4.m00 = 1 - yy - zz;
          mat4.m10 = yx - wz;
          mat4.m20 = zx + wy;
          mat4.m01 = yx + wz;
          mat4.m11 = 1 - xx - zz;
          mat4.m21 = zy - wx;
          mat4.m02 = zx - wy;
          mat4.m12 = zy + wx;
          mat4.m22 = 1 - xx - yy;
          return mat4;
      }
      /**
       * Performs a linear interpolation of this Quat towards another Quat, returning the result as a new Quat.
       *
       * @param other  - The other Quat to interpolate towards.
       * @param t - Interpolation ratio.
       * @return - Returns a new Quat.
       */
      lerp(other, t) {
          const result = new Quat(this.x + t * (other.x - this.x), this.y + t * (other.y - this.y), this.z + t * (other.z - this.z), this.w + t * (other.w - this.w));
          result.normalizeInPlace();
          return result;
      }
      /**
       * Performs a spherical linear interpolation of this Quat towards another Quat, returning the result as a new Quat.
       *
       * @param other - The other Quat to interpolate towards.
       * @param t - Interpolation amount between the two inputs.
       * @return - Returns a new Quat.
       */
      slerp(other, lambda) {
          /// https://www.geometrictools.com/Documentation/FastAndAccurateSlerp.pdf
          const dotProduct = this.dot(other);
          if (dotProduct > 0.999)
              return this;
          // algorithm adapted from Shoemake's paper
          // lambda is in (0, π/2]
          const theta = Math.acos(dotProduct);
          const st = Math.sin(theta);
          const sut = Math.sin(lambda * theta);
          const sout = Math.sin((1 - lambda) * theta);
          const coeff1 = sout / st;
          const coeff2 = sut / st;
          const result = new Quat(coeff1 * this.x + coeff2 * other.x, coeff1 * this.y + coeff2 * other.y, coeff1 * this.z + coeff2 * other.z, coeff1 * this.w + coeff2 * other.w);
          result.normalizeInPlace();
          return result;
      }
      /**
       * Clones this Quat and returns a new Quat.
       *
       * @return - Returns a new Quat.
       */
      clone() {
          return new Quat(this.x, this.y, this.z, this.w);
      }
      /**
       * Returns the type as an array. Often used to pass types to the GPU.
       *
       * @return - Returns as an array.
       */
      asArray() {
          return [this.x, this.y, this.z, this.w];
      }
      fromArray(array) {
          this.x = array[0];
          this.y = array[1];
          this.z = array[2];
          this.w = array[3];
      }
      // ///////////////////////////
      // Persistence
      /**
       * Converts this Vec3 to a string in JSON format.
       *
       * @return - The return value.
       */
      toString() {
          // eslint-disable-next-line new-cap
          return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());
      }
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @return - The json object.
       */
      toJSON() {
          return {
              x: this.x,
              y: this.y,
              z: this.z,
              w: this.w,
          };
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object.
       */
      fromJSON(j) {
          this.x = j.x;
          this.y = j.y;
          this.z = j.z;
          this.w = j.w;
          this.normalizeInPlace();
      }
      /**
       * Loads the state of the value from a binary reader.
       *
       * @param reader - The reader value.
       */
      readBinary(reader) {
          this.x = reader.loadFloat32();
          this.y = reader.loadFloat32();
          this.z = reader.loadFloat32();
          this.w = reader.loadFloat32();
      }
  }

  /* eslint-disable no-unused-vars */
  /**
   * Class representing an Xfo transform, which is a transformation decomposed into 3 component values. Translation, Orientation, and Scaling.
   */
  class Xfo {
      tr;
      ori;
      sc;
      /**
       * Initializes the Xfo object.
       *
       * @param tr - The translation value.
       * @param ori - The orientation value.
       * @param sc - The scaling value.
       */
      constructor(tr = new Vec3(), ori = new Quat(), sc = new Vec3(1, 1, 1)) {
          this.tr = tr;
          this.ori = ori;
          this.sc = sc;
      }
      /**
       * Sets the state of the Xfo object.
       *
       * @param tr - The translation value.
       * @param ori - The orientation value.
       * @param sc - The scaling value.
       */
      set(tr, ori, sc) {
          this.tr = tr;
          this.ori = ori;
          if (sc instanceof Vec3)
              this.sc = sc;
      }
      /**
       * Sets the state of the Xfo object using another Xfo object.
       *
       * @param other - The other Xfo to set from.
       */
      setFromOther(other) {
          this.tr = other.tr;
          this.ori = other.ori;
          this.sc = other.sc;
      }
      /**
       * Verifies that the Xfo object is an `identity`, checking that the translation, orientation and scaling attributes are in their initial state.
       *
       * @return - The return value.
       */
      isIdentity() {
          return this.tr.isNull() && this.ori.isIdentity() && this.sc.is111();
      }
      /**
       * Checks if this Vec3 contains the same values as the other Vec3.
       *
       * @param other - The other Vec3 to compare with.
       * @return - Returns `true` if are the same Vector, otherwise, `false`.
       */
      isEqual(other) {
          return this.tr.isEqual(other.tr) && this.ori.isEqual(other.ori) && this.sc.isEqual(other.sc);
      }
      /**
       * Returns true if this Vec2 is approximately the same as other.
       *
       * @param other - The other Vec3 to compare with.
       * @param precision - The precision to which the values must match.
       * @return - Returns true or false.
       */
      approxEqual(other, precision = Number.EPSILON) {
          return ((other.tr ? this.tr.approxEqual(other.tr, precision) : true) &&
              (other.ori ? this.ori.approxEqual(other.ori, precision) : true) &&
              (other.sc ? this.sc.approxEqual(other.sc, precision) : true));
      }
      /**
       * The setLookAt method.
       * @param pos - The position value.
       * @param target - The target value.
       * @param up - The up value.
       */
      setLookAt(pos, target, up) {
          // Note: We look along the -z axis. Negate the direction.
          const dir = pos.subtract(target);
          const dirLen = dir.length();
          if (dirLen < Number.EPSILON) {
              throw new Error('Invalid dir');
          }
          this.ori.setFromDirectionAndUpvector(dir, up);
          this.tr = pos;
      }
      /**
       * Multiplies two Xfo transforms.
       *
       * @param xfo - The xfo to multiply with.
       * @return - Returns an Xfo.
       */
      multiply(xfo) {
          let this_sc = this.sc;
          // check for non-uniform scale.
          if (Math.abs(this.sc.y - this.sc.x) > 0.001 ||
              Math.abs(this.sc.z - this.sc.x) > 0.001 ||
              Math.abs(this.sc.z - this.sc.y) > 0.001) {
              const this_mat4 = this.toMat4();
              const other_mat4 = xfo.ori.toMat4();
              const resM4 = this_mat4.multiply(other_mat4);
              this_sc = new Vec3(resM4.xAxis.length(), resM4.yAxis.length(), resM4.zAxis.length());
          }
          const result = new Xfo(this.tr.add(this.ori.rotateVec3(this.sc.multiply(xfo.tr))), this.ori.multiply(xfo.ori), this_sc.multiply(xfo.sc));
          return result;
      }
      /**
       * Returns the inverse of the Xfo object, but returns. the result as a new Xfo.
       *
       * @return - Returns a new Xfo.
       */
      inverse() {
          const result = new Xfo();
          result.ori = this.ori.inverse();
          // check for non-uniform scale.
          if (Math.abs(this.sc.y - this.sc.x) > 0.001 ||
              Math.abs(this.sc.z - this.sc.x) > 0.001 ||
              Math.abs(this.sc.z - this.sc.y) > 0.001) {
              const this_mat4 = this.toMat4().inverse();
              result.sc = new Vec3(this_mat4.xAxis.length(), this_mat4.yAxis.length(), this_mat4.zAxis.length());
          }
          else {
              result.sc = this.sc.inverse();
          }
          result.tr = result.ori.rotateVec3(this.tr.negate().multiply(result.sc));
          return result;
      }
      /**
       * Transforms Xfo object using a `Vec3` object. First scaling it, then rotating and finally adding the result to current translation object.
       *
       * @param vec3 - The vec3 value.
       * @return - The return value.
       */
      transformVec3(vec3) {
          return this.tr.add(this.ori.rotateVec3(this.sc.multiply(vec3)));
      }
      /**
       * Performs a linear interpolation between this Xfo and other.
       *
       * @param other - The other Xfo to interpolate towards.
       * @param t - Interpolation ratio.
       * @return - Returns a new Xfo.
       */
      lerp(other, t) {
          return new Xfo(this.tr.lerp(other.tr, t), this.ori.slerp(other.ori, t), this.sc.lerp(other.sc, t));
      }
      /**
       * Converts this Xfo to a Mat4 (a 4x4 matrix).
       *
       * @return - Returns a new Mat4.
       */
      toMat4() {
          const scl = new Mat4(this.sc.x, 0, 0, 0, 0, this.sc.y, 0, 0, 0, 0, this.sc.z, 0, 0, 0, 0, 1.0);
          const rot = this.ori.toMat4();
          const trn = new Mat4();
          trn.translation = this.tr;
          return trn.multiply(rot).multiply(scl);
      }
      /**
       * Sets the state of the Xfo object using Mat4.
       * @param mat4 - The mat4 value.
       */
      setFromMat4(mat4) {
          this.tr = mat4.translation;
          this.ori.setFromMat4(mat4);
          this.sc.set(mat4.xAxis.length(), mat4.yAxis.length(), mat4.zAxis.length());
      }
      /**
       * Clones this Xfo and returns a new Xfo.
       *
       * @return - Returns a new Xfo.
       */
      clone() {
          return new Xfo(this.tr.clone(), this.ori.clone(), this.sc.clone());
      }
      // ///////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @return - The json object.
       */
      toJSON() {
          const j = {
              tr: this.tr.toJSON(),
              ori: this.ori.toJSON(),
              sc: this.sc.toJSON(),
          };
          return j;
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object.
       */
      fromJSON(j) {
          this.tr.fromJSON(j.tr);
          this.ori.fromJSON(j.ori);
          if (j.sc) {
              this.sc.fromJSON(j.sc);
          }
      }
      /**
       * Loads the state of the value from a binary reader.
       *
       * @param reader - The reader value.
       */
      readBinary(reader) {
          this.tr.readBinary(reader);
          this.ori.readBinary(reader);
          this.sc.readBinary(reader);
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @return - The return value.
       */
      toString() {
          // eslint-disable-next-line new-cap
          return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());
      }
  }

  /**
   * Represents a box in 2D space. Needing two Vec2 vectors describing the corners
   */
  class Box2 {
      p0;
      p1;
      /**
       * Creates a Box2 object using Vec2s.
       * In case the parameters are not passed by, their values are pre-defined:
       *
       * p0 is a Vec2 with {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY|`Number.POSITIVE_INFINITY`}
       *
       * p1 is a Vec2 with {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY|`Number.NEGATIVE_INFINITY`}
       *
       * @param p0 - A point representing the corners of a 2D box.
       * @param p1 - A point representing the corners of a 2D box.
       */
      constructor(p0, p1) {
          if (p0 instanceof Vec2) {
              this.p0 = p0;
          }
          else {
              this.p0 = new Vec2(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
          }
          if (p1 instanceof Vec2) {
              this.p1 = p1;
          }
          else {
              this.p1 = new Vec2(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
          }
      }
      /**
       * Sets both Vec2 points
       *
       * @param p0 - A point representing the corners of a 2D box.
       * @param p1 - A point representing the corners of a 2D box.
       */
      set(p0, p1) {
          this.p0 = p0;
          this.p1 = p1;
      }
      /**
       * Resets the box2 back to an uninitialized state.
       *
       * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY|`Number.POSITIVE_INFINITY`}
       * and {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY|`Number.NEGATIVE_INFINITY`}
       */
      reset() {
          this.p0.x = Number.POSITIVE_INFINITY;
          this.p1.x = Number.NEGATIVE_INFINITY;
          this.p0.y = Number.POSITIVE_INFINITY;
          this.p1.y = Number.NEGATIVE_INFINITY;
      }
      /**
       * Returns `true` if the box has been expanded to contain a point.
       *
       * @return - The return value.
       */
      isValid() {
          return (this.p0.x != Number.POSITIVE_INFINITY &&
              this.p1.x != Number.NEGATIVE_INFINITY &&
              this.p0.y != Number.POSITIVE_INFINITY &&
              this.p1.y != Number.NEGATIVE_INFINITY);
      }
      /**
       * Expands the Box2 to contain the new point.
       *
       * @param point - A point represents the corners of a 2D box.
       */
      addPoint(point) {
          if (this.p0.x == Number.POSITIVE_INFINITY || point.x < this.p0.x)
              this.p0.x = point.x;
          if (this.p0.y == Number.POSITIVE_INFINITY || point.y < this.p0.y)
              this.p0.y = point.y;
          if (this.p1.y == Number.NEGATIVE_INFINITY || point.x > this.p1.x)
              this.p1.x = point.x;
          if (this.p1.y == Number.NEGATIVE_INFINITY || point.y > this.p1.y)
              this.p1.y = point.y;
      }
      /**
       * Returns the length of the diagonal of the box.
       *
       * @return - Returns the distance.
       */
      size() {
          return this.p1.distanceTo(this.p0);
      }
      /**
       * Returns the size of a Box2 - the same as size().
       *
       * @return - Returns a Vec2.
       */
      diagonal() {
          return this.p1.subtract(this.p0);
      }
      /**
       * Returns the center point of a Box2.
       *
       * @return - Returns a Vec2.
       */
      center() {
          const result = this.p1.subtract(this.p0);
          result.scaleInPlace(0.5);
          result.addInPlace(this.p0);
          return result;
      }
      /**
       * Clones this Vec2 and returns a new Vec2.
       *
       * @return - Returns a new Vec2.
       */
      clone() {
          return new Box2(this.p0.clone(), this.p1.clone());
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Encodes `Box2` Class as a JSON object for persistence.
       *
       * @return - The json object.
       */
      toJSON() {
          return {
              p0: this.p0.toJSON(),
              p1: this.p1.toJSON(),
          };
      }
      /**
       * Decodes a JSON object to set the state of this class.
       *
       * @param j - The json object.
       */
      fromJSON(j) {
          // We need to verify that p0 and p1 axes are numeric, so in case they are not, we restore them to their default values.
          // This, because 'Infinity' and '-Infinity' are stringified as 'null'.
          const p0 = {
              x: MathFunctions.isNumeric(j.p0.x) ? j.p0.x : Number.POSITIVE_INFINITY,
              y: MathFunctions.isNumeric(j.p0.y) ? j.p0.y : Number.POSITIVE_INFINITY,
          };
          const p1 = {
              x: MathFunctions.isNumeric(j.p1.x) ? j.p1.x : Number.NEGATIVE_INFINITY,
              y: MathFunctions.isNumeric(j.p1.y) ? j.p1.y : Number.NEGATIVE_INFINITY,
          };
          this.p0.fromJSON(p0);
          this.p1.fromJSON(p1);
      }
      /**
       * Calls `toJSON` method and stringifies it.
       *
       * @return - The return value.
       */
      toString() {
          // eslint-disable-next-line new-cap
          return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());
      }
  }

  /* eslint-disable new-cap */
  /**
   * Class representing a mathematical sphere, as opposed to the Sphere class derived from ProceduralMesh.
   *
   */
  class SphereType {
      pos;
      radius;
      /**
       * Create a sphere.
       * @param pos - The position of the sphere.
       * @param radius - The radius of the sphere.
       */
      constructor(pos = new Vec3(), radius = 0) {
          if (pos instanceof Vec3) {
              this.pos = pos;
          }
          else {
              this.pos = new Vec3();
          }
          this.radius = radius;
      }
      /**
       * Clones this sphere and returns a new sphere.
       *
       * @return - Returns a new sphere.
       */
      clone() {
          return new SphereType(this.pos.clone(), this.radius);
      }
      /**
       * Checks if this sphere intersects a box.
       *
       * @param box - The box value.
       * @return - The return value.
       */
      intersectsBox(box) {
          return box.intersectsSphere(this);
      }
      // ///////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @return - The json object.
       */
      toJSON() {
          return {
              pos: this.pos.toJSON(),
              radius: this.radius,
          };
      }
      /**
       * Calls `toJSON` method and stringifies it.
       *
       * @return - The return value.
       */
      toString() {
          return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());
      }
  }

  /**
   * Class representing a box in 3D space.
   * Represents a box in 3D space defined by two Vec3 values which define opposing corners of the box.
   */
  class Box3 {
      p0;
      p1;
      /**
       * Creates a Box3 object using Vec3s.
       * In case the parameters are not passed by, their values are pre-defined:
       *
       * p0 is a Vec2 with {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY|`Number.POSITIVE_INFINITY`}
       *
       * p1 is a Vec2 with {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY|`Number.NEGATIVE_INFINITY`}
       *
       * @param p0 - A point representing the corners of a 3D box.
       * @param p1 - A point representing the corners of a 3D box.
       */
      constructor(p0 = new Vec3(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY), p1 = new Vec3(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY)) {
          this.p0 = p0;
          this.p1 = p1;
      }
      /**
       * Getter for the lower (x, y, z) boundary of the box.
       *
       * @return - Returns the minimum Vec3.
       */
      get min() {
          return this.p0;
      }
      /**
       * Getter for the upper (x, y, z) boundary of the box.
       *
       * @return - Returns the maximum Vec3.
       */
      get max() {
          return this.p1;
      }
      /**
       * Sets both Vec3 points
       *
       * @param p0 - A point representing the corners of a 3D box.
       * @param p1 - A point representing the corners of a 3D box.
       */
      set(p0, p1) {
          this.p0 = p0;
          this.p1 = p1;
      }
      /**
       * Resets the box3 back to an uninitialized state.
       */
      reset() {
          this.p0.x = Number.POSITIVE_INFINITY;
          this.p0.y = Number.POSITIVE_INFINITY;
          this.p0.z = Number.POSITIVE_INFINITY;
          this.p1.x = Number.NEGATIVE_INFINITY;
          this.p1.y = Number.NEGATIVE_INFINITY;
          this.p1.z = Number.NEGATIVE_INFINITY;
      }
      /**
       * Returns `true` if the box has been expanded to contain a point.
       *
       * @return - The return value.
       */
      isValid() {
          return (this.p0.x != Number.POSITIVE_INFINITY &&
              this.p1.x != Number.NEGATIVE_INFINITY &&
              this.p0.y != Number.POSITIVE_INFINITY &&
              this.p1.y != Number.NEGATIVE_INFINITY &&
              this.p0.z != Number.POSITIVE_INFINITY &&
              this.p1.z != Number.NEGATIVE_INFINITY);
      }
      /**
       * Expands the Box3 to contain the new point.
       *
       * @param point - A point represents the corners of a 3D box.
       */
      addPoint(point) {
          if (point.x != Number.POSITIVE_INFINITY && point.x != Number.NEGATIVE_INFINITY) {
              if (point.x < this.p0.x)
                  this.p0.x = point.x;
              if (point.x > this.p1.x)
                  this.p1.x = point.x;
          }
          if (point.y != Number.POSITIVE_INFINITY && point.y != Number.NEGATIVE_INFINITY) {
              if (point.y < this.p0.y)
                  this.p0.y = point.y;
              if (point.y > this.p1.y)
                  this.p1.y = point.y;
          }
          if (point.z != Number.POSITIVE_INFINITY && point.z != Number.NEGATIVE_INFINITY) {
              if (point.z < this.p0.z)
                  this.p0.z = point.z;
              if (point.z > this.p1.z)
                  this.p1.z = point.z;
          }
      }
      /**
       * Adds `Box3` to this `Box3`, of the Xfo instance is passed in the parameters
       * it proceeds to apply the transform for the Vec3.
       *
       * @param box3 - A 3D box.
       * @param xfo - A 3D transform.
       */
      addBox3(box3, transform) {
          if (transform) {
              // Transform each corner of the Box3 into the new coordinate system.
              this.addPoint(transform.transformVec3(box3.p0));
              this.addPoint(transform.transformVec3(new Vec3(box3.p0.x, box3.p0.y, box3.p1.z)));
              this.addPoint(transform.transformVec3(new Vec3(box3.p0.x, box3.p1.y, box3.p0.z)));
              this.addPoint(transform.transformVec3(new Vec3(box3.p1.x, box3.p0.y, box3.p0.z)));
              this.addPoint(transform.transformVec3(new Vec3(box3.p0.x, box3.p1.y, box3.p1.z)));
              this.addPoint(transform.transformVec3(new Vec3(box3.p1.x, box3.p0.y, box3.p1.z)));
              this.addPoint(transform.transformVec3(new Vec3(box3.p1.x, box3.p1.y, box3.p0.z)));
              this.addPoint(transform.transformVec3(box3.p1));
          }
          else {
              this.addPoint(box3.p0);
              this.addPoint(box3.p1);
          }
      }
      /**
       * Returns the length of the diagonal of the box.
       *
       * @return - Returns the distance.
       */
      size() {
          return this.p1.distanceTo(this.p0);
      }
      /**
       * Returns the diagonal vector of the B=box from p0 to p1.
       *
       * @return - Returns a Box3.
       */
      diagonal() {
          return this.p1.subtract(this.p0);
      }
      /**
       * Returns the center point of a Box3.
       *
       * @return - Returns a Vec3.
       */
      center() {
          const result = this.p1.subtract(this.p0);
          result.scaleInPlace(0.5);
          result.addInPlace(this.p0);
          return result;
      }
      /**
       * Converts this Box3 to a Mat4 (a 4x4 matrix). The returned mat4 would transform a unit cube into the shape of the Bounding box.
       *
       * @return - Returns a new Mat4.
       */
      toMat4() {
          const scx = this.p1.x - this.p0.x;
          const scy = this.p1.y - this.p0.y;
          const scz = this.p1.z - this.p0.z;
          return new Mat4(scx, 0, 0, 0, 0, scy, 0, 0, 0, 0, scz, 0, this.p0.x, this.p0.y, this.p0.z, 1.0);
      }
      /**
       * Calculates and returns the bounding Sphere of the Box3
       *
       * @return - The return value.
       */
      getBoundingSphere() {
          return new SphereType(this.center(), this.diagonal().length() * 0.5);
      }
      /**
       * Determines if this Box3 intersects a given box value.
       *
       * @param box - The box to check for intersection against.
       * @return - Returns true if the shapes intersect.
       */
      intersectsBox(box) {
          // Using 6 splitting planes to rule out intersections.
          return box.max.x < this.min.x ||
              box.min.x > this.max.x ||
              box.max.y < this.min.y ||
              box.min.y > this.max.y ||
              box.max.z < this.min.z ||
              box.min.z > this.max.z
              ? false
              : true;
      }
      /**
       * Determines if this Box3 intersects a sphere.
       *
       * @param sphere - The sphere to check for intersection against.
       * @return - Returns true if the shapes intersect.
       */
      intersectsSphere(sphere) {
          let closestPoint = new Vec3();
          // Find the point on the AABB closest to the sphere center.
          // this.clampPoint( sphere.center, closestPoint );
          // If that point is inside the sphere, the AABB and sphere intersect.
          return closestPoint.distanceTo(sphere.pos) <= sphere.radius * sphere.radius;
      }
      /**
       * Determines if this Box3 intersects a plane.
       *
       * @param plane - The plane to check for intersection against.
       * @return - The return value.
       */
      intersectsPlane(plane) {
          // We compute the minimum and maximum dot product values. If those values
          // are on the same side (back or front) of the plane, then there is no intersection.
          let min;
          let max;
          if (plane.normal.x > 0) {
              min = plane.normal.x * this.min.x;
              max = plane.normal.x * this.max.x;
          }
          else {
              min = plane.normal.x * this.max.x;
              max = plane.normal.x * this.min.x;
          }
          if (plane.normal.y > 0) {
              min += plane.normal.y * this.min.y;
              max += plane.normal.y * this.max.y;
          }
          else {
              min += plane.normal.y * this.max.y;
              max += plane.normal.y * this.min.y;
          }
          if (plane.normal.z > 0) {
              min += plane.normal.z * this.min.z;
              max += plane.normal.z * this.max.z;
          }
          else {
              min += plane.normal.z * this.max.z;
              max += plane.normal.z * this.min.z;
          }
          return min <= -plane.w && max >= -plane.w;
      }
      /**
       * Clones this Box3 and returns a new Box3.
       * @return - Returns a new Box3.
       */
      clone() {
          return new Box3(this.p0.clone(), this.p1.clone());
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Encodes `Box3` Class as a JSON object for persistence.
       *
       * @return - The json object.
       */
      toJSON() {
          return {
              p0: this.p0.toJSON(),
              p1: this.p1.toJSON(),
          };
      }
      /**
       * Decodes a JSON object to set the state of this class.
       *
       * @param j - The json object.
       */
      fromJSON(j) {
          // We need to verify that p0 and p1 axes are numeric, so in case they are not, we restore them to their default values.
          // This, because 'Infinity' and '-Infinity' are stringified as 'null'.
          const p0 = {
              x: MathFunctions.isNumeric(j.p0.x) ? j.p0.x : Number.POSITIVE_INFINITY,
              y: MathFunctions.isNumeric(j.p0.y) ? j.p0.y : Number.POSITIVE_INFINITY,
              z: MathFunctions.isNumeric(j.p0.z) ? j.p0.z : Number.POSITIVE_INFINITY,
          };
          const p1 = {
              x: MathFunctions.isNumeric(j.p1.x) ? j.p1.x : Number.NEGATIVE_INFINITY,
              y: MathFunctions.isNumeric(j.p1.y) ? j.p1.y : Number.NEGATIVE_INFINITY,
              z: MathFunctions.isNumeric(j.p1.z) ? j.p1.z : Number.NEGATIVE_INFINITY,
          };
          this.p0.fromJSON(p0);
          this.p1.fromJSON(p1);
      }
      /**
       * Calls `toJSON` method and stringifies it.
       *
       * @return - The return value.
       */
      toString() {
          // eslint-disable-next-line new-cap
          return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());
      }
  }

  /* eslint-disable new-cap */
  /**
   * Class representing a plane.
   */
  class PlaneType {
      normal;
      w;
      /**
       * Create a plane.
       *
       * @param normal - The normal of the plane.
       * @param w - The w value.
       */
      constructor(normal, w = 0) {
          if (normal instanceof Vec3) {
              this.normal = normal;
          }
          else {
              this.normal = new Vec3();
          }
          this.w = w;
      }
      /**
       * Setter from scalar components.
       *
       * @param x - The x value.
       * @param y - The y value.
       * @param z - The z value.
       * @param w - The w value.
       */
      set(x, y, z, w) {
          this.normal.set(x, y, z);
          this.w = w;
      }
      /**
       * The divideScalar method
       *
       * @param value - The value value.
       */
      divideScalar(value) {
          this.normal.scaleInPlace(1 / value);
          this.w /= value;
      }
      /**
       * Calculates the distance from a point to this plane.
       *
       * @param point - The point value.
       * @return - The return value.
       */
      distanceToPoint(point) {
          return point.dot(this.normal) + this.w;
      }
      /**
       * Normalize this plane in place modifying its values.
       */
      normalizeInPlace() {
          const inverseNormalLength = 1.0 / this.normal.length();
          this.normal.scaleInPlace(inverseNormalLength);
          this.w *= inverseNormalLength;
      }
      /**
       * Clones this plane and returns a new plane.
       *
       * @return - Returns a new plane.
       */
      clone() {
          return new PlaneType(this.normal.clone(), this.w);
      }
      // ///////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @return - The json object.
       */
      toJSON() {
          return {
              normal: this.normal.toJSON(),
              w: this.w,
          };
      }
      fromJSON(json) {
          this.normal.fromJSON(json.normal);
          this.w = json.w;
      }
      /**
       * Calls `toJSON` method and stringifies it.
       *
       * @return - The return value.
       */
      toString() {
          return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());
      }
  }

  /* eslint-disable new-cap */
  /**
   * Class representing a Frustum. Frustums are used to determine what
   * is inside the camera's field of view.
   * @private
   * */
  class Frustum {
      planes;
      /**
       * Create a Frustum
       * @param p0 - the p0 value.
       * @param p1 - the p1 value.
       * @param p2 - the p2 value.
       * @param p3 - the p3 value.
       * @param p4 - the p4 value.
       * @param p5 - the p5 value.
       */
      constructor(p0, p1, p2, p3, p4, p5) {
          this.planes = [
              p0 || new PlaneType(),
              p1 || new PlaneType(),
              p2 || new PlaneType(),
              p3 || new PlaneType(),
              p4 || new PlaneType(),
              p5 || new PlaneType(),
          ];
      }
      /**
       * The setFromMatrix configures a Frustum object using a matrix.
       * Typically the matrix is a model view projection matrix.
       * @param mat4 - The matrix to use.
       */
      setFromMatrix(mat4) {
          const m = mat4;
          const planes = this.planes;
          planes[0].set(m.m03 - m.m00, m.m13 - m.m10, m.m23 - m.m20, m.m33 - m.m30);
          planes[1].set(m.m03 + m.m00, m.m13 + m.m10, m.m23 + m.m20, m.m33 + m.m30);
          planes[2].set(m.m03 + m.m01, m.m13 + m.m11, m.m23 + m.m21, m.m33 + m.m31);
          planes[3].set(m.m03 - m.m01, m.m13 - m.m11, m.m23 - m.m21, m.m33 - m.m31);
          planes[4].set(m.m03 - m.m02, m.m13 - m.m12, m.m23 - m.m22, m.m33 - m.m32);
          planes[5].set(m.m03 + m.m02, m.m13 + m.m12, m.m23 + m.m22, m.m33 + m.m32);
          planes.forEach((plane) => plane.normalizeInPlace());
      }
      /**
       * Tests a box to see if it is entirely within the frustum.
       * @param box3 - The box to test.
       * @return - True if the frustum intersects the box.
       */
      intersectsBox(box3) {
          const p = new Vec3();
          const planes = this.planes;
          const { min, max } = box3;
          for (let i = 0; i < 6; i++) {
              const plane = planes[i];
              // corner at max distance
              p.x = plane.normal.x > 0 ? max.x : min.x;
              p.y = plane.normal.y > 0 ? max.y : min.y;
              p.z = plane.normal.z > 0 ? max.z : min.z;
              if (plane.distanceToPoint(p) < 0)
                  return false;
          }
          return true;
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @return - The json object.
       */
      toJSON() {
          return {
              p0: this.planes[0].toJSON(),
              p1: this.planes[1].toJSON(),
              p2: this.planes[2].toJSON(),
              p3: this.planes[3].toJSON(),
              p4: this.planes[4].toJSON(),
              p5: this.planes[5].toJSON(),
          };
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object.
       */
      fromJSON(j) {
          this.planes[0].fromJSON(j.p0);
          this.planes[1].fromJSON(j.p1);
          this.planes[2].fromJSON(j.p2);
          this.planes[3].fromJSON(j.p3);
          this.planes[4].fromJSON(j.p4);
          this.planes[5].fromJSON(j.p5);
      }
      /**
       * Calls `toJSON` method and stringifies it.
       *
       * @return - The return value.
       */
      toString() {
          return StringFunctions.stringifyJSONWithFixedPrecision(this.toJSON());
      }
  }

  let counter = 0;
  /** Class representing a ref counted object. RefCounted
   *  objects track ownership and allow explicit cleanup
   *  of resources. This is necessary when JavaScript
   *  objects own references to GPU resources that need to
   *  be cleaned up when the JavaScript object is destroyed.
   * @private
   */
  class RefCounted extends EventEmitter {
      __refs;
      __destroyed;
      /**
       * Create a ref counted object.
       */
      constructor() {
          super();
          if (this.constructor.name == 'RefCounted') {
              throw new Error('RefCounted should not be instantiated directly.');
          }
          this.__id = ++counter;
          this.__refs = [];
          this.__destroyed = false;
      }
      /**
       * Returns the unique id of the object. Every Object has a unique
       * identifier which is based on a counter that is incremented.
       * @return - The return value.
       */
      getId() {
          return this.__id;
      }
      /**
       * The numRefs method.
       * @return - The return value.
       */
      numRefs() {
          return this.__refs.length;
      }
      /**
       * The addRef method.
       * @param referer - The referer value.
       * @return - The return value.
       */
      addRef(referer) {
          if (!referer)
              throw new Error('Error in RefCounted.addRef: Must provide a referer');
          // Note: an object can be reffeed multiple times.
          // e.g. we can create a temporary ref while we re-attach a tree item to a new parent.
          this.__refs.push(referer);
          return true;
      }
      /**
       * The removeRef method.
       * @param referer - The referer value.
       */
      removeRef(referer) {
          if (!referer)
              throw new Error('Error in RefCounted.removeRef: Must provide a referer');
          const index = this.__refs.indexOf(referer);
          if (index == -1)
              throw new Error('Error in RefCounted.removeRef: referer not found in refs list.');
          this.__refs.splice(index, 1);
          if (this.__refs.length == 0) {
              this.destroy();
          }
      }
      /**
       * The getRefer method.
       * @param index - The index value.
       * @return - The return value.
       */
      getRefer(index) {
          return this.__refs[index];
      }
      /**
       * The getRefIndex method.
       * @param referer - The referer value.
       * @return - The return value.
       */
      getRefIndex(referer) {
          return this.__refs.indexOf(referer);
      }
      /**
       * Returns true if this object has already been destroyed.
       * @return - Returns true or false.
       */
      isDestroyed() {
          return this.__destroyed;
      }
      /**
       * The destroy method is invoked when the last owner
       * is removed from a RefCounted object. Derived objects can
       * override this method to perform explicit cleanup.
       * The destructing signal is triggered so observers can
       * respond to this objects destruction.
       */
      destroy() {
          this.__destroyed = true;
          // console.log(this.constructor.name + " destructing");
          //  Note: PoTree listens to the 'destructing' event.
          this.emit('destructing');
      }
  }

  let numBaseItems = 0;
  /**
   * Base class for Items in the scene. It can be parameterized and can emit events.
   *
   * **Events**
   * * **nameChanged:** Emitted every time the Item's name is change. mostly in `setName` method.
   * * **selectedChanged:** Emitted `selected` status changes, mostly in `setSelected` method.
   *
   * @extends {EventEmitter}
   */
  class BaseItem extends EventEmitter {
      __name;
      __ownerItem = undefined;
      __selectable = true;
      __selected = false;
      __metaData = {};
      /**
       * Create a base item by defining its name.
       *
       * @param name - The name of the base item.
       */
      constructor(name = '') {
          super();
          this.__name = name;
          numBaseItems++;
      }
      // ////////////////////////////////////////
      // Static Methods
      /**
       * The getNumBaseItems method returns the total number of base items created.
       * This method is used in debugging memory consumption.
       *
       * @return - Returns the total number of base items created.
       */
      static getNumBaseItems() {
          return numBaseItems;
      }
      // ////////////////////////////////////////
      // Name and Path
      /**
       * Returns the name of the base item.
       *
       * @return - Returns the base item name.
       */
      get name() {
          return this.getName();
      }
      /**
       * Sets the name of the base item(Updates path).
       *
       * @emits `nameChanged` with `newName` and `oldName` data.
       * @param name - The base item name.
       */
      set name(value) {
          this.setName(value);
      }
      /**
       * Returns the current path of the item in the tree as an array of names.
       *
       * @return - Returns an array.
       */
      get path() {
          return this.getPath();
      }
      /**
       * Returns the name of the base item.
       *
       * @return - Returns the base item name.
       */
      getName() {
          return this.__name;
      }
      /**
       * Sets the name of the base item(Updates path).
       *
       * @emits `nameChanged` with `newName` and `oldName` data.
       * @param name - The base item name.
       */
      setName(name) {
          if (this.__name != name) {
              const oldName = this.__name;
              this.__name = name;
              const event = new NameChangedEvent(oldName, name);
              this.emit('nameChanged', event);
          }
      }
      /**
       * Returns the current path of the item in the tree as an array of names.
       *
       * @return - Returns an array.
       */
      getPath() {
          if (this.__ownerItem == undefined)
              return [this.__name];
          return [...this.__ownerItem.getPath(), this.__name];
      }
      // Path Traversal
      /**
       * The resolvePath method traverses the subtree from this item down
       * matching each name in the path with a child until it reaches the
       * end of the path.
       *
       * @param path - The path value.
       * @param index - The index value.
       * @return - The return value.
       */
      resolvePath(path, index = 0) {
          if (index == 0) {
              if (path[0] == '.' || path[0] == this.__name)
                  index++;
          }
          if (path[index] == '..') {
              if (this.__ownerItem) {
                  return this.__ownerItem.resolvePath(path, index + 1);
              }
              else {
                  throw Error('this.__ownerItem is undefined');
              }
          }
          if (index == path.length) {
              return this;
          }
      }
      // ////////////////////////////////////////
      // Owner Item
      /**
       * The getOwner method returns the current owner of the item.
       * The item is a child of the current owner.
       *
       * @return - Returns the current owner.
       */
      getOwner() {
          return this.__ownerItem;
      }
      /**
       * The setOwner method assigns a new owner to the item.
       *
       * @param ownerItem - The new owner item.
       */
      setOwner(ownerItem) {
          this.__ownerItem = ownerItem;
      }
      // ////////////////////////////////////////
      // Selectability and Selection
      /**
       * Returns a boolean indicating if this item is selectable.
       *
       * @return - Returns a boolean indicating if the item is selectable.
       */
      isSelectable() {
          return this.__selectable;
      }
      /**
       * Modifies the selectability of this item.
       *
       * @param val - A boolean indicating the selectability of the item.
       * @return - Returns true if value changed.
       */
      setSelectable(val) {
          if (this.__selectable != val) {
              this.__selectable = val;
              let event = new SelectabilityChangedEvent(this.__selectable);
              this.emit('selectabilityChanged', event);
              return true;
          }
          return false;
      }
      /**
       * The isSelected method.
       * @return - The return value.
       */
      isSelected() {
          return this.__selected;
      }
      /**
       * Changes the current state of the selection of this item.
       *
       * @emits `selectedChanged` with selected state
       * @param sel - Boolean indicating the new selection state.
       */
      setSelected(sel) {
          this.__selected = sel;
          let event = new SelectedEvent(this.__selected);
          this.emit('selectedChanged', event);
      }
      // ////////////////////////////////////////
      // Metadata
      /**
       * Gets Item's meta-data value by passing the `key` string.
       *
       * @param key - The key value under which to check for metadata.
       * @return - Returns the metadata associated with the given key.
       */
      getMetadata(key) {
          return this.__metaData[key];
      }
      /**
       * Checks to see if there is metadata for a given key.
       *
       * @param key - The key value under which to check for metadata.
       * @return - Returns `true` if metadata exists under the given key, otherwise returns `false`.
       */
      hasMetadata(key) {
          return key in this.__metaData;
      }
      /**
       * Assigns metadata to a given key.
       *
       * @param key - The key value under which the metadata is is going to be saved.
       * @param metaData - The metaData value.
       */
      setMetadata(key, metaData) {
          this.__metaData[key] = metaData;
      }
      /**
       * Removes metadata for a given key.
       *
       * @param key - The key value.
       */
      deleteMetadata(key) {
          delete this.__metaData[key];
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Encodes the current object as a json object.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const json = {
              type: this.getClassName(),
              name: this.__name,
          };
          return json;
      }
      /**
       * Decodes a json object for this type.
       *
       * @param json - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(json, context) {
          if (json.name)
              this.__name = json.name;
      }
      /**
       * Sets state of current Item(Including parameters) using a binary reader object.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          // read the type, but don't use it. This line must not be removed.
          // as the binary pointer is incremented.
          /*const type = */ reader.loadStr();
          this.setName(reader.loadStr());
      }
      /**
       * Converts object's JSON value and converts it to a string.
       * @param context
       * @return - String of object's parameter list state.
       */
      toString(context) {
          return JSON.stringify(this.toJSON(), null, 2);
      }
      // ////////////////////////////////////////
      // Clone and Destroy
      /**
       * Clones this base item and returns a new base item.
       *
       * **Note:** Each class should implement clone to be clonable.
       * @param context - The context value.
       */
      clone(context) {
          throw new Error(this.constructor.name + ' does not implement its clone method');
      }
      /**
       * When a BaseItem is cloned, initially the constructor is
       * called to generate a new instance. This instance then copies
       * its values from the source using this method.
       * This method copies any relevant data from the source object to
       * ensure that it represents a valid clone.
       * Derived classes override this method to copy any relevant
       * data from the source object.
       *
       * @param src - The BaseItem to copy from.
       * @param context - The context value
       */
      copyFrom(src, context) {
          this.setName(src.getName());
          this.setSelectable(src.isSelectable());
      }
  }

  /**
   * Class that allows other classes to be parameterized by `Parameter` type of objects.
   * Not only hosting parameters, but their events.
   *
   * @extends {BaseItem}
   */
  class ParameterOwner extends BaseItem {
      paramEventListenerIDs = {};
      paramMapping = {};
      params = [];
      deprecatedParamMapping = {};
      /**
       * Creates an instance of ParameterOwner by initializing parameter hosting mappings and events.
       *
       * Every Object has a unique identifier which is based on a counter that is incremented.
       */
      constructor(name) {
          super(name);
      }
      /**
       * Returns the number of parameters current object has.
       */
      getNumParameters() {
          return this.params.length;
      }
      /**
       * Returns the number of parameters current object has.
       */
      get numParameters() {
          return this.params.length;
      }
      /**
       * Returns all the parameters of the object.
       *
       * @return - Parameter List
       */
      getParameters() {
          return this.params;
      }
      /**
       * Returns the index of a parameter in parameter list.
       *
       * @param paramName - Name of the parameter.
       * @return - Position in the array
       */
      getParameterIndex(paramName) {
          return this.paramMapping[paramName];
      }
      /**
       * Returns `Parameter` object in a given index
       *
       * @param index - Position of the parameter in the array
       * @return - Parameter object value
       */
      getParameterByIndex(index) {
          return this.params[index];
      }
      /**
       * Validates if the specified parameter exists in the object.
       *
       * @param paramName - The parameter name.
       * @return - The return value.
       */
      hasParameter(paramName) {
          return paramName in this.paramMapping;
      }
      /**
       * Add a mapping from one name to a new parameter.
       * This is used to handle migrating parameters to new names.
       *
       * @param key - The parameter name.
       * @param paramName - The parameter name.
       * @return - The return value.
       */
      addParameterDeprecationMapping(key, paramName) {
          this.deprecatedParamMapping[key] = paramName;
      }
      /**
       * Returns `Parameter` object using the given name
       *
       * @param paramName - The parameter name.
       * @return - Parameter object value
       */
      getParameter(paramName) {
          let index = this.paramMapping[paramName];
          if (index == undefined) {
              const newParamName = this.deprecatedParamMapping[paramName];
              if (!newParamName) {
                  // TODO: Should this method not return null?
                  return null;
                  // throw Error(`No Parameter with that name exists: ${paramName} `)
              }
              else {
                  console.warn(`Parameter name ${paramName} is now deprecated. Please use ${newParamName} instead.`);
                  index = this.paramMapping[newParamName];
              }
          }
          return this.params[index];
      }
      /**
       * This method can be overridden in derived classes
       * to perform general updates (see GLPass or BaseItem).
       * @param event - The event object emitted by the parameter.
       * @private
       */
      parameterValueChanged(event) {
          this.emit('parameterValueChanged', event);
      }
      /**
       * Adds `Parameter` object to the owner's parameter list.
       *
       * @emits `parameterAdded` with the name of the param.
       * @param param - The parameter to add.
       * @return - With `owner` and `valueChanged` event set.
       */
      addParameter(param) {
          return this.insertParameter(param, this.params.length);
      }
      /**
       * Adds `Parameter` object to the owner's parameter list using the index.
       * It replaces the event in the specified index.
       *
       *
       * @emits `parameterAdded` with the name of the param.
       * @param param - The parameter to insert.
       * @param index - The index value.
       * @return - With `owner` and `valueChanged` event set.
       */
      insertParameter(param, index) {
          const name = param.getName();
          if (this.paramMapping[name] != undefined) {
              console.warn('Replacing Parameter:' + name);
              this.removeParameter(name);
          }
          param.setOwner(this);
          this.paramEventListenerIDs[name] = param.on('valueChanged', (event) => {
              // Note: spread operators cause errors on iOS 11.
              const newEvent = { param };
              for (const key in event)
                  newEvent[key] = event[key];
              this.parameterValueChanged(newEvent);
          });
          this.params.splice(index, 0, param);
          for (let i = index; i < this.params.length; i++) {
              this.paramMapping[this.params[i].getName()] = i;
          }
          const event = new ParameterAddedEvent(name);
          this.emit('parameterAdded', event);
          return param;
      }
      /**
       * Removes `Parameter` from owner, by using parameter's name.
       * @emits `parameterRemoved` with the name of the param.
       * @param name - The parameter name.
       */
      removeParameter(name) {
          if (this.paramMapping[name] == undefined) {
              throw new Error('Unable to remove Parameter:' + name);
          }
          const index = this.paramMapping[name];
          const param = this.params[this.paramMapping[name]];
          param.off('valueChanged', this.paramEventListenerIDs[name]);
          this.params.splice(index, 1);
          delete this.paramMapping[name];
          for (let i = index; i < this.params.length; i++) {
              this.paramMapping[this.params[i].getName()] = i;
          }
          const event = new ParameterRemovedEvent(name);
          this.emit('parameterRemoved', event);
      }
      /**
       * Replaces old `Parameter` by passing a new one with the same name.
       *
       * @param param - The parameter to replace.
       * @return - `Parameter` with `valueChanged` event set.
       */
      replaceParameter(param) {
          const name = param.getName();
          if (this.paramMapping[name] == undefined) {
              throw new Error('Unable to replace Parameter:' + name);
          }
          const index = this.paramMapping[name];
          this.removeParameter(name);
          this.insertParameter(param, index);
          return param;
      }
      /**
       * The resolvePath method traverses the subtree from this item down
       * matching each name in the path with a child until it reaches the
       * end of the path.
       *
       * @param path - The path value.
       * @param index - The index value.
       * @return - The return value.
       */
      resolvePath(path, index = 0) {
          if (index == 0) {
              if (path[0] == '.' || path[0] == this.__name)
                  index++;
          }
          if (path[index] == '..') {
              if (this.__ownerItem) {
                  return this.__ownerItem.resolvePath(path, index + 1);
              }
              else {
                  throw Error('this.__ownerItem is undefined');
              }
          }
          if (index == path.length) {
              return this;
          }
          // Maybe the name is a parameter name.
          const param = this.getParameter(path[index]);
          if (param) {
              if (index < path.length) {
                  return param.resolvePath(path, index + 1);
              }
              return param;
          }
          throw new Error(`Unable to resolve path : [${path.toString()}] after: ${this.getName()} \nNo child or parameter called : "${path[index]}"`);
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const json = super.toJSON(context);
          const paramsJSON = {};
          let savedParams = 0;
          for (const param of this.params) {
              if (param.isDrivenByOperator())
                  continue;
              const paramJSON = param.toJSON(context);
              if (paramJSON) {
                  paramsJSON[param.getName()] = paramJSON;
                  savedParams++;
              }
          }
          if (savedParams > 0)
              json.params = paramsJSON;
          return json;
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param json - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(json, context) {
          super.fromJSON(json, context);
          if (json.params) {
              for (const key in json.params) {
                  const pj = json.params[key];
                  if (pj.paramPath) {
                      context?.resolvePath(pj.paramPath, (param) => {
                          this.replaceParameter(param);
                      }, () => {
                          console.warn('Unable to resolve shared parameter:' + pj.paramPath);
                      });
                  }
                  else {
                      let param = this.getParameter(key);
                      if (!param && pj.type && pj.name) {
                          param = Registry.constructClass(pj.type);
                          if (!param) {
                              console.error('Unable to construct prop:' + pj.name + ' of type:' + pj.type);
                              continue;
                          }
                          param.setName(pj.name);
                          this.addParameter(param);
                      }
                      if (param)
                          param.fromJSON(pj, context);
                  }
              }
          }
      }
      /**
       * Uses passed in BinReader object(containing an Int32 array with all the parameters) to reconstruct all parameters state.
       *
       * In each iteration of the array, propType and propName are extracted and
       * used to build the right `Parameter` class. Then all of them are added to the object.
       *
       * @emits `parameterAdded` with the name of the param.
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          super.readBinary(reader, context);
          this.readBinaryParams(reader, context);
      }
      readBinaryParams(reader, context) {
          if (context?.versions['zea-engine'].compare([0, 0, 3]) >= 0) {
              const numProps = reader.loadUInt32();
              for (let i = 0; i < numProps; i++) {
                  const propType = reader.loadStr();
                  const propName = reader.loadStr();
                  let param = this.getParameter(propName);
                  if (!param) {
                      param = Registry.constructClass(propType);
                      if (!param) {
                          console.error('Unable to construct prop:' + propName + ' of type:' + propType);
                          continue;
                      }
                      param.setName(propName);
                      this.addParameter(param);
                  }
                  param.readBinary(reader, context);
              }
          }
      }
      // ////////////////////////////////////////
      // Clone and Destroy
      /**
       * Clones this base item and returns a new base item.
       *
       * **Note:** Each class should implement clone to be clonable.
       * @param context - The context value.
       */
      clone(context) {
          throw new Error(this.constructor.name + ' does not implement its clone method');
      }
      /**
       * Copies Parameters from another `ParameterOwner` to current object.
       *
       * @param src - The ParameterOwner copy from.
       * @param context - The context value
       */
      copyFrom(src, context) {
          super.copyFrom(src, context);
          // Note: Loop over the parameters in reverse order,
          // this is because often, parameter dependencies
          // are bottom to top (bottom params dependent on higher params).
          // This means that as a parameter is set with a new value
          // it will dirty the params below it.
          let i = src.getNumParameters();
          while (i--) {
              const srcParam = src.getParameterByIndex(i);
              const param = this.getParameter(srcParam.getName());
              if (param) {
                  // Note: we are not cloning the values.
                  param.copyFrom(srcParam);
              }
              else {
                  this.addParameter(srcParam.clone());
              }
          }
      }
  }

  const getFileFolder = function (filePath) {
      return filePath.substring(0, filePath.lastIndexOf('/')) + '/';
  };
  const loadFile = function (url, responseType, onSucceed, onFail, onProgress = undefined) {
      try {
          const xhr = new XMLHttpRequest();
          xhr.responseType = responseType;
          xhr.addEventListener('timeout', (event) => {
              throw new Error('The request for ' + url + ' timed out.');
          });
          xhr.addEventListener('error', (event) => {
              throw new Error('The request for ' + url + ': xhr.readyState:' + xhr.readyState);
              onFail(xhr.statusText);
          });
          xhr.addEventListener('abort', (event) => {
              throw new Error('The request for ' + url + ': xhr.readyState:' + xhr.readyState);
              onFail(xhr.statusText);
          });
          xhr.addEventListener('progress', (event) => {
              if (onProgress)
                  onProgress(event.total, event.loaded);
          });
          xhr.addEventListener('loadend', (event) => {
              if (xhr.status == 200)
                  onSucceed(xhr);
              else
                  onFail(xhr.statusText);
          });
          xhr.open('GET', url, true);
          xhr.send();
          // xhr.open();
      }
      catch (err) {
          onFail(err);
      }
  };
  const loadTextfile = function (url, onSucceed, onFail = undefined, onProgress = undefined) {
      loadFile(url, 'text', (xhr) => {
          onSucceed(xhr.responseText);
      }, (statusText) => {
          if (onFail != undefined)
              onFail(statusText);
          else {
              throw new Error('Unable to XHR File:' + url);
          }
      }, onProgress);
  };
  const loadJSONfile = function (url, onSucceed, onFail = undefined, onProgress = undefined) {
      loadFile(url, 'json', (xhr) => {
          onSucceed(xhr.response, xhr);
      }, (statusText) => {
          if (onFail != undefined)
              onFail(statusText);
          else {
              throw new Error('Unable to XHR File:' + url);
          }
      }, onProgress);
  };
  const loadXMLfile = function (url, onSucceed, onFail = undefined, onProgress = undefined) {
      loadFile(url, 'document', (xhr) => {
          onSucceed(xhr.responseXML);
      }, (statusText) => {
          if (onFail != undefined)
              onFail(statusText);
          else {
              throw new Error('Unable to XHR File:' + url);
          }
      }, onProgress);
  };
  const loadBinfile = function (url, onSucceed, onFail = undefined, onProgress = undefined) {
      loadFile(url, 'arraybuffer', (xhr) => {
          onSucceed(xhr.response);
      }, (statusText) => {
          if (onFail != undefined)
              onFail(statusText);
          else {
              throw new Error('Unable to XHR File:' + url);
          }
      }, onProgress);
  };

  var unpackBase64Str = "";

  class ResourceLoaderPlugin {
      /**
       * The type of file this plugin handles.
       * @return The type of file.
       */
      getType() {
          return 'none';
      }
      async loadFile(url) {
          return null;
      }
  }

  // <!-- prettier-ignore-start -->
  /* eslint-disable require-jsdoc */

  const Module = {};

  const WorkerScope = {};

  //--------------------unpackBridge.js----------------------------
  !(function (t, e) {
    // The following code has been _carefully_ modified by hand.
    // There were various cases for in what context the code might
    // be run, and I removed all but the webworker case.
    // There was code to handle loading in a nodeJS context, that tried to import("fs")
    // WebPack kepts tripping up on that code in its static analysis of the code, so
    // I carefully removed it.
    t.unpackBridge = e(t.fs);
  })(WorkerScope, function (t) {
    return (function (t) {
      var e = {};
      function r(n) {
        if (e[n]) return e[n].exports
        var i = (e[n] = { i: n, l: !1, exports: {} });
        return t[n].call(i.exports, i, i.exports, r), (i.l = !0), i.exports
      }
      return (
        (r.m = t),
        (r.c = e),
        (r.d = function (t, e, n) {
          r.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: n });
        }),
        (r.r = function (t) {
          'undefined' != typeof Symbol &&
            Symbol.toStringTag &&
            Object.defineProperty(t, Symbol.toStringTag, { value: 'Module' }),
            Object.defineProperty(t, '__esModule', { value: !0 });
        }),
        (r.t = function (t, e) {
          if ((1 & e && (t = r(t)), 8 & e)) return t
          if (4 & e && 'object' == typeof t && t && t.__esModule) return t
          var n = Object.create(null);
          if ((r.r(n), Object.defineProperty(n, 'default', { enumerable: !0, value: t }), 2 & e && 'string' != typeof t))
            for (var i in t)
              r.d(
                n,
                i,
                function (e) {
                  return t[e]
                }.bind(null, i)
              );
          return n
        }),
        (r.n = function (t) {
          var e =
            t && t.__esModule
              ? function () {
                  return t.default
                }
              : function () {
                  return t
                };
          return r.d(e, 'a', e), e
        }),
        (r.o = function (t, e) {
          return Object.prototype.hasOwnProperty.call(t, e)
        }),
        (r.p = ''),
        r((r.s = 2))
      )
    })([
      function (t, e, r) {
        Object.defineProperty(e, '__esModule', { value: !0 });
        const n = r(1),
          i = {
            0: 'ERAR_SUCCESS',
            10: 'ERAR_END_ARCHIVE',
            11: 'ERAR_NO_MEMORY',
            12: 'ERAR_BAD_DATA',
            13: 'ERAR_BAD_ARCHIVE',
            14: 'ERAR_UNKNOWN_FORMAT',
            15: 'ERAR_EOPEN',
            16: 'ERAR_ECREATE',
            17: 'ERAR_ECLOSE',
            18: 'ERAR_EREAD',
            19: 'ERAR_EWRITE',
            20: 'ERAR_SMALL_BUF',
            21: 'ERAR_UNKNOWN',
            22: 'ERAR_MISSING_PASSWORD',
            23: 'ERAR_EREFERENCE',
            24: 'ERAR_BAD_PASSWORD',
          },
          o = {
            0: 'Success',
            11: 'Not enough memory',
            12: 'Archive header or data are damaged',
            13: 'File is not RAR archive',
            14: 'Unknown archive format',
            15: 'File open error',
            16: 'File create error',
            17: 'File close error',
            18: 'File read error',
            19: 'File write error',
            20: 'Buffer for archive comment is too small, comment truncated',
            21: 'Unknown error',
            22: 'Password for encrypted file or header is not specified',
            23: 'Cannot open file source for reference record',
            24: 'Wrong password is specified',
          };
        class s {
          constructor(t = '') {
  (this._password = t), (this._archive = null);
          }
          getFileList() {
            let t,
              [e, r] = this.openArc(!0);
            if ('SUCCESS' !== e.state) t = [e, null];
            else {
              let e,
                n,
                i = [];
              for (; ([e, n] = this.processNextFile(() => !0)), 'SUCCESS' === e.state; ) i.push(n.fileHeader);
              t = 'ERAR_END_ARCHIVE' !== e.reason ? [e, null] : [{ state: 'SUCCESS' }, { arcHeader: r, fileHeaders: i }];
            }
            return this.closeArc(), t
          }
          extractAll() {
            let t,
              [e, r] = this.openArc(!1);
            if ('SUCCESS' !== e.state) t = [e, null];
            else {
              let e,
                n,
                i = [];
              for (; ([e, n] = this.processNextFile(() => !1)), 'SUCCESS' === e.state; ) i.push(n);
              t = 'ERAR_END_ARCHIVE' !== e.reason ? [e, null] : [{ state: 'SUCCESS' }, { arcHeader: r, files: i }];
            }
            return this.closeArc(), t
          }
          extractFiles(t, e) {
            let r,
              [n, i] = this.openArc(!1, e),
              o = {};
            for (let e = 0; e < t.length; ++e) o[t[e]] = e;
            if ('SUCCESS' !== n.state) r = [n, null];
            else {
              let e,
                n,
                s = Array(t.length).fill(null),
                u = 0;
              for (;;) {
                let r = !1,
                  i = null;
                if (
                  (([e, n] = this.processNextFile((t) => (t in o ? ((i = o[t]), !1) : ((r = !0), !0)))),
                  'SUCCESS' !== e.state)
                )
                  break
                if (!r && ((s[i] = n), ++u === t.length)) {
                  e.reason = 'ERAR_END_ARCHIVE';
                  break
                }
              }
              r = 'ERAR_END_ARCHIVE' !== e.reason ? [e, null] : [{ state: 'SUCCESS' }, { arcHeader: i, files: s }];
            }
            return this.closeArc(), r
          }
          fileCreated(t) {}
          close(t) {
            this._lastFileContent = this.closeFile(t);
          }
          openArc(t, e) {
  (n.Ext.current = this), (this._archive = new unpack.RarArchive());
            let r,
              i = this._archive.open(this._filePath, e || this._password, t);
            return (
              (r =
                0 !== i.state.errCode
                  ? [this.getFailInfo(i.state.errCode, i.state.errType), null]
                  : [
                      { state: 'SUCCESS' },
                      {
                        comment: i.comment,
                        flags: {
                          volume: 0 != (1 & i.flags),
                          lock: 0 != (4 & i.flags),
                          solid: 0 != (8 & i.flags),
                          authInfo: 0 != (32 & i.flags),
                          recoveryRecord: 0 != (64 & i.flags),
                          headerEncrypted: 0 != (128 & i.flags),
                        },
                      },
                    ]),
              (n.Ext.current = null),
              r
            )
          }
          processNextFile(t) {
            let e;
            n.Ext.current = this;
            let r = this._archive.getFileHeader(),
              i = [{ state: 'SUCCESS' }, null];
            if (0 === r.state.errCode) {
              let e = t(r.name);
              this._lastFileContent = null;
              let n = this._archive.readFile(e);
              0 === n.errCode ||
                e ||
                ((i[0] = this.getFailInfo(n.errCode, n.errType)),
                22 === n.errCode ? (n = this._archive.readFile(!0)) : (n.errCode = 0)),
                0 === n.errCode
                  ? (i[1] = this._lastFileContent)
                  : ((r.state.errCode = n.errCode), (r.state.errType = n.errType)),
                (this._lastFileContent = null);
            }
            return (
              (e =
                0 !== r.state.errCode
                  ? [this.getFailInfo(r.state.errCode, r.state.errType), null]
                  : [
                      { state: 'SUCCESS' },
                      {
                        fileHeader: {
                          name: r.name,
                          flags: {
                            encrypted: 0 != (4 & r.flags),
                            solid: 0 != (16 & r.flags),
                            directory: 0 != (32 & r.flags),
                          },
                          packSize: r.packSize,
                          unpSize: r.unpSize,
                          crc: r.crc,
                          time: (function (t) {
                            const e = [5, 6, 5, 5, 4, 7];
                            let r = [];
                            for (let n of e) r.push(t & ((1 << n) - 1)), (t >>= n);
                            let n = (t) => (t < 10 ? '0' + t : '' + t);
                            return (
                              `${1980 + (r = r.reverse())[0]}-${n(r[1])}-${n(r[2])}` +
                              `T${n(r[3])}:${n(r[4])}:${n(2 * r[5])}.000`
                            )
                          })(r.time),
                          unpVer: `${Math.floor(r.unpVer / 10)}.${r.unpVer % 10}`,
                          method: (function (t) {
                            return (
                              { 48: 'Storing', 49: 'Fastest', 50: 'Fast', 51: 'Normal', 52: 'Good', 53: 'Best' }[t] ||
                              'Unknown'
                            )
                          })(r.method),
                        },
                        extract: i,
                      },
                    ]),
              (n.Ext.current = null),
              e
            )
          }
          closeArc() {
  (n.Ext.current = this), this._archive.delete(), (n.Ext.current = null), (this._archive = null);
          }
          getFailInfo(t, e) {
            return { state: 'FAIL', reason: i[t], msg: o[t] }
          }
        }
  (s._current = null), (e.Extractor = s);
      },
      function (t, e, r) {
        Object.defineProperty(e, '__esModule', { value: !0 }), (e.Ext = { current: null });
      },
      function (t, e, r) {
        Object.defineProperty(e, '__esModule', { value: !0 }),
          (function (t) {
            for (var r in t) e.hasOwnProperty(r) || (e[r] = t[r]);
          })(r(3));
        var n = r(1);
        e.Ext = n.Ext;
      },
      function (t, e, r) {
        Object.defineProperty(e, '__esModule', { value: !0 });
        const n = r(4),
          i = r(6)
        ;(e.createExtractorFromData = function (t, e = '') {
          return new n.DataExtractor(t, e)
        }),
          (e.createExtractorFromFile = function (t, e = '', r = '') {
            return new i.FileExtractor(t, e, r)
          });
      },
      function (t, e, r) {
        Object.defineProperty(e, '__esModule', { value: !0 });
        const n = r(5),
          i = r(0);
        e.DataExtractor = class extends i.Extractor {
          constructor(t, e) {
            super(e), (this.dataFiles = {}), (this.dataFileMap = {}), (this.currentFd = 1);
            let r = { file: new n.DataFile(new Uint8Array(t)), fd: this.currentFd++ }
            ;(this._filePath = '_defaultUnrarJS_.rar'),
              (this.dataFiles[this._filePath] = r),
              (this.dataFileMap[r.fd] = this._filePath);
          }
          open(t) {
            let e = this.dataFiles[t];
            return e ? e.fd : 0
          }
          create(t) {
            let e = this.currentFd++;
            return (this.dataFiles[t] = { file: new n.DataFile(), fd: this.currentFd++ }), (this.dataFileMap[e] = t), e
          }
          closeFile(t) {
            let e = this.dataFiles[this.dataFileMap[t]];
            if (!e) return null
            let r = e.file.readAll();
            return (
              1 !== t ? (delete this.dataFiles[this.dataFileMap[t]], delete this.dataFileMap[t]) : e.file.seek(0, 'SET'),
              r
            )
          }
          read(t, e, r) {
            let n = this.dataFiles[this.dataFileMap[t]];
            if (!n) return -1
            let i = n.file.read(r);
            return null === i ? -1 : (unpack.HEAPU8.set(i, e), i.byteLength)
          }
          write(t, e, r) {
            let n = this.dataFiles[this.dataFileMap[t]];
            return !!n && (n.file.write(unpack.HEAPU8.slice(e, e + r)), !0)
          }
          tell(t) {
            let e = this.dataFiles[this.dataFileMap[t]];
            return e ? e.file.tell() : -1
          }
          seek(t, e, r) {
            let n = this.dataFiles[this.dataFileMap[t]];
            return !!n && n.file.seek(e, r)
          }
        };
      },
      function (t, e, r) {
        Object.defineProperty(e, '__esModule', { value: !0 });
        e.DataFile = class {
          constructor(t) {
  (this.buffers = []),
              (this.pos = 0),
              (this.size = 0),
              t && (this.buffers.push(t), (this.size = t.byteLength), (this.pos = 0));
          }
          read(t) {
            if ((this.flatten(), t + this.pos > this.size)) return null
            let e = this.pos;
            return (this.pos += t), this.buffers[0].slice(e, this.pos)
          }
          readAll() {
            return this.flatten(), this.buffers[0]
          }
          write(t) {
            return this.buffers.push(t), (this.size += t.byteLength), (this.pos += t.byteLength), !0
          }
          tell() {
            return this.pos
          }
          seek(t, e) {
            let r = this.pos;
            return (
              'SET' === e ? (r = t) : 'CUR' === e ? (r += t) : (r = this.size - t),
              !(r < 0 || r > this.size || ((this.pos = r), 0))
            )
          }
          flatten() {
            if (this.buffers.length <= 1) return
            let t = new Uint8Array(this.size),
              e = 0;
            for (let r of this.buffers) t.set(r, e), (e += r.byteLength);
            this.buffers = [t];
          }
        };
      },
      function (t, e, r) {
  (function (t) {
          Object.defineProperty(e, '__esModule', { value: !0 });
          const n = r(12),
            i = r(13),
            o = r(0);
          e.FileExtractor = class extends o.Extractor {
            constructor(t, e, r) {
              super(r), (this._filePath = t), (this.fileMap = {}), (this._target = e);
            }
            open(t) {
              let e = n.openSync(t, 'r');
              return (this.fileMap[e] = { size: n.fstatSync(e).size, pos: 0, name: t }), e
            }
            create(t) {
              let e = i.join(this._target, t);
              i.parse(e)
                .dir.split('/')
                .reduce((t, e) => ((t += e + '/'), n.existsSync(t) || n.mkdirSync(t), t), '');
              let r = n.openSync(e, 'w');
              return (this.fileMap[r] = { size: 0, pos: 0, name: t }), r
            }
            closeFile(t) {
              return delete this.fileMap[t], n.closeSync(t), null
            }
            read(e, r, i) {
              let o = this.fileMap[e],
                s = new t(i),
                u = n.readSync(e, s, 0, i, o.pos);
              return unpack.HEAPU8.set(s, r), (o.pos += u), u
            }
            write(e, r, i) {
              let o = this.fileMap[e],
                s = n.writeSync(e, new t(unpack.HEAPU8.subarray(r, r + i)), 0, i);
              return (o.pos += s), (o.size += s), s === i
            }
            tell(t) {
              return this.fileMap[t].pos
            }
            seek(t, e, r) {
              let n = this.fileMap[t],
                i = n.pos;
              return (
                'SET' === r ? (i = 0) : 'END' === r && (i = n.size), !((i += e) < 0 || i > n.size || ((n.pos = i), 0))
              )
            }
          };
        }.call(this, r(7).Buffer));
      },
      function (t, e, r) {
  (function (t) {
          /*!
           * The buffer module from node.js, for the browser.
           *
           * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
           * @license  MIT
           */
          var n = r(9),
            i = r(10),
            o = r(11);
          function s() {
            return a.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823
          }
          function u(t, e) {
            if (s() < e) throw new RangeError('Invalid typed array length')
            return (
              a.TYPED_ARRAY_SUPPORT
                ? ((t = new Uint8Array(e)).__proto__ = a.prototype)
                : (null === t && (t = new a(e)), (t.length = e)),
              t
            )
          }
          function a(t, e, r) {
            if (!(a.TYPED_ARRAY_SUPPORT || this instanceof a)) return new a(t, e, r)
            if ('number' == typeof t) {
              if ('string' == typeof e)
                throw new Error('If encoding is specified then the first argument must be a string')
              return l(this, t)
            }
            return f(this, t, e, r)
          }
          function f(t, e, r, n) {
            if ('number' == typeof e) throw new TypeError('"value" argument must not be a number')
            return 'undefined' != typeof ArrayBuffer && e instanceof ArrayBuffer
              ? (function (t, e, r, n) {
                  if ((e.byteLength, r < 0 || e.byteLength < r)) throw new RangeError("'offset' is out of bounds")
                  if (e.byteLength < r + (n || 0)) throw new RangeError("'length' is out of bounds")
                  e =
                    void 0 === r && void 0 === n
                      ? new Uint8Array(e)
                      : void 0 === n
                      ? new Uint8Array(e, r)
                      : new Uint8Array(e, r, n);
                  a.TYPED_ARRAY_SUPPORT ? ((t = e).__proto__ = a.prototype) : (t = c(t, e));
                  return t
                })(t, e, r, n)
              : 'string' == typeof e
              ? (function (t, e, r) {
  ('string' == typeof r && '' !== r) || (r = 'utf8');
                  if (!a.isEncoding(r)) throw new TypeError('"encoding" must be a valid string encoding')
                  var n = 0 | g(e, r),
                    i = (t = u(t, n)).write(e, r);
                  i !== n && (t = t.slice(0, i));
                  return t
                })(t, e, r)
              : (function (t, e) {
                  if (a.isBuffer(e)) {
                    var r = 0 | p(e.length);
                    return 0 === (t = u(t, r)).length ? t : (e.copy(t, 0, 0, r), t)
                  }
                  if (e) {
                    if (('undefined' != typeof ArrayBuffer && e.buffer instanceof ArrayBuffer) || 'length' in e)
                      return 'number' != typeof e.length ||
                        (function (t) {
                          return t != t
                        })(e.length)
                        ? u(t, 0)
                        : c(t, e)
                    if ('Buffer' === e.type && o(e.data)) return c(t, e.data)
                  }
                  throw new TypeError(
                    'First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.'
                  )
                })(t, e)
          }
          function h(t) {
            if ('number' != typeof t) throw new TypeError('"size" argument must be a number')
            if (t < 0) throw new RangeError('"size" argument must not be negative')
          }
          function l(t, e) {
            if ((h(e), (t = u(t, e < 0 ? 0 : 0 | p(e))), !a.TYPED_ARRAY_SUPPORT)) for (var r = 0; r < e; ++r) t[r] = 0;
            return t
          }
          function c(t, e) {
            var r = e.length < 0 ? 0 : 0 | p(e.length);
            t = u(t, r);
            for (var n = 0; n < r; n += 1) t[n] = 255 & e[n];
            return t
          }
          function p(t) {
            if (t >= s())
              throw new RangeError(
                'Attempt to allocate Buffer larger than maximum size: 0x' + s().toString(16) + ' bytes'
              )
            return 0 | t
          }
          function g(t, e) {
            if (a.isBuffer(t)) return t.length
            if (
              'undefined' != typeof ArrayBuffer &&
              'function' == typeof ArrayBuffer.isView &&
              (ArrayBuffer.isView(t) || t instanceof ArrayBuffer)
            )
              return t.byteLength
            'string' != typeof t && (t = '' + t);
            var r = t.length;
            if (0 === r) return 0
            for (var n = !1; ; )
              switch (e) {
                case 'ascii':
                case 'latin1':
                case 'binary':
                  return r
                case 'utf8':
                case 'utf-8':
                case void 0:
                  return k(t).length
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return 2 * r
                case 'hex':
                  return r >>> 1
                case 'base64':
                  return j(t).length
                default:
                  if (n) return k(t).length
                  ;(e = ('' + e).toLowerCase()), (n = !0);
              }
          }
          function d(t, e, r) {
            var n = t[e]
            ;(t[e] = t[r]), (t[r] = n);
          }
          function y(t, e, r, n, i) {
            if (0 === t.length) return -1
            if (
              ('string' == typeof r
                ? ((n = r), (r = 0))
                : r > 2147483647
                ? (r = 2147483647)
                : r < -2147483648 && (r = -2147483648),
              (r = +r),
              isNaN(r) && (r = i ? 0 : t.length - 1),
              r < 0 && (r = t.length + r),
              r >= t.length)
            ) {
              if (i) return -1
              r = t.length - 1;
            } else if (r < 0) {
              if (!i) return -1
              r = 0;
            }
            if (('string' == typeof e && (e = a.from(e, n)), a.isBuffer(e))) return 0 === e.length ? -1 : w(t, e, r, n, i)
            if ('number' == typeof e)
              return (
                (e &= 255),
                a.TYPED_ARRAY_SUPPORT && 'function' == typeof Uint8Array.prototype.indexOf
                  ? i
                    ? Uint8Array.prototype.indexOf.call(t, e, r)
                    : Uint8Array.prototype.lastIndexOf.call(t, e, r)
                  : w(t, [e], r, n, i)
              )
            throw new TypeError('val must be string, number or Buffer')
          }
          function w(t, e, r, n, i) {
            var o,
              s = 1,
              u = t.length,
              a = e.length;
            if (
              void 0 !== n &&
              ('ucs2' === (n = String(n).toLowerCase()) || 'ucs-2' === n || 'utf16le' === n || 'utf-16le' === n)
            ) {
              if (t.length < 2 || e.length < 2) return -1
              ;(s = 2), (u /= 2), (a /= 2), (r /= 2);
            }
            function f(t, e) {
              return 1 === s ? t[e] : t.readUInt16BE(e * s)
            }
            if (i) {
              var h = -1;
              for (o = r; o < u; o++)
                if (f(t, o) === f(e, -1 === h ? 0 : o - h)) {
                  if ((-1 === h && (h = o), o - h + 1 === a)) return h * s
                } else -1 !== h && (o -= o - h), (h = -1);
            } else
              for (r + a > u && (r = u - a), o = r; o >= 0; o--) {
                for (var l = !0, c = 0; c < a; c++)
                  if (f(t, o + c) !== f(e, c)) {
                    l = !1;
                    break
                  }
                if (l) return o
              }
            return -1
          }
          function E(t, e, r, n) {
            r = Number(r) || 0;
            var i = t.length - r;
            n ? (n = Number(n)) > i && (n = i) : (n = i);
            var o = e.length;
            if (o % 2 != 0) throw new TypeError('Invalid hex string')
            n > o / 2 && (n = o / 2);
            for (var s = 0; s < n; ++s) {
              var u = parseInt(e.substr(2 * s, 2), 16);
              if (isNaN(u)) return s
              t[r + s] = u;
            }
            return s
          }
          function v(t, e, r, n) {
            return z(k(e, t.length - r), t, r, n)
          }
          function A(t, e, r, n) {
            return z(
              (function (t) {
                for (var e = [], r = 0; r < t.length; ++r) e.push(255 & t.charCodeAt(r));
                return e
              })(e),
              t,
              r,
              n
            )
          }
          function _(t, e, r, n) {
            return A(t, e, r, n)
          }
          function b(t, e, r, n) {
            return z(j(e), t, r, n)
          }
          function m(t, e, r, n) {
            return z(
              (function (t, e) {
                for (var r, n, i, o = [], s = 0; s < t.length && !((e -= 2) < 0); ++s)
                  (r = t.charCodeAt(s)), (n = r >> 8), (i = r % 256), o.push(i), o.push(n);
                return o
              })(e, t.length - r),
              t,
              r,
              n
            )
          }
          function R(t, e, r) {
            return 0 === e && r === t.length ? n.fromByteArray(t) : n.fromByteArray(t.slice(e, r))
          }
          function S(t, e, r) {
            r = Math.min(t.length, r);
            for (var n = [], i = e; i < r; ) {
              var o,
                s,
                u,
                a,
                f = t[i],
                h = null,
                l = f > 239 ? 4 : f > 223 ? 3 : f > 191 ? 2 : 1;
              if (i + l <= r)
                switch (l) {
                  case 1:
                    f < 128 && (h = f);
                    break
                  case 2:
                    128 == (192 & (o = t[i + 1])) && (a = ((31 & f) << 6) | (63 & o)) > 127 && (h = a);
                    break
                  case 3:
  (o = t[i + 1]),
                      (s = t[i + 2]),
                      128 == (192 & o) &&
                        128 == (192 & s) &&
                        (a = ((15 & f) << 12) | ((63 & o) << 6) | (63 & s)) > 2047 &&
                        (a < 55296 || a > 57343) &&
                        (h = a);
                    break
                  case 4:
  (o = t[i + 1]),
                      (s = t[i + 2]),
                      (u = t[i + 3]),
                      128 == (192 & o) &&
                        128 == (192 & s) &&
                        128 == (192 & u) &&
                        (a = ((15 & f) << 18) | ((63 & o) << 12) | ((63 & s) << 6) | (63 & u)) > 65535 &&
                        a < 1114112 &&
                        (h = a);
                }
              null === h
                ? ((h = 65533), (l = 1))
                : h > 65535 && ((h -= 65536), n.push(((h >>> 10) & 1023) | 55296), (h = 56320 | (1023 & h))),
                n.push(h),
                (i += l);
            }
            return (function (t) {
              var e = t.length;
              if (e <= T) return String.fromCharCode.apply(String, t)
              var r = '',
                n = 0;
              for (; n < e; ) r += String.fromCharCode.apply(String, t.slice(n, (n += T)));
              return r
            })(n)
          }
  (e.Buffer = a),
            (e.SlowBuffer = function (t) {
  +t != t && (t = 0);
              return a.alloc(+t)
            }),
            (e.INSPECT_MAX_BYTES = 50),
            (a.TYPED_ARRAY_SUPPORT =
              void 0 !== t.TYPED_ARRAY_SUPPORT
                ? t.TYPED_ARRAY_SUPPORT
                : (function () {
                    try {
                      var t = new Uint8Array(1);
                      return (
                        (t.__proto__ = {
                          __proto__: Uint8Array.prototype,
                          foo: function () {
                            return 42
                          },
                        }),
                        42 === t.foo() && 'function' == typeof t.subarray && 0 === t.subarray(1, 1).byteLength
                      )
                    } catch (t) {
                      return !1
                    }
                  })()),
            (e.kMaxLength = s()),
            (a.poolSize = 8192),
            (a._augment = function (t) {
              return (t.__proto__ = a.prototype), t
            }),
            (a.from = function (t, e, r) {
              return f(null, t, e, r)
            }),
            a.TYPED_ARRAY_SUPPORT &&
              ((a.prototype.__proto__ = Uint8Array.prototype),
              (a.__proto__ = Uint8Array),
              'undefined' != typeof Symbol &&
                Symbol.species &&
                a[Symbol.species] === a &&
                Object.defineProperty(a, Symbol.species, { value: null, configurable: !0 })),
            (a.alloc = function (t, e, r) {
              return (function (t, e, r, n) {
                return (
                  h(e),
                  e <= 0
                    ? u(t, e)
                    : void 0 !== r
                    ? 'string' == typeof n
                      ? u(t, e).fill(r, n)
                      : u(t, e).fill(r)
                    : u(t, e)
                )
              })(null, t, e, r)
            }),
            (a.allocUnsafe = function (t) {
              return l(null, t)
            }),
            (a.allocUnsafeSlow = function (t) {
              return l(null, t)
            }),
            (a.isBuffer = function (t) {
              return !(null == t || !t._isBuffer)
            }),
            (a.compare = function (t, e) {
              if (!a.isBuffer(t) || !a.isBuffer(e)) throw new TypeError('Arguments must be Buffers')
              if (t === e) return 0
              for (var r = t.length, n = e.length, i = 0, o = Math.min(r, n); i < o; ++i)
                if (t[i] !== e[i]) {
  (r = t[i]), (n = e[i]);
                  break
                }
              return r < n ? -1 : n < r ? 1 : 0
            }),
            (a.isEncoding = function (t) {
              switch (String(t).toLowerCase()) {
                case 'hex':
                case 'utf8':
                case 'utf-8':
                case 'ascii':
                case 'latin1':
                case 'binary':
                case 'base64':
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return !0
                default:
                  return !1
              }
            }),
            (a.concat = function (t, e) {
              if (!o(t)) throw new TypeError('"list" argument must be an Array of Buffers')
              if (0 === t.length) return a.alloc(0)
              var r;
              if (void 0 === e) for (e = 0, r = 0; r < t.length; ++r) e += t[r].length;
              var n = a.allocUnsafe(e),
                i = 0;
              for (r = 0; r < t.length; ++r) {
                var s = t[r];
                if (!a.isBuffer(s)) throw new TypeError('"list" argument must be an Array of Buffers')
                s.copy(n, i), (i += s.length);
              }
              return n
            }),
            (a.byteLength = g),
            (a.prototype._isBuffer = !0),
            (a.prototype.swap16 = function () {
              var t = this.length;
              if (t % 2 != 0) throw new RangeError('Buffer size must be a multiple of 16-bits')
              for (var e = 0; e < t; e += 2) d(this, e, e + 1);
              return this
            }),
            (a.prototype.swap32 = function () {
              var t = this.length;
              if (t % 4 != 0) throw new RangeError('Buffer size must be a multiple of 32-bits')
              for (var e = 0; e < t; e += 4) d(this, e, e + 3), d(this, e + 1, e + 2);
              return this
            }),
            (a.prototype.swap64 = function () {
              var t = this.length;
              if (t % 8 != 0) throw new RangeError('Buffer size must be a multiple of 64-bits')
              for (var e = 0; e < t; e += 8)
                d(this, e, e + 7), d(this, e + 1, e + 6), d(this, e + 2, e + 5), d(this, e + 3, e + 4);
              return this
            }),
            (a.prototype.toString = function () {
              var t = 0 | this.length;
              return 0 === t
                ? ''
                : 0 === arguments.length
                ? S(this, 0, t)
                : function (t, e, r) {
                    var n = !1;
                    if (((void 0 === e || e < 0) && (e = 0), e > this.length)) return ''
                    if (((void 0 === r || r > this.length) && (r = this.length), r <= 0)) return ''
                    if ((r >>>= 0) <= (e >>>= 0)) return ''
                    for (t || (t = 'utf8'); ; )
                      switch (t) {
                        case 'hex':
                          return U(this, e, r)
                        case 'utf8':
                        case 'utf-8':
                          return S(this, e, r)
                        case 'ascii':
                          return P(this, e, r)
                        case 'latin1':
                        case 'binary':
                          return C(this, e, r)
                        case 'base64':
                          return R(this, e, r)
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                          return B(this, e, r)
                        default:
                          if (n) throw new TypeError('Unknown encoding: ' + t)
                          ;(t = (t + '').toLowerCase()), (n = !0);
                      }
                  }.apply(this, arguments)
            }),
            (a.prototype.equals = function (t) {
              if (!a.isBuffer(t)) throw new TypeError('Argument must be a Buffer')
              return this === t || 0 === a.compare(this, t)
            }),
            (a.prototype.inspect = function () {
              var t = '',
                r = e.INSPECT_MAX_BYTES;
              return (
                this.length > 0 &&
                  ((t = this.toString('hex', 0, r).match(/.{2}/g).join(' ')), this.length > r && (t += ' ... ')),
                '<Buffer ' + t + '>'
              )
            }),
            (a.prototype.compare = function (t, e, r, n, i) {
              if (!a.isBuffer(t)) throw new TypeError('Argument must be a Buffer')
              if (
                (void 0 === e && (e = 0),
                void 0 === r && (r = t ? t.length : 0),
                void 0 === n && (n = 0),
                void 0 === i && (i = this.length),
                e < 0 || r > t.length || n < 0 || i > this.length)
              )
                throw new RangeError('out of range index')
              if (n >= i && e >= r) return 0
              if (n >= i) return -1
              if (e >= r) return 1
              if (((e >>>= 0), (r >>>= 0), (n >>>= 0), (i >>>= 0), this === t)) return 0
              for (
                var o = i - n, s = r - e, u = Math.min(o, s), f = this.slice(n, i), h = t.slice(e, r), l = 0;
                l < u;
                ++l
              )
                if (f[l] !== h[l]) {
  (o = f[l]), (s = h[l]);
                  break
                }
              return o < s ? -1 : s < o ? 1 : 0
            }),
            (a.prototype.includes = function (t, e, r) {
              return -1 !== this.indexOf(t, e, r)
            }),
            (a.prototype.indexOf = function (t, e, r) {
              return y(this, t, e, r, !0)
            }),
            (a.prototype.lastIndexOf = function (t, e, r) {
              return y(this, t, e, r, !1)
            }),
            (a.prototype.write = function (t, e, r, n) {
              if (void 0 === e) (n = 'utf8'), (r = this.length), (e = 0);
              else if (void 0 === r && 'string' == typeof e) (n = e), (r = this.length), (e = 0);
              else {
                if (!isFinite(e))
                  throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported')
                ;(e |= 0), isFinite(r) ? ((r |= 0), void 0 === n && (n = 'utf8')) : ((n = r), (r = void 0));
              }
              var i = this.length - e;
              if (((void 0 === r || r > i) && (r = i), (t.length > 0 && (r < 0 || e < 0)) || e > this.length))
                throw new RangeError('Attempt to write outside buffer bounds')
              n || (n = 'utf8');
              for (var o = !1; ; )
                switch (n) {
                  case 'hex':
                    return E(this, t, e, r)
                  case 'utf8':
                  case 'utf-8':
                    return v(this, t, e, r)
                  case 'ascii':
                    return A(this, t, e, r)
                  case 'latin1':
                  case 'binary':
                    return _(this, t, e, r)
                  case 'base64':
                    return b(this, t, e, r)
                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return m(this, t, e, r)
                  default:
                    if (o) throw new TypeError('Unknown encoding: ' + n)
                    ;(n = ('' + n).toLowerCase()), (o = !0);
                }
            }),
            (a.prototype.toJSON = function () {
              return { type: 'Buffer', data: Array.prototype.slice.call(this._arr || this, 0) }
            });
          var T = 4096;
          function P(t, e, r) {
            var n = '';
            r = Math.min(t.length, r);
            for (var i = e; i < r; ++i) n += String.fromCharCode(127 & t[i]);
            return n
          }
          function C(t, e, r) {
            var n = '';
            r = Math.min(t.length, r);
            for (var i = e; i < r; ++i) n += String.fromCharCode(t[i]);
            return n
          }
          function U(t, e, r) {
            var n = t.length
            ;(!e || e < 0) && (e = 0), (!r || r < 0 || r > n) && (r = n);
            for (var i = '', o = e; o < r; ++o) i += N(t[o]);
            return i
          }
          function B(t, e, r) {
            for (var n = t.slice(e, r), i = '', o = 0; o < n.length; o += 2)
              i += String.fromCharCode(n[o] + 256 * n[o + 1]);
            return i
          }
          function F(t, e, r) {
            if (t % 1 != 0 || t < 0) throw new RangeError('offset is not uint')
            if (t + e > r) throw new RangeError('Trying to access beyond buffer length')
          }
          function M(t, e, r, n, i, o) {
            if (!a.isBuffer(t)) throw new TypeError('"buffer" argument must be a Buffer instance')
            if (e > i || e < o) throw new RangeError('"value" argument is out of bounds')
            if (r + n > t.length) throw new RangeError('Index out of range')
          }
          function x(t, e, r, n) {
            e < 0 && (e = 65535 + e + 1);
            for (var i = 0, o = Math.min(t.length - r, 2); i < o; ++i)
              t[r + i] = (e & (255 << (8 * (n ? i : 1 - i)))) >>> (8 * (n ? i : 1 - i));
          }
          function I(t, e, r, n) {
            e < 0 && (e = 4294967295 + e + 1);
            for (var i = 0, o = Math.min(t.length - r, 4); i < o; ++i) t[r + i] = (e >>> (8 * (n ? i : 3 - i))) & 255;
          }
          function O(t, e, r, n, i, o) {
            if (r + n > t.length) throw new RangeError('Index out of range')
            if (r < 0) throw new RangeError('Index out of range')
          }
          function Y(t, e, r, n, o) {
            return o || O(t, 0, r, 4), i.write(t, e, r, n, 23, 4), r + 4
          }
          function L(t, e, r, n, o) {
            return o || O(t, 0, r, 8), i.write(t, e, r, n, 52, 8), r + 8
          }
  (a.prototype.slice = function (t, e) {
            var r,
              n = this.length;
            if (
              ((t = ~~t),
              (e = void 0 === e ? n : ~~e),
              t < 0 ? (t += n) < 0 && (t = 0) : t > n && (t = n),
              e < 0 ? (e += n) < 0 && (e = 0) : e > n && (e = n),
              e < t && (e = t),
              a.TYPED_ARRAY_SUPPORT)
            )
              (r = this.subarray(t, e)).__proto__ = a.prototype;
            else {
              var i = e - t;
              r = new a(i, void 0);
              for (var o = 0; o < i; ++o) r[o] = this[o + t];
            }
            return r
          }),
            (a.prototype.readUIntLE = function (t, e, r) {
  (t |= 0), (e |= 0), r || F(t, e, this.length);
              for (var n = this[t], i = 1, o = 0; ++o < e && (i *= 256); ) n += this[t + o] * i;
              return n
            }),
            (a.prototype.readUIntBE = function (t, e, r) {
  (t |= 0), (e |= 0), r || F(t, e, this.length);
              for (var n = this[t + --e], i = 1; e > 0 && (i *= 256); ) n += this[t + --e] * i;
              return n
            }),
            (a.prototype.readUInt8 = function (t, e) {
              return e || F(t, 1, this.length), this[t]
            }),
            (a.prototype.readUInt16LE = function (t, e) {
              return e || F(t, 2, this.length), this[t] | (this[t + 1] << 8)
            }),
            (a.prototype.readUInt16BE = function (t, e) {
              return e || F(t, 2, this.length), (this[t] << 8) | this[t + 1]
            }),
            (a.prototype.readUInt32LE = function (t, e) {
              return (
                e || F(t, 4, this.length), (this[t] | (this[t + 1] << 8) | (this[t + 2] << 16)) + 16777216 * this[t + 3]
              )
            }),
            (a.prototype.readUInt32BE = function (t, e) {
              return (
                e || F(t, 4, this.length), 16777216 * this[t] + ((this[t + 1] << 16) | (this[t + 2] << 8) | this[t + 3])
              )
            }),
            (a.prototype.readIntLE = function (t, e, r) {
  (t |= 0), (e |= 0), r || F(t, e, this.length);
              for (var n = this[t], i = 1, o = 0; ++o < e && (i *= 256); ) n += this[t + o] * i;
              return n >= (i *= 128) && (n -= Math.pow(2, 8 * e)), n
            }),
            (a.prototype.readIntBE = function (t, e, r) {
  (t |= 0), (e |= 0), r || F(t, e, this.length);
              for (var n = e, i = 1, o = this[t + --n]; n > 0 && (i *= 256); ) o += this[t + --n] * i;
              return o >= (i *= 128) && (o -= Math.pow(2, 8 * e)), o
            }),
            (a.prototype.readInt8 = function (t, e) {
              return e || F(t, 1, this.length), 128 & this[t] ? -1 * (255 - this[t] + 1) : this[t]
            }),
            (a.prototype.readInt16LE = function (t, e) {
              e || F(t, 2, this.length);
              var r = this[t] | (this[t + 1] << 8);
              return 32768 & r ? 4294901760 | r : r
            }),
            (a.prototype.readInt16BE = function (t, e) {
              e || F(t, 2, this.length);
              var r = this[t + 1] | (this[t] << 8);
              return 32768 & r ? 4294901760 | r : r
            }),
            (a.prototype.readInt32LE = function (t, e) {
              return e || F(t, 4, this.length), this[t] | (this[t + 1] << 8) | (this[t + 2] << 16) | (this[t + 3] << 24)
            }),
            (a.prototype.readInt32BE = function (t, e) {
              return e || F(t, 4, this.length), (this[t] << 24) | (this[t + 1] << 16) | (this[t + 2] << 8) | this[t + 3]
            }),
            (a.prototype.readFloatLE = function (t, e) {
              return e || F(t, 4, this.length), i.read(this, t, !0, 23, 4)
            }),
            (a.prototype.readFloatBE = function (t, e) {
              return e || F(t, 4, this.length), i.read(this, t, !1, 23, 4)
            }),
            (a.prototype.readDoubleLE = function (t, e) {
              return e || F(t, 8, this.length), i.read(this, t, !0, 52, 8)
            }),
            (a.prototype.readDoubleBE = function (t, e) {
              return e || F(t, 8, this.length), i.read(this, t, !1, 52, 8)
            }),
            (a.prototype.writeUIntLE = function (t, e, r, n) {
  ((t = +t), (e |= 0), (r |= 0), n) || M(this, t, e, r, Math.pow(2, 8 * r) - 1, 0);
              var i = 1,
                o = 0;
              for (this[e] = 255 & t; ++o < r && (i *= 256); ) this[e + o] = (t / i) & 255;
              return e + r
            }),
            (a.prototype.writeUIntBE = function (t, e, r, n) {
  ((t = +t), (e |= 0), (r |= 0), n) || M(this, t, e, r, Math.pow(2, 8 * r) - 1, 0);
              var i = r - 1,
                o = 1;
              for (this[e + i] = 255 & t; --i >= 0 && (o *= 256); ) this[e + i] = (t / o) & 255;
              return e + r
            }),
            (a.prototype.writeUInt8 = function (t, e, r) {
              return (
                (t = +t),
                (e |= 0),
                r || M(this, t, e, 1, 255, 0),
                a.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)),
                (this[e] = 255 & t),
                e + 1
              )
            }),
            (a.prototype.writeUInt16LE = function (t, e, r) {
              return (
                (t = +t),
                (e |= 0),
                r || M(this, t, e, 2, 65535, 0),
                a.TYPED_ARRAY_SUPPORT ? ((this[e] = 255 & t), (this[e + 1] = t >>> 8)) : x(this, t, e, !0),
                e + 2
              )
            }),
            (a.prototype.writeUInt16BE = function (t, e, r) {
              return (
                (t = +t),
                (e |= 0),
                r || M(this, t, e, 2, 65535, 0),
                a.TYPED_ARRAY_SUPPORT ? ((this[e] = t >>> 8), (this[e + 1] = 255 & t)) : x(this, t, e, !1),
                e + 2
              )
            }),
            (a.prototype.writeUInt32LE = function (t, e, r) {
              return (
                (t = +t),
                (e |= 0),
                r || M(this, t, e, 4, 4294967295, 0),
                a.TYPED_ARRAY_SUPPORT
                  ? ((this[e + 3] = t >>> 24), (this[e + 2] = t >>> 16), (this[e + 1] = t >>> 8), (this[e] = 255 & t))
                  : I(this, t, e, !0),
                e + 4
              )
            }),
            (a.prototype.writeUInt32BE = function (t, e, r) {
              return (
                (t = +t),
                (e |= 0),
                r || M(this, t, e, 4, 4294967295, 0),
                a.TYPED_ARRAY_SUPPORT
                  ? ((this[e] = t >>> 24), (this[e + 1] = t >>> 16), (this[e + 2] = t >>> 8), (this[e + 3] = 255 & t))
                  : I(this, t, e, !1),
                e + 4
              )
            }),
            (a.prototype.writeIntLE = function (t, e, r, n) {
              if (((t = +t), (e |= 0), !n)) {
                var i = Math.pow(2, 8 * r - 1);
                M(this, t, e, r, i - 1, -i);
              }
              var o = 0,
                s = 1,
                u = 0;
              for (this[e] = 255 & t; ++o < r && (s *= 256); )
                t < 0 && 0 === u && 0 !== this[e + o - 1] && (u = 1), (this[e + o] = (((t / s) >> 0) - u) & 255);
              return e + r
            }),
            (a.prototype.writeIntBE = function (t, e, r, n) {
              if (((t = +t), (e |= 0), !n)) {
                var i = Math.pow(2, 8 * r - 1);
                M(this, t, e, r, i - 1, -i);
              }
              var o = r - 1,
                s = 1,
                u = 0;
              for (this[e + o] = 255 & t; --o >= 0 && (s *= 256); )
                t < 0 && 0 === u && 0 !== this[e + o + 1] && (u = 1), (this[e + o] = (((t / s) >> 0) - u) & 255);
              return e + r
            }),
            (a.prototype.writeInt8 = function (t, e, r) {
              return (
                (t = +t),
                (e |= 0),
                r || M(this, t, e, 1, 127, -128),
                a.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)),
                t < 0 && (t = 255 + t + 1),
                (this[e] = 255 & t),
                e + 1
              )
            }),
            (a.prototype.writeInt16LE = function (t, e, r) {
              return (
                (t = +t),
                (e |= 0),
                r || M(this, t, e, 2, 32767, -32768),
                a.TYPED_ARRAY_SUPPORT ? ((this[e] = 255 & t), (this[e + 1] = t >>> 8)) : x(this, t, e, !0),
                e + 2
              )
            }),
            (a.prototype.writeInt16BE = function (t, e, r) {
              return (
                (t = +t),
                (e |= 0),
                r || M(this, t, e, 2, 32767, -32768),
                a.TYPED_ARRAY_SUPPORT ? ((this[e] = t >>> 8), (this[e + 1] = 255 & t)) : x(this, t, e, !1),
                e + 2
              )
            }),
            (a.prototype.writeInt32LE = function (t, e, r) {
              return (
                (t = +t),
                (e |= 0),
                r || M(this, t, e, 4, 2147483647, -2147483648),
                a.TYPED_ARRAY_SUPPORT
                  ? ((this[e] = 255 & t), (this[e + 1] = t >>> 8), (this[e + 2] = t >>> 16), (this[e + 3] = t >>> 24))
                  : I(this, t, e, !0),
                e + 4
              )
            }),
            (a.prototype.writeInt32BE = function (t, e, r) {
              return (
                (t = +t),
                (e |= 0),
                r || M(this, t, e, 4, 2147483647, -2147483648),
                t < 0 && (t = 4294967295 + t + 1),
                a.TYPED_ARRAY_SUPPORT
                  ? ((this[e] = t >>> 24), (this[e + 1] = t >>> 16), (this[e + 2] = t >>> 8), (this[e + 3] = 255 & t))
                  : I(this, t, e, !1),
                e + 4
              )
            }),
            (a.prototype.writeFloatLE = function (t, e, r) {
              return Y(this, t, e, !0, r)
            }),
            (a.prototype.writeFloatBE = function (t, e, r) {
              return Y(this, t, e, !1, r)
            }),
            (a.prototype.writeDoubleLE = function (t, e, r) {
              return L(this, t, e, !0, r)
            }),
            (a.prototype.writeDoubleBE = function (t, e, r) {
              return L(this, t, e, !1, r)
            }),
            (a.prototype.copy = function (t, e, r, n) {
              if (
                (r || (r = 0),
                n || 0 === n || (n = this.length),
                e >= t.length && (e = t.length),
                e || (e = 0),
                n > 0 && n < r && (n = r),
                n === r)
              )
                return 0
              if (0 === t.length || 0 === this.length) return 0
              if (e < 0) throw new RangeError('targetStart out of bounds')
              if (r < 0 || r >= this.length) throw new RangeError('sourceStart out of bounds')
              if (n < 0) throw new RangeError('sourceEnd out of bounds')
              n > this.length && (n = this.length), t.length - e < n - r && (n = t.length - e + r);
              var i,
                o = n - r;
              if (this === t && r < e && e < n) for (i = o - 1; i >= 0; --i) t[i + e] = this[i + r];
              else if (o < 1e3 || !a.TYPED_ARRAY_SUPPORT) for (i = 0; i < o; ++i) t[i + e] = this[i + r];
              else Uint8Array.prototype.set.call(t, this.subarray(r, r + o), e);
              return o
            }),
            (a.prototype.fill = function (t, e, r, n) {
              if ('string' == typeof t) {
                if (
                  ('string' == typeof e
                    ? ((n = e), (e = 0), (r = this.length))
                    : 'string' == typeof r && ((n = r), (r = this.length)),
                  1 === t.length)
                ) {
                  var i = t.charCodeAt(0);
                  i < 256 && (t = i);
                }
                if (void 0 !== n && 'string' != typeof n) throw new TypeError('encoding must be a string')
                if ('string' == typeof n && !a.isEncoding(n)) throw new TypeError('Unknown encoding: ' + n)
              } else 'number' == typeof t && (t &= 255);
              if (e < 0 || this.length < e || this.length < r) throw new RangeError('Out of range index')
              if (r <= e) return this
              var o;
              if (((e >>>= 0), (r = void 0 === r ? this.length : r >>> 0), t || (t = 0), 'number' == typeof t))
                for (o = e; o < r; ++o) this[o] = t;
              else {
                var s = a.isBuffer(t) ? t : k(new a(t, n).toString()),
                  u = s.length;
                for (o = 0; o < r - e; ++o) this[o + e] = s[o % u];
              }
              return this
            });
          var D = /[^+\/0-9A-Za-z-_]/g;
          function N(t) {
            return t < 16 ? '0' + t.toString(16) : t.toString(16)
          }
          function k(t, e) {
            var r;
            e = e || 1 / 0;
            for (var n = t.length, i = null, o = [], s = 0; s < n; ++s) {
              if ((r = t.charCodeAt(s)) > 55295 && r < 57344) {
                if (!i) {
                  if (r > 56319) {
  (e -= 3) > -1 && o.push(239, 191, 189);
                    continue
                  }
                  if (s + 1 === n) {
  (e -= 3) > -1 && o.push(239, 191, 189);
                    continue
                  }
                  i = r;
                  continue
                }
                if (r < 56320) {
  (e -= 3) > -1 && o.push(239, 191, 189), (i = r);
                  continue
                }
                r = 65536 + (((i - 55296) << 10) | (r - 56320));
              } else i && (e -= 3) > -1 && o.push(239, 191, 189);
              if (((i = null), r < 128)) {
                if ((e -= 1) < 0) break
                o.push(r);
              } else if (r < 2048) {
                if ((e -= 2) < 0) break
                o.push((r >> 6) | 192, (63 & r) | 128);
              } else if (r < 65536) {
                if ((e -= 3) < 0) break
                o.push((r >> 12) | 224, ((r >> 6) & 63) | 128, (63 & r) | 128);
              } else {
                if (!(r < 1114112)) throw new Error('Invalid code point')
                if ((e -= 4) < 0) break
                o.push((r >> 18) | 240, ((r >> 12) & 63) | 128, ((r >> 6) & 63) | 128, (63 & r) | 128);
              }
            }
            return o
          }
          function j(t) {
            return n.toByteArray(
              (function (t) {
                if (
                  (t = (function (t) {
                    return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, '')
                  })(t).replace(D, '')).length < 2
                )
                  return ''
                for (; t.length % 4 != 0; ) t += '=';
                return t
              })(t)
            )
          }
          function z(t, e, r, n) {
            for (var i = 0; i < n && !(i + r >= e.length || i >= t.length); ++i) e[i + r] = t[i];
            return i
          }
        }.call(this, r(8)));
      },
      function (t, e) {
        var r;
        r = (function () {
          return this
        })();
        try {
          r = r || Function('return this')() || (0, eval)('this');
        } catch (t) {
          'object' == typeof window && (r = window);
        }
        t.exports = r;
      },
      function (t, e, r) {
  (e.byteLength = function (t) {
          var e = f(t),
            r = e[0],
            n = e[1];
          return (3 * (r + n)) / 4 - n
        }),
          (e.toByteArray = function (t) {
            for (
              var e,
                r = f(t),
                n = r[0],
                s = r[1],
                u = new o(
                  (function (t, e, r) {
                    return (3 * (e + r)) / 4 - r
                  })(0, n, s)
                ),
                a = 0,
                h = s > 0 ? n - 4 : n,
                l = 0;
              l < h;
              l += 4
            )
              (e =
                (i[t.charCodeAt(l)] << 18) |
                (i[t.charCodeAt(l + 1)] << 12) |
                (i[t.charCodeAt(l + 2)] << 6) |
                i[t.charCodeAt(l + 3)]),
                (u[a++] = (e >> 16) & 255),
                (u[a++] = (e >> 8) & 255),
                (u[a++] = 255 & e);
            2 === s && ((e = (i[t.charCodeAt(l)] << 2) | (i[t.charCodeAt(l + 1)] >> 4)), (u[a++] = 255 & e));
            1 === s &&
              ((e = (i[t.charCodeAt(l)] << 10) | (i[t.charCodeAt(l + 1)] << 4) | (i[t.charCodeAt(l + 2)] >> 2)),
              (u[a++] = (e >> 8) & 255),
              (u[a++] = 255 & e));
            return u
          }),
          (e.fromByteArray = function (t) {
            for (var e, r = t.length, i = r % 3, o = [], s = 0, u = r - i; s < u; s += 16383)
              o.push(l(t, s, s + 16383 > u ? u : s + 16383));
            1 === i
              ? ((e = t[r - 1]), o.push(n[e >> 2] + n[(e << 4) & 63] + '=='))
              : 2 === i &&
                ((e = (t[r - 2] << 8) + t[r - 1]), o.push(n[e >> 10] + n[(e >> 4) & 63] + n[(e << 2) & 63] + '='));
            return o.join('')
          });
        for (
          var n = [],
            i = [],
            o = 'undefined' != typeof Uint8Array ? Uint8Array : Array,
            s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
            u = 0,
            a = s.length;
          u < a;
          ++u
        )
          (n[u] = s[u]), (i[s.charCodeAt(u)] = u);
        function f(t) {
          var e = t.length;
          if (e % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4')
          var r = t.indexOf('=');
          return -1 === r && (r = e), [r, r === e ? 0 : 4 - (r % 4)]
        }
        function h(t) {
          return n[(t >> 18) & 63] + n[(t >> 12) & 63] + n[(t >> 6) & 63] + n[63 & t]
        }
        function l(t, e, r) {
          for (var n, i = [], o = e; o < r; o += 3)
            (n = ((t[o] << 16) & 16711680) + ((t[o + 1] << 8) & 65280) + (255 & t[o + 2])), i.push(h(n));
          return i.join('')
        }
  (i['-'.charCodeAt(0)] = 62), (i['_'.charCodeAt(0)] = 63);
      },
      function (t, e) {
  (e.read = function (t, e, r, n, i) {
          var o,
            s,
            u = 8 * i - n - 1,
            a = (1 << u) - 1,
            f = a >> 1,
            h = -7,
            l = r ? i - 1 : 0,
            c = r ? -1 : 1,
            p = t[e + l];
          for (l += c, o = p & ((1 << -h) - 1), p >>= -h, h += u; h > 0; o = 256 * o + t[e + l], l += c, h -= 8);
          for (s = o & ((1 << -h) - 1), o >>= -h, h += n; h > 0; s = 256 * s + t[e + l], l += c, h -= 8);
          if (0 === o) o = 1 - f;
          else {
            if (o === a) return s ? NaN : (1 / 0) * (p ? -1 : 1)
            ;(s += Math.pow(2, n)), (o -= f);
          }
          return (p ? -1 : 1) * s * Math.pow(2, o - n)
        }),
          (e.write = function (t, e, r, n, i, o) {
            var s,
              u,
              a,
              f = 8 * o - i - 1,
              h = (1 << f) - 1,
              l = h >> 1,
              c = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
              p = n ? 0 : o - 1,
              g = n ? 1 : -1,
              d = e < 0 || (0 === e && 1 / e < 0) ? 1 : 0;
            for (
              e = Math.abs(e),
                isNaN(e) || e === 1 / 0
                  ? ((u = isNaN(e) ? 1 : 0), (s = h))
                  : ((s = Math.floor(Math.log(e) / Math.LN2)),
                    e * (a = Math.pow(2, -s)) < 1 && (s--, (a *= 2)),
                    (e += s + l >= 1 ? c / a : c * Math.pow(2, 1 - l)) * a >= 2 && (s++, (a /= 2)),
                    s + l >= h
                      ? ((u = 0), (s = h))
                      : s + l >= 1
                      ? ((u = (e * a - 1) * Math.pow(2, i)), (s += l))
                      : ((u = e * Math.pow(2, l - 1) * Math.pow(2, i)), (s = 0)));
              i >= 8;
              t[r + p] = 255 & u, p += g, u /= 256, i -= 8
            );
            for (s = (s << i) | u, f += i; f > 0; t[r + p] = 255 & s, p += g, s /= 256, f -= 8);
            t[r + p - g] |= 128 * d;
          });
      },
      function (t, e) {
        var r = {}.toString;
        t.exports =
          Array.isArray ||
          function (t) {
            return '[object Array]' == r.call(t)
          };
      },
      function (e, r) {
        e.exports = t;
      },
      function (t, e, r) {
  (function (t) {
          function r(t, e) {
            for (var r = 0, n = t.length - 1; n >= 0; n--) {
              var i = t[n];
              '.' === i ? t.splice(n, 1) : '..' === i ? (t.splice(n, 1), r++) : r && (t.splice(n, 1), r--);
            }
            if (e) for (; r--; r) t.unshift('..');
            return t
          }
          var n = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,
            i = function (t) {
              return n.exec(t).slice(1)
            };
          function o(t, e) {
            if (t.filter) return t.filter(e)
            for (var r = [], n = 0; n < t.length; n++) e(t[n], n, t) && r.push(t[n]);
            return r
          }
  (e.resolve = function () {
            for (var e = '', n = !1, i = arguments.length - 1; i >= -1 && !n; i--) {
              var s = i >= 0 ? arguments[i] : t.cwd();
              if ('string' != typeof s) throw new TypeError('Arguments to path.resolve must be strings')
              s && ((e = s + '/' + e), (n = '/' === s.charAt(0)));
            }
            return (
              (e = r(
                o(e.split('/'), function (t) {
                  return !!t
                }),
                !n
              ).join('/')),
              (n ? '/' : '') + e || '.'
            )
          }),
            (e.normalize = function (t) {
              var n = e.isAbsolute(t),
                i = '/' === s(t, -1);
              return (
                (t = r(
                  o(t.split('/'), function (t) {
                    return !!t
                  }),
                  !n
                ).join('/')) ||
                  n ||
                  (t = '.'),
                t && i && (t += '/'),
                (n ? '/' : '') + t
              )
            }),
            (e.isAbsolute = function (t) {
              return '/' === t.charAt(0)
            }),
            (e.join = function () {
              var t = Array.prototype.slice.call(arguments, 0);
              return e.normalize(
                o(t, function (t, e) {
                  if ('string' != typeof t) throw new TypeError('Arguments to path.join must be strings')
                  return t
                }).join('/')
              )
            }),
            (e.relative = function (t, r) {
              function n(t) {
                for (var e = 0; e < t.length && '' === t[e]; e++);
                for (var r = t.length - 1; r >= 0 && '' === t[r]; r--);
                return e > r ? [] : t.slice(e, r - e + 1)
              }
  (t = e.resolve(t).substr(1)), (r = e.resolve(r).substr(1));
              for (
                var i = n(t.split('/')), o = n(r.split('/')), s = Math.min(i.length, o.length), u = s, a = 0;
                a < s;
                a++
              )
                if (i[a] !== o[a]) {
                  u = a;
                  break
                }
              var f = [];
              for (a = u; a < i.length; a++) f.push('..');
              return (f = f.concat(o.slice(u))).join('/')
            }),
            (e.sep = '/'),
            (e.delimiter = ':'),
            (e.dirname = function (t) {
              var e = i(t),
                r = e[0],
                n = e[1];
              return r || n ? (n && (n = n.substr(0, n.length - 1)), r + n) : '.'
            }),
            (e.basename = function (t, e) {
              var r = i(t)[2];
              return e && r.substr(-1 * e.length) === e && (r = r.substr(0, r.length - e.length)), r
            }),
            (e.extname = function (t) {
              return i(t)[3]
            });
          var s =
            'b' === 'ab'.substr(-1)
              ? function (t, e, r) {
                  return t.substr(e, r)
                }
              : function (t, e, r) {
                  return e < 0 && (e = t.length + e), t.substr(e, r)
                };
        }.call(this, r(14)));
      },
      function (t, e) {
        var r,
          n,
          i = (t.exports = {});
        function o() {
          throw new Error('setTimeout has not been defined')
        }
        function s() {
          throw new Error('clearTimeout has not been defined')
        }
        function u(t) {
          if (r === setTimeout) return setTimeout(t, 0)
          if ((r === o || !r) && setTimeout) return (r = setTimeout), setTimeout(t, 0)
          try {
            return r(t, 0)
          } catch (e) {
            try {
              return r.call(null, t, 0)
            } catch (e) {
              return r.call(this, t, 0)
            }
          }
        }
        !(function () {
          try {
            r = 'function' == typeof setTimeout ? setTimeout : o;
          } catch (t) {
            r = o;
          }
          try {
            n = 'function' == typeof clearTimeout ? clearTimeout : s;
          } catch (t) {
            n = s;
          }
        })();
        var a,
          f = [],
          h = !1,
          l = -1;
        function c() {
          h && a && ((h = !1), a.length ? (f = a.concat(f)) : (l = -1), f.length && p());
        }
        function p() {
          if (!h) {
            var t = u(c);
            h = !0;
            for (var e = f.length; e; ) {
              for (a = f, f = []; ++l < e; ) a && a[l].run()
              ;(l = -1), (e = f.length);
            }
  (a = null),
              (h = !1),
              (function (t) {
                if (n === clearTimeout) return clearTimeout(t)
                if ((n === s || !n) && clearTimeout) return (n = clearTimeout), clearTimeout(t)
                try {
                  n(t);
                } catch (e) {
                  try {
                    return n.call(null, t)
                  } catch (e) {
                    return n.call(this, t)
                  }
                }
              })(t);
          }
        }
        function g(t, e) {
  (this.fun = t), (this.array = e);
        }
        function d() {}
  (i.nextTick = function (t) {
          var e = new Array(arguments.length - 1);
          if (arguments.length > 1) for (var r = 1; r < arguments.length; r++) e[r - 1] = arguments[r];
          f.push(new g(t, e)), 1 !== f.length || h || u(p);
        }),
          (g.prototype.run = function () {
            this.fun.apply(null, this.array);
          }),
          (i.title = 'browser'),
          (i.browser = !0),
          (i.env = {}),
          (i.argv = []),
          (i.version = ''),
          (i.versions = {}),
          (i.on = d),
          (i.addListener = d),
          (i.once = d),
          (i.off = d),
          (i.removeListener = d),
          (i.removeAllListeners = d),
          (i.emit = d),
          (i.prependListener = d),
          (i.prependOnceListener = d),
          (i.listeners = function (t) {
            return []
          }),
          (i.binding = function (t) {
            throw new Error('process.binding is not supported')
          }),
          (i.cwd = function () {
            return '/'
          }),
          (i.chdir = function (t) {
            throw new Error('process.chdir is not supported')
          }),
          (i.umask = function () {
            return 0
          });
      },
    ])
  });
  //-------------------------------------------------------------

  const unpackBridge = WorkerScope.unpackBridge;

  let unpack;

  //-------------------------unpack--------------------------
  var initunpack = function (buffer) {
    // The following code has been _carefully_ modified by hand.
    // Due to WebPack embedding this script into the Zea engine
    // build, certain features broke.
    // There was code to handle loading in a nodeJS context, that tried to import("fs")
    // WebPack kepts tripping up on that code in its static analysis of the code, so
    // I carefully removed it.
    // The global scope of the script seems to be different, so unpackBridge was not available.
    // The unpackBridge code assigns unpackBridge to the passed in scope, which is 'this', but that
    // scope isn't available inside this 'unpack' function.
    const unpack = Module;

    // Note: the following is the URL of the unpack.wasm file in our ZeaEngine project on our
    // server. Ideally we could use a relative path from the ZeaEngine file, but
    // that isn't possible yet. (TODO: Ask Mauro about this)
    const credentials = 'omit';

    var Ext = unpackBridge.Ext;
    var jsAPI = {
      open: function () {
        return Ext.current.open.apply(Ext.current, arguments)
      },
      close: function () {
        return Ext.current.close.apply(Ext.current, arguments)
      },
      read: function () {
        return Ext.current.read.apply(Ext.current, arguments)
      },
      write: function () {
        return Ext.current.write.apply(Ext.current, arguments)
      },
      tell: function () {
        return Ext.current.tell.apply(Ext.current, arguments)
      },
      seek: function () {
        return Ext.current.seek.apply(Ext.current, arguments)
      },
      create: function () {
        return Ext.current.create.apply(Ext.current, arguments)
      },
    };
    var moduleOverrides = {};
    var key;
    for (key in Module) {
      if (Module.hasOwnProperty(key)) {
        moduleOverrides[key] = Module[key];
      }
    }
    Module['wasmBinary'] = buffer;
    Module['arguments'] = [];
    Module['thisProgram'] = './this.program';
    Module['quit'] = function (status, toThrow) {
      throw toThrow
    };
    Module['preRun'] = [];
    Module['postRun'] = [];
    var ENVIRONMENT_IS_WEB = false;
    var ENVIRONMENT_IS_WORKER = false;
    var ENVIRONMENT_IS_NODE = false;
    if (Module['ENVIRONMENT']) {
      if (Module['ENVIRONMENT'] === 'WEB') {
        ENVIRONMENT_IS_WEB = true;
      } else if (Module['ENVIRONMENT'] === 'WORKER') {
        ENVIRONMENT_IS_WORKER = true;
      } else if (Module['ENVIRONMENT'] === 'NODE') {
        ENVIRONMENT_IS_NODE = true;
      } else if (Module['ENVIRONMENT'] === 'SHELL') ; else {
        throw new Error("Module['ENVIRONMENT'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.")
      }
    } else {
      ENVIRONMENT_IS_WEB = typeof window === 'object';
      ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
      ENVIRONMENT_IS_NODE =
        typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
    }
    if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
      Module['read'] = function shell_read(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.send(null);
        return xhr.responseText
      };
      if (ENVIRONMENT_IS_WORKER) {
        Module['readBinary'] = function readBinary(url) {
          var xhr = new XMLHttpRequest();
          xhr.open('GET', url, false);
          xhr.responseType = 'arraybuffer';
          xhr.send(null);
          return new Uint8Array(xhr.response)
        };
      }
      Module['readAsync'] = function readAsync(url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) {
            onload(xhr.response);
            return
          }
          onerror();
        };
        xhr.onerror = onerror;
        xhr.send(null);
      };
      Module['setWindowTitle'] = function (title) {
        document.title = title;
      };
    }
    Module['print'] =
      typeof console !== 'undefined' ? console.log.bind(console) : typeof print !== 'undefined' ? print : null;
    Module['printErr'] =
      typeof printErr !== 'undefined'
        ? printErr
        : (typeof console !== 'undefined' && console.warn.bind(console)) || Module['print'];
    Module.print = Module['print'];
    Module.printErr = Module['printErr'];
    for (key in moduleOverrides) {
      if (moduleOverrides.hasOwnProperty(key)) {
        Module[key] = moduleOverrides[key];
      }
    }
    moduleOverrides = undefined;
    var STACK_ALIGN = 16;
    function staticAlloc(size) {
      assert(!staticSealed);
      var ret = STATICTOP;
      STATICTOP = (STATICTOP + size + 15) & -16;
      return ret
    }
    function dynamicAlloc(size) {
      assert(DYNAMICTOP_PTR);
      var ret = HEAP32[DYNAMICTOP_PTR >> 2];
      var end = (ret + size + 15) & -16;
      HEAP32[DYNAMICTOP_PTR >> 2] = end;
      if (end >= TOTAL_MEMORY) {
        var success = enlargeMemory();
        if (!success) {
          HEAP32[DYNAMICTOP_PTR >> 2] = ret;
          return 0
        }
      }
      return ret
    }
    function alignMemory(size, factor) {
      if (!factor) factor = STACK_ALIGN;
      var ret = (size = Math.ceil(size / factor) * factor);
      return ret
    }
    function getNativeTypeSize(type) {
      switch (type) {
        case 'i1':
        case 'i8':
          return 1
        case 'i16':
          return 2
        case 'i32':
          return 4
        case 'i64':
          return 8
        case 'float':
          return 4
        case 'double':
          return 8
        default: {
          if (type[type.length - 1] === '*') {
            return 4
          } else if (type[0] === 'i') {
            var bits = parseInt(type.substr(1));
            assert(bits % 8 === 0);
            return bits / 8
          } else {
            return 0
          }
        }
      }
    }
    new Array(0);
    var GLOBAL_BASE = 1024;
    var ABORT = 0;
    function assert(condition, text) {
      if (!condition) {
        abort('Assertion failed: ' + text);
      }
    }
    function setValue(ptr, value, type, noSafe) {
      type = type || 'i8';
      if (type.charAt(type.length - 1) === '*') type = 'i32';
      switch (type) {
        case 'i1':
          HEAP8[ptr >> 0] = value;
          break
        case 'i8':
          HEAP8[ptr >> 0] = value;
          break
        case 'i16':
          HEAP16[ptr >> 1] = value;
          break
        case 'i32':
          HEAP32[ptr >> 2] = value;
          break
        case 'i64':
  (tempI64 = [
            value >>> 0,
            ((tempDouble = value),
            +Math_abs(tempDouble) >= 1
              ? tempDouble > 0
                ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0
                : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0
              : 0),
          ]),
            (HEAP32[ptr >> 2] = tempI64[0]),
            (HEAP32[(ptr + 4) >> 2] = tempI64[1]);
          break
        case 'float':
          HEAPF32[ptr >> 2] = value;
          break
        case 'double':
          HEAPF64[ptr >> 3] = value;
          break
        default:
          abort('invalid type for setValue: ' + type);
      }
    }
    var ALLOC_NORMAL = 0;
    var ALLOC_STATIC = 2;
    var ALLOC_NONE = 4;
    function allocate(slab, types, allocator, ptr) {
      var zeroinit, size;
      if (typeof slab === 'number') {
        zeroinit = true;
        size = slab;
      } else {
        zeroinit = false;
        size = slab.length;
      }
      var singleType = typeof types === 'string' ? types : null;
      var ret;
      if (allocator == ALLOC_NONE) {
        ret = ptr;
      } else {
        ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][
          allocator === undefined ? ALLOC_STATIC : allocator
        ](Math.max(size, singleType ? 1 : types.length));
      }
      if (zeroinit) {
        var stop;
        ptr = ret;
        assert((ret & 3) == 0);
        stop = ret + (size & ~3);
        for (; ptr < stop; ptr += 4) {
          HEAP32[ptr >> 2] = 0;
        }
        stop = ret + size;
        while (ptr < stop) {
          HEAP8[ptr++ >> 0] = 0;
        }
        return ret
      }
      if (singleType === 'i8') {
        if (slab.subarray || slab.slice) {
          HEAPU8.set(slab, ret);
        } else {
          HEAPU8.set(new Uint8Array(slab), ret);
        }
        return ret
      }
      var i = 0,
        type,
        typeSize,
        previousType;
      while (i < size) {
        var curr = slab[i];
        type = singleType || types[i];
        if (type === 0) {
          i++;
          continue
        }
        if (type == 'i64') type = 'i32';
        setValue(ret + i, curr, type);
        if (previousType !== type) {
          typeSize = getNativeTypeSize(type);
          previousType = type;
        }
        i += typeSize;
      }
      return ret
    }
    function Pointer_stringify(ptr, length) {
      if (length === 0 || !ptr) return ''
      var hasUtf = 0;
      var t;
      var i = 0;
      while (1) {
        t = HEAPU8[(ptr + i) >> 0];
        hasUtf |= t;
        if (t == 0 && !length) break
        i++;
        if (length && i == length) break
      }
      if (!length) length = i;
      var ret = '';
      if (hasUtf < 128) {
        var MAX_CHUNK = 1024;
        var curr;
        while (length > 0) {
          curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
          ret = ret ? ret + curr : curr;
          ptr += MAX_CHUNK;
          length -= MAX_CHUNK;
        }
        return ret
      }
      return UTF8ToString(ptr)
    }
    var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
    function UTF8ArrayToString(u8Array, idx) {
      var endPtr = idx;
      while (u8Array[endPtr]) ++endPtr;
      if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
        return UTF8Decoder.decode(u8Array.subarray(idx, endPtr))
      } else {
        var u0, u1, u2, u3, u4, u5;
        var str = '';
        while (1) {
          u0 = u8Array[idx++];
          if (!u0) return str
          if (!(u0 & 128)) {
            str += String.fromCharCode(u0);
            continue
          }
          u1 = u8Array[idx++] & 63;
          if ((u0 & 224) == 192) {
            str += String.fromCharCode(((u0 & 31) << 6) | u1);
            continue
          }
          u2 = u8Array[idx++] & 63;
          if ((u0 & 240) == 224) {
            u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
          } else {
            u3 = u8Array[idx++] & 63;
            if ((u0 & 248) == 240) {
              u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
            } else {
              u4 = u8Array[idx++] & 63;
              if ((u0 & 252) == 248) {
                u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
              } else {
                u5 = u8Array[idx++] & 63;
                u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
              }
            }
          }
          if (u0 < 65536) {
            str += String.fromCharCode(u0);
          } else {
            var ch = u0 - 65536;
            str += String.fromCharCode(55296 | (ch >> 10), 56320 | (ch & 1023));
          }
        }
      }
    }
    function UTF8ToString(ptr) {
      return UTF8ArrayToString(HEAPU8, ptr)
    }
    function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
      if (!(maxBytesToWrite > 0)) return 0
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1;
      for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343) u = (65536 + ((u & 1023) << 10)) | (str.charCodeAt(++i) & 1023);
        if (u <= 127) {
          if (outIdx >= endIdx) break
          outU8Array[outIdx++] = u;
        } else if (u <= 2047) {
          if (outIdx + 1 >= endIdx) break
          outU8Array[outIdx++] = 192 | (u >> 6);
          outU8Array[outIdx++] = 128 | (u & 63);
        } else if (u <= 65535) {
          if (outIdx + 2 >= endIdx) break
          outU8Array[outIdx++] = 224 | (u >> 12);
          outU8Array[outIdx++] = 128 | ((u >> 6) & 63);
          outU8Array[outIdx++] = 128 | (u & 63);
        } else if (u <= 2097151) {
          if (outIdx + 3 >= endIdx) break
          outU8Array[outIdx++] = 240 | (u >> 18);
          outU8Array[outIdx++] = 128 | ((u >> 12) & 63);
          outU8Array[outIdx++] = 128 | ((u >> 6) & 63);
          outU8Array[outIdx++] = 128 | (u & 63);
        } else if (u <= 67108863) {
          if (outIdx + 4 >= endIdx) break
          outU8Array[outIdx++] = 248 | (u >> 24);
          outU8Array[outIdx++] = 128 | ((u >> 18) & 63);
          outU8Array[outIdx++] = 128 | ((u >> 12) & 63);
          outU8Array[outIdx++] = 128 | ((u >> 6) & 63);
          outU8Array[outIdx++] = 128 | (u & 63);
        } else {
          if (outIdx + 5 >= endIdx) break
          outU8Array[outIdx++] = 252 | (u >> 30);
          outU8Array[outIdx++] = 128 | ((u >> 24) & 63);
          outU8Array[outIdx++] = 128 | ((u >> 18) & 63);
          outU8Array[outIdx++] = 128 | ((u >> 12) & 63);
          outU8Array[outIdx++] = 128 | ((u >> 6) & 63);
          outU8Array[outIdx++] = 128 | (u & 63);
        }
      }
      outU8Array[outIdx] = 0;
      return outIdx - startIdx
    }
    function stringToUTF8(str, outPtr, maxBytesToWrite) {
      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite)
    }
    function lengthBytesUTF8(str) {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343) u = (65536 + ((u & 1023) << 10)) | (str.charCodeAt(++i) & 1023);
        if (u <= 127) {
          ++len;
        } else if (u <= 2047) {
          len += 2;
        } else if (u <= 65535) {
          len += 3;
        } else if (u <= 2097151) {
          len += 4;
        } else if (u <= 67108863) {
          len += 5;
        } else {
          len += 6;
        }
      }
      return len
    }
    typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
    function UTF32ToString(ptr) {
      var i = 0;
      var str = '';
      while (1) {
        var utf32 = HEAP32[(ptr + i * 4) >> 2];
        if (utf32 == 0) return str
        ++i;
        if (utf32 >= 65536) {
          var ch = utf32 - 65536;
          str += String.fromCharCode(55296 | (ch >> 10), 56320 | (ch & 1023));
        } else {
          str += String.fromCharCode(utf32);
        }
      }
    }
    function allocateUTF8(str) {
      var size = lengthBytesUTF8(str) + 1;
      var ret = _malloc(size);
      if (ret) stringToUTF8Array(str, HEAP8, ret, size);
      return ret
    }
    function demangle(func) {
      return func
    }
    function demangleAll(text) {
      var regex = /__Z[\w\d_]+/g;
      return text.replace(regex, function (x) {
        var y = demangle(x);
        return x === y ? x : x + ' [' + y + ']'
      })
    }
    function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        try {
          throw new Error(0)
        } catch (e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)'
        }
      }
      return err.stack.toString()
    }
    function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js)
    }
    var WASM_PAGE_SIZE = 65536;
    var ASMJS_PAGE_SIZE = 16777216;
    var MIN_TOTAL_MEMORY = 16777216;
    function alignUp(x, multiple) {
      if (x % multiple > 0) {
        x += multiple - (x % multiple);
      }
      return x
    }
    var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
    function updateGlobalBuffer(buf) {
      Module['buffer'] = buffer = buf;
    }
    function updateGlobalBufferViews() {
      Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
      Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
      Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
      Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
      Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
      Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
      Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
      Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
    }
    var STATIC_BASE, STATICTOP, staticSealed;
    var STACK_BASE, STACKTOP, STACK_MAX;
    var DYNAMIC_BASE, DYNAMICTOP_PTR;
    STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
    staticSealed = false;
    function abortOnCannotGrowMemory() {
      abort(
        'Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' +
          TOTAL_MEMORY +
          ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 '
      );
    }
    if (!Module['reallocBuffer'])
      Module['reallocBuffer'] = function (size) {
        var ret;
        try {
          if (ArrayBuffer.transfer) {
            ret = ArrayBuffer.transfer(buffer, size);
          } else {
            var oldHEAP8 = HEAP8;
            ret = new ArrayBuffer(size);
            var temp = new Int8Array(ret);
            temp.set(oldHEAP8);
          }
        } catch (e) {
          return false
        }
        var success = _emscripten_replace_memory(ret);
        if (!success) return false
        return ret
      };
    function enlargeMemory() {
      var PAGE_MULTIPLE = Module['usingWasm'] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE;
      var LIMIT = 2147483648 - PAGE_MULTIPLE;
      if (HEAP32[DYNAMICTOP_PTR >> 2] > LIMIT) {
        return false
      }
      var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
      TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY);
      while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR >> 2]) {
        if (TOTAL_MEMORY <= 536870912) {
          TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE);
        } else {
          TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
        }
      }
      var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
      if (!replacement || replacement.byteLength != TOTAL_MEMORY) {
        TOTAL_MEMORY = OLD_TOTAL_MEMORY;
        return false
      }
      updateGlobalBuffer(replacement);
      updateGlobalBufferViews();
      return true
    }
    var byteLength;
    try {
      byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
      byteLength(new ArrayBuffer(4));
    } catch (e) {
      byteLength = function (buffer) {
        return buffer.byteLength
      };
    }
    var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
    var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
    if (TOTAL_MEMORY < TOTAL_STACK)
      Module.printErr(
        'TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')'
      );
    if (Module['buffer']) {
      buffer = Module['buffer'];
    } else {
      if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {
        Module['wasmMemory'] = new WebAssembly.Memory({ initial: TOTAL_MEMORY / WASM_PAGE_SIZE });
        buffer = Module['wasmMemory'].buffer;
      } else {
        buffer = new ArrayBuffer(TOTAL_MEMORY);
      }
      Module['buffer'] = buffer;
    }
    updateGlobalBufferViews();
    function getTotalMemory() {
      return TOTAL_MEMORY
    }
    HEAP32[0] = 1668509029;
    HEAP16[1] = 25459;
    if (HEAPU8[2] !== 115 || HEAPU8[3] !== 99) throw 'Runtime error: expected the system to be little-endian!'
    function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback();
          continue
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            Module['dynCall_v'](func);
          } else {
            Module['dynCall_vi'](func, callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }
    var __ATPRERUN__ = [];
    var __ATINIT__ = [];
    var __ATMAIN__ = [];
    var __ATEXIT__ = [];
    var __ATPOSTRUN__ = [];
    var runtimeInitialized = false;
    function preRun() {
      if (Module['preRun']) {
        if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
        while (Module['preRun'].length) {
          addOnPreRun(Module['preRun'].shift());
        }
      }
      callRuntimeCallbacks(__ATPRERUN__);
    }
    function ensureInitRuntime() {
      if (runtimeInitialized) return
      runtimeInitialized = true;
      callRuntimeCallbacks(__ATINIT__);
    }
    function preMain() {
      callRuntimeCallbacks(__ATMAIN__);
    }
    function exitRuntime() {
      callRuntimeCallbacks(__ATEXIT__);
    }
    function postRun() {
      if (Module['postRun']) {
        if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
        while (Module['postRun'].length) {
          addOnPostRun(Module['postRun'].shift());
        }
      }
      callRuntimeCallbacks(__ATPOSTRUN__);
    }
    function addOnPreRun(cb) {
      __ATPRERUN__.unshift(cb);
    }
    function addOnPostRun(cb) {
      __ATPOSTRUN__.unshift(cb);
    }
    function writeAsciiToMemory(str, buffer, dontAddNull) {
      for (var i = 0; i < str.length; ++i) {
        HEAP8[buffer++ >> 0] = str.charCodeAt(i);
      }
      if (!dontAddNull) HEAP8[buffer >> 0] = 0;
    }
    var Math_abs = Math.abs;
    var Math_ceil = Math.ceil;
    var Math_floor = Math.floor;
    var Math_min = Math.min;
    var runDependencies = 0;
    var dependenciesFulfilled = null;
    function addRunDependency(id) {
      runDependencies++;
      if (Module['monitorRunDependencies']) {
        Module['monitorRunDependencies'](runDependencies);
      }
    }
    function removeRunDependency(id) {
      runDependencies--;
      if (Module['monitorRunDependencies']) {
        Module['monitorRunDependencies'](runDependencies);
      }
      if (runDependencies == 0) {
        if (dependenciesFulfilled) {
          var callback = dependenciesFulfilled;
          dependenciesFulfilled = null;
          callback();
        }
      }
    }
    Module['preloadedImages'] = {};
    Module['preloadedAudios'] = {};
    var dataURIPrefix = 'data:application/octet-stream;base64,';
    function isDataURI(filename) {
      return String.prototype.startsWith ? filename.startsWith(dataURIPrefix) : filename.indexOf(dataURIPrefix) === 0
    }
    function integrateWasmJS() {
      var wasmTextFile = 'unpack.wast';
      var asmjsCodeFile = 'unpack.temp.asm.js';
      if (typeof Module['locateFile'] === 'function') {
        if (!isDataURI(wasmTextFile)) {
          wasmTextFile = Module['locateFile'](wasmTextFile);
        }
        if (!isDataURI(wasmBinaryFile)) {
          wasmBinaryFile = Module['locateFile'](wasmBinaryFile);
        }
        if (!isDataURI(asmjsCodeFile)) {
          asmjsCodeFile = Module['locateFile'](asmjsCodeFile);
        }
      }
      const wasmPageSize = 64 * 1024;
      const info = {
        asm2wasm: {
          'f64-rem': function (x, y) {
            return x % y
          },
          debugger: function () {
            debugger
          },
        },
        parent: Module,
      };
      var exports = null;
      function mergeMemory(newBuffer) {
        var oldBuffer = Module['buffer'];
        if (newBuffer.byteLength < oldBuffer.byteLength) {
          Module['printErr'](
            'the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here'
          );
        }
        var oldView = new Int8Array(oldBuffer);
        var newView = new Int8Array(newBuffer);
        newView.set(oldView);
        updateGlobalBuffer(newBuffer);
        updateGlobalBufferViews();
      }
      function fixImports(imports) {
        return imports
      }
      function getBinary() {
        try {
          if (Module['wasmBinary']) {
            return new Uint8Array(Module['wasmBinary'])
          }
          if (Module['readBinary']) {
            return Module['readBinary'](wasmBinaryFile)
          } else {
            throw "on the web, we need the wasm binary to be preloaded and set on Module['wasmBinary']. emcc.py will do that for you when generating HTML (but not JS)"
          }
        } catch (err) {
          abort(err);
        }
      }
      function getBinaryPromise() {
        if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
          return fetch(wasmBinaryFile, { credentials })
            .then(function (response) {
              if (!response['ok']) {
                throw "failed to load wasm binary file at '" + wasmBinaryFile + "'"
              }
              return response['arrayBuffer']()
            })
            .catch(function () {
              return getBinary()
            })
        }
        return new Promise(function (resolve, reject) {
          resolve(getBinary());
        })
      }
      function doNativeWasm(global, env, providedBuffer) {
        if (typeof WebAssembly !== 'object') {
          Module['printErr']('no native wasm support detected');
          return false
        }
        if (!(Module['wasmMemory'] instanceof WebAssembly.Memory)) {
          Module['printErr']('no native wasm Memory in use');
          return false
        }
        env['memory'] = Module['wasmMemory'];
        info['global'] = { NaN: NaN, Infinity: Infinity };
        info['global.Math'] = Math;
        info['env'] = env;
        function receiveInstance(instance, module) {
          exports = instance.exports;
          if (exports.memory) mergeMemory(exports.memory);
          Module['asm'] = exports;
          Module['usingWasm'] = true;
          removeRunDependency();
        }
        addRunDependency();
        if (Module['instantiateWasm']) {
          try {
            return Module['instantiateWasm'](info, receiveInstance)
          } catch (e) {
            Module['printErr']('Module.instantiateWasm callback failed with error: ' + e);
            return false
          }
        }
        function receiveInstantiatedSource(output) {
          receiveInstance(output['instance'], output['module']);
        }
        function instantiateArrayBuffer(receiver) {
          getBinaryPromise()
            .then(function (binary) {
              return WebAssembly.instantiate(binary, info)
            })
            .then(receiver)
            .catch(function (reason) {
              Module['printErr']('failed to asynchronously prepare wasm: ' + reason);
              abort(reason);
            });
        }
        if (
          !Module['wasmBinary'] &&
          typeof WebAssembly.instantiateStreaming === 'function' &&
          !isDataURI(wasmBinaryFile) &&
          typeof fetch === 'function'
        ) {
          WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, { credentials }), info)
            .then(receiveInstantiatedSource)
            .catch(function (reason) {
              Module['printErr']('wasm streaming compile failed: ' + reason);
              Module['printErr']('falling back to ArrayBuffer instantiation');
              instantiateArrayBuffer(receiveInstantiatedSource);
            });
        } else {
          instantiateArrayBuffer(receiveInstantiatedSource);
        }
        return {}
      }
      Module['asmPreload'] = Module['asm'];
      var asmjsReallocBuffer = Module['reallocBuffer'];
      var wasmReallocBuffer = function (size) {
        var PAGE_MULTIPLE = Module['usingWasm'] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE;
        size = alignUp(size, PAGE_MULTIPLE);
        var old = Module['buffer'];
        var oldSize = old.byteLength;
        if (Module['usingWasm']) {
          try {
            var result = Module['wasmMemory'].grow((size - oldSize) / wasmPageSize);
            if (result !== (-1 | 0)) {
              return (Module['buffer'] = Module['wasmMemory'].buffer)
            } else {
              return null
            }
          } catch (e) {
            return null
          }
        }
      };
      Module['reallocBuffer'] = function (size) {
        if (finalMethod === 'asmjs') {
          return asmjsReallocBuffer(size)
        } else {
          return wasmReallocBuffer(size)
        }
      };
      var finalMethod = '';
      Module['asm'] = function (global, env, providedBuffer) {
        env = fixImports(env);
        if (!env['table']) {
          var TABLE_SIZE = Module['wasmTableSize'];
          if (TABLE_SIZE === undefined) TABLE_SIZE = 1024;
          var MAX_TABLE_SIZE = Module['wasmMaxTableSize'];
          if (typeof WebAssembly === 'object' && typeof WebAssembly.Table === 'function') {
            if (MAX_TABLE_SIZE !== undefined) {
              env['table'] = new WebAssembly.Table({ initial: TABLE_SIZE, maximum: MAX_TABLE_SIZE, element: 'anyfunc' });
            } else {
              env['table'] = new WebAssembly.Table({ initial: TABLE_SIZE, element: 'anyfunc' });
            }
          } else {
            env['table'] = new Array(TABLE_SIZE);
          }
          Module['wasmTable'] = env['table'];
        }
        if (!env['memoryBase']) {
          env['memoryBase'] = Module['STATIC_BASE'];
        }
        if (!env['tableBase']) {
          env['tableBase'] = 0;
        }
        var exports;
        exports = doNativeWasm(global, env);
        if (!exports)
          abort(
            'no binaryen method succeeded. consider enabling more options, like interpreting, if you want that: https://github.com/kripken/emscripten/wiki/WebAssembly#binaryen-methods'
          );
        return exports
      };
    }
    integrateWasmJS();
    STATIC_BASE = GLOBAL_BASE;
    STATICTOP = STATIC_BASE + 66960;
    __ATINIT__.push(
      {
        func: function () {
          __GLOBAL__sub_I_global_cpp();
        },
      },
      {
        func: function () {
          __GLOBAL__sub_I_crc_cpp();
        },
      },
      {
        func: function () {
          __GLOBAL__sub_I_bridge_cpp();
        },
      },
      {
        func: function () {
          __GLOBAL__sub_I_bind_cpp();
        },
      }
    );
    var STATIC_BUMP = 66960;
    Module['STATIC_BASE'] = STATIC_BASE;
    Module['STATIC_BUMP'] = STATIC_BUMP;
    STATICTOP += 16;
    function ___cxa_allocate_exception(size) {
      return _malloc(size)
    }
    function __ZSt18uncaught_exceptionv() {
      return !!__ZSt18uncaught_exceptionv.uncaught_exception
    }
    var EXCEPTIONS = {
      last: 0,
      caught: [],
      infos: {},
      deAdjust: function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key;
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr
          }
        }
        return adjusted
      },
      addRef: function (ptr) {
        if (!ptr) return
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },
      decRef: function (ptr) {
        if (!ptr) return
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },
      clearRef: function (ptr) {
        if (!ptr) return
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      },
    };
    function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr
    }
    function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr)
      } catch (e) {}
    }
    function ___cxa_end_catch() {
      Module['setThrew'](0);
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0;
      }
    }
    function ___cxa_find_matching_catch_2() {
      return ___cxa_find_matching_catch.apply(null, arguments)
    }
    function ___cxa_find_matching_catch_3() {
      return ___cxa_find_matching_catch.apply(null, arguments)
    }
    function ___cxa_find_matching_catch_4() {
      return ___cxa_find_matching_catch.apply(null, arguments)
    }
    function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) {
        EXCEPTIONS.last = ptr;
      }
      throw ptr
    }
    function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        return (setTempRet0(0), 0) | 0
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        return (setTempRet0(0), thrown) | 0
      }
      var typeArray = Array.prototype.slice.call(arguments);
      Module['___cxa_is_pointer_type'](throwntype);
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[___cxa_find_matching_catch.buffer >> 2] = thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[thrown >> 2];
          info.adjusted = thrown;
          return (setTempRet0(typeArray[i]), thrown) | 0
        }
      }
      thrown = HEAP32[thrown >> 2];
      return (setTempRet0(throwntype), thrown) | 0
    }
    function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false,
      };
      EXCEPTIONS.last = ptr;
      if (!('uncaught_exception' in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr
    }
    function ___lock() {}
    var ERRNO_CODES = {
      EPERM: 1,
      ENOENT: 2,
      ESRCH: 3,
      EINTR: 4,
      EIO: 5,
      ENXIO: 6,
      E2BIG: 7,
      ENOEXEC: 8,
      EBADF: 9,
      ECHILD: 10,
      EAGAIN: 11,
      EWOULDBLOCK: 11,
      ENOMEM: 12,
      EACCES: 13,
      EFAULT: 14,
      ENOTBLK: 15,
      EBUSY: 16,
      EEXIST: 17,
      EXDEV: 18,
      ENODEV: 19,
      ENOTDIR: 20,
      EISDIR: 21,
      EINVAL: 22,
      ENFILE: 23,
      EMFILE: 24,
      ENOTTY: 25,
      ETXTBSY: 26,
      EFBIG: 27,
      ENOSPC: 28,
      ESPIPE: 29,
      EROFS: 30,
      EMLINK: 31,
      EPIPE: 32,
      EDOM: 33,
      ERANGE: 34,
      ENOMSG: 42,
      EIDRM: 43,
      ECHRNG: 44,
      EL2NSYNC: 45,
      EL3HLT: 46,
      EL3RST: 47,
      ELNRNG: 48,
      EUNATCH: 49,
      ENOCSI: 50,
      EL2HLT: 51,
      EDEADLK: 35,
      ENOLCK: 37,
      EBADE: 52,
      EBADR: 53,
      EXFULL: 54,
      ENOANO: 55,
      EBADRQC: 56,
      EBADSLT: 57,
      EDEADLOCK: 35,
      EBFONT: 59,
      ENOSTR: 60,
      ENODATA: 61,
      ETIME: 62,
      ENOSR: 63,
      ENONET: 64,
      ENOPKG: 65,
      EREMOTE: 66,
      ENOLINK: 67,
      EADV: 68,
      ESRMNT: 69,
      ECOMM: 70,
      EPROTO: 71,
      EMULTIHOP: 72,
      EDOTDOT: 73,
      EBADMSG: 74,
      ENOTUNIQ: 76,
      EBADFD: 77,
      EREMCHG: 78,
      ELIBACC: 79,
      ELIBBAD: 80,
      ELIBSCN: 81,
      ELIBMAX: 82,
      ELIBEXEC: 83,
      ENOSYS: 38,
      ENOTEMPTY: 39,
      ENAMETOOLONG: 36,
      ELOOP: 40,
      EOPNOTSUPP: 95,
      EPFNOSUPPORT: 96,
      ECONNRESET: 104,
      ENOBUFS: 105,
      EAFNOSUPPORT: 97,
      EPROTOTYPE: 91,
      ENOTSOCK: 88,
      ENOPROTOOPT: 92,
      ESHUTDOWN: 108,
      ECONNREFUSED: 111,
      EADDRINUSE: 98,
      ECONNABORTED: 103,
      ENETUNREACH: 101,
      ENETDOWN: 100,
      ETIMEDOUT: 110,
      EHOSTDOWN: 112,
      EHOSTUNREACH: 113,
      EINPROGRESS: 115,
      EALREADY: 114,
      EDESTADDRREQ: 89,
      EMSGSIZE: 90,
      EPROTONOSUPPORT: 93,
      ESOCKTNOSUPPORT: 94,
      EADDRNOTAVAIL: 99,
      ENETRESET: 102,
      EISCONN: 106,
      ENOTCONN: 107,
      ETOOMANYREFS: 109,
      EUSERS: 87,
      EDQUOT: 122,
      ESTALE: 116,
      ENOTSUP: 95,
      ENOMEDIUM: 123,
      EILSEQ: 84,
      EOVERFLOW: 75,
      ECANCELED: 125,
      ENOTRECOVERABLE: 131,
      EOWNERDEAD: 130,
      ESTRPIPE: 86,
    };
    function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[Module['___errno_location']() >> 2] = value;
      return value
    }
    function ___map_file(pathname, size) {
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1
    }
    var ERRNO_MESSAGES = {
      0: 'Success',
      1: 'Not super-user',
      2: 'No such file or directory',
      3: 'No such process',
      4: 'Interrupted system call',
      5: 'I/O error',
      6: 'No such device or address',
      7: 'Arg list too long',
      8: 'Exec format error',
      9: 'Bad file number',
      10: 'No children',
      11: 'No more processes',
      12: 'Not enough core',
      13: 'Permission denied',
      14: 'Bad address',
      15: 'Block device required',
      16: 'Mount device busy',
      17: 'File exists',
      18: 'Cross-device link',
      19: 'No such device',
      20: 'Not a directory',
      21: 'Is a directory',
      22: 'Invalid argument',
      23: 'Too many open files in system',
      24: 'Too many open files',
      25: 'Not a typewriter',
      26: 'Text file busy',
      27: 'File too large',
      28: 'No space left on device',
      29: 'Illegal seek',
      30: 'Read only file system',
      31: 'Too many links',
      32: 'Broken pipe',
      33: 'Math arg out of domain of func',
      34: 'Math result not representable',
      35: 'File locking deadlock error',
      36: 'File or path name too long',
      37: 'No record locks available',
      38: 'Function not implemented',
      39: 'Directory not empty',
      40: 'Too many symbolic links',
      42: 'No message of desired type',
      43: 'Identifier removed',
      44: 'Channel number out of range',
      45: 'Level 2 not synchronized',
      46: 'Level 3 halted',
      47: 'Level 3 reset',
      48: 'Link number out of range',
      49: 'Protocol driver not attached',
      50: 'No CSI structure available',
      51: 'Level 2 halted',
      52: 'Invalid exchange',
      53: 'Invalid request descriptor',
      54: 'Exchange full',
      55: 'No anode',
      56: 'Invalid request code',
      57: 'Invalid slot',
      59: 'Bad font file fmt',
      60: 'Device not a stream',
      61: 'No data (for no delay io)',
      62: 'Timer expired',
      63: 'Out of streams resources',
      64: 'Machine is not on the network',
      65: 'Package not installed',
      66: 'The object is remote',
      67: 'The link has been severed',
      68: 'Advertise error',
      69: 'Srmount error',
      70: 'Communication error on send',
      71: 'Protocol error',
      72: 'Multihop attempted',
      73: 'Cross mount point (not really error)',
      74: 'Trying to read unreadable message',
      75: 'Value too large for defined data type',
      76: 'Given log. name not unique',
      77: 'f.d. invalid for this operation',
      78: 'Remote address changed',
      79: 'Can   access a needed shared lib',
      80: 'Accessing a corrupted shared lib',
      81: '.lib section in a.out corrupted',
      82: 'Attempting to link in too many libs',
      83: 'Attempting to exec a shared library',
      84: 'Illegal byte sequence',
      86: 'Streams pipe error',
      87: 'Too many users',
      88: 'Socket operation on non-socket',
      89: 'Destination address required',
      90: 'Message too long',
      91: 'Protocol wrong type for socket',
      92: 'Protocol not available',
      93: 'Unknown protocol',
      94: 'Socket type not supported',
      95: 'Not supported',
      96: 'Protocol family not supported',
      97: 'Address family not supported by protocol family',
      98: 'Address already in use',
      99: 'Address not available',
      100: 'Network interface is not configured',
      101: 'Network is unreachable',
      102: 'Connection reset by network',
      103: 'Connection aborted',
      104: 'Connection reset by peer',
      105: 'No buffer space available',
      106: 'Socket is already connected',
      107: 'Socket is not connected',
      108: "Can't send after socket shutdown",
      109: 'Too many references',
      110: 'Connection timed out',
      111: 'Connection refused',
      112: 'Host is down',
      113: 'Host is unreachable',
      114: 'Socket already connected',
      115: 'Connection already in progress',
      116: 'Stale file handle',
      122: 'Quota exceeded',
      123: 'No medium (in tape drive)',
      125: 'Operation canceled',
      130: 'Previous owner died',
      131: 'State not recoverable',
    };
    var PATH = {
      splitPath: function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1)
      },
      normalizeArray: function (parts, allowAboveRoot) {
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts
      },
      normalize: function (path) {
        var isAbsolute = path.charAt(0) === '/',
          trailingSlash = path.substr(-1) === '/';
        path = PATH.normalizeArray(
          path.split('/').filter(function (p) {
            return !!p
          }),
          !isAbsolute
        ).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path
      },
      dirname: function (path) {
        var result = PATH.splitPath(path),
          root = result[0],
          dir = result[1];
        if (!root && !dir) {
          return '.'
        }
        if (dir) {
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir
      },
      basename: function (path) {
        if (path === '/') return '/'
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path
        return path.substr(lastSlash + 1)
      },
      extname: function (path) {
        return PATH.splitPath(path)[3]
      },
      join: function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'))
      },
      join2: function (l, r) {
        return PATH.normalize(l + '/' + r)
      },
      resolve: function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = i >= 0 ? arguments[i] : FS.cwd();
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings')
          } else if (!path) {
            return ''
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        resolvedPath = PATH.normalizeArray(
          resolvedPath.split('/').filter(function (p) {
            return !!p
          }),
          !resolvedAbsolute
        ).join('/');
        return (resolvedAbsolute ? '/' : '') + resolvedPath || '.'
      },
      relative: function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break
          }
          if (start > end) return []
          return arr.slice(start, end - start + 1)
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/')
      },
    };
    var TTY = {
      ttys: [],
      init: function () {},
      shutdown: function () {},
      register: function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },
      stream_ops: {
        open: function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
          }
          stream.tty = tty;
          stream.seekable = false;
        },
        close: function (stream) {
          stream.tty.ops.flush(stream.tty);
        },
        flush: function (stream) {
          stream.tty.ops.flush(stream.tty);
        },
        read: function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO)
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO)
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)
            }
            if (result === null || result === undefined) break
            bytesRead++;
            buffer[offset + i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead
        },
        write: function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO)
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO)
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i
        },
      },
      default_tty_ops: {
        get_char: function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
              var isPosixPlatform = process.platform != 'win32';
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch (e) {
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e
              }
              if (usingDevice) {
                fs.closeSync(fd);
              }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else if (typeof window != 'undefined' && typeof window.prompt == 'function') {
              result = window.prompt('Input: ');
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift()
        },
        put_char: function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },
        flush: function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        },
      },
      default_tty1_ops: {
        put_char: function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },
        flush: function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        },
      },
    };
    var MEMFS = {
      ops_table: null,
      mount: function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511, 0)
      },
      createNode: function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink,
              },
              stream: { llseek: MEMFS.stream_ops.llseek },
            },
            file: {
              node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync,
              },
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink,
              },
              stream: {},
            },
            chrdev: {
              node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr },
              stream: FS.chrdev_stream_ops,
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0;
          node.contents = null;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        if (parent) {
          parent.contents[name] = node;
        }
        return node
      },
      getFileDataAsRegularArray: function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr
        }
        return node.contents
      },
      getFileDataAsTypedArray: function (node) {
        if (!node.contents) return new Uint8Array()
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes)
        return new Uint8Array(node.contents)
      },
      expandFileStorage: function (node, newCapacity) {
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length;
        }
        if (!node.contents || node.contents.subarray) {
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity);
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
          return
        }
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },
      resizeFileStorage: function (node, newSize) {
        if (node.usedBytes == newSize) return
        if (newSize == 0) {
          node.contents = null;
          node.usedBytes = 0;
          return
        }
        if (!node.contents || node.contents.subarray) {
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize));
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
          }
          node.usedBytes = newSize;
          return
        }
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },
      node_ops: {
        getattr: function (node) {
          var attr = {};
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr
        },
        setattr: function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },
        lookup: function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT]
        },
        mknod: function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev)
        },
        rename: function (old_node, new_dir, new_name) {
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {}
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)
              }
            }
          }
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },
        unlink: function (parent, name) {
          delete parent.contents[name];
        },
        rmdir: function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)
          }
          delete parent.contents[name];
        },
        readdir: function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue
            }
            entries.push(key);
          }
          return entries
        },
        symlink: function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
          node.link = oldpath;
          return node
        },
        readlink: function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
          }
          return node.link
        },
      },
      stream_ops: {
        read: function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) {
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size
        },
        write: function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0
          var node = stream.node;
          node.timestamp = Date.now();
          if (buffer.subarray && (!node.contents || node.contents.subarray)) {
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length
            } else if (node.usedBytes === 0 && position === 0) {
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length
            } else if (position + length <= node.usedBytes) {
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length
            }
          }
          MEMFS.expandFileStorage(node, position + length);
          if (node.contents.subarray && buffer.subarray)
            node.contents.set(buffer.subarray(offset, offset + length), position);
          else {
            for (var i = 0; i < length; i++) {
              node.contents[position + i] = buffer[offset + i];
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length
        },
        llseek: function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
          }
          return position
        },
        allocate: function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },
        mmap: function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          if (!(flags & 2) && (contents.buffer === buffer || contents.buffer === buffer.buffer)) {
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM)
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated }
        },
        msync: function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
          }
          if (mmapFlags & 2) {
            return 0
          }
          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          return 0
        },
      },
    };
    var IDBFS = {
      dbs: {},
      indexedDB: function () {
        if (typeof indexedDB !== 'undefined') return indexedDB
        var ret = null;
        if (typeof window === 'object')
          ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret
      },
      DB_VERSION: 21,
      DB_STORE_NAME: 'FILE_DATA',
      mount: function (mount) {
        return MEMFS.mount.apply(null, arguments)
      },
      syncfs: function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function (err, local) {
          if (err) return callback(err)
          IDBFS.getRemoteSet(mount, function (err, remote) {
            if (err) return callback(err)
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },
      getDB: function (name, callback) {
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db)
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e)
        }
        if (!req) {
          return callback('Unable to connect to IndexedDB')
        }
        req.onupgradeneeded = function (e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
          var fileStore;
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function () {
          db = req.result;
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function (e) {
          callback(this.error);
          e.preventDefault();
        };
      },
      getLocalSet: function (mount, callback) {
        var entries = {};
        function isRealDir(p) {
          return p !== '.' && p !== '..'
        }
        function toAbsolute(root) {
          return function (p) {
            return PATH.join2(root, p)
          }
        }
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
        while (check.length) {
          var path = check.pop();
          var stat;
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e)
          }
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
          entries[path] = { timestamp: stat.mtime };
        }
        return callback(null, { type: 'local', entries: entries })
      },
      getRemoteSet: function (mount, callback) {
        var entries = {};
        IDBFS.getDB(mount.mountpoint, function (err, db) {
          if (err) return callback(err)
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function (e) {
              callback(this.error);
              e.preventDefault();
            };
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
            index.openKeyCursor().onsuccess = function (event) {
              var cursor = event.target.result;
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries })
              }
              entries[cursor.primaryKey] = { timestamp: cursor.key };
              cursor.continue();
            };
          } catch (e) {
            return callback(e)
          }
        });
      },
      loadLocalEntry: function (path, callback) {
        var stat, node;
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e)
        }
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode })
        } else if (FS.isFile(stat.mode)) {
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents })
        } else {
          return callback(new Error('node type not supported'))
        }
      },
      storeLocalEntry: function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'))
          }
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e)
        }
        callback(null);
      },
      removeLocalEntry: function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e)
        }
        callback(null);
      },
      loadRemoteEntry: function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function (event) {
          callback(null, event.target.result);
        };
        req.onerror = function (e) {
          callback(this.error);
          e.preventDefault();
        };
      },
      storeRemoteEntry: function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function () {
          callback(null);
        };
        req.onerror = function (e) {
          callback(this.error);
          e.preventDefault();
        };
      },
      removeRemoteEntry: function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function () {
          callback(null);
        };
        req.onerror = function (e) {
          callback(this.error);
          e.preventDefault();
        };
      },
      reconcile: function (src, dst, callback) {
        var total = 0;
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
        if (!total) {
          return callback(null)
        }
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err)
            }
            return
          }
          if (++completed >= total) {
            return callback(null)
          }
        }
        transaction.onerror = function (e) {
          done(this.error);
          e.preventDefault();
        };
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err)
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err)
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
        remove
          .sort()
          .reverse()
          .forEach(function (path) {
            if (dst.type === 'local') {
              IDBFS.removeLocalEntry(path, done);
            } else {
              IDBFS.removeRemoteEntry(store, path, done);
            }
          });
      },
    };
    var NODEFS = {
      isWindows: false,
      staticInit: function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process['binding']('constants');
        if (flags['fs']) {
          flags = flags['fs'];
        }
        NODEFS.flagsForNodeMap = {
          1024: flags['O_APPEND'],
          64: flags['O_CREAT'],
          128: flags['O_EXCL'],
          0: flags['O_RDONLY'],
          2: flags['O_RDWR'],
          4096: flags['O_SYNC'],
          512: flags['O_TRUNC'],
          1: flags['O_WRONLY'],
        };
      },
      bufferFrom: function (arrayBuffer) {
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer)
      },
      mount: function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0)
      },
      createNode: function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node
      },
      getMode: function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e
          throw new FS.ErrnoError(ERRNO_CODES[e.code])
        }
        return stat.mode
      },
      realPath: function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts)
      },
      flagsForNode: function (flags) {
        flags &= ~2097152;
        flags &= ~2048;
        flags &= ~32768;
        flags &= ~524288;
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
        if (!flags) {
          return newFlags
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
      },
      node_ops: {
        getattr: function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e
            throw new FS.ErrnoError(ERRNO_CODES[e.code])
          }
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = ((stat.size + stat.blksize - 1) / stat.blksize) | 0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks,
          }
        },
        setattr: function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e
            throw new FS.ErrnoError(ERRNO_CODES[e.code])
          }
        },
        lookup: function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode)
        },
        mknod: function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e
            throw new FS.ErrnoError(ERRNO_CODES[e.code])
          }
          return node
        },
        rename: function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e
            throw new FS.ErrnoError(ERRNO_CODES[e.code])
          }
        },
        unlink: function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e
            throw new FS.ErrnoError(ERRNO_CODES[e.code])
          }
        },
        rmdir: function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e
            throw new FS.ErrnoError(ERRNO_CODES[e.code])
          }
        },
        readdir: function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path)
          } catch (e) {
            if (!e.code) throw e
            throw new FS.ErrnoError(ERRNO_CODES[e.code])
          }
        },
        symlink: function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e
            throw new FS.ErrnoError(ERRNO_CODES[e.code])
          }
        },
        readlink: function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path
          } catch (e) {
            if (!e.code) throw e
            throw new FS.ErrnoError(ERRNO_CODES[e.code])
          }
        },
      },
      stream_ops: {
        open: function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e
            throw new FS.ErrnoError(ERRNO_CODES[e.code])
          }
        },
        close: function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e
            throw new FS.ErrnoError(ERRNO_CODES[e.code])
          }
        },
        read: function (stream, buffer, offset, length, position) {
          if (length === 0) return 0
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position)
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code])
          }
        },
        write: function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position)
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code])
          }
        },
        llseek: function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code])
              }
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
          }
          return position
        },
      },
    };
    var WORKERFS = {
      DIR_MODE: 16895,
      FILE_MODE: 33279,
      reader: null,
      mount: function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length - 1; i++) {
            var curr = parts.slice(0, i + 1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length - 1]
        }
        Array.prototype.forEach.call(mount.opts['files'] || [], function (file) {
          WORKERFS.createNode(
            ensureParent(file.name),
            base(file.name),
            WORKERFS.FILE_MODE,
            0,
            file,
            file.lastModifiedDate
          );
        })
        ;(mount.opts['blobs'] || []).forEach(function (obj) {
          WORKERFS.createNode(ensureParent(obj['name']), base(obj['name']), WORKERFS.FILE_MODE, 0, obj['data']);
        })
        ;(mount.opts['packages'] || []).forEach(function (pack) {
          pack['metadata'].files.forEach(function (file) {
            var name = file.filename.substr(1);
            WORKERFS.createNode(
              ensureParent(name),
              base(name),
              WORKERFS.FILE_MODE,
              0,
              pack['blob'].slice(file.start, file.end)
            );
          });
        });
        return root
      },
      createNode: function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date()).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node
      },
      node_ops: {
        getattr: function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          }
        },
        setattr: function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },
        lookup: function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        },
        mknod: function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        },
        rename: function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        },
        unlink: function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        },
        rmdir: function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        },
        readdir: function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue
            }
            entries.push(key);
          }
          return entries
        },
        symlink: function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        },
        readlink: function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        },
      },
      stream_ops: {
        read: function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size
        },
        write: function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO)
        },
        llseek: function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
          }
          return position
        },
      },
    };
    STATICTOP += 16;
    STATICTOP += 16;
    STATICTOP += 16;
    var FS = {
      root: null,
      mounts: [],
      devices: {},
      streams: [],
      nextInode: 1,
      nameTable: null,
      currentPath: '/',
      initialized: false,
      ignorePermissions: true,
      trackingDelegate: {},
      tracking: { openFlags: { READ: 1, WRITE: 2 } },
      ErrnoError: null,
      genericErrors: {},
      filesystems: null,
      syncFSRequests: 0,
      handleFSError: function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace()
        return ___setErrNo(e.errno)
      },
      lookupPath: function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
        if (!path) return { path: '', node: null }
        var defaults = { follow_mount: true, recurse_count: 0 };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
        if (opts.recurse_count > 8) {
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP)
        }
        var parts = PATH.normalizeArray(
          path.split('/').filter(function (p) {
            return !!p
          }),
          false
        );
        var current = FS.root;
        var current_path = '/';
        for (var i = 0; i < parts.length; i++) {
          var islast = i === parts.length - 1;
          if (islast && opts.parent) {
            break
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
              if (count++ > 40) {
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP)
              }
            }
          }
        }
        return { path: current_path, node: current }
      },
      getPath: function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount
            return mount[mount.length - 1] !== '/' ? mount + '/' + path : mount + path
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },
      hashName: function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length
      },
      hashAddNode: function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },
      hashRemoveNode: function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break
            }
            current = current.name_next;
          }
        }
      },
      lookupNode: function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent)
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node
          }
        }
        return FS.lookup(parent, name)
      },
      createNode: function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function (parent, name, mode, rdev) {
            if (!parent) {
              parent = this;
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
          FS.FSNode.prototype = {};
          var readMode = 292 | 73;
          var writeMode = 146;
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function () {
                return (this.mode & readMode) === readMode
              },
              set: function (val) {
                val ? (this.mode |= readMode) : (this.mode &= ~readMode);
              },
            },
            write: {
              get: function () {
                return (this.mode & writeMode) === writeMode
              },
              set: function (val) {
                val ? (this.mode |= writeMode) : (this.mode &= ~writeMode);
              },
            },
            isFolder: {
              get: function () {
                return FS.isDir(this.mode)
              },
            },
            isDevice: {
              get: function () {
                return FS.isChrdev(this.mode)
              },
            },
          });
        }
        var node = new FS.FSNode(parent, name, mode, rdev);
        FS.hashAddNode(node);
        return node
      },
      destroyNode: function (node) {
        FS.hashRemoveNode(node);
      },
      isRoot: function (node) {
        return node === node.parent
      },
      isMountpoint: function (node) {
        return !!node.mounted
      },
      isFile: function (mode) {
        return (mode & 61440) === 32768
      },
      isDir: function (mode) {
        return (mode & 61440) === 16384
      },
      isLink: function (mode) {
        return (mode & 61440) === 40960
      },
      isChrdev: function (mode) {
        return (mode & 61440) === 8192
      },
      isBlkdev: function (mode) {
        return (mode & 61440) === 24576
      },
      isFIFO: function (mode) {
        return (mode & 61440) === 4096
      },
      isSocket: function (mode) {
        return (mode & 49152) === 49152
      },
      flagModes: {
        r: 0,
        rs: 1052672,
        'r+': 2,
        w: 577,
        wx: 705,
        xw: 705,
        'w+': 578,
        'wx+': 706,
        'xw+': 706,
        a: 1089,
        ax: 1217,
        xa: 1217,
        'a+': 1090,
        'ax+': 1218,
        'xa+': 1218,
      },
      modeStringToFlags: function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str)
        }
        return flags
      },
      flagsToPermissionString: function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if (flag & 512) {
          perms += 'w';
        }
        return perms
      },
      nodePermissions: function (node, perms) {
        if (FS.ignorePermissions) {
          return 0
        }
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES
        }
        return 0
      },
      mayLookup: function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES
        return 0
      },
      mayCreate: function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST
        } catch (e) {}
        return FS.nodePermissions(dir, 'wx')
      },
      mayDelete: function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR
          }
        }
        return 0
      },
      mayOpen: function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || flags & 512) {
            return ERRNO_CODES.EISDIR
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags))
      },
      MAX_OPEN_FDS: 4096,
      nextfd: function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE)
      },
      getStream: function (fd) {
        return FS.streams[fd]
      },
      createStream: function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function () {};
          FS.FSStream.prototype = {};
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function () {
                return this.node
              },
              set: function (val) {
                this.node = val;
              },
            },
            isRead: {
              get: function () {
                return (this.flags & 2097155) !== 1
              },
            },
            isWrite: {
              get: function () {
                return (this.flags & 2097155) !== 0
              },
            },
            isAppend: {
              get: function () {
                return this.flags & 1024
              },
            },
          });
        }
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream
      },
      closeStream: function (fd) {
        FS.streams[fd] = null;
      },
      chrdev_stream_ops: {
        open: function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          stream.stream_ops = device.stream_ops;
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },
        llseek: function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
        },
      },
      major: function (dev) {
        return dev >> 8
      },
      minor: function (dev) {
        return dev & 255
      },
      makedev: function (ma, mi) {
        return (ma << 8) | mi
      },
      registerDevice: function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },
      getDevice: function (dev) {
        return FS.devices[dev]
      },
      getMounts: function (mount) {
        var mounts = [];
        var check = [mount];
        while (check.length) {
          var m = check.pop();
          mounts.push(m);
          check.push.apply(check, m.mounts);
        }
        return mounts
      },
      syncfs: function (populate, callback) {
        if (typeof populate === 'function') {
          callback = populate;
          populate = false;
        }
        FS.syncFSRequests++;
        if (FS.syncFSRequests > 1) {
          console.log(
            'warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work'
          );
        }
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err)
        }
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err)
            }
            return
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        }
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null)
          }
          mount.type.syncfs(mount, populate, done);
        });
      },
      mount: function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
          mountpoint = lookup.path;
          node = lookup.node;
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
          }
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)
          }
        }
        var mount = { type: type, opts: opts, mountpoint: mountpoint, mounts: [] };
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          node.mounted = mount;
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
        return mountRoot
      },
      unmount: function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
          while (current) {
            var next = current.name_next;
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
            current = next;
          }
        });
        node.mounted = null;
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },
      lookup: function (parent, name) {
        return parent.node_ops.lookup(parent, name)
      },
      mknod: function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err)
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        return parent.node_ops.mknod(parent, name, mode, dev)
      },
      create: function (path, mode) {
        mode = mode !== undefined ? mode : 438;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0)
      },
      mkdir: function (path, mode) {
        mode = mode !== undefined ? mode : 511;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0)
      },
      mkdirTree: function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch (e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e
          }
        }
      },
      mkdev: function (path, mode, dev) {
        if (typeof dev === 'undefined') {
          dev = mode;
          mode = 438;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev)
      },
      symlink: function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err)
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        return parent.node_ops.symlink(parent, newname, oldpath)
      },
      rename: function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV)
        }
        var old_node = FS.lookupNode(old_dir, old_name);
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)
        }
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {}
        if (old_node === new_node) {
          return
        }
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err)
        }
        err = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err)
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
        }
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err)
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch (e) {
          console.log(
            "FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message
          );
        }
        FS.hashRemoveNode(old_node);
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e
        } finally {
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch (e) {
          console.log(
            "FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message
          );
        }
      },
      rmdir: function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err)
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch (e) {
          console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch (e) {
          console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
        }
      },
      readdir: function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)
        }
        return node.node_ops.readdir(node)
      },
      unlink: function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          throw new FS.ErrnoError(err)
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch (e) {
          console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch (e) {
          console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
        }
      },
      readlink: function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link))
      },
      stat: function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        return node.node_ops.getattr(node)
      },
      lstat: function (path) {
        return FS.stat(path, true)
      },
      chmod: function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        node.node_ops.setattr(node, { mode: (mode & 4095) | (node.mode & ~4095), timestamp: Date.now() });
      },
      lchmod: function (path, mode) {
        FS.chmod(path, mode, true);
      },
      fchmod: function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        FS.chmod(stream.node, mode);
      },
      chown: function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        node.node_ops.setattr(node, { timestamp: Date.now() });
      },
      lchown: function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },
      fchown: function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        FS.chown(stream.node, uid, gid);
      },
      truncate: function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR)
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err)
        }
        node.node_ops.setattr(node, { size: len, timestamp: Date.now() });
      },
      ftruncate: function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        FS.truncate(stream.node, len);
      },
      utime: function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, { timestamp: Math.max(atime, mtime) });
      },
      open: function (path, flags, mode, fd_start, fd_end) {
        if (path === '') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 : mode;
        if (flags & 64) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, { follow: !(flags & 131072) });
            node = lookup.node;
          } catch (e) {}
        }
        var created = false;
        if (flags & 64) {
          if (node) {
            if (flags & 128) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST)
            }
          } else {
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        if (flags & 65536 && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)
        }
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err)
          }
        }
        if (flags & 512) {
          FS.truncate(node, 0);
        }
        flags &= ~(128 | 512);
        var stream = FS.createStream(
          {
            node: node,
            path: FS.getPath(node),
            flags: flags,
            seekable: true,
            position: 0,
            stream_ops: node.stream_ops,
            ungotten: [],
            error: false,
          },
          fd_start,
          fd_end
        );
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch (e) {
          console.log("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
        }
        return stream
      },
      close: function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        if (stream.getdents) stream.getdents = null;
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },
      isClosed: function (stream) {
        return stream.fd === null
      },
      llseek: function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position
      },
      read: function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR)
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead
      },
      write: function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR)
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        if (stream.flags & 1024) {
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch (e) {
          console.log("FS.trackingDelegate['onWriteToFile']('" + path + "') threw an exception: " + e.message);
        }
        return bytesWritten
      },
      allocate: function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)
        }
        stream.stream_ops.allocate(stream, offset, length);
      },
      mmap: function (stream, buffer, offset, length, position, prot, flags) {
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES)
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags)
      },
      msync: function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags)
      },
      munmap: function (stream) {
        return 0
      },
      ioctl: function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY)
        }
        return stream.stream_ops.ioctl(stream, cmd, arg)
      },
      readFile: function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"')
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret
      },
      writeFile: function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type')
        }
        FS.close(stream);
      },
      cwd: function () {
        return FS.currentPath
      },
      chdir: function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err)
        }
        FS.currentPath = lookup.path;
      },
      createDefaultDirectories: function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },
      createDefaultDevices: function () {
        FS.mkdir('/dev');
        FS.registerDevice(FS.makedev(1, 3), {
          read: function () {
            return 0
          },
          write: function (stream, buffer, offset, length, pos) {
            return length
          },
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        var random_device;
        if (typeof crypto !== 'undefined') {
          var randomBuffer = new Uint8Array(1);
          random_device = function () {
            crypto.getRandomValues(randomBuffer);
            return randomBuffer[0]
          };
        } else if (ENVIRONMENT_IS_NODE) {
          random_device = function () {
            return require('crypto')['randomBytes'](1)[0]
          };
        } else {
          random_device = function () {
            return (Math.random() * 256) | 0
          };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },
      createSpecialDirectories: function () {
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount(
          {
            mount: function () {
              var node = FS.createNode('/proc/self', 'fd', 16384 | 511, 73);
              node.node_ops = {
                lookup: function (parent, name) {
                  var fd = +name;
                  var stream = FS.getStream(fd);
                  if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF)
                  var ret = {
                    parent: null,
                    mount: { mountpoint: 'fake' },
                    node_ops: {
                      readlink: function () {
                        return stream.path
                      },
                    },
                  };
                  ret.parent = ret;
                  return ret
                },
              };
              return node
            },
          },
          {},
          '/proc/self/fd'
        );
      },
      createStandardStreams: function () {
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },
      ensureErrnoError: function () {
        if (FS.ErrnoError) return
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function (errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) Object.defineProperty(this, 'stack', { value: new Error().stack, writable: true });
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError
        ;[ERRNO_CODES.ENOENT].forEach(function (code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },
      staticInit: function () {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.mount(MEMFS, {}, '/');
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
        FS.filesystems = { MEMFS: MEMFS, IDBFS: IDBFS, NODEFS: NODEFS, WORKERFS: WORKERFS };
      },
      init: function (input, output, error) {
        assert(
          !FS.init.initialized,
          'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)'
        );
        FS.init.initialized = true;
        FS.ensureErrnoError();
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
        FS.createStandardStreams();
      },
      quit: function () {
        FS.init.initialized = false;
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue
          }
          FS.close(stream);
        }
      },
      getMode: function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode
      },
      joinPath: function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path
      },
      absolutePath: function (relative, base) {
        return PATH.resolve(base, relative)
      },
      standardizePath: function (path) {
        return PATH.normalize(path)
      },
      findObject: function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object
        } else {
          ___setErrNo(ret.error);
          return null
        }
      },
      analyzePath: function (path, dontResolveLastLink) {
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {}
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null,
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        }
        return ret
      },
      createFolder: function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode)
      },
      createPath: function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {}
          parent = current;
        }
        return current
      },
      createFile: function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode)
      },
      createDataFile: function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node
      },
      createDevice: function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        FS.registerDevice(dev, {
          open: function (stream) {
            stream.seekable = false;
          },
          close: function (stream) {
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function (stream, buffer, offset, length, pos) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO)
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)
              }
              if (result === null || result === undefined) break
              bytesRead++;
              buffer[offset + i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead
          },
          write: function (stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset + i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO)
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i
          },
        });
        return FS.mkdev(path, mode, dev)
      },
      createLink: function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path)
      },
      forceLoadFile: function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error(
            'Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.'
          )
        } else if (Module['read']) {
          try {
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.')
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success
      },
      createLazyFile: function (parent, name, url, canRead, canWrite) {
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = [];
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length - 1 || idx < 0) {
            return undefined
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize) | 0;
          return this.getter(chunkNum)[chunkOffset]
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304))
            throw new Error("Couldn't load " + url + '. Status: ' + xhr.status)
          var datalength = Number(xhr.getResponseHeader('Content-length'));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader('Accept-Ranges')) && header === 'bytes';
          var usesGzip = (header = xhr.getResponseHeader('Content-Encoding')) && header === 'gzip';
          var chunkSize = 1024 * 1024;
          if (!hasByteServing) chunkSize = datalength;
          var doXHR = function (from, to) {
            if (from > to) throw new Error('invalid range (' + from + ', ' + to + ') or no bytes requested!')
            if (to > datalength - 1) throw new Error('only ' + datalength + ' bytes available! programmer error!')
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader('Range', 'bytes=' + from + '-' + to);
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
            xhr.send(null);
            if (!((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304))
              throw new Error("Couldn't load " + url + '. Status: ' + xhr.status)
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || [])
            } else {
              return intArrayFromString(xhr.responseText || '', true)
            }
          };
          var lazyArray = this;
          lazyArray.setDataGetter(function (chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum + 1) * chunkSize - 1;
            end = Math.min(end, datalength - 1);
            if (typeof lazyArray.chunks[chunkNum] === 'undefined') {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof lazyArray.chunks[chunkNum] === 'undefined') throw new Error('doXHR failed!')
            return lazyArray.chunks[chunkNum]
          });
          if (usesGzip || !datalength) {
            chunkSize = datalength = 1;
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log('LazyFiles on gzip forces download of the whole file when length is accessed');
          }
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER)
            throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc'
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function () {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length
              },
            },
            chunkSize: {
              get: function () {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize
              },
            },
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        Object.defineProperties(node, {
          usedBytes: {
            get: function () {
              return this.contents.length
            },
          },
        });
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function (key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO)
            }
            return fn.apply(null, arguments)
          };
        });
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO)
          }
          var contents = stream.node.contents;
          if (position >= contents.length) return 0
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size
        };
        node.stream_ops = stream_ops;
        return node
      },
      createPreloadedFile: function (
        parent,
        name,
        url,
        canRead,
        canWrite,
        onload,
        onerror,
        dontCreateFile,
        canOwn,
        preFinish
      ) {
        Browser.init();
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency();
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function (plugin) {
            if (handled) return
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function () {
                if (onerror) onerror();
                removeRunDependency();
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency();
        if (typeof url == 'string') {
          Browser.asyncLoad(
            url,
            function (byteArray) {
              processData(byteArray);
            },
            onerror
          );
        } else {
          processData(url);
        }
      },
      indexedDB: function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB
      },
      DB_NAME: function () {
        return 'EM_FS_' + window.location.pathname
      },
      DB_VERSION: 20,
      DB_STORE_NAME: 'FILE_DATA',
      saveFilesToDB: function (paths, onload, onerror) {
        onload = onload || function () {};
        onerror = onerror || function () {};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e)
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0,
            fail = 0,
            total = paths.length;
          function finish() {
            if (fail == 0) onload();
            else onerror();
          }
          paths.forEach(function (path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() {
              ok++;
              if (ok + fail == total) finish();
            };
            putRequest.onerror = function putRequest_onerror() {
              fail++;
              if (ok + fail == total) finish();
            };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },
      loadFilesFromDB: function (paths, onload, onerror) {
        onload = onload || function () {};
        onerror = onerror || function () {};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e)
        }
        openRequest.onupgradeneeded = onerror;
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch (e) {
            onerror(e);
            return
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0,
            fail = 0,
            total = paths.length;
          function finish() {
            if (fail == 0) onload();
            else onerror();
          }
          paths.forEach(function (path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() {
              fail++;
              if (ok + fail == total) finish();
            };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },
    };
    var SYSCALLS = {
      DEFAULT_POLLMASK: 5,
      mappings: {},
      umask: 511,
      calculateAt: function (dirfd, path) {
        if (path[0] !== '/') {
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF)
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path
      },
      doStat: function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            return -ERRNO_CODES.ENOTDIR
          }
          throw e
        }
        HEAP32[buf >> 2] = stat.dev;
        HEAP32[(buf + 4) >> 2] = 0;
        HEAP32[(buf + 8) >> 2] = stat.ino;
        HEAP32[(buf + 12) >> 2] = stat.mode;
        HEAP32[(buf + 16) >> 2] = stat.nlink;
        HEAP32[(buf + 20) >> 2] = stat.uid;
        HEAP32[(buf + 24) >> 2] = stat.gid;
        HEAP32[(buf + 28) >> 2] = stat.rdev;
        HEAP32[(buf + 32) >> 2] = 0;
        HEAP32[(buf + 36) >> 2] = stat.size;
        HEAP32[(buf + 40) >> 2] = 4096;
        HEAP32[(buf + 44) >> 2] = stat.blocks;
        HEAP32[(buf + 48) >> 2] = (stat.atime.getTime() / 1e3) | 0;
        HEAP32[(buf + 52) >> 2] = 0;
        HEAP32[(buf + 56) >> 2] = (stat.mtime.getTime() / 1e3) | 0;
        HEAP32[(buf + 60) >> 2] = 0;
        HEAP32[(buf + 64) >> 2] = (stat.ctime.getTime() / 1e3) | 0;
        HEAP32[(buf + 68) >> 2] = 0;
        HEAP32[(buf + 72) >> 2] = stat.ino;
        return 0
      },
      doMsync: function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },
      doMkdir: function (path, mode) {
        path = PATH.normalize(path);
        if (path[path.length - 1] === '/') path = path.substr(0, path.length - 1);
        FS.mkdir(path, mode, 0);
        return 0
      },
      doMknod: function (path, mode, dev) {
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break
          default:
            return -ERRNO_CODES.EINVAL
        }
        FS.mknod(path, mode, dev);
        return 0
      },
      doReadlink: function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL
        var ret = FS.readlink(path);
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf + len];
        stringToUTF8(ret, buf, bufsize + 1);
        HEAP8[buf + len] = endChar;
        return len
      },
      doAccess: function (path, amode) {
        if (amode & ~7) {
          return -ERRNO_CODES.EINVAL
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES
        }
        return 0
      },
      doDup: function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd
      },
      doReadv: function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(iov + i * 8) >> 2];
          var len = HEAP32[(iov + (i * 8 + 4)) >> 2];
          var curr = FS.read(stream, HEAP8, ptr, len, offset);
          if (curr < 0) return -1
          ret += curr;
          if (curr < len) break
        }
        return ret
      },
      doWritev: function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(iov + i * 8) >> 2];
          var len = HEAP32[(iov + (i * 8 + 4)) >> 2];
          var curr = FS.write(stream, HEAP8, ptr, len, offset);
          if (curr < 0) return -1
          ret += curr;
        }
        return ret
      },
      varargs: 0,
      get: function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(SYSCALLS.varargs - 4) >> 2];
        return ret
      },
      getStr: function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret
      },
      getStreamFromFD: function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        return stream
      },
      getSocketFromFD: function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        return socket
      },
      getSocketAddress: function (allowNull) {
        var addrp = SYSCALLS.get(),
          addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno)
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info
      },
      get64: function () {
        var low = SYSCALLS.get(),
          high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low
      },
      getZero: function () {
        assert(SYSCALLS.get() === 0);
      },
    };
    function ___syscall140(which, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        var stream = SYSCALLS.getStreamFromFD(),
          offset_high = SYSCALLS.get(),
          offset_low = SYSCALLS.get(),
          result = SYSCALLS.get(),
          whence = SYSCALLS.get();
        var offset = offset_low;
        FS.llseek(stream, offset, whence);
        HEAP32[result >> 2] = stream.position;
        if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
        return 0
      } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
      }
    }
    function ___syscall145(which, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        var stream = SYSCALLS.getStreamFromFD(),
          iov = SYSCALLS.get(),
          iovcnt = SYSCALLS.get();
        return SYSCALLS.doReadv(stream, iov, iovcnt)
      } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
      }
    }
    function ___syscall146(which, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        var stream = SYSCALLS.getStreamFromFD(),
          iov = SYSCALLS.get(),
          iovcnt = SYSCALLS.get();
        return SYSCALLS.doWritev(stream, iov, iovcnt)
      } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
      }
    }
    function ___syscall183(which, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        var buf = SYSCALLS.get(),
          size = SYSCALLS.get();
        if (size === 0) return -ERRNO_CODES.EINVAL
        var cwd = FS.cwd();
        var cwdLengthInBytes = lengthBytesUTF8(cwd);
        if (size < cwdLengthInBytes + 1) return -ERRNO_CODES.ERANGE
        stringToUTF8(cwd, buf, size);
        return buf
      } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
      }
    }
    function ___syscall198(which, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        var path = SYSCALLS.getStr(),
          owner = SYSCALLS.get(),
          group = SYSCALLS.get();
        FS.chown(path, owner, group);
        return 0
      } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
      }
    }
    var PROCINFO = { ppid: 1, pid: 42, sid: 42, pgid: 42 };
    function ___syscall20(which, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        return PROCINFO.pid
      } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
      }
    }
    function ___syscall6(which, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        var stream = SYSCALLS.getStreamFromFD();
        FS.close(stream);
        return 0
      } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
      }
    }
    function ___syscall60(which, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        var mask = SYSCALLS.get();
        var old = SYSCALLS.umask;
        SYSCALLS.umask = mask;
        return old
      } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
      }
    }
    function ___syscall83(which, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        var target = SYSCALLS.getStr(),
          linkpath = SYSCALLS.getStr();
        FS.symlink(target, linkpath);
        return 0
      } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
      }
    }
    function ___syscall91(which, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        var addr = SYSCALLS.get(),
          len = SYSCALLS.get();
        var info = SYSCALLS.mappings[addr];
        if (!info) return 0
        if (len === info.len) {
          var stream = FS.getStream(info.fd);
          SYSCALLS.doMsync(addr, stream, len, info.flags);
          FS.munmap(stream);
          SYSCALLS.mappings[addr] = null;
          if (info.allocated) {
            _free(info.malloc);
          }
        }
        return 0
      } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
      }
    }
    function ___unlock() {}
    var structRegistrations = {};
    function runDestructors(destructors) {
      while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
      }
    }
    function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2])
    }
    var awaitingDependencies = {};
    var registeredTypes = {};
    var typeDependencies = {};
    var char_0 = 48;
    var char_9 = 57;
    function makeLegalFunctionName(name) {
      if (undefined === name) {
        return '_unknown'
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
        return '_' + name
      } else {
        return name
      }
    }
    function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      return new Function(
        'body',
        'return function ' + name + '() {\n' + '    "use strict";' + '    return body.apply(this, arguments);\n' + '};\n'
      )(body)
    }
    function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function (message) {
        this.name = errorName;
        this.message = message;
        var stack = new Error(message).stack;
        if (stack !== undefined) {
          this.stack = this.toString() + '\n' + stack.replace(/^Error(:[^\n]*)?\n/, '');
        }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function () {
        if (this.message === undefined) {
          return this.name
        } else {
          return this.name + ': ' + this.message
        }
      };
      return errorClass
    }
    var InternalError = undefined;
    function throwInternalError(message) {
      throw new InternalError(message)
    }
    function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function (type) {
        typeDependencies[type] = dependentTypes;
      });
      function onComplete(typeConverters) {
        var myTypeConverters = getTypeConverters(typeConverters);
        if (myTypeConverters.length !== myTypes.length) {
          throwInternalError('Mismatched type converter count');
        }
        for (var i = 0; i < myTypes.length; ++i) {
          registerType(myTypes[i], myTypeConverters[i]);
        }
      }
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function (dt, i) {
        if (registeredTypes.hasOwnProperty(dt)) {
          typeConverters[i] = registeredTypes[dt];
        } else {
          unregisteredTypes.push(dt);
          if (!awaitingDependencies.hasOwnProperty(dt)) {
            awaitingDependencies[dt] = [];
          }
          awaitingDependencies[dt].push(function () {
            typeConverters[i] = registeredTypes[dt];
            ++registered;
            if (registered === unregisteredTypes.length) {
              onComplete(typeConverters);
            }
          });
        }
      });
      if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
      }
    }
    function __embind_finalize_value_object(structType) {
      var reg = structRegistrations[structType];
      delete structRegistrations[structType];
      var rawConstructor = reg.rawConstructor;
      var rawDestructor = reg.rawDestructor;
      var fieldRecords = reg.fields;
      var fieldTypes = fieldRecords
        .map(function (field) {
          return field.getterReturnType
        })
        .concat(
          fieldRecords.map(function (field) {
            return field.setterArgumentType
          })
        );
      whenDependentTypesAreResolved([structType], fieldTypes, function (fieldTypes) {
        var fields = {};
        fieldRecords.forEach(function (field, i) {
          var fieldName = field.fieldName;
          var getterReturnType = fieldTypes[i];
          var getter = field.getter;
          var getterContext = field.getterContext;
          var setterArgumentType = fieldTypes[i + fieldRecords.length];
          var setter = field.setter;
          var setterContext = field.setterContext;
          fields[fieldName] = {
            read: function (ptr) {
              return getterReturnType['fromWireType'](getter(getterContext, ptr))
            },
            write: function (ptr, o) {
              var destructors = [];
              setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
              runDestructors(destructors);
            },
          };
        });
        return [
          {
            name: reg.name,
            fromWireType: function (ptr) {
              var rv = {};
              for (var i in fields) {
                rv[i] = fields[i].read(ptr);
              }
              rawDestructor(ptr);
              return rv
            },
            toWireType: function (destructors, o) {
              for (var fieldName in fields) {
                if (!(fieldName in o)) {
                  throw new TypeError('Missing field')
                }
              }
              var ptr = rawConstructor();
              for (fieldName in fields) {
                fields[fieldName].write(ptr, o[fieldName]);
              }
              if (destructors !== null) {
                destructors.push(rawDestructor, ptr);
              }
              return ptr
            },
            argPackAdvance: 8,
            readValueFromPointer: simpleReadValueFromPointer,
            destructorFunction: rawDestructor,
          },
        ]
      });
    }
    function getShiftFromSize(size) {
      switch (size) {
        case 1:
          return 0
        case 2:
          return 1
        case 4:
          return 2
        case 8:
          return 3
        default:
          throw new TypeError('Unknown type size: ' + size)
      }
    }
    function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
        codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
    var embind_charCodes = undefined;
    function readLatin1String(ptr) {
      var ret = '';
      var c = ptr;
      while (HEAPU8[c]) {
        ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret
    }
    var BindingError = undefined;
    function throwBindingError(message) {
      throw new BindingError(message)
    }
    function registerType(rawType, registeredInstance, options) {
      options = options || {};
      if (!('argPackAdvance' in registeredInstance)) {
        throw new TypeError('registerType registeredInstance requires argPackAdvance')
      }
      var name = registeredInstance.name;
      if (!rawType) {
        throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
        if (options.ignoreDuplicateRegistrations) {
          return
        } else {
          throwBindingError("Cannot register type '" + name + "' twice");
        }
      }
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
      if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach(function (cb) {
          cb();
        });
      }
    }
    function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        fromWireType: function (wt) {
          return !!wt
        },
        toWireType: function (destructors, o) {
          return o ? trueValue : falseValue
        },
        argPackAdvance: 8,
        readValueFromPointer: function (pointer) {
          var heap;
          if (size === 1) {
            heap = HEAP8;
          } else if (size === 2) {
            heap = HEAP16;
          } else if (size === 4) {
            heap = HEAP32;
          } else {
            throw new TypeError('Unknown boolean type size: ' + name)
          }
          return this['fromWireType'](heap[pointer >> shift])
        },
        destructorFunction: null,
      });
    }
    function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
        return false
      }
      if (!(other instanceof ClassHandle)) {
        return false
      }
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
      while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
      }
      while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
      }
      return leftClass === rightClass && left === right
    }
    function shallowCopyInternalPointer(o) {
      return {
        count: o.count,
        deleteScheduled: o.deleteScheduled,
        preservePointerOnDelete: o.preservePointerOnDelete,
        ptr: o.ptr,
        ptrType: o.ptrType,
        smartPtr: o.smartPtr,
        smartPtrType: o.smartPtrType,
      }
    }
    function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }
    function ClassHandle_clone() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.preservePointerOnDelete) {
        this.$$.count.value += 1;
        return this
      } else {
        var clone = Object.create(Object.getPrototypeOf(this), { $$: { value: shallowCopyInternalPointer(this.$$) } });
        clone.$$.count.value += 1;
        clone.$$.deleteScheduled = false;
        return clone
      }
    }
    function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }
    function ClassHandle_delete() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError('Object already scheduled for deletion');
      }
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
        runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
        this.$$.smartPtr = undefined;
        this.$$.ptr = undefined;
      }
    }
    function ClassHandle_isDeleted() {
      return !this.$$.ptr
    }
    var delayFunction = undefined;
    var deletionQueue = [];
    function flushPendingDeletes() {
      while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj['delete']();
      }
    }
    function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this
    }
    function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }
    function ClassHandle() {}
    var registeredPointers = {};
    function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];
        proto[methodName] = function () {
          if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
            throwBindingError(
              "Function '" +
                humanName +
                "' called with an invalid number of arguments (" +
                arguments.length +
                ') - expects one of (' +
                proto[methodName].overloadTable +
                ')!'
            );
          }
          return proto[methodName].overloadTable[arguments.length].apply(this, arguments)
        };
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
    function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
        if (
          undefined === numArguments ||
          (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])
        ) {
          throwBindingError("Cannot register public name '" + name + "' twice");
        }
        ensureOverloadTable(Module, name, name);
        if (Module.hasOwnProperty(numArguments)) {
          throwBindingError(
            'Cannot register multiple overloads of a function with the same number of arguments (' + numArguments + ')!'
          );
        }
        Module[name].overloadTable[numArguments] = value;
      } else {
        Module[name] = value;
        if (undefined !== numArguments) {
          Module[name].numArguments = numArguments;
        }
      }
    }
    function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
    function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
          throwBindingError('Expected null or instance of ' + desiredClass.name + ', got an instance of ' + ptrClass.name);
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
      }
      return ptr
    }
    function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError('null is not a valid ' + this.name);
        }
        return 0
      }
      if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr
    }
    function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
        if (this.isReference) {
          throwBindingError('null is not a valid ' + this.name);
        }
        if (this.isSmartPointer) {
          ptr = this.rawConstructor();
          if (destructors !== null) {
            destructors.push(this.rawDestructor, ptr);
          }
          return ptr
        } else {
          return 0
        }
      }
      if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError(
          'Cannot convert argument of type ' +
            (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) +
            ' to parameter type ' +
            this.name
        );
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      if (this.isSmartPointer) {
        if (undefined === handle.$$.smartPtr) {
          throwBindingError('Passing raw pointer to smart pointer is illegal');
        }
        switch (this.sharingPolicy) {
          case 0:
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              throwBindingError(
                'Cannot convert argument of type ' +
                  (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) +
                  ' to parameter type ' +
                  this.name
              );
            }
            break
          case 1:
            ptr = handle.$$.smartPtr;
            break
          case 2:
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              var clonedHandle = handle['clone']();
              ptr = this.rawShare(
                ptr,
                __emval_register(function () {
                  clonedHandle['delete']();
                })
              );
              if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
              }
            }
            break
          default:
            throwBindingError('Unsupporting sharing policy');
        }
      }
      return ptr
    }
    function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError('null is not a valid ' + this.name);
        }
        return 0
      }
      if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr
    }
    function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
      }
      return ptr
    }
    function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
        this.rawDestructor(ptr);
      }
    }
    function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
        handle['delete']();
      }
    }
    function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
        return ptr
      }
      if (undefined === desiredClass.baseClass) {
        return null
      }
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
        return null
      }
      return desiredClass.downcast(rv)
    }
    function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length
    }
    function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
        if (registeredInstances.hasOwnProperty(k)) {
          rv.push(registeredInstances[k]);
        }
      }
      return rv
    }
    function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
        delayFunction(flushPendingDeletes);
      }
    }
    function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }
    var registeredInstances = {};
    function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
        throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
        ptr = class_.upcast(ptr);
        class_ = class_.baseClass;
      }
      return ptr
    }
    function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr]
    }
    function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
        throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, { $$: { value: record } })
    }
    function RegisteredPointer_fromWireType(ptr) {
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
        this.destructor(ptr);
        return null
      }
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
        if (0 === registeredInstance.$$.count.value) {
          registeredInstance.$$.ptr = rawPointer;
          registeredInstance.$$.smartPtr = ptr;
          return registeredInstance['clone']()
        } else {
          var rv = registeredInstance['clone']();
          this.destructor(ptr);
          return rv
        }
      }
      function makeDefaultHandle() {
        if (this.isSmartPointer) {
          return makeClassHandle(this.registeredClass.instancePrototype, {
            ptrType: this.pointeeType,
            ptr: rawPointer,
            smartPtrType: this,
            smartPtr: ptr,
          })
        } else {
          return makeClassHandle(this.registeredClass.instancePrototype, { ptrType: this, ptr: ptr })
        }
      }
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this)
      }
      var toType;
      if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
      } else {
        toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);
      if (dp === null) {
        return makeDefaultHandle.call(this)
      }
      if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
          ptrType: toType,
          ptr: dp,
          smartPtrType: this,
          smartPtr: ptr,
        })
      } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, { ptrType: toType, ptr: dp })
      }
    }
    function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }
    function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
        if (isConst) {
          this['toWireType'] = constNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        } else {
          this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        }
      } else {
        this['toWireType'] = genericPointerToWireType;
      }
    }
    function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
        throwInternalError('Replacing nonexistant public symbol');
      }
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
      } else {
        Module[name] = value;
        Module[name].argCount = numArguments;
      }
    }
    function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
      function makeDynCaller(dynCall) {
        var args = [];
        for (var i = 1; i < signature.length; ++i) {
          args.push('a' + i);
        }
        var name = 'dynCall_' + signature + '_' + rawFunction;
        var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
        body += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
        body += '};\n';
        return new Function('dynCall', 'rawFunction', body)(dynCall, rawFunction)
      }
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
        fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== 'undefined') {
        fp = FUNCTION_TABLE[rawFunction];
      } else {
        var dc = Module['asm']['dynCall_' + signature];
        if (dc === undefined) {
          dc = Module['asm']['dynCall_' + signature.replace(/f/g, 'd')];
          if (dc === undefined) {
            throwBindingError('No dynCall invoker for signature: ' + signature);
          }
        }
        fp = makeDynCaller(dc);
      }
      if (typeof fp !== 'function') {
        throwBindingError('unknown function pointer with signature ' + signature + ': ' + rawFunction);
      }
      return fp
    }
    var UnboundTypeError = undefined;
    function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv
    }
    function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
        if (seen[type]) {
          return
        }
        if (registeredTypes[type]) {
          return
        }
        if (typeDependencies[type]) {
          typeDependencies[type].forEach(visit);
          return
        }
        unboundTypes.push(type);
        seen[type] = true;
      }
      types.forEach(visit);
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']))
    }
    function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
        upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
        downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
      exposePublicSymbol(legalFunctionName, function () {
        throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
      whenDependentTypesAreResolved(
        [rawType, rawPointerType, rawConstPointerType],
        baseClassRawType ? [baseClassRawType] : [],
        function (base) {
          base = base[0];
          var baseClass;
          var basePrototype;
          if (baseClassRawType) {
            baseClass = base.registeredClass;
            basePrototype = baseClass.instancePrototype;
          } else {
            basePrototype = ClassHandle.prototype;
          }
          var constructor = createNamedFunction(legalFunctionName, function () {
            if (Object.getPrototypeOf(this) !== instancePrototype) {
              throw new BindingError("Use 'new' to construct " + name)
            }
            if (undefined === registeredClass.constructor_body) {
              throw new BindingError(name + ' has no accessible constructor')
            }
            var body = registeredClass.constructor_body[arguments.length];
            if (undefined === body) {
              throw new BindingError(
                'Tried to invoke ctor of ' +
                  name +
                  ' with invalid number of parameters (' +
                  arguments.length +
                  ') - expected (' +
                  Object.keys(registeredClass.constructor_body).toString() +
                  ') parameters instead!'
              )
            }
            return body.apply(this, arguments)
          });
          var instancePrototype = Object.create(basePrototype, { constructor: { value: constructor } });
          constructor.prototype = instancePrototype;
          var registeredClass = new RegisteredClass(
            name,
            constructor,
            instancePrototype,
            rawDestructor,
            baseClass,
            getActualType,
            upcast,
            downcast
          );
          var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);
          var pointerConverter = new RegisteredPointer(name + '*', registeredClass, false, false, false);
          var constPointerConverter = new RegisteredPointer(name + ' const*', registeredClass, false, true, false);
          registeredPointers[rawType] = { pointerType: pointerConverter, constPointerType: constPointerConverter };
          replacePublicSymbol(legalFunctionName, constructor);
          return [referenceConverter, pointerConverter, constPointerConverter]
        }
      );
    }
    function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
        array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array
    }
    function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      whenDependentTypesAreResolved([], [rawClassType], function (classType) {
        classType = classType[0];
        var humanName = 'constructor ' + classType.name;
        if (undefined === classType.registeredClass.constructor_body) {
          classType.registeredClass.constructor_body = [];
        }
        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
          throw new BindingError(
            'Cannot register multiple constructors with identical number of parameters (' +
              (argCount - 1) +
              ") for class '" +
              classType.name +
              "'! Overload resolution is currently only performed using the parameter count, not actual type info!"
          )
        }
        classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
          throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
        };
        whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {
          classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
            if (arguments.length !== argCount - 1) {
              throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount - 1));
            }
            var destructors = [];
            var args = new Array(argCount);
            args[0] = rawConstructor;
            for (var i = 1; i < argCount; ++i) {
              args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
            }
            var ptr = invoker.apply(null, args);
            runDestructors(destructors);
            return argTypes[0]['fromWireType'](ptr)
          };
          return []
        });
        return []
      });
    }
    function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
        throw new TypeError('new_ called with constructor type ' + typeof constructor + ' which is not a function')
      }
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function () {});
      dummy.prototype = constructor.prototype;
      var obj = new dummy();
      var r = constructor.apply(obj, argumentList);
      return r instanceof Object ? r : obj
    }
    function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      var argCount = argTypes.length;
      if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
      var isClassMethodFunc = argTypes[1] !== null && classType !== null;
      var needsDestructorStack = false;
      for (var i = 1; i < argTypes.length; ++i) {
        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {
          needsDestructorStack = true;
          break
        }
      }
      var returns = argTypes[0].name !== 'void';
      var argsList = '';
      var argsListWired = '';
      for (var i = 0; i < argCount - 2; ++i) {
        argsList += (i !== 0 ? ', ' : '') + 'arg' + i;
        argsListWired += (i !== 0 ? ', ' : '') + 'arg' + i + 'Wired';
      }
      var invokerFnBody =
        'return function ' +
        makeLegalFunctionName(humanName) +
        '(' +
        argsList +
        ') {\n' +
        'if (arguments.length !== ' +
        (argCount - 2) +
        ') {\n' +
        "throwBindingError('function " +
        humanName +
        " called with ' + arguments.length + ' arguments, expected " +
        (argCount - 2) +
        " args!');\n" +
        '}\n';
      if (needsDestructorStack) {
        invokerFnBody += 'var destructors = [];\n';
      }
      var dtorStack = needsDestructorStack ? 'destructors' : 'null';
      var args1 = ['throwBindingError', 'invoker', 'fn', 'runDestructors', 'retType', 'classParam'];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
      if (isClassMethodFunc) {
        invokerFnBody += 'var thisWired = classParam.toWireType(' + dtorStack + ', this);\n';
      }
      for (var i = 0; i < argCount - 2; ++i) {
        invokerFnBody +=
          'var arg' +
          i +
          'Wired = argType' +
          i +
          '.toWireType(' +
          dtorStack +
          ', arg' +
          i +
          '); // ' +
          argTypes[i + 2].name +
          '\n';
        args1.push('argType' + i);
        args2.push(argTypes[i + 2]);
      }
      if (isClassMethodFunc) {
        argsListWired = 'thisWired' + (argsListWired.length > 0 ? ', ' : '') + argsListWired;
      }
      invokerFnBody +=
        (returns ? 'var rv = ' : '') + 'invoker(fn' + (argsListWired.length > 0 ? ', ' : '') + argsListWired + ');\n';
      if (needsDestructorStack) {
        invokerFnBody += 'runDestructors(destructors);\n';
      } else {
        for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
          var paramName = i === 1 ? 'thisWired' : 'arg' + (i - 2) + 'Wired';
          if (argTypes[i].destructorFunction !== null) {
            invokerFnBody += paramName + '_dtor(' + paramName + '); // ' + argTypes[i].name + '\n';
            args1.push(paramName + '_dtor');
            args2.push(argTypes[i].destructorFunction);
          }
        }
      }
      if (returns) {
        invokerFnBody += 'var ret = retType.fromWireType(rv);\n' + 'return ret;\n';
      }
      invokerFnBody += '}\n';
      args1.push(invokerFnBody);
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction
    }
    function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
      whenDependentTypesAreResolved([], [rawClassType], function (classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;
        if (isPureVirtual) {
          classType.registeredClass.pureVirtualFunctions.push(methodName);
        }
        function unboundTypesHandler() {
          throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
        }
        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (
          undefined === method ||
          (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)
        ) {
          unboundTypesHandler.argCount = argCount - 2;
          unboundTypesHandler.className = classType.name;
          proto[methodName] = unboundTypesHandler;
        } else {
          ensureOverloadTable(proto, methodName, humanName);
          proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
        }
        whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {
          var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
          if (undefined === proto[methodName].overloadTable) {
            memberFunction.argCount = argCount - 2;
            proto[methodName] = memberFunction;
          } else {
            proto[methodName].overloadTable[argCount - 2] = memberFunction;
          }
          return []
        });
        return []
      });
    }
    var emval_free_list = [];
    var emval_handle_array = [{}, { value: undefined }, { value: null }, { value: true }, { value: false }];
    function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
        emval_handle_array[handle] = undefined;
        emval_free_list.push(handle);
      }
    }
    function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
        if (emval_handle_array[i] !== undefined) {
          ++count;
        }
      }
      return count
    }
    function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
        if (emval_handle_array[i] !== undefined) {
          return emval_handle_array[i]
        }
      }
      return null
    }
    function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }
    function __emval_register(value) {
      switch (value) {
        case undefined: {
          return 1
        }
        case null: {
          return 2
        }
        case true: {
          return 3
        }
        case false: {
          return 4
        }
        default: {
          var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
          emval_handle_array[handle] = { refcount: 1, value: value };
          return handle
        }
      }
    }
    function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        fromWireType: function (handle) {
          var rv = emval_handle_array[handle].value;
          __emval_decref(handle);
          return rv
        },
        toWireType: function (destructors, value) {
          return __emval_register(value)
        },
        argPackAdvance: 8,
        readValueFromPointer: simpleReadValueFromPointer,
        destructorFunction: null,
      });
    }
    function _embind_repr(v) {
      if (v === null) {
        return 'null'
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
        return v.toString()
      } else {
        return '' + v
      }
    }
    function floatReadValueFromPointer(name, shift) {
      switch (shift) {
        case 2:
          return function (pointer) {
            return this['fromWireType'](HEAPF32[pointer >> 2])
          }
        case 3:
          return function (pointer) {
            return this['fromWireType'](HEAPF64[pointer >> 3])
          }
        default:
          throw new TypeError('Unknown float type: ' + name)
      }
    }
    function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        fromWireType: function (value) {
          return value
        },
        toWireType: function (destructors, value) {
          if (typeof value !== 'number' && typeof value !== 'boolean') {
            throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name)
          }
          return value
        },
        argPackAdvance: 8,
        readValueFromPointer: floatReadValueFromPointer(name, shift),
        destructorFunction: null,
      });
    }
    function integerReadValueFromPointer(name, shift, signed) {
      switch (shift) {
        case 0:
          return signed
            ? function readS8FromPointer(pointer) {
                return HEAP8[pointer]
              }
            : function readU8FromPointer(pointer) {
                return HEAPU8[pointer]
              }
        case 1:
          return signed
            ? function readS16FromPointer(pointer) {
                return HEAP16[pointer >> 1]
              }
            : function readU16FromPointer(pointer) {
                return HEAPU16[pointer >> 1]
              }
        case 2:
          return signed
            ? function readS32FromPointer(pointer) {
                return HEAP32[pointer >> 2]
              }
            : function readU32FromPointer(pointer) {
                return HEAPU32[pointer >> 2]
              }
        default:
          throw new TypeError('Unknown integer type: ' + name)
      }
    }
    function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) {
        maxRange = 4294967295;
      }
      var shift = getShiftFromSize(size);
      var fromWireType = function (value) {
        return value
      };
      if (minRange === 0) {
        var bitshift = 32 - 8 * size;
        fromWireType = function (value) {
          return (value << bitshift) >>> bitshift
        };
      }
      var isUnsignedType = name.indexOf('unsigned') != -1;
      registerType(primitiveType, {
        name: name,
        fromWireType: fromWireType,
        toWireType: function (destructors, value) {
          if (typeof value !== 'number' && typeof value !== 'boolean') {
            throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name)
          }
          if (value < minRange || value > maxRange) {
            throw new TypeError(
              'Passing a number "' +
                _embind_repr(value) +
                '" from JS side to C/C++ side to an argument of type "' +
                name +
                '", which is outside the valid range [' +
                minRange +
                ', ' +
                maxRange +
                ']!'
            )
          }
          return isUnsignedType ? value >>> 0 : value | 0
        },
        argPackAdvance: 8,
        readValueFromPointer: integerReadValueFromPointer(name, shift, minRange !== 0),
        destructorFunction: null,
      });
    }
    function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,
      ];
      var TA = typeMapping[dataTypeIndex];
      function decodeMemoryView(handle) {
        handle = handle >> 2;
        var heap = HEAPU32;
        var size = heap[handle];
        var data = heap[handle + 1];
        return new TA(heap['buffer'], data, size)
      }
      name = readLatin1String(name);
      registerType(
        rawType,
        { name: name, fromWireType: decodeMemoryView, argPackAdvance: 8, readValueFromPointer: decodeMemoryView },
        { ignoreDuplicateRegistrations: true }
      );
    }
    function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        fromWireType: function (value) {
          var length = HEAPU32[value >> 2];
          var a = new Array(length);
          for (var i = 0; i < length; ++i) {
            a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
          }
          _free(value);
          return a.join('')
        },
        toWireType: function (destructors, value) {
          if (value instanceof ArrayBuffer) {
            value = new Uint8Array(value);
          }
          function getTAElement(ta, index) {
            return ta[index]
          }
          function getStringElement(string, index) {
            return string.charCodeAt(index)
          }
          var getElement;
          if (value instanceof Uint8Array) {
            getElement = getTAElement;
          } else if (value instanceof Uint8ClampedArray) {
            getElement = getTAElement;
          } else if (value instanceof Int8Array) {
            getElement = getTAElement;
          } else if (typeof value === 'string') {
            getElement = getStringElement;
          } else {
            throwBindingError('Cannot pass non-string to std::string');
          }
          var length = value.length;
          var ptr = _malloc(4 + length);
          HEAPU32[ptr >> 2] = length;
          for (var i = 0; i < length; ++i) {
            var charCode = getElement(value, i);
            if (charCode > 255) {
              _free(ptr);
              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
            }
            HEAPU8[ptr + 4 + i] = charCode;
          }
          if (destructors !== null) {
            destructors.push(_free, ptr);
          }
          return ptr
        },
        argPackAdvance: 8,
        readValueFromPointer: simpleReadValueFromPointer,
        destructorFunction: function (ptr) {
          _free(ptr);
        },
      });
    }
    function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
        getHeap = function () {
          return HEAPU16
        };
        shift = 1;
      } else if (charSize === 4) {
        getHeap = function () {
          return HEAPU32
        };
        shift = 2;
      }
      registerType(rawType, {
        name: name,
        fromWireType: function (value) {
          var HEAP = getHeap();
          var length = HEAPU32[value >> 2];
          var a = new Array(length);
          var start = (value + 4) >> shift;
          for (var i = 0; i < length; ++i) {
            a[i] = String.fromCharCode(HEAP[start + i]);
          }
          _free(value);
          return a.join('')
        },
        toWireType: function (destructors, value) {
          var HEAP = getHeap();
          var length = value.length;
          var ptr = _malloc(4 + length * charSize);
          HEAPU32[ptr >> 2] = length;
          var start = (ptr + 4) >> shift;
          for (var i = 0; i < length; ++i) {
            HEAP[start + i] = value.charCodeAt(i);
          }
          if (destructors !== null) {
            destructors.push(_free, ptr);
          }
          return ptr
        },
        argPackAdvance: 8,
        readValueFromPointer: simpleReadValueFromPointer,
        destructorFunction: function (ptr) {
          _free(ptr);
        },
      });
    }
    function __embind_register_value_object(
      rawType,
      name,
      constructorSignature,
      rawConstructor,
      destructorSignature,
      rawDestructor
    ) {
      structRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
        rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
        fields: [],
      };
    }
    function __embind_register_value_object_field(
      structType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      structRegistrations[structType].fields.push({
        fieldName: readLatin1String(fieldName),
        getterReturnType: getterReturnType,
        getter: embind__requireFunction(getterSignature, getter),
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: embind__requireFunction(setterSignature, setter),
        setterContext: setterContext,
      });
    }
    function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
        isVoid: true,
        name: name,
        argPackAdvance: 0,
        fromWireType: function () {
          return undefined
        },
        toWireType: function (destructors, o) {
          return undefined
        },
      });
    }
    function _abort() {
      Module['abort']();
    }
    var _environ = STATICTOP;
    STATICTOP += 16;
    function ___buildEnvironment(env) {
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        poolPtr = staticAlloc(TOTAL_ENV_SIZE);
        envPtr = staticAlloc(MAX_ENV_VALUES * 4);
        HEAP32[envPtr >> 2] = poolPtr;
        HEAP32[_environ >> 2] = envPtr;
      } else {
        envPtr = HEAP32[_environ >> 2];
        poolPtr = HEAP32[envPtr >> 2];
      }
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!')
      }
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(envPtr + i * ptrSize) >> 2] = poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(envPtr + strings.length * ptrSize) >> 2] = 0;
    }
    var ENV = {};
    function _getenv(name) {
      if (name === 0) return 0
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret
    }
    function _getgrnam() {
      Module['printErr']('missing function: getgrnam');
      abort(-1);
    }
    function _getpwnam() {
      throw 'getpwnam: TODO'
    }
    function _jsClose() {
      return jsAPI.close.apply(null, arguments)
    }
    function _jsCreate(filename) {
      return jsAPI.create.call(null, UTF32ToString(filename))
    }
    function _jsOpen(filename) {
      return jsAPI.open.call(null, UTF32ToString(filename))
    }
    function _jsRead() {
      return jsAPI.read.apply(null, arguments)
    }
    function _jsSeek(fd, offset, method) {
      return jsAPI.seek.call(null, fd, offset, UTF8ToString(method))
    }
    function _jsTell() {
      return jsAPI.tell.apply(null, arguments)
    }
    function _jsWrite() {
      return jsAPI.write.apply(null, arguments)
    }
    function _llvm_eh_typeid_for(type) {
      return type
    }
    var ___tm_current = STATICTOP;
    STATICTOP += 48;
    allocate(intArrayFromString('GMT'), 'i8', ALLOC_STATIC);
    var _tzname = STATICTOP;
    STATICTOP += 16;
    var _daylight = STATICTOP;
    STATICTOP += 16;
    var _timezone = STATICTOP;
    STATICTOP += 16;
    function _tzset() {
      if (_tzset.called) return
      _tzset.called = true;
      HEAP32[_timezone >> 2] = new Date().getTimezoneOffset() * 60;
      var winter = new Date(2e3, 0, 1);
      var summer = new Date(2e3, 6, 1);
      HEAP32[_daylight >> 2] = Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : 'GMT'
      }
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        HEAP32[_tzname >> 2] = winterNamePtr;
        HEAP32[(_tzname + 4) >> 2] = summerNamePtr;
      } else {
        HEAP32[_tzname >> 2] = summerNamePtr;
        HEAP32[(_tzname + 4) >> 2] = winterNamePtr;
      }
    }
    function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[time >> 2] * 1e3);
      HEAP32[tmPtr >> 2] = date.getSeconds();
      HEAP32[(tmPtr + 4) >> 2] = date.getMinutes();
      HEAP32[(tmPtr + 8) >> 2] = date.getHours();
      HEAP32[(tmPtr + 12) >> 2] = date.getDate();
      HEAP32[(tmPtr + 16) >> 2] = date.getMonth();
      HEAP32[(tmPtr + 20) >> 2] = date.getFullYear() - 1900;
      HEAP32[(tmPtr + 24) >> 2] = date.getDay();
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24)) | 0;
      HEAP32[(tmPtr + 28) >> 2] = yday;
      HEAP32[(tmPtr + 36) >> 2] = -(date.getTimezoneOffset() * 60);
      var summerOffset = new Date(2e3, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;
      HEAP32[(tmPtr + 32) >> 2] = dst;
      var zonePtr = HEAP32[(_tzname + (dst ? 4 : 0)) >> 2];
      HEAP32[(tmPtr + 40) >> 2] = zonePtr;
      return tmPtr
    }
    function _localtime(time) {
      return _localtime_r(time, ___tm_current)
    }
    function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
      return dest
    }
    function _mktime(tmPtr) {
      _tzset();
      var date = new Date(
        HEAP32[(tmPtr + 20) >> 2] + 1900,
        HEAP32[(tmPtr + 16) >> 2],
        HEAP32[(tmPtr + 12) >> 2],
        HEAP32[(tmPtr + 8) >> 2],
        HEAP32[(tmPtr + 4) >> 2],
        HEAP32[tmPtr >> 2],
        0
      );
      var dst = HEAP32[(tmPtr + 32) >> 2];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2e3, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset);
      if (dst < 0) {
        HEAP32[(tmPtr + 32) >> 2] = Number(summerOffset != winterOffset && dstOffset == guessedOffset);
      } else if (dst > 0 != (dstOffset == guessedOffset)) {
        var nonDstOffset = Math.max(winterOffset, summerOffset);
        var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
        date.setTime(date.getTime() + (trueOffset - guessedOffset) * 6e4);
      }
      HEAP32[(tmPtr + 24) >> 2] = date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24)) | 0;
      HEAP32[(tmPtr + 28) >> 2] = yday;
      return (date.getTime() / 1e3) | 0
    }
    var PTHREAD_SPECIFIC = {};
    function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0
    }
    var PTHREAD_SPECIFIC_NEXT_KEY = 1;
    function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL
      }
      HEAP32[key >> 2] = PTHREAD_SPECIFIC_NEXT_KEY;
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0
    }
    function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }
    function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0
    }
    function _time(ptr) {
      var ret = (Date.now() / 1e3) | 0;
      if (ptr) {
        HEAP32[ptr >> 2] = ret;
      }
      return ret
    }
    FS.staticInit();
    __ATINIT__.unshift(function () {
      if (!Module['noFSInit'] && !FS.init.initialized) FS.init();
    });
    __ATMAIN__.push(function () {
      FS.ignorePermissions = false;
    });
    __ATEXIT__.push(function () {
      FS.quit();
    });
    __ATINIT__.unshift(function () {
    });
    __ATEXIT__.push(function () {
    });
    InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
    embind_init_charCodes();
    BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
    init_ClassHandle();
    init_RegisteredPointer();
    init_embind();
    UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');
    init_emval();
    ___buildEnvironment(ENV);
    DYNAMICTOP_PTR = staticAlloc(4);
    STACK_BASE = STACKTOP = alignMemory(STATICTOP);
    STACK_MAX = STACK_BASE + TOTAL_STACK;
    DYNAMIC_BASE = alignMemory(STACK_MAX);
    HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
    staticSealed = true;
    function intArrayFromString(stringy, dontAddNull, length) {
      var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
      var u8array = new Array(len);
      var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
      if (dontAddNull) u8array.length = numBytesWritten;
      return u8array
    }
    Module['wasmTableSize'] = 316;
    Module['wasmMaxTableSize'] = 316;
    function invoke_i(index) {
      try {
        return Module['dynCall_i'](index)
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_ii(index, a1) {
      try {
        return Module['dynCall_ii'](index, a1)
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_iii(index, a1, a2) {
      try {
        return Module['dynCall_iii'](index, a1, a2)
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_iiii(index, a1, a2, a3) {
      try {
        return Module['dynCall_iiii'](index, a1, a2, a3)
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_iiiii(index, a1, a2, a3, a4) {
      try {
        return Module['dynCall_iiiii'](index, a1, a2, a3, a4)
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
      try {
        return Module['dynCall_iiiiiii'](index, a1, a2, a3, a4, a5, a6)
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_iiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
      try {
        return Module['dynCall_iiiiiiiiii'](index, a1, a2, a3, a4, a5, a6, a7, a8, a9)
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_iiiiiijii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
      try {
        return Module['dynCall_iiiiiijii'](index, a1, a2, a3, a4, a5, a6, a7, a8, a9)
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_ijj(index, a1, a2, a3, a4) {
      try {
        return Module['dynCall_ijj'](index, a1, a2, a3, a4)
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_ji(index, a1) {
      try {
        return Module['dynCall_ji'](index, a1)
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_v(index) {
      try {
        Module['dynCall_v'](index);
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_vi(index, a1) {
      try {
        Module['dynCall_vi'](index, a1);
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_vii(index, a1, a2) {
      try {
        Module['dynCall_vii'](index, a1, a2);
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_viii(index, a1, a2, a3) {
      try {
        Module['dynCall_viii'](index, a1, a2, a3);
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_viiii(index, a1, a2, a3, a4) {
      try {
        Module['dynCall_viiii'](index, a1, a2, a3, a4);
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_viiiii(index, a1, a2, a3, a4, a5) {
      try {
        Module['dynCall_viiiii'](index, a1, a2, a3, a4, a5);
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
      try {
        Module['dynCall_viiiiii'](index, a1, a2, a3, a4, a5, a6);
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_viiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
      try {
        Module['dynCall_viiiiiiiii'](index, a1, a2, a3, a4, a5, a6, a7, a8, a9);
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_viiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
      try {
        Module['dynCall_viiiiiiiiii'](index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_vij(index, a1, a2, a3) {
      try {
        Module['dynCall_vij'](index, a1, a2, a3);
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    function invoke_viji(index, a1, a2, a3, a4) {
      try {
        Module['dynCall_viji'](index, a1, a2, a3, a4);
      } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e
        Module['setThrew'](1, 0);
      }
    }
    Module.asmGlobalArg = {};
    Module.asmLibraryArg = {
      abort: abort,
      enlargeMemory: enlargeMemory,
      getTotalMemory: getTotalMemory,
      abortOnCannotGrowMemory: abortOnCannotGrowMemory,
      invoke_i: invoke_i,
      invoke_ii: invoke_ii,
      invoke_iii: invoke_iii,
      invoke_iiii: invoke_iiii,
      invoke_iiiii: invoke_iiiii,
      invoke_iiiiiii: invoke_iiiiiii,
      invoke_iiiiiiiiii: invoke_iiiiiiiiii,
      invoke_iiiiiijii: invoke_iiiiiijii,
      invoke_ijj: invoke_ijj,
      invoke_ji: invoke_ji,
      invoke_v: invoke_v,
      invoke_vi: invoke_vi,
      invoke_vii: invoke_vii,
      invoke_viii: invoke_viii,
      invoke_viiii: invoke_viiii,
      invoke_viiiii: invoke_viiiii,
      invoke_viiiiii: invoke_viiiiii,
      invoke_viiiiiiiii: invoke_viiiiiiiii,
      invoke_viiiiiiiiii: invoke_viiiiiiiiii,
      invoke_vij: invoke_vij,
      invoke_viji: invoke_viji,
      ___cxa_allocate_exception: ___cxa_allocate_exception,
      ___cxa_begin_catch: ___cxa_begin_catch,
      ___cxa_end_catch: ___cxa_end_catch,
      ___cxa_find_matching_catch_2: ___cxa_find_matching_catch_2,
      ___cxa_find_matching_catch_3: ___cxa_find_matching_catch_3,
      ___cxa_find_matching_catch_4: ___cxa_find_matching_catch_4,
      ___cxa_free_exception: ___cxa_free_exception,
      ___cxa_throw: ___cxa_throw,
      ___lock: ___lock,
      ___map_file: ___map_file,
      ___resumeException: ___resumeException,
      ___setErrNo: ___setErrNo,
      ___syscall140: ___syscall140,
      ___syscall145: ___syscall145,
      ___syscall146: ___syscall146,
      ___syscall183: ___syscall183,
      ___syscall198: ___syscall198,
      ___syscall20: ___syscall20,
      ___syscall6: ___syscall6,
      ___syscall60: ___syscall60,
      ___syscall83: ___syscall83,
      ___syscall91: ___syscall91,
      ___unlock: ___unlock,
      __embind_finalize_value_object: __embind_finalize_value_object,
      __embind_register_bool: __embind_register_bool,
      __embind_register_class: __embind_register_class,
      __embind_register_class_constructor: __embind_register_class_constructor,
      __embind_register_class_function: __embind_register_class_function,
      __embind_register_emval: __embind_register_emval,
      __embind_register_float: __embind_register_float,
      __embind_register_integer: __embind_register_integer,
      __embind_register_memory_view: __embind_register_memory_view,
      __embind_register_std_string: __embind_register_std_string,
      __embind_register_std_wstring: __embind_register_std_wstring,
      __embind_register_value_object: __embind_register_value_object,
      __embind_register_value_object_field: __embind_register_value_object_field,
      __embind_register_void: __embind_register_void,
      _abort: _abort,
      _emscripten_memcpy_big: _emscripten_memcpy_big,
      _getenv: _getenv,
      _getgrnam: _getgrnam,
      _getpwnam: _getpwnam,
      _jsClose: _jsClose,
      _jsCreate: _jsCreate,
      _jsOpen: _jsOpen,
      _jsRead: _jsRead,
      _jsSeek: _jsSeek,
      _jsTell: _jsTell,
      _jsWrite: _jsWrite,
      _llvm_eh_typeid_for: _llvm_eh_typeid_for,
      _localtime: _localtime,
      _mktime: _mktime,
      _pthread_getspecific: _pthread_getspecific,
      _pthread_key_create: _pthread_key_create,
      _pthread_once: _pthread_once,
      _pthread_setspecific: _pthread_setspecific,
      _time: _time,
      DYNAMICTOP_PTR: DYNAMICTOP_PTR,
      STACKTOP: STACKTOP,
    };
    var asm = Module['asm'](Module.asmGlobalArg, Module.asmLibraryArg, buffer);
    Module['asm'] = asm;
    var __GLOBAL__sub_I_bind_cpp = (Module['__GLOBAL__sub_I_bind_cpp'] = function () {
      return Module['asm']['__GLOBAL__sub_I_bind_cpp'].apply(null, arguments)
    });
    var __GLOBAL__sub_I_bridge_cpp = (Module['__GLOBAL__sub_I_bridge_cpp'] = function () {
      return Module['asm']['__GLOBAL__sub_I_bridge_cpp'].apply(null, arguments)
    });
    var __GLOBAL__sub_I_crc_cpp = (Module['__GLOBAL__sub_I_crc_cpp'] = function () {
      return Module['asm']['__GLOBAL__sub_I_crc_cpp'].apply(null, arguments)
    });
    var __GLOBAL__sub_I_global_cpp = (Module['__GLOBAL__sub_I_global_cpp'] = function () {
      return Module['asm']['__GLOBAL__sub_I_global_cpp'].apply(null, arguments)
    });
    (Module['___cxa_can_catch'] = function () {
      return Module['asm']['___cxa_can_catch'].apply(null, arguments)
    });
    (Module['___cxa_is_pointer_type'] = function () {
      return Module['asm']['___cxa_is_pointer_type'].apply(null, arguments)
    });
    (Module['___errno_location'] = function () {
      return Module['asm']['___errno_location'].apply(null, arguments)
    });
    var ___getTypeName = (Module['___getTypeName'] = function () {
      return Module['asm']['___getTypeName'].apply(null, arguments)
    });
    var _emscripten_replace_memory = (Module['_emscripten_replace_memory'] = function () {
      return Module['asm']['_emscripten_replace_memory'].apply(null, arguments)
    });
    var _free = (Module['_free'] = function () {
      return Module['asm']['_free'].apply(null, arguments)
    });
    var _malloc = (Module['_malloc'] = function () {
      return Module['asm']['_malloc'].apply(null, arguments)
    });
    var setTempRet0 = (Module['setTempRet0'] = function () {
      return Module['asm']['setTempRet0'].apply(null, arguments)
    });
    (Module['setThrew'] = function () {
      return Module['asm']['setThrew'].apply(null, arguments)
    });
    var stackAlloc = (Module['stackAlloc'] = function () {
      return Module['asm']['stackAlloc'].apply(null, arguments)
    });
    (Module['dynCall_dii'] = function () {
      return Module['asm']['dynCall_dii'].apply(null, arguments)
    });
    (Module['dynCall_i'] = function () {
      return Module['asm']['dynCall_i'].apply(null, arguments)
    });
    (Module['dynCall_ii'] = function () {
      return Module['asm']['dynCall_ii'].apply(null, arguments)
    });
    (Module['dynCall_iii'] = function () {
      return Module['asm']['dynCall_iii'].apply(null, arguments)
    });
    (Module['dynCall_iiii'] = function () {
      return Module['asm']['dynCall_iiii'].apply(null, arguments)
    });
    (Module['dynCall_iiiii'] = function () {
      return Module['asm']['dynCall_iiiii'].apply(null, arguments)
    });
    (Module['dynCall_iiiiii'] = function () {
      return Module['asm']['dynCall_iiiiii'].apply(null, arguments)
    });
    (Module['dynCall_iiiiiii'] = function () {
      return Module['asm']['dynCall_iiiiiii'].apply(null, arguments)
    });
    (Module['dynCall_iiiiiiiiii'] = function () {
      return Module['asm']['dynCall_iiiiiiiiii'].apply(null, arguments)
    });
    (Module['dynCall_iiiiiijii'] = function () {
      return Module['asm']['dynCall_iiiiiijii'].apply(null, arguments)
    });
    (Module['dynCall_ijj'] = function () {
      return Module['asm']['dynCall_ijj'].apply(null, arguments)
    });
    (Module['dynCall_ji'] = function () {
      return Module['asm']['dynCall_ji'].apply(null, arguments)
    });
    (Module['dynCall_v'] = function () {
      return Module['asm']['dynCall_v'].apply(null, arguments)
    });
    (Module['dynCall_vi'] = function () {
      return Module['asm']['dynCall_vi'].apply(null, arguments)
    });
    (Module['dynCall_vii'] = function () {
      return Module['asm']['dynCall_vii'].apply(null, arguments)
    });
    (Module['dynCall_viid'] = function () {
      return Module['asm']['dynCall_viid'].apply(null, arguments)
    });
    (Module['dynCall_viii'] = function () {
      return Module['asm']['dynCall_viii'].apply(null, arguments)
    });
    (Module['dynCall_viiii'] = function () {
      return Module['asm']['dynCall_viiii'].apply(null, arguments)
    });
    (Module['dynCall_viiiii'] = function () {
      return Module['asm']['dynCall_viiiii'].apply(null, arguments)
    });
    (Module['dynCall_viiiiii'] = function () {
      return Module['asm']['dynCall_viiiiii'].apply(null, arguments)
    });
    (Module['dynCall_viiiiiiiii'] = function () {
      return Module['asm']['dynCall_viiiiiiiii'].apply(null, arguments)
    });
    (Module['dynCall_viiiiiiiiii'] = function () {
      return Module['asm']['dynCall_viiiiiiiiii'].apply(null, arguments)
    });
    (Module['dynCall_vij'] = function () {
      return Module['asm']['dynCall_vij'].apply(null, arguments)
    });
    (Module['dynCall_viji'] = function () {
      return Module['asm']['dynCall_viji'].apply(null, arguments)
    });
    Module['asm'] = asm;
    function ExitStatus(status) {
      this.name = 'ExitStatus';
      this.message = 'Program terminated with exit(' + status + ')';
      this.status = status;
    }
    ExitStatus.prototype = new Error();
    ExitStatus.prototype.constructor = ExitStatus;
    var initialStackTop;
    dependenciesFulfilled = function runCaller() {
      if (!Module['calledRun']) run();
      if (!Module['calledRun']) dependenciesFulfilled = runCaller;
    };
    function run(args) {
      args = args || Module['arguments'];
      if (runDependencies > 0) {
        return
      }
      preRun();
      if (runDependencies > 0) return
      if (Module['calledRun']) return
      function doRun() {
        if (Module['calledRun']) return
        Module['calledRun'] = true;
        if (ABORT) return
        ensureInitRuntime();
        preMain();
        if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();
        postRun();
      }
      if (Module['setStatus']) {
        Module['setStatus']('Running...');
        setTimeout(function () {
          setTimeout(function () {
            Module['setStatus']('');
          }, 1);
          doRun();
        }, 1);
      } else {
        doRun();
      }
    }
    Module['run'] = run;
    function exit(status, implicit) {
      if (implicit && Module['noExitRuntime'] && status === 0) {
        return
      }
      if (Module['noExitRuntime']) ; else {
        ABORT = true;
        STACKTOP = initialStackTop;
        exitRuntime();
        if (Module['onExit']) Module['onExit'](status);
      }
      if (ENVIRONMENT_IS_NODE) {
        process['exit'](status);
      }
      Module['quit'](status, new ExitStatus(status));
    }
    Module['exit'] = exit;
    function abort(what) {
      if (Module['onAbort']) {
        Module['onAbort'](what);
      }
      if (what !== undefined) {
        Module.print(what);
        Module.printErr(what);
        what = JSON.stringify(what);
      } else {
        what = '';
      }
      ABORT = true;
      throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.'
    }
    Module['abort'] = abort;
    if (Module['preInit']) {
      if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
      while (Module['preInit'].length > 0) {
        Module['preInit'].pop()();
      }
    }
    Module['noExitRuntime'] = true;
    run();

    return unpack
  };
  //-------------------------------------------------------------

  /**
   * Returns a Promise containing the rar extractor for the given filename.
   * @private
   */
  function getExtractor(url) {
    return fetch(new Request(url))
      .then((response) => {
        if (response.ok) return response.arrayBuffer()
        else {
          throw new Error('404 Error: File not found.')
        }
      })
      .then((buffer) => unpackBridge.createExtractorFromData(buffer))
  }

  /**
   *  Returns a string representing the formatted contents of the given file.
   * @private
   */
  function extract({ resourceId, url }) {
    return new Promise(function (resolve, reject) {
      if (!unpackBridge) {
        throw new Error('unpackBridge not detected')
      }
      if (!unpack) {
        throw new Error('unpack not detected')
      }

      getExtractor(url).then(
        (extractor) => {
          // return extractor.extractAll();
          resolve(extractor.extractAll());
        },
        (err) => {
          reject(err);
        }
      );
    })
  }

  /**
   * Listen for messages sent to the worker.
   * @private
   */
  function handleMessage$1(data, postMessage) {
    if (data.type == 'init') {
      unpack = initunpack(data.buffer);
      unpack.onRuntimeInitialized = () => {
        postMessage({ type: 'WASM_LOADED' });
      };
    } else if (data.type == 'fetch') {
      extract(data).then(
        (unpacked) => {
          returnData(data, unpacked, postMessage);
        },
        (err) => {
          const result = {
            taskId: data.taskId,
            type: 'ERROR',
            resourceId: data.resourceId,
            url: data.url,
          };
          postMessage(result);
        }
      );
    } else if (data.type == 'unpack') {
      const { buffer } = data;

      if (!unpackBridge) {
        throw new Error('unpackBridge not detected')
      }
      if (!unpack) {
        throw new Error('unpack not detected')
      }

      const extractor = unpackBridge.createExtractorFromData(buffer);
      const unpacked = extractor.extractAll();
      returnData(data, unpacked, postMessage);
    }
  }

  function returnData(data, unpacked, postMessage) {
    const [state, list] = unpacked;
    if (state.state == 'FAIL') {
      const result = {
        taskId: data.taskId,
        type: 'ERROR',
        reason: state.reason,
        msg: state.msg,
        resourceId: data.resourceId,
        url: data.url,
      };
      postMessage(result);
      return
    }
    const result = {
      taskId: data.taskId,
      type: 'FINISHED',
      resourceId: data.resourceId,
      entries: {},
    };

    const transferables = [];
    if (list && list.files) {
      for (const file of list.files) {
        result.entries[file.fileHeader.name] = file.extract[1];
        transferables.push(file.extract[1].buffer);
      }
    }
    postMessage(result, transferables);
  }

  globalThis.onmessage = function (event) {
    handleMessage$1(event.data, self.postMessage);
  };

  /**
   * When the WASM runtime has been initialized on the unpack.js module, send a message indicating
   * that the library is ready.
   */
  // <!-- prettier-ignore-end -->

  let taskCounter = 0;
  class WorkerPool extends EventEmitter {
      poolSize = Math.max(1, SystemDesc.hardwareConcurrency - 1); // always leave one main thread code spare.
      workers = [];
      workerTaskCount = [];
      taskPromiseResolves = {};
      taskQueue = [];
      availableWorkers = [];
      terminationTimeouts = [];
      terminateWorkersWhenFree = true;
      terminationLatency = 2000;
      constructor(terminateWorkersWhenFree) {
          super();
          this.terminateWorkersWhenFree = terminateWorkersWhenFree;
      }
      addTask(taskData, transferables) {
          return this.addTaskCallback(() => {
              return {
                  taskData,
                  transferables,
              };
          });
      }
      addTaskCallback(dataFactory) {
          taskCounter++;
          const taskId = taskCounter;
          return new Promise(async (resolve) => {
              this.taskPromiseResolves[taskId] = resolve;
              // @ts-ignore
              this.taskQueue.push({
                  taskId,
                  dataFactory,
              });
              if (this.availableWorkers.length > 0) {
                  this.consumeTask();
              }
              else if (this.workers.length < this.poolSize) {
                  await this.addWorker();
                  this.consumeTask();
              }
          });
      }
      async consumeTask() {
          const workerId = this.availableWorkers.pop();
          if (this.workerTaskCount[workerId] > 0) {
              return;
          }
          if (this.taskQueue.length == 0) {
              // Multiple consumeTask were issued, and all tasks have been consumed.
              if (this.terminateWorkersWhenFree) {
                  this.scheduleWorkerTermination(workerId);
              }
              return;
          }
          if (this.terminationTimeouts[workerId] != -1) {
              clearTimeout(this.terminationTimeouts[workerId]);
              this.terminationTimeouts[workerId] = -1;
          }
          else if (!this.workers[workerId]) {
              // Workers get terminated, and we need to restart them.
              await this.allocWorker(workerId);
          }
          if (this.taskQueue.length == 0) {
              // Multiple consumeTask were issued, and all tasks have been consumed.
              if (this.terminateWorkersWhenFree) {
                  this.scheduleWorkerTermination(workerId);
              }
              return;
          }
          const task = this.taskQueue.pop();
          const { taskData, transferables } = task.dataFactory(workerId);
          // @ts-ignore
          taskData.taskId = task.taskId;
          this.workerTaskCount[workerId]++;
          // @ts-ignore
          this.workers[workerId].postMessage(taskData, transferables);
      }
      addWorker() {
          const workerId = this.workers.length;
          this.workers.push(null);
          return this.allocWorker(workerId);
      }
      allocWorker(workerId) {
          // Note: This function immediately adds the worker to the list
          // and then asynchronously creates it.
          return new Promise((resolve) => {
              this.constructWorker().then((worker) => {
                  // @ts-ignore
                  worker.onmessage = (event) => {
                      if (event.data.taskId in this.taskPromiseResolves) {
                          const taskId = event.data.taskId;
                          delete event.data.taskId;
                          this.taskPromiseResolves[taskId](event.data);
                          delete this.taskPromiseResolves[taskId];
                          this.workerTaskCount[workerId]--;
                          if (this.workerTaskCount[workerId] > 0) {
                              // Another task is already sent to this worker.
                              // Let it complete.
                              return;
                          }
                          // Check that we are not already on the available list.
                          // This happens if multiple tasks get issued to the same worker.
                          if (this.availableWorkers.indexOf(workerId) == -1) {
                              this.availableWorkers.push(workerId);
                          }
                          if (this.taskQueue.length > 0) {
                              this.consumeTask();
                          }
                          else {
                              if (this.terminateWorkersWhenFree) {
                                  this.scheduleWorkerTermination(workerId);
                              }
                          }
                      }
                      else if (event.data.eventName) {
                          event.data.workerId = workerId;
                          this.emit(event.data.eventName, event.data);
                      }
                  };
                  this.workers[workerId] = worker;
                  this.terminationTimeouts[workerId] = -1;
                  this.workerTaskCount[workerId] = 0;
                  this.availableWorkers.push(workerId);
                  resolve();
              });
          });
      }
      scheduleWorkerTermination(workerId) {
          // @ts-ignore
          this.terminationTimeouts[workerId] = setTimeout(() => {
              this.terminateWorker(workerId);
              this.terminationTimeouts[workerId] = -1;
          }, this.terminationLatency);
      }
      terminateWorker(workerId) {
          // @ts-ignore
          this.workers[workerId].terminate();
          this.workers[workerId] = null;
      }
      messageWorker(workerId, message) {
          taskCounter++;
          const taskId = taskCounter;
          // console.log('addTask:', taskId)
          return new Promise((resolve) => {
              this.taskPromiseResolves[taskId] = resolve;
              // @ts-ignore
              message.taskId = taskId;
              // @ts-ignore
              this.workers[workerId].postMessage(message);
          });
      }
  }

  function decodeBase64(base64, enableUnicode) {
      var binaryString = atob(base64);
      if (enableUnicode) {
          var binaryView = new Uint8Array(binaryString.length);
          for (var i = 0, n = binaryString.length; i < n; ++i) {
              binaryView[i] = binaryString.charCodeAt(i);
          }
          return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));
      }
      return binaryString;
  }

  function createURL(base64, sourcemapArg, enableUnicodeArg) {
      var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
      var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
      var source = decodeBase64(base64, enableUnicode);
      var start = source.indexOf('\n', 10) + 1;
      var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
      var blob = new Blob([body], { type: 'application/javascript' });
      return URL.createObjectURL(blob);
  }

  function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {
      var url;
      return function WorkerFactory(options) {
          url = url || createURL(base64, sourcemapArg, enableUnicodeArg);
          return new Worker(url, options);
      };
  }

  var WorkerFactory$2 = createBase64WorkerFactory('', null, false);
  /* eslint-enable */

  // @ts-ignore
  class ArchiveUnpackerMainThread {
      constructor() {
          const buffer = Buffer.from(unpackBase64Str, 'base64');
          // This is a hack to get WebAssembly.instatiate to work.
          // WebAssembly.instatiate in the ArchiveUnpacker-worker.js
          // file started silently failing. i found if I pre-compile
          // then it would then succeed. I beleive we have some
          // kind of race condition on NodeJS.
          WebAssembly.compile(buffer).then((res) => {
              console.log('WebAssembly.compile', res);
          });
          handleMessage$1({
              type: 'init',
              buffer,
          }, () => {
              // console.log(results)
          });
      }
      addTask(taskData, transerables) {
          return new Promise((resolve) => {
              handleMessage$1(taskData, (results) => {
                  resolve(results);
              });
          });
      }
      terminate() { }
  }
  class ArchiveUnpackerWorkerPool extends WorkerPool {
      uint8Array;
      constructor() {
          super(true);
          this.uint8Array = Uint8Array.from(atob(unpackBase64Str), (c) => c.charCodeAt(0));
      }
      constructWorker() {
          return new Promise((resolve) => {
              const worker = new WorkerFactory$2();
              worker.onmessage = (event) => {
                  if (event.data.type == 'WASM_LOADED')
                      resolve(worker);
              };
              worker.postMessage({
                  type: 'init',
                  buffer: this.uint8Array.buffer,
              });
          });
      }
  }
  let threadPool;
  // In NodeJS, we don't use the workers to parse data.
  if (!globalThis.navigator) {
      threadPool = new ArchiveUnpackerMainThread();
  }
  else {
      threadPool = new ArchiveUnpackerWorkerPool();
  }
  /**
   * Archive unpacker plugin.
   */
  class ArchiveUnpackerPlugin extends ResourceLoaderPlugin {
      /**
       * The type of file this plugin handles.
       * @return The type of file.
       */
      getType() {
          return 'archive';
      }
      /**
       * Loads an archive file, returning a promise that resolves to the JSON data value.
       * Note: using the resource loader to centralize data loading enables progress to be tracked and displayed
       * @param url - The url of the data to load.
       * @return - The promise value.
       */
      async loadFile(url) {
          // const start = performance.now()
          try {
              const response = await fetch(url);
              if (!response?.ok) {
                  // make the promise be rejected if we didn't get a 2xx response
                  throw new Error(`ArchiveUnpackerPlugin.loadFile: ${response.status} - ${response.statusText} : ${url}`);
              }
              const buffer = await response.arrayBuffer();
              if (!buffer) {
                  throw new Error('Buffer is null');
              }
              // const start = performance.now()
              const result = await this.extractFile(buffer);
              // console.log('ArchiveUnpackerPlugin.extractFile:' + url, performance.now() - start)
              return result;
          }
          catch (err) {
              // Network error failed. (Not the same as a 404.)
              throw err;
          }
      }
      async extractFile(buffer) {
          const promise = new Promise((resolve, reject) => {
              const resourceId = buffer.byteLength;
              threadPool
                  .addTask({
                  type: 'unpack',
                  resourceId,
                  buffer,
              }, [buffer])
                  .then((data) => {
                  // @ts-ignore
                  // if (data.type == 'FINISHED') resolve(data.entries)
                  // else resolve(null)
                  if (data.type === 'FINISHED') {
                      // const data = data
                      // const text = [
                      //   '==================== ArchiveUnpackerWorker.js ====================',
                      //   `Filename: ${data.resourceId}`,
                      //   '------------------------------------------------------',
                      // ];
                      // for(const file in data.entries) {
                      //   text.push(`${file}:${data.entries[file].byteLength}`);
                      // }
                      // console.log(text.join('\n'))
                      // @ts-ignore
                      resolve(data.entries);
                      // @ts-ignore
                  }
                  else if (data.type === 'ERROR') {
                      // @ts-ignore
                      reject(new Error(`Unable to open archive. The file may be corrupt: ${resourceId}`));
                  }
              });
          });
          return promise;
      }
  }

  /**
   * JSON loader plugin.
   */
  class JsonLoaderPlugin extends ResourceLoaderPlugin {
      /**
       * The type of file this plugin handles.
       * @return The type of file.
       */
      getType() {
          return 'json';
      }
      async loadFile(url) {
          try {
              const response = await fetch(url);
              if (!response?.ok) {
                  // make the promise be rejected if we didn't get a 2xx response
                  throw new Error(`JsonLoaderPlugin.loadFile: ${response.status} - ${response.statusText} : ${url}`);
              }
              const json = await response.json();
              return json;
          }
          catch (err) {
              // Network error failed. (Not the same as a 404.)
              throw err;
          }
      }
  }

  /**
   * Text loader plugin.
   */
  class TextLoaderPlugin extends ResourceLoaderPlugin {
      /**
       * The type of file this plugin handles.
       * @return The type of file.
       */
      getType() {
          return 'text';
      }
      async loadFile(url) {
          try {
              const response = await fetch(url);
              if (!response?.ok) {
                  // make the promise be rejected if we didn't get a 2xx response
                  throw new Error(`TextLoaderPlugin.loadFile: ${response.status} - ${response.statusText} : ${url}`);
              }
              const text = await response.text();
              return text;
          }
          catch (err) {
              // Network error failed. (Not the same as a 404.)
              throw err;
          }
      }
  }

  /**
   * Binary loader plugin.
   */
  class BinaryLoaderPlugin extends ResourceLoaderPlugin {
      /**
       * The type of file this plugin handles.
       * @return The type of file.
       */
      getType() {
          return 'binary';
      }
      async loadFile(url) {
          try {
              const response = await fetch(url);
              if (!response?.ok) {
                  // make the promise be rejected if we didn't get a 2xx response
                  throw new Error(`BinaryLoaderPlugin.loadFile: ${response.status} - ${response.statusText} : ${url}`);
              }
              const arrayBuffer = await response.arrayBuffer();
              return arrayBuffer;
          }
          catch (err) {
              // Network error failed. (Not the same as a 404.)
              throw err;
          }
      }
  }

  /* eslint-disable require-jsdoc */
  // Note: browsers have a maximum number of resources they can load at once
  // before they start throwing errors.
  // The error from Chrome is: Failed to load resource: net::ERR_INSUFFICIENT_RESOURCES
  // We limit the number of concurrent resource loads here
  // by pushing loads into a queue.
  const MAX_LOAD_COUNT = 1000;
  /**
   * Class for delegating resource loading, enabling an abstraction of a cloud file system to be implemented.
   *
   * The resource loader can be used to load data, where it provides central tracking of loading progress and functionality to load various file types, including compressed archives.
   * The plugins script must be loaded along with the engine
   *
   * ```html
   *  <script crossorigin src="libs/zea-engine/dist/plugins.umd.js"></script>
   * ```
   *
   * To load a 'text' file.
   * ```javascript
   *   resourceLoader.loadFile('text', url).then((txt) =>{
   *      console.log(txt)
   *   })
   * ```
   *
   * To load a 'JSON' file.
   * ```javascript
   *   resourceLoader.loadFile('json', url).then((txt) =>{
   *      console.log(json)
   *   })
   * ```
   *
   * To load a 'binary' file.
   * ```javascript
   *   resourceLoader.loadFile('binary', url).then((arrayBuffer) =>{
   *      console.log(arrayBuffer.length)
   *   })
   * ```
   *
   * To load an 'archive' file that is a compressed archive containing multiple sub-files.
   * ```javascript
   *   resourceLoader.loadFile('archive', url).then((entries) =>{
   *      console.log(entries)
   *   })
   * ```
   * **Events**
   * * **loaded:** emitted when a file has finished loading
   * * **progressIncremented:** emitted when a loading of processing task has been incremented
   * * **allResourcesLoaded:** emitted when all outstanding resources are loaded. This event can be used to signal the completion of load.
   */
  class ResourceLoader extends EventEmitter {
      totalWork = 0;
      doneWork = 0;
      baseUrl = '';
      plugins = {};
      systemUrls = {};
      // Common resources are used by systems such at the renderer and VR controllers.
      // Any asset that will probably be used my multiple different independent objects
      // should be loaded here. (For now, it is being used to load VR Controller assets.)
      commonResources = {};
      loadCount = 0;
      queue = [];
      cache;
      /**
       * Create a resource loader.
       */
      constructor() {
          super();
          const baseUrl = 'https://storage.googleapis.com/zea-engine-resources';
          this.systemUrls['ZeaEngine/Vive.vla'] = baseUrl + '/Vive.vla';
          this.systemUrls['ZeaEngine/Oculus.vla'] = baseUrl + '/Oculus.vla';
      }
      // /////////////////////////////////////////////////
      // Register plugins.
      registerPlugin(plugin) {
          this.plugins[plugin.getType()] = plugin;
      }
      /**
       * Loads a file, returning a promise that resolves to the JSON data value.
       * Note: using the resource loader to centralize data loading enables progress to be tracked and displayed
       * @param url - The url of the data to load.
       * @return - The promise value.
       */
      async loadFile(type, url, incrementWorkload = true) {
          const plugin = this.plugins[type];
          if (!plugin) {
              throw new Error(`There's no plugin registered for the type of file "${type}". Did you add the plugins script? See: https://docs.zea.live/zea-engine/#/adding-default-plugins`);
          }
          if (incrementWorkload)
              this.incrementWorkload();
          if (this.cache) {
              const result = await this.cache.get(url);
              if (result) {
                  if (incrementWorkload)
                      this.incrementWorkDone();
                  return result;
              }
          }
          if (this.loadCount < MAX_LOAD_COUNT) {
              this.loadCount++;
              try {
                  const loadFilePromise = plugin.loadFile(url);
                  loadFilePromise.then((result) => {
                      if (this.cache)
                          this.cache.set(url, result);
                      this.loadCount--;
                      if (incrementWorkload)
                          this.incrementWorkDone();
                      this.emit('loaded', { url });
                      while (this.loadCount < MAX_LOAD_COUNT && this.queue.length > 0) {
                          const callback = this.queue.pop();
                          callback();
                      }
                  }, () => {
                      if (incrementWorkload)
                          this.incrementWorkDone();
                  });
                  return loadFilePromise;
              }
              catch (e) {
                  // Error
                  if (incrementWorkload)
                      this.incrementWorkDone();
                  throw e;
              }
          }
          else {
              const promise = new Promise((resolve, reject) => {
                  this.queue.push(() => {
                      this.loadCount++;
                      const loadFilePromise = plugin.loadFile(url);
                      loadFilePromise.then((data) => {
                          this.loadCount--;
                          if (incrementWorkload)
                              this.incrementWorkDone();
                          this.emit('loaded', { url });
                          while (this.loadCount < MAX_LOAD_COUNT && this.queue.length > 0) {
                              const callback = this.queue.pop();
                              callback();
                          }
                          resolve(data);
                      }, (e) => {
                          // Error
                          if (incrementWorkload)
                              this.incrementWorkDone();
                          reject(e);
                      });
                  });
              });
              return promise;
          }
      }
      /**
       * Returns a previously stored common resource. Typically this would be a VR asset.
       *
       * @param resourceId - The resourceId value.
       * @return - The common resource if it exists
       */
      getCommonResource(resourceId) {
          return this.commonResources[resourceId];
      }
      /**
       * Saves a common resource for reuse by other tools. Typically this would be a VR asset.
       *
       * @param resourceId - The resourceId value.
       * @param resource - The common resource to store
       */
      setCommonResource(resourceId, resource) {
          this.commonResources[resourceId] = resource;
      }
      // /////////////////////////////////////////////////
      // Work
      /**
       * Resets the progress counters back to zero. This must be done if a new asset needs to be
       * loaded after some preivous asset has already been loaded and a new load sequence is starting
       *
       * @param amount - The amount value.
       */
      resetProgress() {
          this.totalWork = 0;
          this.doneWork = 0;
      }
      /**
       * Increments the amount of work to be done causing a 'progressIncremented' event to be emitted.
       *
       * The progress bar is based on how much work there is to do Vs how much work has been done.
       * Before loading starts, we don't know how much work is coming because we don't know how many files
       * will be loaded, and how big those files will be. Big files are decompressed as a steam, which
       * involves many small increments.
       * Add we laod files, the work load is incrementened, and then as the work is done, we increment
       * the work done.
       * The ratio between work load and work done determines the percentage of load.
       *
       * @param amount - The amount value.
       */
      incrementWorkload(amount = 1) {
          this.totalWork += amount;
          const percent = (this.doneWork / this.totalWork) * 100;
          this.emit('progressIncremented', new ProgressEvent(percent));
      }
      /**
       * Increments the amount of work done causing a 'progressIncremented' event to be emitted.
       * If 5 items of work have been added using #incrementWorkload, and subsequently 3 items have
       * been completed and #incrementWorkDone called. The progress will be at 3/5, or 60%
       *
       * @param amount - The amount value.
       */
      incrementWorkDone(amount = 1) {
          this.doneWork += amount;
          const percent = (this.doneWork / this.totalWork) * 100;
          this.emit('progressIncremented', new ProgressEvent(percent));
          if (this.doneWork > this.totalWork) {
              console.warn('Mismatch between work loaded and work done.');
          }
      }
  }
  const resourceLoader = new ResourceLoader();
  const archiveUnpackerPlugin = new ArchiveUnpackerPlugin();
  resourceLoader.registerPlugin(archiveUnpackerPlugin);
  const jsonLoaderPlugin = new JsonLoaderPlugin();
  resourceLoader.registerPlugin(jsonLoaderPlugin);
  const textLoaderPlugin = new TextLoaderPlugin();
  resourceLoader.registerPlugin(textLoaderPlugin);
  const binaryLoaderPlugin = new BinaryLoaderPlugin();
  resourceLoader.registerPlugin(binaryLoaderPlugin);

  class IndexDBCache {
      name;
      objStoreName;
      version;
      db;
      constructor(name, objStoreName, version) {
          this.name = name;
          this.objStoreName = objStoreName;
          this.version = version;
      }
      async init() {
          return new Promise((resolve) => {
              const request = globalThis.indexedDB.open(this.name, this.version);
              request.onerror = () => {
                  console.error('IndexedDB Failed');
              };
              request.onsuccess = () => {
                  this.db = request.result;
                  resolve();
              };
              request.onupgradeneeded = () => {
                  this.db = request.result;
                  this.db.createObjectStore(this.objStoreName, {
                      keyPath: 'key',
                  });
              };
          });
      }
      /**
       * Gets a value from the Cache.
       * @param key the unique key to use. This is typically the URL
       * @returns the cached value, or null if the value is not in the Cache
       */
      get(key) {
          return new Promise((resolve, reject) => {
              const tx = this.db.transaction(this.objStoreName, 'readonly');
              const store = tx.objectStore(this.objStoreName);
              const request = store.get(key);
              request.onerror = (event) => {
                  reject(event);
              };
              request.onsuccess = () => {
                  if (request.result)
                      resolve(request.result.value);
                  else
                      resolve(null);
              };
          });
      }
      /**
       * Stores a value in the Cache.
       * @param key the unique key to use. This is typically the URL
       * @param value this can be any object or value.
       */
      set(key, value) {
          return new Promise((resolve, reject) => {
              const tx = this.db.transaction(this.objStoreName, 'readwrite');
              const store = tx.objectStore(this.objStoreName);
              const request = store.put({ key, value });
              request.onsuccess = () => {
                  resolve();
              };
              request.onerror = (event) => {
                  reject(event);
              };
          });
      }
  }

  /**
   * Class designed to store version data. Widely used in the zea engine for backwards compatibility.
   */
  class Version {
      major = 0;
      minor = 0;
      patch = 0;
      branch = '';
      /**
       * Creates a version.
       * The version string should have the following structure:
       * major, minor and patch separated by a dot(`.`) and parts separated by a dash(`-`).
       *
       * @param arg - The version string value, or an array of version numbers.
       */
      constructor(arg) {
          if (typeof arg == 'string') {
              const parts = arg.split('-');
              const numbers = parts[0].split('.');
              this.major = parseInt(numbers[0]);
              this.minor = numbers.length > 1 ? parseInt(numbers[1]) : 0;
              this.patch = numbers.length > 2 ? parseInt(numbers[2]) : 0;
              if (parts.length == 2)
                  this.branch = parts[1];
          }
          else if (Array.isArray(arg)) {
              const numbers = arg;
              this.major = numbers[0];
              this.minor = numbers.length > 1 ? numbers[1] : 0;
              this.patch = numbers.length > 2 ? numbers[2] : 0;
          }
      }
      /**
       * Compare a version object against a version numbers array.
       *
       * @param numbers - An array containing 3 version numbers. [Major, Minor, Patch]
       * @return - return positive: v1 > v2, zero:v1 == v2, negative: v1 < v2
       */
      compare(numbers) {
          // https://stackoverflow.com/questions/6832596/how-to-compare-software-version-number-using-js-only-number
          // 2nd answer.
          const v1 = [this.major, this.minor, this.patch];
          for (let i = 0; i < 3; i++) {
              if (v1[i] !== numbers[i])
                  return v1[i] - numbers[i];
          }
          return 0;
      }
      /**
       * Converts the Version class instance back to an array for comparisons with other version class instances.
       * e.g.
       * ```
       *   const version1 = new Version([1, 2, 3])
       *   const version2 = new Version([1, 2, 4])
       *   const res = version1.compare(version2.asArray())
       * ```
       * @returns an array containing the major, minor and patch version numbers.
       */
      asArray() {
          return [this.major, this.minor, this.patch];
      }
      toString() {
          return `v${this.major}.${this.minor}.${this.patch}` + (this.branch != '' ? `-${this.branch}` : '');
      }
  }

  /* eslint-disable no-unused-vars */
  /**
   * Reads binary data in a specific encoding. Used in loading binary data such as zcad files.
   */
  class BinReader {
      __data;
      __byteOffset;
      __dataView;
      __isMobileDevice;
      utf8decoder;
      /**
       * Create a bin reader.
       *
       * @param data - The data buffer.
       * @param byteOffset - The byte offset value to start reading the buffer.
       * @param isMobileDevice - The isMobileDevice value.
       */
      constructor(data, byteOffset = 0, isMobileDevice = true) {
          this.__data = data;
          this.__byteOffset = byteOffset;
          this.__dataView = new DataView(this.__data);
          this.__isMobileDevice = isMobileDevice;
          this.utf8decoder = new TextDecoder();
      }
      /**
       * Returns state of whether or not the `BinReader` object was instantiated from a mobile device.
       *
       * @return - Returns true is a mobile device is detected.
       */
      get isMobileDevice() {
          return this.__isMobileDevice;
      }
      /**
       * Returns the data buffer we're reading from.
       *
       * @return - The data buffer we are reading from,
       */
      get data() {
          return this.__data;
      }
      /**
       * Returns the length of the buffer.
       *
       * @return - The total length of the buffer
       */
      get byteLength() {
          return this.__dataView.byteLength;
      }
      /**
       * Returns remaining length of the buffer to read.
       *
       * @return - The remaining length of the buffer to read.
       */
      get remainingByteLength() {
          return this.__dataView.byteLength - this.__byteOffset;
      }
      /**
       * Returns current byte offset in the buffer.
       * @return - The current offset in the binary buffer
       */
      pos() {
          return this.__byteOffset;
      }
      /**
       * Sets the byte offset value.
       * @param byteOffset - The byteOffset param.
       */
      seek(byteOffset) {
          this.__byteOffset = byteOffset;
      }
      /**
       * Adds offset bytes to current offset value.
       *
       * @param byteOffset - The byte Offset amount.
       */
      advance(byteOffset) {
          this.__byteOffset += byteOffset;
      }
      /**
       * Returns the unsigned Uint8 value at current byte offset position,
       * and adds one byte to the offset.
       *
       * @return - The return value.
       */
      loadUInt8() {
          const result = this.__dataView.getUint8(this.__byteOffset);
          this.__byteOffset += 1;
          return result;
      }
      /**
       * Returns the unsigned Uint16 value at current byte offset position,
       * and adds two bytes to the offset.
       *
       * @return - The return value.
       */
      loadUInt16() {
          const result = this.__dataView.getUint16(this.__byteOffset, true);
          this.__byteOffset += 2;
          return result;
      }
      /**
       * Returns the unsigned Uint32 value at current byte offset position,
       * and adds four bytes to the offset.
       *
       * @return - The return value.
       */
      loadUInt32() {
          const result = this.__dataView.getUint32(this.__byteOffset, true);
          this.__byteOffset += 4;
          return result;
      }
      /**
       * Returns the signed Int32 value at current byte offset position,
       * and adds four bytes to the offset.
       *
       * @return - The return value.
       */
      loadSInt32() {
          const result = this.__dataView.getInt32(this.__byteOffset, true);
          this.__byteOffset += 4;
          return result;
      }
      /**
       * Returns the Float16 value at current byte offset position,
       * and adds four bytes to the offset.
       *
       * @return - The return value.
       */
      loadFloat16() {
          const uint16 = this.loadUInt16();
          return MathFunctions.decode16BitFloat(uint16);
      }
      /**
       * Returns the Float16 value at current byte offset position,
       * and adds two bytes to the offset.
       *
       * @return - The return value.
       */
      loadUFloat16() {
          const result = this.loadFloat16();
          if (result < 0.0) {
              return 2048.0 - result; // Note: subtract a negative number to add it.
          }
          else {
              return result;
          }
      }
      /**
       * Returns a single signed Float16 value at current byte offset position from 2 unsigned Int8 values,
       * and adds two bytes to the offset.
       *
       * @return - The return value.
       */
      loadFloat16From2xUInt8() {
          throw Error('loadFloat16From2xUInt8 not implemented!');
          // const result = this.__dataView.getFloat16(this.__byteOffset, true)
          // const uint8s = this.loadUInt8Array(2);
          // return Math.decode16BitFloat(uint8s);
          // this.__byteOffset += 2
          // return result
      }
      /**
       * Loads and returns a single Signed integer value from 2 Unsigned Float16 values.
       * @return - The return value.
       */
      loadUInt32From2xUFloat16() {
          const partA = this.loadUFloat16();
          const partB = this.loadUFloat16();
          return partA + partB * 4096;
      }
      /**
       * Loads and returns a single Signed integer value from 2 signed Float16 values.
       * @return - The return value.
       */
      loadSInt32From2xFloat16() {
          const partA = this.loadFloat16();
          const partB = this.loadFloat16();
          return partA + partB * 2048;
      }
      /**
       * Returns the Float32 value at current byte offset position,
       * and adds four bytes to the offset.
       *
       * @return - The return value.
       */
      loadFloat32() {
          const result = this.__dataView.getFloat32(this.__byteOffset, true);
          this.__byteOffset += 4;
          return result;
      }
      /**
       * Reads buffer and return a signed Int8 array with the specified size,
       * starting from current byte offset.
       * Byte offset is increased by the specified byte size.
       *
       * @param size - The size param.
       * @param clone - The clone param.
       * @return - The return value.
       */
      loadInt8Array(size, clone = true) {
          if (size == undefined)
              size = this.loadUInt32();
          let result;
          if (clone) {
              result = new Int8Array(this.__data.slice(this.__byteOffset, this.__byteOffset + size));
              if (result.length != size)
                  console.log('broken');
          }
          else {
              result = new Int8Array(this.__data, this.__byteOffset, size);
          }
          this.__byteOffset += size;
          return result;
      }
      /**
       * Reads buffer and return an unsigned Int8 array with the specified size,
       * starting from current byte offset.
       * Byte offset is increased by the specified byte size.
       *
       * @param size - The size param.
       * @param clone - The clone param.
       * @return - The return value.
       */
      loadUInt8Array(size, clone = true) {
          if (size == undefined)
              size = this.loadUInt32();
          let result;
          if (clone) {
              result = new Uint8Array(this.__data.slice(this.__byteOffset, this.__byteOffset + size));
              if (result.length != size)
                  console.log('broken');
          }
          else {
              result = new Uint8Array(this.__data, this.__byteOffset, size);
          }
          this.__byteOffset += size;
          return result;
      }
      /**
       * Reads buffer and return an unsigned Int16 array with the specified size,
       * starting from current byte offset.
       * Byte offset is increased by the specified byte size x 2.
       *
       * @param size - The size param.
       * @param clone - The clone param.
       * @return - The return value.
       */
      loadUInt16Array(size, clone = true) {
          if (size == undefined)
              size = this.loadUInt32();
          if (size == 0)
              return new Uint16Array();
          this.readPad(2);
          let result;
          if (this.__isMobileDevice) {
              result = new Uint16Array(size);
              for (let i = 0; i < size; i++) {
                  result[i] = this.__dataView.getUint16(this.__byteOffset, true);
                  this.__byteOffset += 2;
              }
          }
          else {
              if (clone) {
                  result = new Uint16Array(this.__data.slice(this.__byteOffset, this.__byteOffset + size * 2));
                  if (result.length != size)
                      console.log('broken');
              }
              else {
                  result = new Uint16Array(this.__data, this.__byteOffset, size);
              }
              this.__byteOffset += size * 2;
          }
          return result;
      }
      /**
       * Reads buffer and return an unsigned Int32 array with the specified size,
       * starting from current byte offset.
       * Byte offset is increased by the specified byte size x 4.
       *
       * @param size - The size param.
       * @param clone - The clone param.
       * @return - The return value.
       */
      loadUInt32Array(size, clone = true) {
          if (size == undefined)
              size = this.loadUInt32();
          if (size == 0)
              return new Uint32Array();
          this.readPad(4);
          let result;
          if (this.__isMobileDevice) {
              result = new Uint32Array(size);
              for (let i = 0; i < size; i++) {
                  result[i] = this.__dataView.getUint32(this.__byteOffset, true);
                  this.__byteOffset += 4;
              }
          }
          else {
              if (clone) {
                  result = new Uint32Array(this.__data.slice(this.__byteOffset, this.__byteOffset + size * 4));
                  if (result.length != size)
                      console.log('broken');
              }
              else {
                  result = new Uint32Array(this.__data, this.__byteOffset, size);
              }
              this.__byteOffset += size * 4;
          }
          return result;
      }
      /**
       * Reads buffer and return a Float32 array with the specified size,
       * starting from current byte offset.
       * Byte offset is increased by the specified byte size x 4.
       *
       * @param size - The size param.
       * @param clone - The clone param.
       * @return - The return value.
       */
      loadFloat32Array(size, clone = true) {
          if (size == undefined)
              size = this.loadUInt32();
          if (size == 0)
              return new Float32Array();
          this.readPad(4);
          let result;
          if (this.__isMobileDevice) {
              result = new Float32Array(size);
              for (let i = 0; i < size; i++) {
                  result[i] = this.__dataView.getFloat32(this.__byteOffset, true);
                  this.__byteOffset += 4;
              }
          }
          else {
              if (clone) {
                  result = new Float32Array(this.__data.slice(this.__byteOffset, this.__byteOffset + size * 4));
              }
              else {
                  result = new Float32Array(this.__data, this.__byteOffset, size);
              }
              this.__byteOffset += size * 4;
          }
          return result;
      }
      /**
       * Returns next string.
       * First looks for the string length description in the next four bytes in the buffer(Starting from byte offset).
       *
       * @return - The return value.
       */
      loadStr() {
          const numChars = this.loadUInt32();
          const chars = new Uint8Array(this.__data, this.__byteOffset, numChars);
          this.__byteOffset += numChars;
          return this.utf8decoder.decode(chars);
      }
      /**
       * Returns an array of strings.
       * First reading the size of the array then reading each string.
       *
       * @return - The return value.
       */
      loadStrArray() {
          const size = this.loadUInt32();
          const result = [];
          for (let i = 0; i < size; i++) {
              result[i] = this.loadStr();
          }
          return result;
      }
      /**
       * Creates and returns a `Vec2` object with the next two signed Int32 values in the buffer.
       *
       * @return - Returns a Vec2.
       */
      loadSInt32Vec2() {
          const x = this.loadSInt32();
          const y = this.loadSInt32();
          return new Vec2(x, y);
      }
      /**
       * Creates and returns a `Vec2` object with the next two unsigned Int32 values in the buffer.
       * @return - Returns a Vec2.
       */
      loadUInt32Vec2() {
          const x = this.loadUInt32();
          const y = this.loadUInt32();
          return new Vec2(x, y);
      }
      /**
       * Creates and returns a `Vec2` object with the next two Float16 values in the buffer.
       *
       * @return - Returns a Vec2.
       */
      loadFloat16Vec2() {
          const x = this.loadFloat16();
          const y = this.loadFloat16();
          return new Vec2(x, y);
      }
      /**
       * Creates and returns a `Vec2` object with the next two Float32 values in the buffer.
       * @return - Returns a Vec2.
       */
      loadFloat32Vec2() {
          const x = this.loadFloat32();
          const y = this.loadFloat32();
          return new Vec2(x, y);
      }
      /**
       * Creates and returns a `Vec3` object with the next three Float16 values in the buffer.
       *
       * @return - Returns a Vec3.
       */
      loadFloat16Vec3() {
          const x = this.loadFloat16();
          const y = this.loadFloat16();
          const z = this.loadFloat16();
          return new Vec3(x, y, z);
      }
      /**
       * Creates and returns a `Vec3` object with the next three Float32 values in the buffer.
       *
       * @return - Returns a Vec3.
       */
      loadFloat32Vec3() {
          const x = this.loadFloat32();
          const y = this.loadFloat32();
          const z = this.loadFloat32();
          return new Vec3(x, y, z);
      }
      /**
       * Creates and returns a `Quat` object with the next four Float16 values in the buffer.
       *
       * @return - Returns a Quat.
       */
      loadFloat16Quat() {
          const x = this.loadFloat16();
          const y = this.loadFloat16();
          const z = this.loadFloat16();
          const w = this.loadFloat16();
          return new Quat(x, y, z, w);
      }
      /**
       * Creates and returns a `Quat` object with the next four Float32 values in the buffer.
       * @return - Returns a Quat.
       */
      loadFloat32Quat() {
          const x = this.loadFloat32();
          const y = this.loadFloat32();
          const z = this.loadFloat32();
          const w = this.loadFloat32();
          return new Quat(x, y, z, w);
      }
      /**
       * Creates and returns a `Color` object with the next three Float32 values in the buffer.
       *
       * @return - Returns a Color.
       */
      loadRGBFloat32Color() {
          const r = this.loadFloat32();
          const g = this.loadFloat32();
          const b = this.loadFloat32();
          return new Color(r, g, b);
      }
      /**
       * Creates and returns a RGBA `Color` object with the next four Float32 values in the buffer.
       * @return - Returns a Color.
       */
      loadRGBAFloat32Color() {
          const r = this.loadFloat32();
          const g = this.loadFloat32();
          const b = this.loadFloat32();
          const a = this.loadFloat32();
          return new Color(r, g, b, a);
      }
      /**
       * Creates and returns a `Color` object with the next three unsigned Int8 values in the buffer.
       * @return - Returns a Color.
       */
      loadRGBUInt8Color() {
          const r = this.loadUInt8();
          const g = this.loadUInt8();
          const b = this.loadUInt8();
          return new Color(r / 255, g / 255, b / 255);
      }
      /**
       * Creates and returns a RGBA `Color` object with the next four unsigned Int8 values in the buffer.
       * @return - Returns a Color.
       */
      loadRGBAUInt8Color() {
          const r = this.loadUInt8();
          const g = this.loadUInt8();
          const b = this.loadUInt8();
          const a = this.loadUInt8();
          return new Color(r / 255, g / 255, b / 255, a / 255);
      }
      /**
       * Creates and returns a `Box2` object with the next four Float32 values in the buffer.
       * Next four because it creates two Vec2.
       *
       * @return - Returns a Box2.
       */
      loadBox2() {
          return new Box2(this.loadFloat32Vec2(), this.loadFloat32Vec2());
      }
      /**
       * Creates and returns a `Box2` object with the next six Float32 values in the buffer.
       * Next four because it creates two Vec3.
       *
       * @return - Returns a Box3.
       */
      loadBox3() {
          return new Box3(this.loadFloat32Vec3(), this.loadFloat32Vec3());
      }
      /**
       * Given a stridee value, advance the pointer to the end of the current stride.
       * @param stride - The stride param.
       */
      readPad(stride) {
          const pad = this.__byteOffset % stride;
          if (pad != 0)
              this.__byteOffset += stride - pad;
      }
  }

  /**
   * Writes `TypedArray` types in binary using a specific encoding.
   */
  class BinWriter {
      __data;
      __byteOffset;
      __reserved;
      __dataView;
      /**
       * Create a bin writer.
       * @param dataSize - The dataSize value.
       */
      constructor(dataSize = 0) {
          this.__data = new ArrayBuffer(dataSize);
          this.__byteOffset = 0;
          this.__reserved = dataSize;
          this.__dataView = new DataView(this.__data);
      }
      /**
       * Returns the byte offset position.
       *
       * @return - The return value.
       */
      pos() {
          return this.__byteOffset;
      }
      /**
       * Sets byte offset value.
       *
       * @param byteOffset - The byteOffset value.
       */
      seek(byteOffset) {
          this.__byteOffset = byteOffset;
      }
      /**
       * The seekEnd method.
       */
      seekEnd() {
          this.__byteOffset = this.__reserved;
      }
      /**
       * Returns written buffer data to current point.
       *
       * @return - Returns an array buffer.
       */
      getBuffer() {
          if (this.__data.byteLength == this.__byteOffset) {
              return this.__data;
          }
          else {
              const unit8Array = new Uint8Array(this.__data);
              return unit8Array.slice(0, this.__byteOffset).buffer;
          }
      }
      /**
       * The __grow method.
       * @private
       */
      __grow() {
          const newSize = (this.__reserved > 0 ? this.__reserved : 1) * 2;
          const data = new ArrayBuffer(newSize);
          const unit8Array = new Uint8Array(data);
          const old_unit8Array = new Uint8Array(this.__data);
          unit8Array.set(old_unit8Array);
          this.__data = data;
          this.__dataView = new DataView(this.__data);
          this.__reserved = newSize;
      }
      /**
       * The __reserve method.
       * @param offset - The offset value.
       * @private
       */
      __reserve(offset) {
          if (this.__byteOffset + offset > this.__reserved) {
              this.__grow();
          }
      }
      /**
       * The __offset method.
       * @param byteCount - The byteCount value.
       * @private
       */
      __offset(byteCount) {
          this.__byteOffset += byteCount;
          if (this.__byteOffset > this.__reserved) {
              this.__grow();
          }
      }
      /**
       * Writes an unsigned Int8 value in current byte offset.
       *
       * @param value - The value param.
       */
      writeUInt8(value) {
          this.__reserve(1);
          this.__dataView.setUint8(this.__byteOffset, value);
          this.__offset(1);
      }
      /**
       * Writes an unsigned Int16 value in current byte offset.
       * @param value - The value param.
       */
      writeUInt16(value) {
          this.__reserve(2);
          this.__dataView.setUint16(this.__byteOffset, value, true);
          this.__offset(2);
      }
      /**
       * Writes an unsigned Int32 value in current byte offset.
       * @param value - The value param.
       */
      writeUInt32(value) {
          this.__reserve(4);
          this.__dataView.setUint32(this.__byteOffset, value, true);
          this.__offset(4);
      }
      /**
       * Writes a signed Int32 value in current byte offset.
       * @param value - The value param.
       */
      writeSInt32(value) {
          this.__reserve(4);
          this.__dataView.setInt32(this.__byteOffset, value, true);
          this.__offset(4);
      }
      /**
       * Writes a Float16 value in current byte offset.
       *
       * @param value - The value param.
       */
      writeFloat16(value) {
          const uint16 = MathFunctions.encode16BitFloat(value);
          this.writeUInt16(uint16);
      }
      /**
       * Writes a Float32 value in current byte offset.
       *
       * @param value - The value param.
       */
      writeFloat32(value) {
          this.__reserve(4);
          this.__dataView.setFloat32(this.__byteOffset, value, true);
          this.__offset(4);
      }
      /**
       * Writes an unsigned Int8 array value from current byte offset.
       *
       * @param value - The value param.
       * @param writeSize - The writeSize value.
       */
      writeUInt8Array(value, writeSize = true) {
          const count = value.length ? value.length : value.length;
          this.__reserve(count + (writeSize ? 4 : 0));
          if (writeSize)
              this.writeUInt32(count);
          for (let i = 0; i < count; i++) {
              this.writeUInt8(value[i]);
          }
      }
      /**
       * Writes an unsigned Int16 array value from current byte offset.
       *
       * @param value - The value param.
       * @param writeSize - The writeSize value.
       */
      writeUInt16Array(value, writeSize = true) {
          const count = value.length ? value.length : value.length;
          this.__reserve(count * 2 + (writeSize ? 4 : 0));
          if (writeSize)
              this.writeUInt32(count);
          for (let i = 0; i < count; i++) {
              this.writeUInt16(value[i]);
          }
      }
      /**
       * Writes an unsigned Int32 array value from current byte offset.
       *
       * @param value - The value param.
       * @param writeSize - The writeSize value.
       */
      writeUInt32Array(value, writeSize = true) {
          const count = value.length ? value.length : value.length;
          this.__reserve(count * 4 + (writeSize ? 4 : 0));
          if (writeSize)
              this.writeUInt32(count);
          for (let i = 0; i < count; i++) {
              this.writeUInt32(value[i]);
          }
      }
      /**
       * Writes a Float32 array value from current byte offset.
       *
       * @param value - The value param.
       * @param writeSize - The writeSize value.
       */
      writeFloat32Array(value, writeSize = true) {
          const count = value.length ? value.length : value.length;
          this.__reserve(count * 4 + (writeSize ? 4 : 0));
          if (writeSize)
              this.writeUInt32(count);
          for (let i = 0; i < count; i++) {
              this.writeFloat32(value[i]);
          }
      }
      /**
       * Writes string value in current position, first writing an unsigned Int32 describing its length, then adding the string in Float32 values.
       *
       * @param str - The str value.
       * @param writeSize - The writeSize value.
       */
      writeStr(str, writeSize = true) {
          const count = str.length;
          this.__reserve(count * 4 + (writeSize ? 4 : 0));
          if (writeSize)
              this.writeUInt32(count);
          for (let i = 0; i < count; i++) {
              this.writeFloat32(str.charCodeAt(i));
          }
      }
      /**
       * Writes a `Vec2` in the buffer using signed Int32 values(In `x,y` order).
       * @param value - The Vec2 to write.
       */
      writeSInt32Vec2(value) {
          this.writeSInt32(value.x);
          this.writeSInt32(value.y);
      }
      /**
       * Writes a `Vec2` in the buffer using unsigned Int32 values(In `x,y` order).
       *
       * @param value - The Vec2 to write.
       */
      writeUInt32Vec2(value) {
          this.writeUInt32(value.x);
          this.writeUInt32(value.y);
      }
      /**
       * Writes a `Vec2` in the buffer using Float16 values(In `x,y` order).
       * @param value - The Vec2 to write.
       */
      writeFloat16Vec2(value) {
          this.writeFloat16(value.x);
          this.writeFloat16(value.y);
      }
      /**
       * Writes a `Vec2` in the buffer using Float32 values(In `x,y` order).
       *
       * @param value - The Vec2 to write.
       */
      writeFloat32Vec2(value) {
          this.writeFloat32(value.x);
          this.writeFloat32(value.y);
      }
      /**
       * Writes a `Vec3` in the buffer using Float16 values(In `x,y,z` order).
       *
       * @param value - The Vec3 to write.
       */
      writeFloat16Vec3(value) {
          this.writeFloat16(value.x);
          this.writeFloat16(value.y);
          this.writeFloat16(value.z);
      }
      /**
       * Writes a `Vec3` in the buffer using Float32 values(In `x,y,z` order).
       * @param value - The Vec3 to write.
       */
      writeFloat32Vec3(value) {
          this.writeFloat32(value.x);
          this.writeFloat32(value.y);
          this.writeFloat32(value.z);
      }
      /**
       * Writes a `Quat` in the buffer using Float16 values(In `x,y,z,w` order).
       *
       * @param value - The Quat to write.
       */
      writeFloat16Quat(value) {
          this.writeFloat16(value.x);
          this.writeFloat16(value.y);
          this.writeFloat16(value.z);
          this.writeFloat16(value.w);
      }
      /**
       * Writes a `Quat` in the buffer using Float32 values(In `x,y,z,w` order).
       *
       * @param value - The Quat to write.
       */
      writeFloat32Quat(value) {
          this.writeFloat32(value.x);
          this.writeFloat32(value.y);
          this.writeFloat32(value.z);
          this.writeFloat32(value.w);
      }
      /**
       * Writes a RGB `Color` in the buffer using Float32 values(In `r,g,b` order).
       *
       * @param value - The Color to write.
       */
      writeRGBFloat32Color(value) {
          this.writeFloat32(value.r);
          this.writeFloat32(value.g);
          this.writeFloat32(value.b);
      }
      /**
       * Writes a RGBA `Color` in the buffer using Float32 values(In `r,g,b,a` order).
       *
       * @param value - The Color to write.
       */
      writeRGBAFloat32Color(value) {
          this.writeFloat32(value.r);
          this.writeFloat32(value.g);
          this.writeFloat32(value.b);
          this.writeFloat32(value.a);
      }
      /**
       * Writes a RGB `Color` in the buffer using unsigned Int8 values(In `r,g,b` order).
       *
       * @param value - The Color to write.
       */
      writeRGBUInt8Color(value) {
          this.writeUInt8(value.r);
          this.writeUInt8(value.g);
          this.writeUInt8(value.b);
      }
      /**
       * Writes a RGBA `Color` in the buffer using unsigned Int8 values(In `r,g,b,a` order).
       *
       * @param value - The Color to write.
       */
      writeRGBAUInt8Color(value) {
          this.writeUInt8(value.r);
          this.writeUInt8(value.g);
          this.writeUInt8(value.b);
          this.writeUInt8(value.a);
      }
      /**
       * Writes a `Box2` in the buffer using Floar32 values(In `p0,p1` order).
       *
       * @param value - The Box2 to write.
       */
      writeBox2(value) {
          this.writeFloat32Vec2(value.p0);
          this.writeFloat32Vec2(value.p1);
      }
      /**
       * Writes a `Box3` in the buffer using Floar32 values(In `p0,p1` order).
       *
       * @param value - The Box3 to write.
       */
      writeBox3(value) {
          this.writeFloat32Vec3(value.p0);
          this.writeFloat32Vec3(value.p1);
      }
      /**
       * The writePadd method.
       * @param size - The size value.
       */
      writePadd(size) {
          const bytes = size - this.__byteOffset;
          this.__reserve(bytes);
          this.__offset(bytes);
      }
      /**
       * The writeAlignment method.
       * @param numBytes - The numBytes value.
       */
      writeAlignment(numBytes) {
          const bytes = this.__byteOffset % numBytes;
          if (bytes != 0) {
              this.__reserve(numBytes - bytes);
              this.__offset(numBytes - bytes);
          }
      }
  }

  exports.OperatorOutputMode = void 0;
  (function (OperatorOutputMode) {
      OperatorOutputMode[OperatorOutputMode["OP_WRITE"] = 0] = "OP_WRITE";
      OperatorOutputMode[OperatorOutputMode["OP_READ_WRITE"] = 1] = "OP_READ_WRITE";
  })(exports.OperatorOutputMode || (exports.OperatorOutputMode = {}));

  /**
   * Represents a reactive type of attribute that can be owned by a `ParameterOwner` class.
   *
   * **Events**
   * * **nameChanged:** Triggered when the name of the parameter changes.
   * * **valueChanged:** Triggered when the value of the parameter changes.
   */
  class Parameter extends BaseItem {
      dirty = false;
      boundInputs = [];
      boundOutputs = [];
      cleaning = false;
      dirtyOpIndex = 0;
      firstOP_WRITE = 0;
      __value;
      dataType;
      ownerItem;
      /**
       * When initializing a new parameter, the passed in value could be anything.
       * If it is a new type of value, just ensure you register it in the `Registry`.
       *
       * How to use it:
       *
       * ```javascript
       *  // Creating a parameter object
       *  const param = new Parameter('Title', 'Awesome Parameter Value', 'String')
       *
       *   // Capturing events
       *  param.on('valueChanged', (...params) => console.log('Value changed!'))
       *
       *  // Changing parameter's value will cause `valueChanged` event to trigger.
       *  param.setValue('A New Awesome Parameter Value')
       *  // As result the console log code will execute: Value Changed!
       * ```
       *
       * @param name - The name of the parameter.
       * @param value - The value of the parameter.
       * @param dataType - The data type of the parameter.
       */
      constructor(name = '', value, dataType) {
          super(name);
          this.__value = value;
          this.dataType = dataType;
      }
      /**
       * Returns the owner item of the current parameter.
       *
       * @return - The return value.
       */
      getOwner() {
          return this.ownerItem;
      }
      /**
       * Sets the owner item of the current parameter.
       *
       * @param ownerItem - The ownerItem value.
       */
      setOwner(ownerItem) {
          this.ownerItem = ownerItem;
      }
      /**
       * Returns parameter's data type.
       *
       * @return - The return value.
       */
      getDataType() {
          return this.dataType;
      }
      // ////////////////////////////////////////////////
      // Operator bindings
      /**
       * When an Operator is reading from a parameter, it must be dirtied when the parameter value
       * changes. The Parameter maintains a list of bound inputs and will propagate dirty to
       * them explicitly.
       *
       * @param operatorInput - The output that we are unbinding from the Parameter
       * @param index - The index(optional) that the output is being bound at.
       * @return - The index of the bound output.
       */
      bindOperatorInput(operatorInput) {
          this.boundInputs.push(operatorInput);
      }
      /**
       * When an operator is being removed from reading from a Parameter, the Input is removed
       * This means the operator will no longer receive updates when the operator changes.
       *
       * @param operatorInput - The output that we are unbinding from the Parameter
       * @return - The return value.
       */
      unbindOperatorInput(operatorInput) {
          const index = this.boundInputs.indexOf(operatorInput);
          this.boundInputs.splice(index, 1);
      }
      /**
       * When an Operator writes to a parameter, it binds its outputs to the parameter at a given
       * index. Then when the operator is dirtied by one of its inputs, it explicitly dirties
       * the output parameters.
       *
       * @param operatorOutput - The output that we are unbinding from the Parameter
       * @param index - The index(optional) that the output is being bound at.
       * @return - The index of the bound output.
       */
      bindOperatorOutput(operatorOutput, index = -1) {
          if (index == -1)
              index = this.boundOutputs.length;
          this.boundOutputs.splice(index, 0, operatorOutput);
          // Update the remaining binding indices
          for (let i = index; i < this.boundOutputs.length; i++) {
              this.boundOutputs[i].setParamBindIndex(i);
          }
          // If we weren't already dirty, make sure to emit a 'valueChanged' anyway.
          this.__findFirstOP_WRITE();
          // This ensures that the operator stack is considered 'clean'
          // and then we call set dirty to force it to become dirty from the insertion point down.
          // Without this line, the operator is considered already 'dirty', and so won't propagate.
          this.dirtyOpIndex = this.boundOutputs.length;
          this.setDirty(index);
          return index;
      }
      /**
       * When an operator is unbinding from a parameter, it removes its self from the list maintained
       * by the parameter.
       *
       * @param operatorOutput - The output that we are unbinding from the Parameter
       * @return - The return value.
       */
      unbindOperatorOutput(operatorOutput) {
          const index = operatorOutput.getParamBindIndex();
          this.boundOutputs.splice(index, 1);
          // Update the remaining binding indices
          for (let i = index; i < this.boundOutputs.length; i++) {
              this.boundOutputs[i].setParamBindIndex(i);
          }
          this.__findFirstOP_WRITE();
          this.dirtyOpIndex = this.boundOutputs.length;
          this.setDirty(Math.max(0, index - 1));
          return index;
      }
      /**
       * Find the first operator in our stack which writes using an OP_WRITE connection.
       * All operators before this op can be ignored during dirty propagation.
       * @private
       */
      __findFirstOP_WRITE() {
          this.firstOP_WRITE = this.boundOutputs.length;
          if (this.boundOutputs.length > 0) {
              for (this.firstOP_WRITE--; this.firstOP_WRITE > 0; this.firstOP_WRITE--) {
                  // Find the first OP_WRITE binding. (Note: we could cache this)
                  if (this.boundOutputs[this.firstOP_WRITE].getMode() == exports.OperatorOutputMode.OP_WRITE)
                      break;
              }
          }
      }
      isDrivenByOperator() {
          return this.firstOP_WRITE == 0 && this.boundOutputs.length > 0;
      }
      /**
       * Dirties this Parameter so subsequent calls to `getValue` will cause an evaluation of its bound operators.
       *
       * @param index - Index of the operator
       * @return - `true` if the Parameter was made dirty, else `false` if it was already dirty.
       */
      setDirty(index) {
          // Determine the first operator in the stack that must evaluate to clean the parameter.
          // Note: if a READ_WRITE op is becoming dirty, then we dirty back up to that op.
          if (index < this.dirtyOpIndex) {
              // If we must dirty all operators in the stack from the last OP_WRITE to the end.
              // Note: If a setDirty call comes from an op that precedes an OP_WRITE operator, we
              // can safely discard it, as its output will have no effect on the value of this parameter.
              let newDirtyIndex = this.firstOP_WRITE;
              if (newDirtyIndex <= index) {
                  this.dirtyOpIndex = newDirtyIndex;
                  for (newDirtyIndex++; newDirtyIndex < this.boundOutputs.length; newDirtyIndex++) {
                      // Dirty all the other bound ops from the OP_WRITE to the top of the stack.
                      if (newDirtyIndex != index) {
                          // This will cause the other outputs of the operator to become dirty.
                          this.boundOutputs[newDirtyIndex].getOperator().setDirty();
                      }
                  }
                  for (let i = 0; i < this.boundInputs.length; i++) {
                      this.boundInputs[i].setDirty();
                  }
                  this.emit('valueChanged');
                  return true;
              }
          }
          return false;
      }
      /**
       * Returns true if this parameter is currently dirty and will evaluate its bound
       * operators if its value is requested by a call to getValue.
       *
       * @return - Returns a boolean.
       */
      isDirty() {
          return this.dirtyOpIndex < this.boundOutputs.length;
      }
      /**
       * Returns the index of the first 'dirty' binding in the stack. This will be the index of the
       * first operator that will evaluate when the parameter needs to be cleaned.
       *
       * @return - The index of the dirty binding in the binding stack.
       */
      getDirtyBindingIndex() {
          return this.dirtyOpIndex;
      }
      /**
       * The setCleanFromOp method.
       * @param value - The computed value to be stored in the Parameter.
       * @param index - The index of the bound OperatorOutput.
       */
      setCleanFromOp(value, index) {
          if (index != this.dirtyOpIndex) {
              if (index < this.dirtyOpIndex) {
                  // This can happen when an operator in the following case.
                  // ParamA [OpC, OpB, OpA]
                  // ParamB [OpC, OpA]
                  // When OpB dirties ParamA, and is evaluated, ParamB is considered clean because OpA was never dirtied
                  // We see this message when parameters are evaluated as soon as a change is detected instead of
                  // in batches. Now that all rendering code is pulling data only during the render cycle, we ara
                  // not seeing it anymore. However, maybe with a UI open, it will start emitting this warning.
                  // Note: this would be caused, if a Parameter is already cleaned by an Operator, and yet the Operator
                  // is re-evaluating. I am not sure how this can occur.
                  // const op = operatorOutput.getOperator()
                  // console.log(
                  //   `Operator:: ${
                  //     op.constructor.name
                  //   } with name: ${op.getName()} is being cleaned immediately, instead of lazily.`
                  // )
                  console.log(`Parameter is cleaned when it was already clean to that point in the stack:`, this.getPath());
              }
              else if (this.boundOutputs[index].getMode() != exports.OperatorOutputMode.OP_WRITE) {
                  // A parameter can become dirty (so __dirtyOpIndex == 0), and then another operator bound on top.
                  // if the next op is a WRITE op, then we can fast forward the dirty index.
                  const thisClassName = this.getClassName();
                  const op = this.boundOutputs[index].getOperator();
                  const opClassName = op.getClassName();
                  throw new Error(`Parameter: ${thisClassName} with name: ${this.getName()} is not cleaning all outputs during evaluation of op: ${opClassName} with name: ${op.getName()}`);
              }
          }
          this.__value = value;
          // As each operator writes its value, the dirty value is incremented
          this.dirtyOpIndex = index + 1;
      }
      /**
       * During operator evaluation, operators can use this method to retrieve the existing
       * value of one of their outputs.
       * @param index - The index of the bound OperatorOutput to evaluate up to.
       * @return - The return value.
       */
      getValueFromOp(index) {
          // Note: during evaluation of an Operator that writes to multiple outputs,
          // it can write to an output with an IO setting, which means it retrieves
          // the previous value while calculating the next.
          if (this.dirtyOpIndex < index) {
              this._clean(index);
          }
          return this.__value;
      }
      /**
       * Cleans the parameter up tp the index of the specified index of the bound OperatorOutput
       *
       * @param index - The index of the bound OperatorOutput to evaluate up to.
       */
      _clean(index) {
          if (this.cleaning) {
              throw new Error(`Cycle detected when cleaning: ${this.getPath()}. Operators need to be rebound to fix errors`);
          }
          this.cleaning = true;
          while (this.dirtyOpIndex < index) {
              const tmp = this.dirtyOpIndex;
              const operatorOutput = this.boundOutputs[this.dirtyOpIndex];
              // The op can get the current value and modify it in place
              // and set the output to clean.
              operatorOutput.getOperator().evaluate();
              if (tmp == this.dirtyOpIndex) {
                  // During initial configuration of an operator, cleaning outputs might be disabled.
                  const op = this.boundOutputs[this.dirtyOpIndex].getOperator();
                  const opClassName = op.getClassName();
                  console.warn(`Operator: ${opClassName} with name: ${op.getName()} is not cleaning its outputs during evaluation`);
                  this.dirtyOpIndex++;
              }
          }
          this.cleaning = false;
      }
      /**
       * Returns parameter's value.
       * @return - The return value.
       */
      getValue() {
          if (this.dirtyOpIndex < this.boundOutputs.length) {
              this._clean(this.boundOutputs.length);
          }
          return this.__value;
      }
      /**
       * Sets value of the parameter.
       *
       * @param value - The value param.
       */
      setValue(value) {
          if (value == undefined) {
              // eslint-disable-next-line no-throw-literal
              throw 'undefined was passed into the set value for param:' + this.getName();
          }
          if (this.boundOutputs.length > 0) {
              for (let i = this.boundOutputs.length - 1; i >= 0; i--) {
                  const operatorOutput = this.boundOutputs[i];
                  value = operatorOutput.backPropagateValue(value);
                  if (operatorOutput.getMode() == 0 /* OP_WRITE */)
                      return;
              }
          }
          if (typeof value !== 'object') {
              // Note: equality tests on anything but simple values is going to be super expensive.
              if (this.__value == value)
                  return;
          }
          this.__value = value;
          // Note: only users call 'setValue'. Operators call 'setCleanFromOp'
          for (let i = 0; i < this.boundInputs.length; i++) {
              this.boundInputs[i].paramValueChanged();
          }
          this.emit('valueChanged');
      }
      get value() {
          return this.getValue();
      }
      set value(value) {
          this.setValue(value);
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The loadValue is used to change the value of a parameter, without triggering a
       * valueChanges.
       *
       * @param value - The context value.
       */
      loadValue(value) {
          this.__value = value;
      }
      copyFrom(src, context) {
          this.loadValue(src.__value);
      }
      /**
       * The readBinary method.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          console.warn(`TODO: Parameter: ${this.constructor.name} with name: ${this.__name} does not implement readBinary`);
      }
      /**
       * Returns the parameter's path as an array of strings.
       * Includes owner's path in case it is owned by a `ParameterOwner`.
       *
       * @return - The return value.
       */
      getPath() {
          if (this.ownerItem instanceof BaseItem) {
              return [...this.ownerItem.getPath(), this.__name];
          }
          else {
              return [this.__name];
          }
      }
      resolvePath(path, index = 0) {
          if (index == 0) {
              if (path[0] == '.' || path[0] == this.__name)
                  index++;
          }
          if (path[index] == '..') {
              if (this.__ownerItem) {
                  return this.__ownerItem.resolvePath(path, index + 1);
              }
              else {
                  throw Error('this.__ownerItem is undefined');
              }
          }
          if (index == path.length) {
              return this;
          }
          if (path[index] == 'value') {
              // The path to the parameter, assumes that the next item will be a sub-param
              // of the value of the parameter.
              if (this.value instanceof BaseItem)
                  return this.value.resolvePath(path, index + 1);
          }
          throw new Error('Invalid path:' + path + '[' + index + ']. Path does not resolve to a BaseItem');
      }
      /**
       * The readBinary method.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      destroy() {
          console.warn('nothing destroyed. This method was not overwritten in subclass');
      }
  }

  /**
   * Represents a specific type of parameter, that only stores numeric values.
   *
   * ```javascript
   * const numberParam = new NumberParameter('MyNumber', 15)
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(numberParam)
   * ```
   *
   * @extends Parameter
   */
  class NumberParameter extends Parameter {
      range; // TODO: should create type with two fields for range. Must change how range is used.
      step;
      /**
       * Create a number parameter.
       * @param name - The name of the number parameter.
       * @param value - The value of the parameter.
       * @param range - An array with two numbers. If defined, the parameter value will be clamped.
       * @param step - The step value. If defined, the parameter value will be rounded to the nearest integer.
       */
      constructor(name = '', value = 0, range, step) {
          super(name, value, 'Number');
          this.range = range;
          this.step = step;
      }
      /**
       * Returns the range to which the parameter is restrained.
       *
       * @return - The return value.
       */
      getRange() {
          return this.range;
      }
      /**
       * Sets the range to which the parameter is restrained.
       *
       * @param range - The range value.
       */
      setRange(range) {
          this.range = range;
      }
      /**
       * Returns the step number, which is the one used for rounding.
       *
       * @return - The return value.
       */
      getStep() {
          return this.step;
      }
      /**
       * Returns step value.
       *
       * @param step - The step value.
       */
      setStep(step) {
          this.step = step;
      }
      setValue(value) {
          if (typeof value != 'number') {
              throw new Error(`value provided is not a number. Check the source of this value`);
          }
          super.setValue(value);
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          return { type: this.getClassName(), name: this.name, value: this.__value };
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context) {
          this.__value = j.value;
      }
      /**
       * Extracts a number value from a buffer, updating current parameter state.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          this.__value = reader.loadFloat32();
      }
      // ////////////////////////////////////////
      // Clone
      /**
       * The clone method constructs a new number parameter, copies its values
       * from this parameter and returns it.
       *
       * @return - Returns a new number parameter.
       */
      clone() {
          return new NumberParameter(this.name, this.__value, this.range, this.step);
      }
  }
  // eslint-disable-next-line require-jsdoc
  class Float32Parameter extends NumberParameter {
      // eslint-disable-next-line require-jsdoc
      readBinary(reader, context) {
          this.__value = reader.loadFloat32();
      }
  }
  // eslint-disable-next-line require-jsdoc
  class SInt32Parameter extends NumberParameter {
      // eslint-disable-next-line require-jsdoc
      readBinary(reader, context) {
          this.__value = reader.loadSInt32();
      }
  }
  // eslint-disable-next-line require-jsdoc
  class UInt32Parameter extends NumberParameter {
      // eslint-disable-next-line require-jsdoc
      readBinary(reader, context) {
          this.__value = reader.loadUInt32();
      }
  }
  // eslint-disable-next-line require-jsdoc
  class AngleParameter extends Float32Parameter {
  }
  Registry.register('NumberParameter', NumberParameter);
  Registry.register('Property_SInt32', SInt32Parameter);
  Registry.register('Property_UInt32', UInt32Parameter);
  Registry.register('Property_Float32', Float32Parameter);
  Registry.register('AngleParameter', AngleParameter);

  /**
   * Represents a specific type of parameter, that stores multiple choice(array) values.
   *
   * i.e.:
   * ```javascript
   * const multiChoiceParameter =  new MultiChoiceParameter('InitialXfoMode', GROUP_INITIAL_XFO_MODES.average, [
   *                                  'manual',
   *                                  'first',
   *                                  'average',
   *                                  'global',
   *                                ])
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(multiChoiceParameter)
   * ```
   * @extends NumberParameter
   */
  class MultiChoiceParameter extends NumberParameter {
      choices;
      /**
       * Create a multi choice parameter.
       * @param name - The name of the multi choice parameter.
       * @param index - The index value.
       * @param choices - The choices value.
       */
      constructor(name, index, choices = []) {
          super(name, index, [0, choices.length], 1);
          this.choices = choices;
      }
      /**
       * Returns choices array.
       *
       * @return - The return value.
       */
      getChoices() {
          return this.choices;
      }
      /**
       * Sets parameter index value.
       *
       * @param value - The value param.
       */
      setValue(value) {
          if (typeof value === 'string') {
              super.setValue(this.choices.indexOf(value));
          }
          else {
              super.setValue(value);
          }
      }
      clone() {
          return new MultiChoiceParameter(this.name, this.__value, this.choices);
      }
  }
  Registry.register('MultiChoiceParameter', MultiChoiceParameter);

  /* eslint-disable @typescript-eslint/no-unused-vars */
  /**
   * Represents a specific type of parameter, that only stores `boolean` values.
   *
   * i.e.:
   * ```javascript
   * const booleanParam = new BooleanParameter('MyBoolean', true)
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(booleanParam)
   * ```
   * @extends Parameter
   */
  class BooleanParameter extends Parameter {
      /**
       * Creates a new parameter with `Boolean` data type.
       *
       * @param name - The name of the boolean parameter.
       * @param value - The value of the parameter.
       */
      constructor(name = '', value) {
          super(name, value != undefined ? value : false, 'Boolean');
      }
      setValue(value) {
          if (typeof value != 'boolean') {
              throw new Error(`value provided is not a boolean. Check the source of this value`);
          }
          super.setValue(value);
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Loads the boolean values from the binary buffer.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          const newValue = reader.loadUInt8() != 0;
          if (this.__value != newValue) {
              this.__value = newValue;
              // Note: the BooleanParameter is used in Visiblity
              // If it changes, we listen and update visiility of entire assemblies.
              this.emit('valueChanged');
          }
      }
      /**
       * The toJSON method serializes this instance as a JSON.
       * It can be used for persistence, data transfer, etc.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          return { type: this.getClassName(), name: this.name, value: this.__value };
      }
      /**
       * The fromJSON method takes a JSON and deserializes into an instance of this type.
       *
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context) {
          if (this.__value != j.value) {
              this.__value = j.value;
              // Note: the BooleanParameter is used in Visiblity
              // If it changes, we listen and update visiility of entire assemblies.
              this.emit('valueChanged');
          }
      }
      /**
       * The clone method constructs a new parameter, copies its values
       * from this parameter and returns it.
       *
       * @return - Returns a new cloned parameter.
       */
      clone() {
          return new BooleanParameter(this.name, this.__value);
      }
  }
  Registry.register('BooleanParameter', BooleanParameter);
  Registry.register('Property_Boolean', BooleanParameter);

  /* eslint-disable @typescript-eslint/no-explicit-any */
  /**
   * Represents a specific type of parameter, that only stores Vec2(two-dimensional coordinate) values.
   *
   * i.e.:
   * ```javascript
   * const vec2Param = new Vec2Parameter('MyVec2', new Vec2(1.2, 3.4))
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(vec2Param)
   * ```
   *
   * **Events**
   * * **rangeChanged:** Triggered when rage array changes.
   *
   * @extends Parameter
   */
  class Vec2Parameter extends Parameter {
      range;
      /**
       * Create a Vec2 parameter.
       *
       * @param name - The name of the Vec2 parameter.
       * @param value - The value of the parameter.
       * @param range - The range value is an array of two `Vec2` objects.
       */
      constructor(name = '', value, range) {
          super(name, value ? value : new Vec2(), 'Vec2');
          this.range = range;
      }
      /**
       * Returns the range of values in which current parameter can be.
       *
       * @return - The return value.
       */
      getRange() {
          // Range should be an array of 2 vec2s. [min(x,y), max(x,y)]
          return this.range;
      }
      /**
       * The __setRange method.
       * @param range - The range value.
       * @private
       */
      setRange(range) {
          // Should be an array [0, 20]
          this.range = range;
          this.emit('rangeChanged', { range });
      }
      setValue(value) {
          if (!(value instanceof Vec2)) {
              throw new Error(`value provided is not an instance of a 'Vec2' class. Check the source of this value`);
          }
          super.setValue(value);
      }
      /**
       * Extracts a number value from a buffer, updating current parameter state.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          this.__value?.readBinary(reader);
      }
      toJSON(context) {
          return {
              type: this.getClassName(),
              name: this.name,
              value: this.__value?.toJSON(),
          };
      }
      fromJSON(j, context) {
          const vec2 = new Vec2();
          vec2.fromJSON(j.value);
          this.__value = vec2;
          if (j.name)
              this.name = j.name;
      }
      /**
       * The clone method constructs a new Vec2 parameter, copies its values
       * from this parameter and returns it.
       *
       * @return - Returns a new Vec2 parameter.
       */
      clone() {
          const clonedParam = new Vec2Parameter(this.name, this.__value?.clone());
          if (this.range)
              clonedParam.setRange(this.range);
          return clonedParam;
      }
  }
  Registry.register('Vec2Parameter', Vec2Parameter);
  Registry.register('Property_Vec2_32f', Vec2Parameter);

  /* eslint-disable @typescript-eslint/no-explicit-any */
  /**
   * Represents a specific type of parameter, that only stores Vec3(three-dimensional coordinate) values.
   *
   * i.e.:
   * ```javascript
   * const vec3Param = new Vec3Parameter('MyVec3', new Vec3(1.2, 3.4, 1))
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(vec3Param)
   * ```
   * @extends Parameter
   */
  class Vec3Parameter extends Parameter {
      range;
      /**
       * Create a Vec3 parameter.
       *
       * @param name - The name of the Vec3 parameter.
       * @param value - The value of the parameter.
       * @param range - The range value is an array of two `Vec3` objects.
       */
      constructor(name = '', value, range) {
          super(name, value ? value : new Vec3(), 'Vec3');
          this.range = range;
      }
      setValue(value) {
          if (!(value instanceof Vec3)) {
              throw new Error(`value provided is not an instance of a 'Vec2' class. Check the source of this value`);
          }
          super.setValue(value);
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Extracts a number value from a buffer, updating current parameter state.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          this.__value?.readBinary(reader);
      }
      toJSON(context) {
          return {
              type: this.getClassName(),
              name: this.name,
              value: this.__value?.toJSON(),
          };
      }
      fromJSON(j, context) {
          const vec4 = new Vec3();
          vec4.fromJSON(j.value);
          this.__value = vec4;
          if (j.name)
              this.name = j.name;
      }
      /**
       * The clone method constructs a new Vec3 parameter, copies its values
       * from this parameter and returns it.
       *
       * @return - Returns a new Vec3 parameter.
       */
      clone() {
          const clonedParam = new Vec3Parameter(this.name, this.__value?.clone());
          return clonedParam;
      }
  }
  Registry.register('Vec3Parameter', Vec3Parameter);
  Registry.register('Property_Vec3_32f', Vec3Parameter);

  /* eslint-disable @typescript-eslint/no-explicit-any */
  /**
   * Represents a specific type of parameter, that only stores Vec4(four-dimensional coordinate) values.
   *
   * i.e.:
   * ```javascript
   * const vec4Param = new Vec4Parameter('MyVec4', new Vec4(1.2, 3.4, 1, 4.2))
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(vec4Param)
   * ```
   *
   * @extends Parameter
   */
  class Vec4Parameter extends Parameter {
      /**
       * Create a Vec4 parameter.
       * @param name - The name of the Vec4 parameter.
       * @param value - The value of the parameter.
       */
      constructor(name = '', value) {
          super(name, value ? value : new Vec4(), 'Vec4');
      }
      setValue(value) {
          if (!(value instanceof Vec4)) {
              throw new Error(`value provided is not an instance of a 'Vec4' class. Check the source of this value`);
          }
          super.setValue(value);
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Extracts a number value from a buffer, updating current parameter state.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          this.__value?.readBinary(reader);
      }
      toJSON(context) {
          return { type: this.getClassName(), name: this.name, value: this.__value?.toJSON() };
      }
      fromJSON(j, context) {
          const vec4 = new Vec4();
          vec4.fromJSON(j.value);
          this.__value = vec4;
          if (j.name)
              this.name = j.name;
      }
      // ////////////////////////////////////////
      // Clone
      /**
       * The clone method constructs a new Vec4 parameter, copies its values
       * from this parameter and returns it.
       *
       * @return - Returns a new Vec4 parameter.
       */
      clone() {
          const clonedParam = new Vec4Parameter(this.name, this.__value?.clone());
          return clonedParam;
      }
  }
  Registry.register('Vec4Parameter', Vec4Parameter);
  Registry.register('Property_Vec4_32f', Vec4Parameter);

  /* eslint-disable @typescript-eslint/no-unused-vars */
  /**
   * @extends Parameter
   */
  class Box2Parameter extends Parameter {
      /**
       * Create a Box2 parameter.
       * @param name - The name of the Box2 parameter.
       * @param value - The value of the parameter.
       */
      constructor(name = '', value) {
          super(name, value ? value : new Box2(), 'Box2');
      }
      setValue(value) {
          if (!(value instanceof Box2)) {
              throw new Error(`value provided is not an instance of a 'Box2' class. Check the source of this value`);
          }
          super.setValue(value);
      }
      /**
       * Extracts a number value from a buffer, updating current parameter state.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          this.__value.p0.readBinary(reader);
          this.__value.p1.readBinary(reader);
      }
      toJSON(context) {
          return {
              type: this.getClassName(),
              name: this.name,
              value: {
                  p0: this.__value.p0.toJSON(),
                  p1: this.__value.p1.toJSON(),
              },
          };
      }
      fromJSON(j, context) {
          this.__value.p0.fromJSON(j.p0);
          this.__value.p1.fromJSON(j.p1);
      }
      /**
       * The clone method constructs a new Box2 parameter,
       * copies its values from this parameter and returns it.
       *
       * @return - Returns a new cloned Box2 parameter.
       */
      clone() {
          const clonedParam = new Box2Parameter(this.name, this.__value?.clone());
          return clonedParam;
      }
  }
  Registry.register('Box2Parameter', Box2Parameter);
  Registry.register('Property_Box2_32f', Box2Parameter);

  /* eslint-disable @typescript-eslint/no-unused-vars */
  /**
   * @extends Parameter
   */
  class Box3Parameter extends Parameter {
      /**
       * Create a Box3 parameter.
       * @param name - The name of the Box3 parameter.
       * @param value - The value of the parameter.
       */
      constructor(name = '', value) {
          super(name, value ? value : new Box3(), 'Box3');
      }
      setValue(value) {
          if (!(value instanceof Box3)) {
              throw new Error(`value provided is not an instance of a 'Box3' class. Check the source of this value`);
          }
          super.setValue(value);
      }
      /**
       * Extracts a number value from a buffer, updating current parameter state.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          this.__value.p0.readBinary(reader);
          this.__value.p1.readBinary(reader);
      }
      toJSON(context) {
          return {
              type: this.getClassName(),
              name: this.name,
              value: this.__value.toJSON(),
          };
      }
      fromJSON(j, context) {
          if (j.value) {
              // @ts-ignore
              this.__value.fromJSON(j.value);
          }
      }
      /**
       * The clone method constructs a new Box3 parameter,
       * copies its values from this parameter and returns it.
       *
       * @return - Returns a new cloned Box3 parameter.
       */
      clone() {
          const clonedParam = new Box3Parameter(this.name, this.__value?.clone());
          return clonedParam;
      }
  }
  Registry.register('Box3Parameter', Box3Parameter);
  Registry.register('Property_Box3_32f', Box3Parameter);

  /* eslint-disable @typescript-eslint/no-explicit-any */
  /**
   * Represents a specific type of parameter, that only stores `Color` values.
   *
   * i.e.:
   * ```javascript
   * const colorParam = new ColorParameter('MyColor', new Color(0, 254, 2))
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(colorParam)
   * ```
   *
   * @extends Parameter
   */
  class ColorParameter extends Parameter {
      /**
       * Create a color parameter.
       * @param name - The name of the color parameter.
       * @param value - The value of the parameter.
       */
      constructor(name = '', value) {
          super(name, value ? value : new Color(), 'Color');
      }
      setValue(value) {
          if (!(value instanceof Color)) {
              throw new Error(`value provided is not an instance of a 'Color' class. Check the source of this value`);
          }
          super.setValue(value);
      }
      /**
       * Extracts `Color` values from a buffer, updating current parameter state.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          const value = reader.loadRGBAFloat32Color();
          // If the value is in linear space, then we should convert it to gamma space.
          // Note: !! this should always be done in preprocessing...
          value.applyGamma(2.2);
          this.__value = value;
      }
      toJSON(context) {
          return {
              type: this.getClassName(),
              name: this.name,
              value: this.__value?.toJSON(),
          };
      }
      fromJSON(j, context) {
          // if (j.value.type) this.__value = Registry.constructClass('Color') as Color // TODO: commented out Registry.constructClass
          this.__value?.fromJSON(j.value);
      }
      /**
       * The clone method constructs a new color parameter,
       * copies its values from this parameter and returns it.
       *
       * @return - Returns a new cloned color parameter.
       */
      clone() {
          const clonedParam = new ColorParameter(this.name, this.__value?.clone());
          return clonedParam;
      }
  }
  Registry.register('ColorParameter', ColorParameter);
  Registry.register('Property_Color_32f', ColorParameter);

  /* eslint-disable @typescript-eslint/no-explicit-any */
  /**
   * Represents a specific type of parameter, that only stores Vec3(four-dimensional coordinate) values.
   *
   * i.e.:
   * ```javascript
   * const quatParam = new QuatParameter('MyQuat', new Quat(1.2, 3.4, 1, 4.2))
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(quatParam)
   * ```
   *
   * @extends Parameter
   */
  class QuatParameter extends Parameter {
      /**
       * Create a Quat parameter.
       * @param name - The name of the Quat parameter.
       * @param value - The value of the parameter.
       */
      constructor(name = '', value) {
          super(name, value ? value : new Quat(), 'Quat');
      }
      setValue(value) {
          if (!(value instanceof Quat)) {
              throw new Error(`value provided is not an instance of a 'Quat' class. Check the source of this value`);
          }
          super.setValue(value);
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Extracts a number value from a buffer, updating current parameter state.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          this.__value?.readBinary(reader);
      }
      toJSON(context) {
          return {
              type: this.getClassName(),
              name: this.name,
              value: this.__value?.toJSON(),
          };
      }
      fromJSON(j, context) {
          const quat = new Quat();
          quat.fromJSON(j.value);
          this.__value = quat;
      }
      // ////////////////////////////////////////
      // Clone
      /**
       * The clone method constructs a new Quat parameter, copies its values
       * from this parameter and returns it.
       *
       * @return - Returns a new Quat parameter.
       */
      clone() {
          const clonedParam = new QuatParameter(this.name, this.__value?.clone());
          return clonedParam;
      }
  }
  Registry.register('QuatParameter', QuatParameter);
  Registry.register('Property_Quat_32f', QuatParameter);

  /* eslint-disable @typescript-eslint/no-unused-vars */
  /**
   * Represents a specific type of parameter, that only stores Mat3(3x3 matrix) values.
   *
   * i.e.:
   * ```javascript
   * const mat3Param = new Ma3Parameter('MyMat3', new Mat3(...args))
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(mat3Param)
   * ```
   *
   * @extends Parameter
   */
  class Mat3Parameter extends Parameter {
      /**
       * Create a Mat3 parameter.
       * @param name - The name of the Mat3 parameter.
       * @param value - The value of the parameter.
       */
      constructor(name = '', value) {
          super(name, value ? value : new Mat3(), 'Mat3');
      }
      setValue(value) {
          if (!(value instanceof Mat3)) {
              throw new Error(`value provided is not an instance of a 'Mat3' class. Check the source of this value`);
          }
          super.setValue(value);
      }
      /**
       * Extracts a number value from a buffer, updating current parameter state.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          this.__value?.readBinary(reader);
      }
      toJSON(context) {
          return {
              type: this.getClassName(),
              name: this.name,
              value: this.__value?.toJSON(),
          };
      }
      fromJSON(j, context) {
          const mat3 = new Mat3();
          mat3.fromJSON(j.value);
          this.__value = mat3;
      }
      /**
       * The clone method constructs a new Mat3 parameter,
       * copies its values from this parameter and returns it.
       *
       * @return - Returns a new cloned Mat3 parameter.
       */
      clone() {
          const clonedParam = new Mat3Parameter(this.name, this.__value?.clone());
          return clonedParam;
      }
  }
  Registry.register('Mat3Parameter', Mat3Parameter);
  Registry.register('Property_Mat3_32f', Mat3Parameter);

  /* eslint-disable @typescript-eslint/no-explicit-any */
  /**
   * Represents a specific type of parameter, that only stores Mat4(4x4 matrix) values.
   *
   * i.e.:
   * ```javascript
   * const mat4Param = new Ma3Parameter('MyMat4', new Mat4(...args))
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(mat4Param)
   * ```
   *
   * @extends Parameter
   */
  class Mat4Parameter extends Parameter {
      /**
       * Create a Mat4 parameter.
       *
       * @param name - The name of the Mat4 parameter.
       * @param value - The value of the parameter.
       */
      constructor(name = '', value) {
          super(name, value ? value : new Mat4(), 'Mat4');
      }
      setValue(value) {
          if (!(value instanceof Mat4)) {
              throw new Error(`value provided is not an instance of a 'Mat4' class. Check the source of this value`);
          }
          super.setValue(value);
      }
      /**
       * Extracts a number value from a buffer, updating current parameter state.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          this.__value?.readBinary(reader);
      }
      toJSON(context) {
          return {
              type: this.getClassName(),
              value: this.__value?.toJSON(),
          };
      }
      fromJSON(j, context) {
          const mat4 = new Mat4();
          mat4.fromJSON(j.value);
          this.__value = mat4;
      }
      /**
       * The clone method constructs a new Mat4 parameter,
       * copies its values from this parameter and returns it.
       *
       * @return - Returns a new cloned Mat4 parameter.
       */
      clone() {
          const clonedParam = new Mat4Parameter(this.name, this.__value?.clone());
          return clonedParam;
      }
  }
  Registry.register('Mat4Parameter', Mat4Parameter);
  Registry.register('Property_Mat4_32f', Mat4Parameter);

  /* eslint-disable @typescript-eslint/no-explicit-any */
  /**
   * Represents a specific type of parameter, that only stores `Xfo` transform values.
   *
   * ```javascript
   * const xfoParam = new XfoParameter('MyXfo', new Xfo(new Vec3(1.2, 3.4, 1)))
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(xfoParam)
   * ```
   *
   * @extends Parameter
   */
  class XfoParameter extends Parameter {
      /**
       * Create a Xfo parameter.
       * @param name - The name of the Xfo parameter.
       * @param value - The value of the parameter.
       */
      constructor(name = '', value) {
          super(name, value ? value : new Xfo(), 'Xfo');
      }
      setValue(value) {
          if (!(value instanceof Xfo)) {
              throw new Error(`value provided is not an instance of a 'Xfo' class. Check the source of this value`);
          }
          super.setValue(value);
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Extracts a number value from a buffer, updating current parameter state.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          this.__value.readBinary(reader);
      }
      toJSON(context) {
          return { type: this.getClassName(), name: this.name, value: this.__value.toJSON() };
      }
      fromJSON(j, context) {
          const xfo = new Xfo();
          xfo.fromJSON(j.value);
          this.__value = xfo;
          if (j.name)
              this.name = j.name;
      }
      // ////////////////////////////////////////
      // Clone
      /**
       * The clone method constructs a new Xfo parameter, copies its values
       * from this parameter and returns it.
       *
       * @return - Returns a new Xfo parameter.
       */
      clone() {
          const clonedParam = new XfoParameter(this.name, this.__value.clone());
          return clonedParam;
      }
  }
  Registry.register('XfoParameter', XfoParameter);
  Registry.register('Property_Xfo_32f', XfoParameter);

  /**
   * Represents a 2D image item, containing width and height.
   *
   * **Events**
   * * **updated:** Triggered when the value of any of the parameters listed above changes.
   *
   * @extends ParameterOwner
   */
  class BaseImage extends ParameterOwner {
      width = 0;
      height = 0;
      format = 'RGB';
      type = 'UNSIGNED_BYTE';
      loaded = false;
      mipMapped = true;
      wrapS = 'REPEAT';
      wrapT = 'REPEAT';
      minFilter = 'LINEAR';
      magFilter = 'LINEAR';
      alphaFromLuminance = false;
      /**
       * Creates an instance of BaseImage.
       * @param name - name of the item
       */
      constructor(name = 'Image') {
          super(name);
          this.on('parameterValueChanged', () => {
              this.emit('updated');
          });
      }
      /**
       * Returns true if loaded.
       * @private
       * @return - Returns a boolean.
       */
      isLoaded() {
          return this.loaded;
      }
      /**
       * Returns all parameters and class state values.
       *
       * @return - The return value.
       */
      getParams() {
          return {
              type: this.type,
              format: this.format,
              width: this.width,
              height: this.height,
              wrapS: this.wrapS,
              wrapT: this.wrapT,
              minFilter: this.minFilter,
              magFilter: this.magFilter,
              mipMapped: this.mipMapped,
              alphaFromLuminance: this.alphaFromLuminance,
          };
      }
  }

  /* eslint-disable @typescript-eslint/no-unused-vars */
  /**
   * Represents a specific type of parameter, that only stores `BaseImage` values.
   *
   * i.e.:
   * ```javascript
   * // Since `Label` is a `BaseImage` implementation, it helps us with the example.
   * const label = new Label('My awesome label', 'LabelPack')
   * const imageParam = new ImageParameter('MyImage', label)
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(imageParam)
   * ```
   *
   * @extends Parameter
   */
  class ImageParameter extends Parameter {
      /**
       * Create an image parameter.
       *
       * @param name - The name of the image parameter.
       * @param value - The value of the parameter.
       */
      constructor(name = '', value) {
          super(name, value, 'BaseImage');
      }
      setValue(value) {
          if (!(value instanceof BaseImage)) {
              throw new Error(`value provided is not an instance of 'BaseImage' class. Check the source of this value`);
          }
          super.setValue(value);
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const j = {
              type: this.getClassName(),
              name: this.name,
          };
          if (this.__value) {
              j.imageType = this.__value.getClassName();
              j.value = this.__value.toJSON();
          }
          return j;
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object this item must decode.
       * @param context - The context value.
       * @return - Returns the json object.
       */
      fromJSON(j, context) {
          if (j.imageType) {
              this.__value = Registry.constructClass(j.imageType);
              if (j.value)
                  this.__value?.fromJSON(j.value, context);
          }
      }
      // ////////////////////////////////////////
      // Clone
      /**
       * The clone method constructs a new image parameter,
       * copies its values from this parameter and returns it.
       *
       * @return - Returns a new cloned image parameter.
       */
      clone() {
          const clonedParam = new ImageParameter(this.name, this.__value);
          return clonedParam;
      }
  }
  Registry.register('ImageParameter', ImageParameter);

  /* eslint-disable @typescript-eslint/no-unused-vars */
  /**
   * Represents a specific type of parameter, that only stores Mat4(4x4 matrix) values.
   *
   * i.e.:
   * ```javascript
   * const stringParam = new StringParameter('MyString', 'A String value goes here')
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(stringParam)
   * ```
   *
   * @extends Parameter
   */
  class StringParameter extends Parameter {
      multiLine;
      /**
       * Create a string parameter.
       * @param name - The name of the material color parameter.
       * @param value - The value of the parameter.
       */
      constructor(name = '', value = '') {
          super(name, value, 'String');
          this.multiLine = false;
      }
      /**
       * Sets flag that indicates if the string contains new line feeds.
       *
       * @param multiLine - The multiLine value.
       */
      setMultiLine(multiLine) {
          this.multiLine = multiLine;
      }
      /**
       * Returns multi-line flag value.
       *
       * @return - The return value.
       */
      getMultiLine() {
          return this.multiLine;
      }
      setValue(value) {
          if (typeof value != 'string') {
              throw new Error(`value provided is not a string. Check the source of this value`);
          }
          super.setValue(value);
      }
      /**
       * Extracts the string value from a buffer, updating current parameter state.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          this.__value = reader.loadStr();
      }
      /**
       * The toJSON method serializes this instance as a JSON.
       * It can be used for persistence, data transfer, etc.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          return { type: this.getClassName(), name: this.name, value: this.__value };
      }
      /**
       * The fromJSON method takes a JSON and deserializes into an instance of this type.
       *
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context) {
          const newValue = j.value ?? '';
          if (this.__value != newValue) {
              this.__value = newValue;
              // Note: the BooleanParameter is used in Visiblity
              // If it changes, we listen and update visiility of entire assemblies.
              this.emit('valueChanged');
          }
      }
      /**
       * The clone method constructs a new string parameter, copies its values
       * from this parameter and returns it.
       *
       * @return - Returns a new string parameter.
       */
      clone() {
          return new StringParameter(this.name, this.__value);
      }
  }
  Registry.register('StringParameter', StringParameter);
  Registry.register('Property_String', StringParameter);

  /**
   * A parameter for storing an array of string values.
   *
   * @extends Parameter
   */
  class StringListParameter extends Parameter {
      /**
       * Create a string parameter.
       * @param {string} name - The name of the material color parameter.
       * @param {string} value - The value of the parameter.
       */
      constructor(name = '', value = []) {
          super(name, value, 'String[]');
      }
      setValue(value) {
          if (!Array.isArray(value)) {
              throw new Error(`value provided is not an array. Check the source of this value`);
          }
          super.setValue(value);
      }
      /**
       * Extracts the string value from a buffer, updating current parameter state.
       *
       * @param {BinReader} reader - The reader value.
       * @param {object} context - The context value.
       */
      readBinary(reader, context) {
          this.__value = reader.loadStrArray();
      }
      /**
       * The toJSON method serializes this instance as a JSON.
       * It can be used for persistence, data transfer, etc.
       *
       * @param {Record<string, unknown>} context - The context value.
       * @return {Record<string, boolean | undefined>} - Returns the json object.
       */
      toJSON(context) {
          return { type: this.getClassName(), name: this.name, value: this.__value };
      }
      /**
       * The fromJSON method takes a JSON and deserializes into an instance of this type.
       *
       * @param {Record<string, boolean | undefined>} j - The json object this item must decode.
       * @param {Record<string, unknown>} context - The context value.
       */
      fromJSON(j, context) {
          this.__value = j.value;
          this.emit('valueChanged');
      }
      /**
       * The clone method constructs a new string parameter, copies its values
       * from this parameter and returns it.
       *
       * @return {StringListParameter} - Returns a new string parameter.
       */
      clone() {
          const clonedParam = new StringListParameter(this.name, this.__value);
          return clonedParam;
      }
  }
  Registry.register('StringListParameter', StringListParameter);
  Registry.register('Property_StringList', StringListParameter);

  /**
   * A parameter for storing an array of string values.
   *
   * @extends Parameter
   */
  class Float32ArrayParameter extends Parameter {
      /**
       * Create a string parameter.
       * @param {string} name - The name of the material color parameter.
       * @param {string} value - The value of the parameter.
       */
      constructor(name = '', value = new Float32Array()) {
          super(name, value, 'Float[]');
      }
      /**
       * Extracts the string value from a buffer, updating current parameter state.
       *
       * @param {BinReader} reader - The reader value.
       * @param {object} context - The context value.
       */
      readBinary(reader, context) {
          this.__value = reader.loadFloat32Array();
      }
      /**
       * The toJSON method serializes this instance as a JSON.
       * It can be used for persistence, data transfer, etc.
       *
       * @param {Record<string, unknown>} context - The context value.
       * @return {Record<string, boolean | undefined>} - Returns the json object.
       */
      toJSON(context) {
          return { type: this.getClassName(), name: this.name, value: this.__value };
      }
      /**
       * The fromJSON method takes a JSON and deserializes into an instance of this type.
       *
       * @param {Record<string, boolean | undefined>} j - The json object this item must decode.
       * @param {Record<string, unknown>} context - The context value.
       */
      fromJSON(j, context) {
          this.__value = j.value;
          this.emit('valueChanged');
      }
      /**
       * The clone method constructs a new string parameter, copies its values
       * from this parameter and returns it.
       *
       * @return {Float32ArrayParameter} - Returns a new string parameter.
       */
      clone() {
          const clonedParam = new Float32ArrayParameter(this.name, this.__value);
          return clonedParam;
      }
  }
  Registry.register('Float32ArrayParameter', Float32ArrayParameter);
  Registry.register('Property_Float32Array', Float32ArrayParameter);

  /* eslint-disable @typescript-eslint/no-unused-vars */
  /**
   * A Parameter for storing list(array) values.
   *
   * i.e.:
   * ```javascript
   * const listParam = new ListParameter('MyList', GearParameter)
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(listParam)
   * ```
   *
   * **Events**
   * * **valueChanged:** Triggered when setting a value changes in the array(insert, add, remove).
   * * **elementAdded:** Triggered when an element is added to the array(add, insert).
   * * **elementRemoved:** Triggered when an element is removed from the array
   *
   * @extends Parameter
   */
  class ListParameter extends Parameter {
      /**
       * Create a list parameter.
       * @param name - The name of the list parameter.
       * @param dataType - The dataType value.
       */
      constructor(name = '', dataType) {
          super(name, [], dataType);
      }
      /**
       * The filter method.
       * @param item - The item value.
       * @return - The return value.
       *
       * @private
       */
      filter(item) {
          return true;
      }
      /**
       * Returns the count of items in the array.
       *
       * @return - The return value.
       */
      getCount() {
          return this.__value?.length || 0;
      }
      /**
       * Returns value from the array in the specified index.
       *
       * @param index - The index value.
       * @return - The return value.
       */
      getElement(index) {
          if (!this.__value)
              return;
          return this.__value[index];
      }
      /**
       * Sets a value in the specified array's index.
       *
       * @param index - The index value.
       * @param value - The value value.
       */
      setElement(index, value) {
          if (!this.__value)
              this.__value = [];
          this.__value[index] = value;
          this.emit('valueChanged');
      }
      /**
       * Adds a new element at the end of the array pile.
       *
       * @param elem - The elem value.
       * @return - The return value.
       */
      addElement(elem) {
          if ((!elem && elem != 0) || !this.filter(elem))
              return;
          if (!this.__value)
              this.__value = [];
          this.__value.push(elem);
          this.emit('elementAdded', { elem, index: this.__value.length - 1 });
          this.emit('valueChanged');
          return elem;
      }
      /**
       * Removes an array element from the specified index
       *
       * @param index - The index value.
       */
      removeElement(index) {
          if (!this.__value)
              this.__value = [];
          const elem = this.__value[index];
          this.__value.splice(index, 1);
          this.emit('elementRemoved', { elem, index });
          this.emit('valueChanged');
      }
      /**
       * Inserts a new element in the specified index.
       *
       * @param index - The index value.
       * @param elem - The elem value.
       */
      insertElement(index, elem) {
          if (!this.__value || !this.filter(elem))
              return;
          this.__value.splice(index, 0, elem);
          this.emit('elementAdded', { elem, index });
          this.emit('valueChanged');
      }
      setValue(value) {
          if (!Array.isArray(value)) {
              throw new Error(`value provided is not an array. Check the source of this value`);
          }
          super.setValue(value);
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const items = [];
          if (this.__value) {
              for (const p of this.__value) {
                  if (typeof this.dataType === 'string')
                      items.push(p);
                  else
                      items.push(p.toJSON(context));
              }
          }
          return {
              type: this.getClassName(),
              name: this.name,
              value: items,
          };
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context) {
          if (j.items == undefined) {
              console.warn('Invalid Parameter JSON');
              return;
          }
          this.__value = [];
          for (let i = 0; i < j.items.length; i++) {
              let elem;
              if (typeof this.dataType === 'string') {
                  elem = j.items[i];
              }
              else {
                  if (!this.dataType)
                      throw 'No DataType';
                  elem = Registry.constructClass(this.dataType);
                  elem.fromJSON(j.items[i], context);
              }
              this.__value.push(elem);
              this.emit('elementAdded', { elem, index: this.__value.length - 1 });
          }
          this.emit('valueChanged');
      }
      // ////////////////////////////////////////
      // Clone and Destroy
      /**
       * The clone method constructs a new list parameter, copies its values
       * from this parameter and returns it.
       *
       * @return - Returns a new list parameter.
       */
      clone() {
          const clonedValue = this.__value ? this.__value.slice(0) : [];
          if (!this.dataType)
              throw 'This parameter does not have a DataType';
          const clonedParam = new ListParameter(this.name, this.dataType);
          clonedParam.setValue(clonedValue);
          return clonedParam;
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          if (!this.__value)
              return;
          for (let i = 0; i < this.__value.length; i++) {
              if (this.__value[i] instanceof Parameter)
                  this.__value[i].destroy();
              this.removeElement(i);
          }
      }
  }
  Registry.register('ListParameter', ListParameter);

  /* eslint-disable @typescript-eslint/explicit-module-boundary-types */
  /**
   * Represents a specific type of parameter, that stores multiple parameters in object format.
   *
   * i.e.:
   * ```javascript
   * const structParam = new StructParameter('MyStructParam')
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(structParam)
   * ```
   *
   * **Events**
   * * **valueChanged:** Triggered whenever parameter's value changes.
   *
   * @extends Parameter
   */
  class StructParameter extends Parameter {
      members;
      /**
       * Create a struct parameter.
       * @param name - The name of the struct parameter.
       */
      constructor(name) {
          super(name, {}, 'Struct');
          this.members = [];
      }
      /**
       * The _addMember method.
       * @param parameter - The parameter value.
       * @return - The return value.
       * @private
       */
      addMember(parameter) {
          if (this.__value)
              this.__value[parameter.getName()] = parameter.value;
          parameter.on('valueChanged', () => {
              if (this.__value)
                  this.__value[parameter.getName()] = parameter.value;
          });
          this.members.push(parameter);
          this.emit('valueChanged');
          return parameter;
      }
      /**
       * The getParameter method.
       *
       * @private
       * @param name - The parameter name.
       * @return - The return value.
       */
      getParameter(name) {
          for (const p of this.members) {
              if (p.getName() == name)
                  return p;
          }
          return undefined;
      }
      /**
       * Looks for a member parameter with the specified name and returns it.
       *
       * @param name - The parameter name.
       * @return - The return value.
       */
      getMember(name) {
          return this.getParameter(name);
      }
      /**
       * Returns the name of all parameters in StructParameter.
       *
       * @return - The return value.
       */
      getMemberNames() {
          const names = [];
          for (let i = 0; i < this.members.length; i++) {
              const member = this.members[i];
              if (member != null)
                  names[i] = member.getName();
          }
          return names;
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const members = [];
          for (const p of this.members)
              members.push(p.toJSON(context));
          return { type: this.getClassName(), name: this.name, members };
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context) {
          if (j.members == undefined) {
              console.warn('Invalid Parameter JSON');
              return;
          }
          for (let i = 0; i < j.members.length; i++) {
              if (j.members[i]) {
                  this.members[i].fromJSON(j.members[i], context);
              }
          }
          this.name = j.name;
      }
      clone() {
          const clonedParam = new StructParameter(this.name);
          return clonedParam;
      }
      // ////////////////////////////////////////
      // Destroy
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          for (const p of this.members) {
              // TODO: not sure about this. I added a do-nothing destroy method in Parameter<T> to be overwritten
              // since only some subclasses use destroy.
              p.destroy();
          }
      }
  }
  Registry.register('StructParameter', StructParameter);

  /** Class representing an operator output.
   * @extends EventEmitter
   */
  class OperatorOutput extends EventEmitter {
      __name;
      _mode;
      _op = null;
      _param;
      _paramBindIndex;
      detached;
      /**
       * Create an operator output.
       * @param name - The name value.
       * @param operatorOutputMode - The mode which the OperatorOutput uses to bind to its target parameter.
       */
      constructor(name, operatorOutputMode = exports.OperatorOutputMode.OP_WRITE) {
          super();
          this.__name = name;
          this._mode = operatorOutputMode;
          this._param = undefined;
          this._paramBindIndex = -1;
          this.detached = false;
      }
      /**
       * Returns name of the output.
       * @return - The name string.
       */
      getName() {
          return this.__name;
      }
      /**
       * Sets operator that owns this output. Called by the operator when adding outputs
       * @param op - The operator object.
       */
      setOperator(op) {
          this._op = op;
      }
      /**
       * Returns operator that owns this output.
       * @return - The operator object.
       */
      getOperator() {
          return this._op;
      }
      /**
       * Returns mode that the output writes to be parameter. Must be a number from OperatorOutputMode
       * @return - The mode value.
       */
      getMode() {
          return this._mode;
      }
      /**
       * Returns true if this output is connected to a parameter.
       * @return - The return value.
       */
      isConnected() {
          return this._param != undefined;
      }
      /**
       * The getParam method.
       * @return - The return value.
       */
      getParam() {
          return this._param;
      }
      /**
       * Sets the Parameter for this output to write to.
       * @param param - The param value.
       * @param index - The index to bind at in the Parameter.
       */
      setParam(param, index = -1) {
          if (this._param) {
              this._param.unbindOperatorOutput(this);
          }
          this._param = param;
          if (this._param) {
              this._paramBindIndex = this._param.bindOperatorOutput(this, index);
          }
          this.emit('paramSet', { param: this._param });
      }
      /**
       * Returns the index of the binding on the parameter of this OperatorOutput
       * up to date.
       * @return index - The index of the binding on the parameter.
       */
      getParamBindIndex() {
          return this._paramBindIndex;
      }
      /**
       * If bindings change on a Parameter, it will call this method to ensure the output index is
       * up to date.
       * @param index - The index of the binding on the parameter.
       */
      setParamBindIndex(index) {
          this._paramBindIndex = index;
      }
      /**
       * Propagates dirty to the connected parameter.
       */
      setDirty() {
          if (this._param) {
              this._param.setDirty(this._paramBindIndex);
          }
      }
      /**
       * The getValue method.
       * @return - The return value.
       */
      getValue() {
          if (this._param) {
              return this._param.getValueFromOp(this._paramBindIndex);
          }
          else {
              // @ts-expect-error ts-migrate(2554) FIXME: Expected 0-1 arguments, but got 2.
              throw new Error('Cannot call getValue on OperatorOutput that is not connected:', this.__name);
          }
      }
      /**
       * When the value on a Parameter is modified by a user by calling 'setValue,
       * then if any operators are bound, the value of the Parameter cannot be modified
       * directly as it is the result of a computation. Instead, the Parameter calls
       * 'backPropagateValue' on the Operator to cause the Operator to handle propagating
       * the value to one or more of its inputs.
       * to its inputs.
       * @param value - The value param.
       * @return - The modified value.
       */
      backPropagateValue(value) {
          if (this._op) {
              value = this._op.backPropagateValue(value);
          }
          return value;
      }
      /**
       * The setClean method.
       * @param value - The value param.
       */
      setClean(value) {
          if (this._param) {
              this._param.setCleanFromOp(value, this._paramBindIndex);
          }
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const paramPath = this._param ? this._param.getPath() : '';
          return {
              name: this.__name,
              paramPath: context && context.makeRelative ? context.makeRelative(paramPath) : paramPath,
              paramBindIndex: this._paramBindIndex,
          };
      }
      /**
       * The fromJSON method decodes a json object for this type.
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context) {
          if (j.paramPath) {
              // Note: the tree should have fully loaded by the time we are loading operators
              // even new items and groups should have been created. Operators and state machines
              // are loaded last.
              context?.resolvePath(j.paramPath, (param) => {
                  this.setParam(param, j.paramBindIndex);
              }, (reason) => {
                  console.warn("OperatorOutput: '" + this.getName() + "'. Unable to connect to:" + j.paramPath);
              });
          }
      }
      /**
       * The detach method is called when an operator is being removed from the scene tree.
       * It removes all connections to parameters in the scene.
       */
      detach() {
          // This function is called when we want to suspend an operator
          // from functioning because it is deleted and on the undo stack.
          // Once operators have persistent connections,
          // we will simply uninstall the output from the parameter.
          this.detached = true;
          this._paramBindIndex = this._param ? this._param.unbindOperatorOutput(this) : -1;
      }
      /**
       * The reattach method can be called when re-instating an operator in the scene.
       */
      reattach() {
          this.detached = false;
          if (this._param) {
              this._paramBindIndex = this._param.bindOperatorOutput(this, this._paramBindIndex);
          }
      }
      /**
       * The rebind rebinds the outputs to be at the top of the stack for its parameter.
       */
      rebind() {
          if (this._param) {
              this._param.unbindOperatorOutput(this);
              this._paramBindIndex = this._param.bindOperatorOutput(this);
          }
      }
  }
  class BooleanOperatorOutput extends OperatorOutput {
  }
  class NumberOperatorOutput extends OperatorOutput {
  }
  class Vec2OperatorOutput extends OperatorOutput {
  }
  class Vec3OperatorOutput extends OperatorOutput {
  }
  class Vec4OperatorOutput extends OperatorOutput {
  }
  class ColorOperatorOutput extends OperatorOutput {
  }
  class QuatOperatorOutput extends OperatorOutput {
  }
  class XfoOperatorOutput extends OperatorOutput {
  }
  class Mat3OperatorOutput extends OperatorOutput {
  }
  class Mat4OperatorOutput extends OperatorOutput {
  }

  /* eslint-disable @typescript-eslint/no-explicit-any */
  /**
   * Class representing an operator.
   *
   * @extends ParameterOwner
   */
  class Operator extends ParameterOwner {
      __inputs;
      __outputs;
      /**
       * Create an operator.
       * @param name - The name value.
       */
      constructor(name = '') {
          super(name);
          this.__inputs = new Map();
          this.__outputs = new Map();
      }
      /**
       * This method sets the state of the operator to dirty which propagates
       * to the outputs of this operator, and which may then propagate to other
       * operators. When the scene is cleaned, which usually is caused by rendering
       * then the chain of operators are cleaned by triggering evaluation.
       * @private
       */
      setDirty() {
          this.__outputs.forEach((output) => output.setDirty());
      }
      /**
       * This method can be overridden in derived classes
       * to perform general updates (see GLPass or BaseItem).
       *
       * @param event
       * @private
       */
      parameterValueChanged(event) {
          super.parameterValueChanged(event);
          this.setDirty();
      }
      /**
       * The addInput method.
       * @param input - The name of the input, or the input object
       * @return - The return value.
       */
      addInput(input) {
          input.setOperator(this);
          this.__inputs.set(input.getName(), input);
          this.setDirty();
          return input;
      }
      /**
       * The removeInput method.
       * @param input - The name of the input, or the input object
       */
      removeInput(input) {
          if (typeof input == 'string')
              input = this.getInput(input);
          if (input.getParam())
              input.setParam(undefined);
          this.__inputs.delete(input.getName());
      }
      /**
       * Getter for the number of inputs in this operator.
       * @return - Returns the number of inputs.
       */
      getNumInputs() {
          return this.__inputs.size;
      }
      /**
       * The getInputByIndex method.
       * @param index - The index value.
       * @return - The return value.
       */
      getInputByIndex(index) {
          return Array.from(this.__inputs.values())[index];
      }
      /**
       * The getInput method.
       * @param name - The name value.
       * @return - The return value.
       */
      getInput(name) {
          const input = this.__inputs.get(name);
          if (!input)
              throw `Couldn't find an Input with the name of '${name}'`;
          return input;
      }
      /**
       * The addOutput method.
       * @param output - The name of the output, or the output object
       * @return - The return value.
       */
      addOutput(output) {
          output.setOperator(this);
          // if (this.getOutput(output.getName())) throw new Error(`Operator output already exists ${output.getName()}`)
          this.__outputs.set(output.getName(), output);
          this.setDirty();
          return output;
      }
      /**
       * The removeOutput method.
       * @param output - The name of the output, or the output object
       */
      removeOutput(output) {
          if (typeof output == 'string')
              output = this.getOutput(output);
          if (!(output instanceof OperatorOutput)) {
              throw new Error(`removeOutput only accepts string or OperatorInput`);
          }
          if (output.getParam())
              output.setParam();
          this.__outputs.delete(output.getName());
      }
      /**
       * Getter for the number of outputs in this operator.
       * @return - Returns the number of outputs.
       */
      getNumOutputs() {
          return this.__outputs.size;
      }
      /**
       * The getOutputByIndex method.
       * @param index - The index value.
       * @return - The return value.
       */
      getOutputByIndex(index) {
          return Array.from(this.__outputs.values())[index];
      }
      /**
       * The getOutput method.
       * @param name - The name value.
       * @return - The return value.
       */
      getOutput(name) {
          const output = this.__outputs.get(name);
          if (!output)
              throw new Error(`Couldn't find an Output with the name of '${name}'`);
          return output;
      }
      /**
       * The evaluate method.
       * Computes the values of each of the outputs based on the values of the inputs
       * and the values of outputs with mode OP_READ_WRITE.
       * This method must be implemented by all Operators.
       */
      evaluate() {
          throw new Error('Not yet implemented');
      }
      /**
       * When the value on a Parameter is modified by a user by calling 'setValue,
       * then if any operators are bound, the value of the Parameter cannot be modified
       * directly as it is the result of a computation. Instead, the Parameter calls
       * 'backPropagateValue' on the Operator to cause the Operator to handle propagating
       * the value to one or more of its inputs.
       * to its inputs.
       * @param value - The value param.
       * @return - The modified value.
       */
      backPropagateValue(value) {
          // TODO: Implement me for custom manipulations.
          return value;
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const j = super.toJSON(context);
          j.type = this.getClassName();
          const inputs = [];
          this.__inputs.forEach((input) => {
              inputs.push(input.toJSON(context));
          });
          j.inputs = inputs;
          const outputs = [];
          this.__outputs.forEach((output) => {
              outputs.push(output.toJSON(context));
          });
          j.outputs = outputs;
          return j;
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context) {
          super.fromJSON(j, context);
          if (j.inputs) {
              j.inputs.forEach((inputJson, index) => {
                  let input;
                  if (inputJson.name) {
                      input = this.getInput(inputJson.name);
                      if (!input) {
                          input = this.addInput(inputJson.name);
                      }
                  }
                  else {
                      input = this.getInputByIndex(index);
                  }
                  input.fromJSON(inputJson, context);
              });
          }
          if (j.outputs) {
              j.outputs.forEach((outputJson, index) => {
                  let output;
                  if (outputJson.name) {
                      output = this.getOutput(outputJson.name);
                      if (!output) {
                          output = this.addOutput(outputJson.name);
                      }
                  }
                  else {
                      output = this.getOutputByIndex(index);
                  }
                  output.fromJSON(outputJson, context);
              });
          }
      }
      /**
       * The detach method.
       */
      detach() {
          this.__inputs.forEach((input) => input.detach());
          this.__outputs.forEach((output) => output.detach());
      }
      /**
       * The reattach method.
       */
      reattach() {
          this.__inputs.forEach((input) => input.reattach());
          this.__outputs.forEach((output) => output.reattach());
      }
      /**
       * The rebind method.
       */
      rebind() {
          this.__outputs.forEach((output) => output.rebind());
      }
  }

  /** Class representing an operator input.
   * @extends EventEmitter
   */
  class OperatorInput extends EventEmitter {
      name;
      _op;
      param;
      detached = false;
      /**
       * Create an operator input.
       * @param name - The name value.
       */
      constructor(name) {
          super();
          this.name = name;
      }
      /**
       * The getName method.
       * @return - The return value.
       */
      getName() {
          return this.name;
      }
      /**
       * Sets operator that owns this input. Called by the operator when adding inputs
       * @param op - The operator object.
       */
      setOperator(op) {
          this._op = op;
      }
      /**
       * Returns operator that owns this input.
       * @return - The operator object.
       */
      getOperator() {
          return this._op;
      }
      /**
       * Returns true if this input is connected to a parameter.
       * @return - The return value.
       */
      isConnected() {
          return this.param != null;
      }
      /**
       * The getParam method.
       * @return - The return value.
       */
      getParam() {
          return this.param;
      }
      /**
       * @private
       * The handler function for when the input paramter changes.
       * @param event - The event object.
       */
      paramValueChanged() {
          if (this._op)
              this._op.setDirty();
      }
      /**
       * Assigns the Paramter to be used to provide the input value.
       * @param param - The param value.
       */
      setParam(param) {
          if (this.param) {
              this.param.unbindOperatorInput(this);
          }
          this.param = param;
          if (this.param) {
              this.param.bindOperatorInput(this);
          }
          // When an input param is assigned, the op should
          // propagate dirty to its outputs.
          if (this._op)
              this._op.setDirty();
          this.emit('paramSet', { param: this.param });
      }
      /**
       * The getValue method.
       * @return - The return value.
       */
      getValue() {
          if (this.param)
              return this.param.value;
          throw new Error('Unable to getValue');
      }
      /**
       * The setValue method.
       * @param value - The value param.
       */
      setValue(value) {
          if (this.param) {
              this.param.setValue(value);
          }
      }
      /**
       * Propagates from the upstream parameter to the connected operator.
       */
      setDirty() {
          if (this._op) {
              this._op.setDirty();
          }
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const absPath = this.param ? this.param.getPath() : [];
          const paramPath = (context && context.makeRelative ? context.makeRelative(absPath) : absPath);
          return {
              name: this.name,
              paramPath: paramPath,
          };
      }
      /**
       * The fromJSON method decodes a json object for this type.
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context) {
          if (j.paramPath) {
              // Note: the tree should have fully loaded by the time we are loading operators
              // even new items and groups should have been created. Operators and state machines
              // are loaded last.
              context?.resolvePath(j.paramPath, (param) => {
                  this.setParam(param);
              }, () => {
                  console.warn("OperatorInput: '" + this.getName() + "'. Unable to connect to:" + j.paramPath);
              });
          }
      }
      /**
       * The detach method is called when an operator is being removed from the scene tree.
       * It removes all connections to parameters in the scene.
       */
      detach() {
          // This function is called when we want to suspend an operator
          // from functioning because it is deleted and on the undo stack.
          // Once operators have persistent connections,
          // we will simply uninstall the output from the parameter.
          if (this.param) {
              this.param.unbindOperatorInput(this);
          }
      }
      /**
       * The reattach method can be called when re-instating an operator in the scene.
       */
      reattach() {
          this.detached = false;
          if (this.param) {
              this.param.bindOperatorInput(this);
          }
      }
  }
  class BooleanOperatorInput extends OperatorInput {
  }
  class NumberOperatorInput extends OperatorInput {
  }
  class Vec2OperatorInput extends OperatorInput {
  }
  class Vec3OperatorInput extends OperatorInput {
  }
  class Vec4OperatorInput extends OperatorInput {
  }
  class ColorOperatorInput extends OperatorInput {
  }
  class QuatOperatorInput extends OperatorInput {
  }
  class XfoOperatorInput extends OperatorInput {
  }
  class Mat3OperatorInput extends OperatorInput {
  }
  class Mat4OperatorInput extends OperatorInput {
  }

  /** The operator the calculates the global Xfo of a TreeItem based on its parents GlobalXfo and its own LocalXfo
   * @extends Operator
   * @private
   */
  class CalcGlobalXfoOperator extends Operator {
      parentGlobal = new XfoOperatorInput('ParentGlobal');
      localXfo = new XfoOperatorInput('LocalXfo');
      globalXfo = new XfoOperatorOutput('GlobalXfo');
      /**
       * Create a CalcGlobalXfoOperator operator.
       *
       * @param groupGlobalXfoParam - The GlobalXfo param found on the Group.
       * @param cuttingPlaneParam - The parameter on the Group which defines the displacement to apply to the members.
       */
      // TODO: adding new XfoP... to make inheritence work
      constructor(globalXfoParam, localXfoParam) {
          super('CalcGlobalXfoOperator');
          this.localXfo.setParam(localXfoParam);
          this.globalXfo.setParam(globalXfoParam);
          this.addInput(this.parentGlobal);
          this.addInput(this.localXfo);
          this.addOutput(this.globalXfo);
      }
      /**
       * The backPropagateValue method inverts the mathematics of the 'evaluate'
       * method so it can propagate the value backwards to its inputs.
       * @param value - the new value being set on the output GlobalXfo
       */
      backPropagateValue(value) {
          if (this.parentGlobal.isConnected()) {
              const parentGlobalXfo = this.parentGlobal.getValue();
              this.localXfo.setValue(parentGlobalXfo.inverse().multiply(value));
          }
          else {
              this.localXfo.setValue(value);
          }
      }
      /**
       * The evaluate method calculates a new global Xfo based on the parents Global Xfo,
       * and the local Xfo value.
       */
      evaluate() {
          const localXfo = this.localXfo.getValue();
          if (this.parentGlobal.isConnected()) {
              const parentGlobalXfo = this.parentGlobal.getValue();
              this.globalXfo.setClean(parentGlobalXfo.multiply(localXfo));
          }
          else {
              this.globalXfo.setClean(localXfo);
          }
      }
  }
  Registry.register('CalcGlobalXfoOperator', CalcGlobalXfoOperator);

  /**
   * Represents a specific type of parameter, that only stores `Box3` values.
   *
   * i.e.:
   * ```javascript
   * const boundingBox = new BoundingBoxParameter('MyBBox', new TreeItem())
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(boundingBox)
   * ```
   * @extends Parameter
   */
  class BoundingBoxParameter extends Box3Parameter {
      // protected dirty: boolean, value, name
      treeItem;
      dirty = true;
      /**
       * Creates an instance of BoundingBoxParameter.
       * @param name - Name of the parameter
       * @param treeItem - `TreeItem` that contains `Box3` representing the Bounding Box
       */
      constructor(name = '', treeItem) {
          super(name);
          this.treeItem = treeItem;
      }
      /**
       * Makes parameter value be dirty, so when `getValue` is called,
       * an evaluation is then executed to re-calculate the BoundingBox
       *
       * @memberof BoundingBoxParameter
       */
      setDirty(index) {
          if (!this.dirty) {
              this.dirty = true;
              this.emit('valueChanged');
          }
          return true;
      }
      /**
       * Returns bounding box value
       *
       * @return - The return value.
       */
      getValue() {
          if (this.dirty) {
              this.__value = this.treeItem._cleanBoundingBox();
              this.dirty = false;
          }
          return this.__value;
      }
      clone() {
          const bBox3Clone = new BoundingBoxParameter(this.name, this.treeItem);
          bBox3Clone.value = this.__value?.clone();
          return bBox3Clone;
      }
      /**
       * We do not want this parameter serialized.
       */
      isDrivenByOperator() {
          return true;
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The loadValue is used to change the value of a parameter, without triggering a
       * valueChanges, or setting the USER_EDITED state.
       *
       * @param value - The context value.
       */
      loadValue(value) {
          this.__value = value.clone();
      }
  }
  Registry.register('BoundingBoxParameter', BoundingBoxParameter);

  /**
   * Class representing an Item in the scene tree with hierarchy capabilities (has children).
   * It has the capability to add and remove children.
   * **Parameters**
   * * **Visible(`BooleanParameter`):** Shows/Hides the item.
   * * **LocalXfo(`XfoParameter`):** Specifies the offset of this tree item from its parent.
   * * **GlobalXfo(`XfoParameter`):** Provides the computed world Xfo of this tree item.
   * * **BoundingBox(`BoundingBox`):** Provides the bounding box for the tree item and all of its children in the 3d scene.
   *
   * **Events**
   * * **globalXfoChanged:** Emitted when the value of GlobalXfo parameter changes.
   * * **visibilityChanged:** Emitted when the visibility on the tree item changes.
   * * **highlightChanged:** Emitted when the highlight on the tree item changes.
   * * **childAdded:** Emitted when a item is added as a child.
   * * **childRemoved:** Emitted when an item is removed from the child nodes.
   * * **pointerDown:** Emitted when a pointerDown event happens in an item.
   * * **pointerUp:** Emitted when a pointerUp event happens in an item.
   * * **pointerMove:** Emitted when a pointerMove event happens in an item.
   * * **pointerEnter:** Emitted when a pointerEnter event happens in an item.
   * * **pointerClick:** Emitted when a pointer is clicked on an item.
   * * **pointerDoubleClick:** Emitted when a pointer is double-clicked on an item.
   * * **pointerLongPress:** Emitted when a pointer is clicked and held on an item for a long time.
   *
   *
   * @extends {ParameterOwner}
   */
  class TreeItem extends ParameterOwner {
      // Controls if this TreeItem or its children contribute to the bounding boxes
      // in the scene. If set to false, Camera framing will ignore this item,
      disableBoundingBox = false;
      __childItems = [];
      __childItemsEventHandlers = [];
      childItemsMapping = {};
      childItemsMappingCorrupt = false;
      /**
       * @member globalXfoParam - Stores the global Xfo for this tree item.
       * global xfos are calculated from the localXfo and parentXfo.
       */
      globalXfoParam = new XfoParameter('GlobalXfo', new Xfo());
      /**
       * @member localXfoParam - Stores the local Xfo for this tree item.
       * local Xfos are the offset from the parent's coordinate frame.
       */
      localXfoParam = new XfoParameter('LocalXfo', new Xfo());
      /**
       * @member boundingBoxParam - Stores the bounding box for this tree item
       */
      boundingBoxParam = new BoundingBoxParameter('BoundingBox', this);
      /**
       * @member visibleParam - Whether this tree item is visible or not.
       * Any given tree item is also is affected by parent's visibility.
       */
      visibleParam = new BooleanParameter('Visible', true);
      /**
       * @member opacityParam - Controls, in combination with Material transparency,
       * the opacity of this item and its children.
       */
      opacityParam = new NumberParameter('Opacity', 1, [0, 1]);
      highlightMapping = {};
      highlights = [];
      __visible = true;
      visibleCounter = 1; // Visible by Default.
      opacity = 1; // Opaque by Default.
      inheritedOpacityValues = new Map();
      globalXfoOp;
      /**
       * Creates a tree item with the specified name.
       *
       * @param name - The name of the tree item. It's the identifier of the tree item.
       * It's an identifier intended to be human readable.
       * It's included in the path that we use to access a particular item.
       * It's used to display it in the tree.
       */
      constructor(name) {
          super(name);
          // /////////////////////////////////////
          // Add parameters.
          this.addParameter(this.visibleParam);
          this.addParameter(this.opacityParam);
          this.addParameter(this.localXfoParam);
          this.addParameter(this.globalXfoParam);
          this.addParameter(this.boundingBoxParam);
          this.globalXfoOp = new CalcGlobalXfoOperator(this.globalXfoParam, this.localXfoParam);
          this.globalXfoParam.on('valueChanged', (event) => {
              this.setBoundingBoxDirty();
              // Note: deprecate this event.
              this.emit('globalXfoChanged', event);
          });
          this.visibleParam.on('valueChanged', () => {
              this.visibleCounter += this.visibleParam.value ? 1 : -1;
              this.updateVisibility();
          });
          this.opacityParam.on('valueChanged', () => {
              this.updateOpacity();
          });
      }
      /**
       * Sets the owner (another TreeItem) of the current TreeItem.
       * @param parentItem - The parent item.
       */
      setOwner(parentItem) {
          if (this.__ownerItem) {
              if (this.__ownerItem instanceof TreeItem) {
                  // The effect of the invisible owner is removed.
                  if (!this.__ownerItem.isVisible())
                      this.visibleCounter++;
                  const index = this.__ownerItem.getChildIndex(this);
                  if (index >= 0)
                      this.__ownerItem.unbindChild(index, this);
              }
          }
          super.setOwner(parentItem);
          if (this.__ownerItem) {
              if (this.__ownerItem instanceof TreeItem) {
                  // The effect of the invisible owner is added.
                  if (!this.__ownerItem.isVisible())
                      this.visibleCounter--;
                  this.globalXfoOp.getInput('ParentGlobal').setParam(this.__ownerItem.globalXfoParam);
              }
          }
          else {
              this.globalXfoOp.getInput('ParentGlobal').setParam(undefined);
          }
          this.updateVisibility();
      }
      /**
       * Returns the parent of current TreeItem.
       *
       * @return - Returns the parent item.
       */
      getParentItem() {
          return this.getOwner();
      }
      /**
       * Sets the parent of current TreeItem.
       *
       * @param parentItem - The parent item.
       */
      setParentItem(parentItem) {
          this.setOwner(parentItem);
      }
      get parent() {
          return this.getOwner();
      }
      set parent(treeItem) {
          this.setOwner(treeItem);
      }
      // ////////////////////////////////////////
      // Visibility
      /**
       * Returns visible parameter value for current TreeItem.
       *
       * @return - The visible param value.
       */
      isVisible() {
          // Should never be more than 1, but can be less than 0.
          return this.visibleCounter > 0;
      }
      /**
       * Sets visible parameter value.
       *
       * @param val - The val param.
       */
      setVisible(visible) {
          this.visibleParam.value = visible;
      }
      /**
       * Updates current TreeItem visible state and propagates its value to children elements.
       *
       * @param val - The val param.
       */
      propagateVisibility(val) {
          this.visibleCounter += val;
          this.updateVisibility();
      }
      /**
       * The updateVisibility method.
       * @return - Returns a boolean.
       */
      updateVisibility() {
          const visible = this.visibleCounter > 0;
          if (visible != this.__visible) {
              this.__visible = visible;
              for (const childItem of this.__childItems) {
                  childItem.propagateVisibility(this.__visible ? 1 : -1);
              }
              this.emit('visibilityChanged', new VisibilityChangedEvent(visible));
              // Note: we used to handle this by listening to a 'valueChanged' event on the
              // parameter.
              if (this.__ownerItem instanceof TreeItem) {
                  this.__ownerItem.setBoundingBoxDirty();
              }
              return true;
          }
          return false;
      }
      // ////////////////////////////////////////
      // Opacity
      /**
       * Returns the current status of the opacity value.
       *
       * @return - Returns true if the opacity value is less than 1.
       */
      isOpaque() {
          return this.opacity > 0.999;
      }
      /**
       * Set the value of opacity inherited by a given tree item.
       */
      setInheritedOpacity(parent, value) {
          this.inheritedOpacityValues.set(parent, value);
          this.updateOpacity();
      }
      /**
       * Calculates the new opacity value based on the opacityParam value
       * and the lowest of the inherited opacity values.
       */
      updateOpacity() {
          let inheritedOpacityValue = 1;
          this.inheritedOpacityValues.forEach((value) => {
              if (value < inheritedOpacityValue)
                  inheritedOpacityValue = value;
          });
          const wasOpaque = this.opacity > 0.999;
          this.opacity = this.opacityParam.value * inheritedOpacityValue;
          // else this.opacity = this.opacityParam.value
          for (const childItem of this.__childItems) {
              childItem.setInheritedOpacity(this, this.opacity);
          }
          const isOpaque = this.opacity > 0.999;
          this.emit('opacityChanged', new OpacityStateChangedEvent(isOpaque, wasOpaque != isOpaque));
      }
      // ////////////////////////////////////////
      // Highlights
      /**
       * Adds a highlight to the tree item.
       *
       * @param name - The name of the tree item.
       * @param color - The color of the highlight.
       * @param propagateToChildren - A boolean indicating whether to propagate to children.
       */
      addHighlight(name, color, propagateToChildren = true) {
          // If the highlight was already in the list,
          // remove it and put it at the top.
          if (name in this.highlightMapping) {
              if (this.highlights[this.highlights.length - 1] != name) {
                  // The highlight was already in the list, but not at the top. Move it to the top.
                  const id = this.highlights.indexOf(name);
                  this.highlights.splice(id, 1);
                  this.highlights.push(name);
                  this.emit('highlightChanged', { name, color });
              }
              else {
                  // This item is already highlighted with this highlight
                  if (!this.highlightMapping[name].isEqual(color)) {
                      this.highlightMapping[name] = color;
                      this.emit('highlightChanged', { name, color });
                  }
              }
          }
          else {
              this.highlights.push(name);
              this.highlightMapping[name] = color;
              this.emit('highlightChanged', { name, color });
          }
          if (propagateToChildren) {
              this.__childItems.forEach((childItem) => {
                  childItem.addHighlight(name, color, propagateToChildren);
              });
          }
      }
      /**
       * Removes a highlight to the tree item.
       *
       * @param name - The name of the tree item.
       * @param propagateToChildren - A boolean indicating whether to propagate to children.
       */
      removeHighlight(name, propagateToChildren = true) {
          if (name in this.highlightMapping) {
              if (this.highlights[this.highlights.length - 1] == name) {
                  this.highlights.pop();
                  delete this.highlightMapping[name];
                  if (this.highlights.length > 0) {
                      const nextName = this.highlights[this.highlights.length - 1];
                      const nextColor = this.highlightMapping[nextName];
                      this.emit('highlightChanged', { name: nextName, color: nextColor });
                  }
                  else {
                      // The last highlight was removed, so emit an event saying we are no longer highlighted.
                      this.emit('highlightChanged');
                  }
              }
              else {
                  // The removed highlight was not the current highlight, so no change needs to be shown.
                  const id = this.highlights.indexOf(name);
                  this.highlights.splice(id, 1);
                  delete this.highlightMapping[name];
              }
              if (propagateToChildren) {
                  this.__childItems.forEach((childItem) => {
                      childItem.removeHighlight(name, propagateToChildren);
                  });
              }
          }
      }
      /**
       * Returns the color of the current highlight.
       *
       * @return - The color value.
       */
      getHighlight() {
          if (this.highlights.length == 0) {
              return null;
          }
          return this.highlightMapping[this.highlights[this.highlights.length - 1]];
      }
      /**
       * Returns the name of the current highlight.
       *
       * @return - The color value.
       */
      getHighlightName() {
          if (this.highlights.length == 0) {
              return null;
          }
          return this.highlights[this.highlights.length - 1];
      }
      /**
       * Returns `true` if this items has a highlight color assigned.
       *
       * @return - `True` if this item is highlighted.
       */
      isHighlighted() {
          return this.highlights.length > 0;
      }
      // ////////////////////////////////////////
      // Bounding Box
      /**
       * The _cleanBoundingBox method.
       * @param bbox - The bounding box value.
       * @return - The return value.
       * @private
       */
      _cleanBoundingBox() {
          const bbox = new Box3();
          this.__childItems.forEach((childItem) => {
              if (childItem.isVisible() && childItem.isSelectable()) {
                  // console.log(" - ", childItem.constructor.name, childItem.getName(), childItem.globalXfoParam.value.sc.x, childItem.getBoundingBox().toString())
                  const box3 = childItem.boundingBoxParam.value;
                  if (box3)
                      bbox.addBox3(box3);
              }
          });
          // console.log(this.getName(), bbox.toString())
          return bbox;
      }
      /**
       * The setBoundingBoxDirty method.
       * @private
       */
      setBoundingBoxDirty() {
          if (this.boundingBoxParam) {
              // Will cause boundingChanged to emit
              this.boundingBoxParam.setDirty(-1);
          }
          // Note: we used to handle this by listening to a 'valueChanged' event on the
          // parameter.
          if (this.__ownerItem instanceof TreeItem) {
              this.__ownerItem.setBoundingBoxDirty();
          }
      }
      // ////////////////////////////////////////
      // Children
      /**
       * Returns children list, but children are not required to have hierarchy structure(`TreeItem`).
       * Meaning that it could be another kind of item than `TreeItem`.
       *
       * i.e. **BaseImage**
       *
       * @return - List of `TreeItem` owned by current TreeItem.
       */
      getChildren() {
          return this.__childItems;
      }
      /**
       * Returns the number of child tree items.
       */
      getNumChildren() {
          return this.__childItems.length;
      }
      /**
       * Returns the number of child tree items.
       */
      get numChildren() {
          return this.__childItems.length;
      }
      /**
       * Apply an index to the name if name exists within this item's children.
       *
       * @param name - The name value.
       * @return - Returns a unique name.
       */
      generateUniqueName(name) {
          while (this.childItemsMapping[name.toLocaleLowerCase()] != undefined) {
              const indexRegexp = /(\d+)$/i;
              const indexMatches = name.match(indexRegexp);
              let newIndex = 1;
              if (indexMatches) {
                  newIndex = parseInt(indexMatches[1]) + 1;
                  name = name.replace(indexRegexp, ''); // remove old index
              }
              name += `${newIndex}`.padStart(2, '0');
          }
          return name;
      }
      /**
       * Updates the internal acceleration structure that speeds up looking up children by name.
       * @param start - The start value.
       * @private
       */
      updateChildNameMapping(start) {
          // If a child has been added or removed from the
          // tree item, we need to update the acceleration structure.
          for (let i = start; i < this.__childItems.length; i++) {
              const name = this.__childItems[i].name.toLocaleLowerCase();
              this.childItemsMapping[name] = i;
          }
      }
      /**
       * When a child's name changed, we update our acceleration structure.
       * @param event - The start value.
       * @private
       */
      childNameChanged(event) {
          // Update the acceleration structure.
          if (this.childItemsMappingCorrupt) {
              this.updateChildNameMapping(0);
              this.childItemsMappingCorrupt = false;
          }
          else {
              const oldName = event.oldName.toLocaleLowerCase();
              const newName = event.newName.toLocaleLowerCase();
              const index = this.childItemsMapping[oldName];
              if (this.childItemsMapping[newName] != undefined)
                  this.childItemsMappingCorrupt = true;
              delete this.childItemsMapping[oldName];
              this.childItemsMapping[newName] = index;
          }
      }
      /**
       * Inserts a child. It accepts all kind of `TreeItem`, not only `TreeItem`.
       *
       * @param childItem - The child TreeItem to insert.
       * @param index - The index to add the child item.
       * @param maintainXfo - Boolean that determines if the Xfo value is maintained.
       * @param fixCollisions - Modify the name of the item to avoid name collisions.
       * If false, an exception wll be thrown instead if a name collision occurs.
       * @return - The index of the child item in this items children array.
       */
      insertChild(childItem, index, maintainXfo = false, fixCollisions = true) {
          let name = childItem.name;
          let nameLc = name.toLocaleLowerCase();
          if (nameLc in this.childItemsMapping) {
              if (fixCollisions) {
                  name = this.generateUniqueName(name);
                  nameLc = name.toLocaleLowerCase();
                  childItem.setName(name);
              }
              else {
                  throw new Error("Item '" + name + "' is already a child of :" + this.getPath());
              }
          }
          if (!(childItem instanceof TreeItem)) {
              throw new Error('Object is is not a tree item :' + childItem); // TODO: need better output here+ childItem.constructor.name)
          }
          const listenerIDs = {};
          listenerIDs['nameChanged'] = childItem.on('nameChanged', (event) => {
              this.childNameChanged(event);
          });
          let prevGlobal;
          if (maintainXfo) {
              prevGlobal = childItem.globalXfoParam.value;
          }
          this.setBoundingBoxDirty();
          this.highlights.forEach((name) => {
              childItem.addHighlight(name, this.highlightMapping[name], true);
          });
          childItem.setInheritedOpacity(this, this.opacity);
          this.__childItems.splice(index, 0, childItem);
          this.__childItemsEventHandlers.splice(index, 0, listenerIDs);
          // If we have non-unique names, we need to regenerate this mapping.
          if (this.childItemsMapping[nameLc])
              this.childItemsMappingCorrupt = true;
          this.childItemsMapping[nameLc] = index;
          this.updateChildNameMapping(index + 1);
          childItem.setOwner(this);
          if (maintainXfo) {
              // Mainain the previous global Xfo.
              childItem.globalXfoParam.value = prevGlobal;
          }
          this.emit('childAdded', new ChildAddedEvent(index, childItem));
          return childItem;
      }
      /**
       * Adds a child.
       *
       * @param childItem - The child TreeItem to add.
       * @param maintainXfo - Boolean that determines if
       * the Global Xfo value is maintained. If true, when moving
       * items in the hierarchy from one parent to another, the local Xfo
       * of the item will be modified to maintain and the Global Xfo.
       * Note: this option defaults to false because we expect that is the
       * behavior users would expect when manipulating the tree in code.
       * To be safe and unambiguous, always try to specify this value.
       * @param fixCollisions - Modify the name of the item to avoid
       * name collisions with other children of the same parent.
       * If false, an exception wll be thrown instead if a name collision occurs.
       * @return childItem - The child TreeItem that was added.
       */
      addChild(childItem, maintainXfo = true, fixCollisions = true) {
          const index = this.__childItems.length;
          this.insertChild(childItem, index, maintainXfo, fixCollisions);
          return childItem;
      }
      /**
       * Returns child element in the specified index.
       *
       * @param index - The index to remove the child TreeItem.
       * @return - Return the child TreeItem.
       */
      getChild(index) {
          return this.__childItems[index];
      }
      /**
       * Returns child element with the specified name.
       *
       * @param name - The name value.
       * @return - Return the child TreeItem.
       */
      getChildByName(name) {
          const index = this.childItemsMapping[name.toLocaleLowerCase()];
          if (index != undefined) {
              return this.__childItems[index];
          }
          return null;
      }
      /**
       * Returns children names as an array of strings.
       *
       * @return - An array of names for each child.
       */
      getChildNames() {
          const names = [];
          for (let i = 0; i < this.__childItems.length; i++) {
              const childItem = this.__childItems[i];
              if (childItem != null)
                  names[i] = childItem.getName();
          }
          return names;
      }
      /**
       * UnBind an item from the group. This method is called
       * automatically when an item is removed from the group.
       * @param index - The index value.
       * @param childItem - item to unbind.
       * @private
       */
      unbindChild(index, childItem) {
          const listenerIDs = this.__childItemsEventHandlers[index];
          childItem.off('nameChanged', listenerIDs['nameChanged']);
          this.__childItems.splice(index, 1);
          this.__childItemsEventHandlers.splice(index, 1);
          delete this.childItemsMapping[childItem.name.toLocaleLowerCase()];
          this.updateChildNameMapping(index);
          this.setBoundingBoxDirty();
          this.emit('childRemoved', { childItem, index });
      }
      /**
       * Removes a child TreeItem by specifying its index.
       *
       * @param index - The index value.
       */
      removeChild(index) {
          const childItem = this.__childItems[index];
          if (!childItem) {
              return;
          }
          this.unbindChild(index, childItem);
          childItem.setOwner(undefined);
      }
      /**
       * Removes a child TreeItem by specifying its name.
       *
       * @param name - The name param.
       * @return - Return the child TreeItem.
       */
      removeChildByName(name) {
          const index = this.childItemsMapping[name.toLocaleLowerCase()];
          if (index != undefined) {
              return this.removeChild(index);
          }
      }
      /**
       * Removes the provided item from this TreeItem if it is one of its children.
       * An exception is thrown if the item is not a child of this tree item.
       *
       * @param childItem - The child TreeItem to remove.
       */
      removeChildByHandle(childItem) {
          const index = this.__childItems.indexOf(childItem);
          if (index == -1)
              throw new Error('Error in removeChildByHandle. Child not found:' + childItem.getName());
          this.removeChild(index);
      }
      /**
       * Removes all children Items.
       */
      removeAllChildren() {
          let index = this.__childItems.length;
          while (index--) {
              this.removeChild(index);
          }
          this.setBoundingBoxDirty();
      }
      /**
       * Returns index position of the specified item.
       *
       * @param childItem - The child TreeItem value.
       * @return - Child index in children array.
       */
      getChildIndex(childItem) {
          return this.__childItems.indexOf(childItem);
      }
      // ////////////////////////////////////////
      // Path Traversal
      // Note: Path resolution starts at the root of the
      // tree the path was generated from (so index=1, because we don't resolve root).
      // Note: When a path is made relative to an item in its tree, the path
      // starts with the child elements.
      /**
       * The resolvePath method traverses the subtree from this item down
       * matching each name in the path with a child until it reaches the
       * end of the path.
       *
       * @param path - The path value.
       * @param index - The index value.
       * @return - The return value.
       */
      resolvePath(path, index = 0) {
          if (index == 0) {
              if (path[0] == '.' || path[0] == this.__name)
                  index++;
          }
          if (path[index] == '..') {
              if (this.__ownerItem) {
                  return this.__ownerItem.resolvePath(path, index + 1);
              }
              else {
                  throw Error('this.__ownerItem is undefined');
              }
          }
          if (index == path.length) {
              return this;
          }
          const childName = path[index];
          const childItem = this.getChildByName(childName);
          if (childItem) {
              return childItem.resolvePath(path, index + 1);
          }
          return super.resolvePath(path, index);
      }
      /**
       * Traverse the tree structure from this point down
       * and fire the callback for each visited item.
       * Note: Depth only used by selection sets for now.
       *
       * @param callback - The callback value.
       * @param includeThis - Fire the callback for this item.
       */
      traverse(callback, includeThis = true) {
          const __c = (treeItem, depth) => {
              const children = treeItem.getChildren();
              for (const childItem of children) {
                  if (childItem)
                      __t(childItem, depth + 1);
              }
          };
          const __t = (treeItem, depth) => {
              if (callback(treeItem, depth) == false)
                  return;
              __c(treeItem, depth);
          };
          if (includeThis) {
              __t(this, 1);
          }
          else {
              __c(this, 0);
          }
      }
      // ///////////////////////
      // Events
      /**
       * Called by the Viewport when events are received by the canvas element.
       * The event is propagated to a TreeItem if it is under the pointer at the time.
       * The ZeaPointerEvent abstracts the Mouse, touch and our custom XR events.
       * This method emits the ZeaPointerEvent with the key 'pointerDown', and
       * propagates it up to the TreeItem's owner.
       *
       * @param event - The event value
       */
      onPointerDown(event) {
          this.emit('pointerDown', event);
          if (event.propagating && this.__ownerItem instanceof TreeItem) {
              this.__ownerItem.onPointerDown(event);
          }
      }
      /**
       * Called by the Viewport when events are received by the canvas element.
       * The event is propagated to a TreeItem if it is under the pointer at the time.
       * The ZeaPointerEvent abstracts the Mouse, touch and our custom XR events.
       * This method emits the ZeaPointerEvent with the key 'pointerDown', and
       * propagates it up to the TreeItem's owner.
       *
       * @param event - The pointer event that was generated from the user interaction
       */
      onPointerUp(event) {
          this.emit('pointerUp', event);
          if (event.propagating && this.__ownerItem instanceof TreeItem) {
              this.__ownerItem.onPointerUp(event);
          }
      }
      /**
       * Called by the Viewport when events are received by the canvas element.
       * The event is propagated to a TreeItem if it is under the pointer at the time.
       * The ZeaPointerEvent abstracts the Mouse, touch and our custom XR events.
       * This method emits the ZeaPointerEvent with the key 'pointerMove', and
       * propagates it up to the TreeItem's owner.
       *
       * @param event - The pointer event that was generated from the user interaction
       */
      onPointerMove(event) {
          this.emit('pointerMove', event);
          if (event.propagating && this.__ownerItem instanceof TreeItem) {
              this.__ownerItem.onPointerMove(event);
          }
      }
      /**
       * Called by the Viewport when the mouse or other pointer enters the canvas element.
       * The event is propagated to a TreeItem if it is under the pointer at the time.
       * The ZeaPointerEvent abstracts the Mouse, touch and our custom XR events.
       * This method emits the ZeaPointerEvent with the key 'pointerEnter', and
       * propagates it up to the TreeItem's owner.
       *
       * @param event - The pointer event that was generated from the user interaction
       */
      onPointerEnter(event) {
          this.emit('pointerEnter', event);
          if (event.propagating && this.__ownerItem instanceof TreeItem) {
              this.__ownerItem.onPointerEnter(event);
          }
      }
      /**
       * Called by the Viewport when the mouse or other pointer leaves the canvas element.
       * The event is propagated to a TreeItem if it is under the pointer at the time.
       * The ZeaPointerEvent abstracts the Mouse, touch and our custom XR events.
       * This method emits the ZeaPointerEvent with the key 'pointerLeave', and
       * propagates it up to the TreeItem's owner.
       *
       * @param event - The pointer event that was generated from the user interaction
       */
      onPointerLeave(event) {
          this.emit('pointerLeave', event);
          if (event.propagating && this.__ownerItem instanceof TreeItem) {
              this.__ownerItem.onPointerLeave(event);
          }
      }
      /**
       * Called by the Viewport when the mouse or other pointer is clicked on this item.
       *
       * @param event - The pointer event that was generated from the user interaction
       */
      onPointerClick(event) {
          this.emit('pointerClick', event);
          if (event.propagating && this.__ownerItem instanceof TreeItem) {
              this.__ownerItem.onPointerClick(event);
          }
      }
      /**
       * Called by the Viewport when the mouse or other pointer is double-clicked on this item.
       *
       * @param event - The pointer event that was generated from the user interaction
       */
      onPointerDoubleClick(event) {
          this.emit('pointerDoubleClick', event);
          if (event.propagating && this.__ownerItem instanceof TreeItem) {
              this.__ownerItem.onPointerDoubleClick(event);
          }
      }
      /**
       * Called by the Viewport when the mouse or other pointer is double-clicked on this item.
       *
       * @param event - The pointer event that was generated from the user interaction
       */
      onPointerLongPress(event) {
          this.emit('pointerLongPress', event);
          if (event.propagating && this.__ownerItem instanceof TreeItem) {
              this.__ownerItem.onPointerLongPress(event);
          }
      }
      /**
       * Called by the Viewport when the mouse wheel event is received by the canvas element.
       * Emits the ZeaWheelEvent with the key 'mouseWheel', and Propagates is up to the TreeItem's owner.
       *
       * @param event - The wheel event that occurs.
       */
      onWheel(event) {
          this.emit('mouseWheel', event);
          if (event.propagating && this.__ownerItem instanceof TreeItem) {
              this.__ownerItem.onWheel(event);
          }
      }
      /**
       * Called by the Viewport when the touch cancel event is received by the canvas element.
       * Emits the ZeaTouchEvent with the key 'touchCancel', and Propagates is up to the TreeItem's owner.
       *
       * @param event - The wheel event that occurs.
       */
      onTouchCancel(event) {
          this.emit('touchCancel', event);
          if (event.propagating && this.__ownerItem instanceof TreeItem) {
              this.__ownerItem.onTouchCancel(event);
          }
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method serializes this instance as a JSON.
       * It can be used for persistence, data transfer, etc.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          let j = super.toJSON(context);
          // Some Items, such as the SliderSceneWidget do not need their children
          // to be saved.
          const childItemsJSON = {};
          for (const childItem of this.__childItems) {
              if (childItem) {
                  const childJSON = childItem.toJSON(context);
                  if (childJSON)
                      childItemsJSON[childItem.getName()] = childJSON;
              }
          }
          if (Object.keys(childItemsJSON).length > 0) {
              if (j) {
                  j.children = childItemsJSON;
              }
              else {
                  j = {
                      name: this.__name,
                      children: childItemsJSON,
                  };
              }
          }
          return j;
      }
      /**
       * The fromJSON method takes a JSON and deserializes into an instance of this type.
       *
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context, onDone) {
          super.fromJSON(j, context);
          // if ('bbox' in j){
          //     let box = new Box3();
          //     box.fromJSON(j.bbox);
          //     this.boundingBoxParam.value = box)
          // }
          if (j.children != null) {
              const childrenJson = j.children;
              if (Array.isArray(childrenJson)) {
                  for (const childJson of childrenJson) {
                      // Note: During loading of asset trees, we have an
                      // existing tree generated by loading a bin data file.
                      let childItem = this.getChildByName(childJson.name);
                      if (childItem) {
                          childItem.fromJSON(childJson, context);
                      }
                      else {
                          if (childJson.type) {
                              childItem = Registry.constructClass(childJson.type);
                              if (childItem) {
                                  // Note: we should load the json first, as it
                                  // may contain the unique name of the item.
                                  childItem.fromJSON(childJson, context);
                                  this.addChild(childItem, false, false);
                              }
                          }
                      }
                  }
              }
              else {
                  // eslint-disable-next-line guard-for-in
                  for (const childName in childrenJson) {
                      const childJson = childrenJson[childName];
                      // Note: During loading of asset trees, we have an
                      // existing tree generated by loading a bin data file.
                      let childItem = this.getChildByName(childName);
                      if (childItem) {
                          childItem.fromJSON(childJson, context);
                      }
                      else if (childJson.type) {
                          childItem = Registry.constructClass(childJson.type);
                          if (childItem) {
                              // Note: we add the child now before loading.
                              // This is because certain items. (e.g. Groups)
                              // Calculate their global Xfo, and use it to modify
                              // the transform of their members.
                              // Note: Groups bind to items in the scene which are
                              // already added as children, and so have global Xfos.
                              // We prefer to add a child after its loaded, because sometimes
                              // In the tree is asset items, who will only toggled as
                              // unloaded once they are loaded(else they are considered inline assets.)
                              childItem.fromJSON(childJson, context);
                              this.addChild(childItem, false, false);
                          }
                      }
                      else ;
                  }
              }
          }
          // if (j.components) {
          //   for (const cj of j.components) {
          //     const component = Registry.constructClass(cj.type ? cj.type : cj.name)
          //     if (component) {
          //       component.fromJSON(cj, context)
          //       this.addComponent(component)
          //     }
          //   }
          // }
      }
      /**
       * Sets state of current Item(Including parameters & children) using a binary reader object.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          super.readBinary(reader, context);
          const itemFlags = reader.loadUInt8();
          const visibilityFlag = 1 << 1;
          // Note: XRef loads a visiblity setting for itself when loading in the parent assembly tree,
          // then it loads the zcad file which contains a visibility setting for the CADAssset. This
          // visibility setting would override the XRef. Ideally the zcad file would not store a visiblity
          // setting for the CADAsset, as that should be set by the loading context.
          // Visible is true by default, so only set it to false. This is to work around the above conflict.
          if ((itemFlags & visibilityFlag) == 0)
              this.setVisible(false);
          // Note: to save space, some values are skipped if they are identity values
          const localXfoFlag = 1 << 2;
          const localXfoIndependentScFlag = 1 << 5;
          if (itemFlags & localXfoFlag) {
              const xfo = new Xfo();
              xfo.tr = reader.loadFloat32Vec3();
              xfo.ori = reader.loadFloat32Quat();
              if (itemFlags & localXfoIndependentScFlag) {
                  xfo.sc = reader.loadFloat32Vec3();
              }
              else {
                  const sc = reader.loadFloat32();
                  xfo.sc.set(sc, sc, sc);
              }
              this.localXfoParam.value = xfo;
          }
          const bboxFlag = 1 << 3;
          if (itemFlags & bboxFlag) {
              this.boundingBoxParam.loadValue(new Box3(reader.loadFloat32Vec3(), reader.loadFloat32Vec3()));
          }
          const numChildren = reader.loadUInt32();
          if (numChildren > 0) {
              const toc = reader.loadUInt32Array(numChildren);
              for (let i = 0; i < numChildren; i++) {
                  try {
                      reader.seek(toc[i]); // Reset the pointer to the start of the item data.
                      let childType = reader.loadStr();
                      const childItem = Registry.constructClass(childType);
                      if (!childItem) {
                          const childName = reader.loadStr();
                          console.warn('Unable to construct child:' + childName + ' of type:' + childType);
                          continue;
                      }
                      reader.seek(toc[i]); // Reset the pointer to the start of the item data.
                      childItem.readBinary(reader, context);
                      this.addChild(childItem, false, true);
                  }
                  catch (e) {
                      console.warn('Error loading tree item: ', e);
                  }
              }
          }
      }
      // ////////////////////////////////////////
      // Clone and Destroy
      /**
       * The clone method constructs a new tree item, copies its values
       * from this item and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned tree item.
       */
      clone(context) {
          const cloned = new TreeItem('');
          cloned.copyFrom(this, context);
          return cloned;
      }
      /**
       * Copies current TreeItem with all its children.
       *
       * @param src - The tree item to copy from.
       * @param context - The context value.
       */
      copyFrom(src, context) {
          super.copyFrom(src, context);
          // Note: configure visiblity and opacity before adding children. They will
          // inherit these settings as they are added.
          this.visibleCounter = this.visibleParam.value ? 1 : 0;
          this.updateVisibility();
          this.updateOpacity();
          // Note: If a tree item already had children, we must clear them before adding from the src.
          // An XRef stored in an assembly may contain a cache of its subtree.
          // If the XRef url does resolve to a file, we must clear this cache before loading the actual data.
          this.removeAllChildren();
          src.getChildren().forEach((srcChildItem) => {
              if (srcChildItem)
                  this.addChild(srcChildItem.clone(context), false, false);
          });
      }
  }
  Registry.register('TreeItem', TreeItem);

  /* eslint-disable @typescript-eslint/no-explicit-any */
  /**
   * Represents a specific type of parameter, that only stores `TreeItem` values.
   *
   * i.e.:
   * ```javascript
   * const treeItem = new TreeItem('tree1')
   * const treeItemParam = new TreeItemParameter('MyTreeItem', treeItem)
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(treeItemParam)
   * ```
   *
   * **Events**
   * * **treeItemGlobalXfoChanged:** Triggered when computed world Xfo of parameter's `TreeItem` changes.
   * * **valueChanged:** Triggered when parameter's value changes.
   *
   * @extends Parameter
   */
  class TreeItemParameter extends Parameter {
      filterFn;
      owner;
      listenerIDs = {};
      /**
       * Create a tree item parameter.
       * @param name - The name of the tree item parameter.
       * @param filterFn - The filterFn value.
       */
      constructor(name = '', filterFn) {
          super(name, null, 'TreeItem');
          this.owner = new TreeItem(''); // TODO:(review) should this be initialize by arguments or is this ok?
          this.filterFn = filterFn;
      }
      emitTreeItemGlobalXfoChanged(event) {
          this.emit('treeItemGlobalXfoChanged', event);
      }
      /**
       * Sets parameter value's owner `TreeItem`.
       *
       * @param owner - The owner value.
       */
      setOwner(owner) {
          this.owner = owner;
      }
      /**
       * Returns parameter value's owner `TreeItem`.
       *
       * @return - The return value.
       */
      getOwner() {
          return this.owner;
      }
      /**
       * The setFilterFn method.
       * @param filterFn - The filterFn value.
       */
      setFilterFn(filterFn) {
          this.filterFn = filterFn;
      }
      /**
       * The getFilterFn method.
       * @return - The return value.
       */
      getFilterFn() {
          return this.filterFn;
      }
      /**
       * Sets parameter's `TreeItem` value.
       *
       * @param value - The treeItem value
       * @return - The return value.
       */
      setValue(value) {
          if (!(value instanceof TreeItem)) {
              throw new Error(`value provided is not an instance of a 'TreeItem' class. Check the source of this value`);
          }
          // 0 == normal set. 1 = changed via cleaner fn, 2=change by loading/cloning code.
          if (this.filterFn && !this.filterFn(value))
              return;
          if (this.__value !== value) {
              if (this.__value) {
                  this.__value.off('globalXfoChanged', this.listenerIDs['globalXfoChanged']);
              }
              this.__value = value;
              if (this.__value) {
                  this.listenerIDs['globalXfoChanged'] = this.__value.on('globalXfoChanged', (event) => {
                      this.emitTreeItemGlobalXfoChanged(event);
                  });
              }
              this.emit('valueChanged');
          }
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          return {
              type: this.getClassName(),
              name: this.name,
              value: context.makeRelative(this.__value?.getPath()),
          };
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context) {
          if (j.value == null) {
              console.warn('Invalid Parameter JSON');
              return;
          }
          context.resolvePath(j.value, (treeItem) => {
              this.setValue(treeItem);
          }, () => {
              console.warn('Unable to resolve tree item parameter value:' + j.paramPath);
          });
      }
      // ////////////////////////////////////////
      // Clone and Destroy
      /**
       * The clone method constructs a new tree item parameter, copies its values
       * from this parameter and returns it.
       *
       * @return - Returns a new tree item parameter.
       */
      clone(context) {
          const clonedParam = new TreeItemParameter(this.name, this.filterFn);
          if (this.__value)
              clonedParam.setValue(this.__value.clone(context));
          return clonedParam;
      }
  }
  Registry.register('TreeItemParameter', TreeItemParameter);

  /* eslint-disable @typescript-eslint/no-explicit-any */
  class ItemEvent extends BaseEvent {
      item;
      index;
      constructor(item, index) {
          super();
          this.index = index;
          this.item = item;
      }
  }
  /** Class representing an item set parameter.
   * @extends Parameter
   * @private
   */
  class ItemSetParameter extends Parameter {
      filterFn;
      /**
       * Create an item set parameter.
       * @param name - The name of the item set parameter.
       * @param filterFn - The filterFn value.
       */
      constructor(name = '', filterFn) {
          super(name, new Set(), 'TreeItem');
          this.filterFn = filterFn; // Note: the filter Fn indicates that users will edit the set.
      }
      /**
       * The setFilterFn method.
       * @param filterFn - The filterFn value.
       */
      setFilterFn(filterFn) {
          this.filterFn = filterFn;
      }
      /**
       * The getFilterFn method.
       * @return - The return value.
       */
      getFilterFn() {
          return this.filterFn;
      }
      /**
       * The getItem method.
       * @param index - The index param.
       * @return - The return value.
       */
      getItem(index) {
          // if (!this.__items) return undefined
          return Array.from(this.__value)[index];
      }
      /**
       * The addItem method.
       * @param item - The item value.
       * @param emitValueChanged - The emit value.
       * @return - The return value.
       */
      addItem(item, emitValueChanged = true) {
          if (this.filterFn && !this.filterFn(item)) {
              console.warn('ItemSet __filterFn rejecting item:', item.getPath());
              return;
          }
          if (!this.__value.has(item)) {
              this.__value.add(item);
              const index = Array.from(this.__value).indexOf(item);
              this.emit('itemAdded', new ItemEvent(item, index));
              if (emitValueChanged)
                  this.emit('valueChanged');
              return index;
          }
          else {
              return -1;
          }
      }
      /**
       * Adds items to the parameter value
       *
       * @param items - list of items to add to the parameter
       * @param emitValueChanged
       * @memberof ItemSetParameter
       */
      addItems(items, emitValueChanged = true) {
          items.forEach((item) => this.addItem(item, false));
          if (emitValueChanged)
              this.emit('valueChanged');
      }
      /**
       * The removeItem method.
       * @param index - The index value.
       * @param emitValueChanged - The emit param.
       * @return - The return value.
       */
      removeItem(index, emitValueChanged = true) {
          const item = Array.from(this.__value)[index];
          this.__value.delete(item);
          this.emit('itemRemoved', new ItemEvent(item, index));
          if (emitValueChanged)
              this.emit('valueChanged');
          return item;
      }
      /**
       * The setItems method.
       * @param items - The item param.
       * @param emit - The emit param.
       */
      setItems(items, emit = true) {
          const values = Array.from(this.__value);
          for (let i = values.length - 1; i >= 0; i--) {
              const item = values[i];
              if (!items.has(item)) {
                  this.removeItem(i, false);
              }
          }
          for (const item of items) {
              if (!this.__value.has(item)) {
                  this.addItem(item, false);
              }
          }
          if (emit)
              this.emit('valueChanged');
      }
      /**
       * The clearItems method.
       * @param emit - The emit value.
       */
      clearItems(emitValueChanged = true) {
          this.__value.clear();
          if (emitValueChanged)
              this.emit('valueChanged');
      }
      /**
       * The getNumItems method.
       * @return - The return value.
       */
      getNumItems() {
          return this.__value.size; // might be faster
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       * @param context - The context value.
       * @return - The return value.
       */
      toJSON(context) {
          if (!this.__value)
              this.__value = new Set();
          const paths = [];
          for (const item of this.__value) {
              const path = item.getPath();
              paths.push(context && context.makeRelative ? context.makeRelative(path) : path);
          }
          return {
              type: this.getClassName(),
              name: this.name,
              value: paths,
          };
      }
      /**
       * The fromJSON method decodes a json object for this type.
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context) {
          if (!context || !context.resolvePath) {
              throw new Error('Unable to load JSON on a ItemSetParameter without a load context');
          }
          const paths = j.value;
          paths.forEach((path) => {
              context.resolvePath(path, (treeItem) => {
                  this.addItem(treeItem, false);
              }, () => {
                  console.warn("BaseGroup: '" + this.getName() + "'. Unable to load item:" + path);
              });
          });
      }
      // ////////////////////////////////////////
      // Clone
      /**
       * The clone method constructs a item set new parameter, copies its values
       * from this parameter and returns it.
       *
       * @return - Returns a new item set parameter.
       */
      clone() {
          const clonedParam = new ItemSetParameter(this.name, this.filterFn);
          return clonedParam;
      }
  }
  Registry.register('ItemSetParameter', ItemSetParameter);

  /**
   * Represents a specific type of parameter, that stores `number` and `BaseImage` texture values.
   *
   * i.e.:
   * ```javascript
   * const image = new LDRImage();
   * image.load("https://storage.googleapis.com/zea-playground-assets/zea-engine/texture.png")
   *
   * const numberParam = new MaterialFloatParam('MyMaterialFloat', 15.5)
   * numberParam.setImage(image)
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(numberParam)
   * ```
   *
   * * **Events**
   * * **valueChanged:** Triggered every time the Image value changes
   * * **textureDisconnected:** Triggered when Image value is cleaned/removed.
   * * **textureConnected:** Triggered when the Image value is set.
   *
   * @extends NumberParameter
   */
  class MaterialFloatParam extends NumberParameter {
      image;
      /**
       * Create a material float parameter.
       * @param name - The name of the material color parameter.
       * @param value - The value of the parameter.
       * @param range - An array with two numbers. If defined, the parameter value will be clamped.
       */
      constructor(name = '', value, range) {
          super(name, value, range);
      }
      /**
       * Returns `BaseImage` texture of the Material.
       *
       * @return - The return value.
       */
      getImage() {
          return this.image;
      }
      /**
       * Sets `BaseImage` texture value in parameter.
       *
       * @param value - The value value.
       */
      setImage(value) {
          const disconnectImage = () => {
              this.emit('textureDisconnected');
          };
          if (value) {
              if (this.image != undefined && this.image !== value) {
                  disconnectImage();
              }
              this.image = value;
              this.emit('textureConnected');
              this.emit('valueChanged');
          }
          else {
              if (this.image != undefined) {
                  disconnectImage();
                  this.image = undefined;
                  this.emit('textureDisconnected');
              }
          }
      }
      /**
       * Sets `number` or the `BaseImage` texture value in parameter.
       *
       * @param value - The value param.
       */
      setValue(value) {
          if (typeof value != 'number' && !(value instanceof BaseImage)) {
              throw new Error(`value provided is not of type number of an instance of 'BaseImage' class. Check the source of this value`);
          }
          if (value instanceof BaseImage) {
              this.setImage(value);
          }
          else {
              super.setValue(value);
          }
      }
      /**
       * Extracts `number` and `Image` values from a buffer, updating current parameter state.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          super.readBinary(reader, context);
          const textureName = reader.loadStr();
          if (textureName != '') {
              console.log('Load Texture');
              this.setImage(context.assetItem.materialLibrary.getImage(textureName));
          }
      }
      /**
       * The clone method constructs a new material float parameter,
       * copies its values from this parameter and returns it.
       *
       * @return - Returns a new cloned material float parameter.
       */
      clone() {
          const clonedParam = new MaterialFloatParam(this.name, this.__value, this.range);
          return clonedParam;
      }
  }
  Registry.register('MaterialFloatParam', MaterialFloatParam);

  exports.ColorSpace = void 0;
  (function (ColorSpace) {
      ColorSpace["Gamma"] = "Gamma";
      ColorSpace["Linear"] = "Linear";
  })(exports.ColorSpace || (exports.ColorSpace = {}));
  /**
   * Represents a specific type of parameter, that stores `Color` and `BaseImage` texture values.
   *
   * i.e.:
   * ```javascript
   * const image = new LDRImage();
   * image.load("https://storage.googleapis.com/zea-playground-assets/zea-engine/texture.png")
   *
   * const matColorParam = new MaterialColorParam('MyMaterialColor', new Color(0, 254, 2))
   * matColorParam.setImage(image)
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(matColorParam)
   * ```
   *
   * **Events**
   * * **valueChanged:** Triggered every time the Image value changes
   * * **textureDisconnected:** Triggered when Image value is cleaned/removed.
   * * **textureConnected:** Triggered when the Image value is set.
   *
   * @extends ColorParameter
   */
  // TODO: should MaterialColorParam have these parameters below? I'm assuming no.
  // class MaterialColorParam extends Parameter {
  //   constructor() {
  //     super()
  //     this.__shaderName = 'StandardSurfaceShader'
  //     this.addParameter('BaseColor', new MaterialColorParam(1.0, 1, 0.5))
  //     this.addParameter('AmbientOcclusion', new MaterialFloatParam(1, [0, 1]))
  //     this.addParameter('Metallic', new MaterialFloatParam(0.5, [0, 1]))
  //     this.addParameter('Reflectance', new NumberParameter(0.5, [0, 1]))
  //     this.addParameter('Normal', new MaterialColorParam(1.0, 1, 0.5))
  //     this.addParameter('EmissiveStrength', new NumberParameter(0.5, [0, 1]))
  //     this.addParameter('Opacity', new MaterialFloatParam(0.5, [0, 1]))
  //   }
  //   get value() : Color {
  //     return this.__value
  //   }
  //   set value() : Color {
  //     return this.__value
  //   }
  // }
  class MaterialColorParam extends ColorParameter {
      listenerIDs = {};
      image;
      // Color values default to gamma space, but when loaded
      // from a file such as zcad or GLTF, we set this value to ColorSpace.Linear
      colorSpace = exports.ColorSpace.Gamma;
      /**
       * Create a material color parameter.
       * @param name - The name of the material color parameter.
       * @param value - The value of the parameter.
       */
      constructor(name, value) {
          super(name, value);
      }
      /**
       * Returns `BaseImage` texture of the Material.
       *
       * @return - The return value.
       */
      getImage() {
          return this.image;
      }
      /**
       * The imageUpdated method.
       * @private
       */
      imageUpdated() {
          this.emit('valueChanged');
      }
      /**
       * Sets `BaseImage` texture value in parameter.
       *
       * @param value - The value param.
       */
      setImage(value) {
          const disconnectImage = () => {
              if (this.image) {
                  this.image.off('updated', this.listenerIDs['updated']);
                  this.image = undefined;
              }
              this.emit('textureDisconnected');
          };
          if (value) {
              if (this.image != undefined && this.image !== value) {
                  disconnectImage();
              }
              this.image = value;
              this.listenerIDs['updated'] = this.image.on('updated', () => {
                  this.imageUpdated();
              });
              this.emit('textureConnected');
              this.emit('valueChanged');
          }
          else {
              if (this.image != undefined) {
                  disconnectImage();
                  this.image = undefined;
                  this.emit('textureDisconnected');
              }
          }
      }
      /**
       * Sets `Color` or the `BaseImage` texture value in parameter.
       *
       * @param value - The value param.
       */
      setValue(value) {
          if (!(value instanceof BaseImage) && !(value instanceof Color)) {
              throw new Error(`value provided is not an instance of a 'Color' or 'BaseImage' class. Check the source of this value`);
          }
          if (value instanceof BaseImage) {
              this.setImage(value);
          }
          else {
              super.setValue(value);
          }
      }
      /**
       * Retrieves `Color` and `Image` values from a buffer, updating current parameter state.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          super.readBinary(reader, context);
          const textureName = reader.loadStr();
          if (textureName != '') {
              this.setImage(context.assetItem.materialLibrary.getImage(textureName));
          }
          this.colorSpace = exports.ColorSpace.Linear;
      }
      toJSON(context) {
          const j = super.toJSON(context);
          j.colorSpace = this.colorSpace;
          return j;
      }
      fromJSON(j, context) {
          super.fromJSON(j, context);
          this.colorSpace = exports.ColorSpace[j.colorSpace] ?? exports.ColorSpace.Gamma;
      }
      /**
       * The clone method constructs a new material color parameter,
       * copies its values from this parameter and returns it.
       *
       * @return - Returns a new cloned material color parameter.
       */
      clone() {
          const clonedParam = new MaterialColorParam(this.name, this.__value?.clone());
          clonedParam.colorSpace = this.colorSpace;
          return clonedParam;
      }
  }
  Registry.register('MaterialColorParam', MaterialColorParam);

  /* eslint-disable require-jsdoc */
  /**
   * Represents a type of `ParameterOwner` class that holds material configuration.
   * Use this to apply materials to your assets or item parts.
   *
   * **Events**
   * * **shaderNameChanged:** Triggered when the shader's name is set through `setShaderName` method.
   *
   * @extends ParameterOwner
   */
  class Material extends ParameterOwner {
      __isOpaque = true;
      __isTextured = false;
      __shaderName = '';
      libraryIndex = -1;
      /**
       * Create a material
       * @param name - The name of the material.
       * @param shaderName - Shader's class name.
       */
      constructor(name, shaderName) {
          super(name);
          if (shaderName)
              this.setShaderName(shaderName);
      }
      /**
       * Getter for the shader name.
       * @return - Returns the shader name.
       */
      getShaderName() {
          return this.__shaderName;
      }
      /**
       * Sets shader by using the name of the class with the script.
       * It is important that the shader is registered in `Registry`, otherwise it will error.
       * See all classes that extend from `GLShader`.
       *
       * @param shaderName - The shader name.
       */
      setShaderName(shaderName) {
          if (this.__shaderName == shaderName)
              return;
          this.__shaderName = shaderName;
          const shaderClass = Registry.getClassDefinition(shaderName);
          const materialTemplate = shaderClass.getMaterialTemplate();
          if (!materialTemplate)
              throw new Error('Error setting Shader. Material template not registered found:' + shaderName);
          const paramMap = {};
          let i = materialTemplate.getNumParameters();
          while (i--) {
              const srcParam = materialTemplate.getParameterByIndex(i);
              const param = this.getParameter(srcParam.getName());
              if (param) ;
              else {
                  this.addParameter(srcParam.clone());
              }
              paramMap[srcParam.getName()] = true;
          }
          // Remove redundant Params.
          for (const param of this.params) {
              if (!paramMap[param.getName()]) {
                  this.removeParameter(param.getName());
              }
          }
          this.__shaderName = shaderName;
          this.__checkOpacity({});
          const event = new ShaderNameChangedEvent(shaderName);
          this.emit('shaderNameChanged', event);
      }
      /**
       * Remove all textures from Material's parameters.
       */
      removeAllTextures() {
          for (const param of this.params) {
              if (param instanceof MaterialColorParam) {
                  if (param.getImage())
                      param.setImage(null);
              }
              else if (param instanceof MaterialFloatParam) {
                  if (param.getImage())
                      param.setImage(null);
              }
          }
      }
      // /////////////////////////////
      // Parameters
      /**
       * Returns the current path of the item in the tree as an array of names.
       *
       * @return - Returns an array.
       */
      getPath() {
          if (this.__ownerItem == undefined)
              return [this.__name];
          else if (this.__ownerItem instanceof Parameter) {
              return [...this.__ownerItem.getPath(), 'value'];
          }
          else {
              return [...this.__ownerItem.getPath(), this.__name];
          }
      }
      /**
       * Returns all texture parameters in current Material.
       *
       * @return - The return value.
       */
      getParamTextures() {
          const textures = {};
          for (const param of this.params) {
              if (param instanceof MaterialColorParam) {
                  if (param.getImage())
                      textures[param.getName()] = param.getImage();
              }
              else if (param instanceof MaterialFloatParam) {
                  if (param.getImage())
                      textures[param.getName()] = param.getImage();
              }
          }
          return textures;
      }
      /**
       * Checks if the material is transparent by checking the `Opacity` parameter.
       *
       * @return - Returns true if the material is transparent.
       */
      isOpaque() {
          return this.__isOpaque;
      }
      __checkOpacity(event) {
          let isOpaque = true;
          try {
              const shaderClass = this.getShaderClass();
              if (!shaderClass.isOpaque()) {
                  isOpaque = false;
              }
          }
          catch (e) { }
          if (isOpaque) {
              const opacity = this.getParameter('Opacity');
              if (opacity && (opacity.value < 0.99 || (opacity instanceof MaterialFloatParam && opacity.getImage()))) {
                  isOpaque = false;
              }
              else {
                  const baseColorParam = this.getParameter('BaseColor');
                  if (baseColorParam) {
                      if (baseColorParam instanceof MaterialColorParam) {
                          const image = baseColorParam.getImage();
                          if (image && image.format == 'RGBA') {
                              isOpaque = false;
                          }
                      }
                      if (isOpaque && baseColorParam.value) {
                          const color_val = baseColorParam.value;
                          if (color_val.a < 1)
                              isOpaque = false;
                      }
                  }
              }
          }
          if (isOpaque != this.__isOpaque) {
              this.__isOpaque = isOpaque;
              const event = new OpacityStateChangedEvent(isOpaque, true);
              this.emit('opacityChanged', event);
              this.emit('transparencyChanged', event); // For legacy listeners
          }
      }
      /**
       * Checks if the material has a texture applied. The renderer can use this to optimize rendering of non-textured objects
       *
       * @return - Returns true if the material is textured.
       */
      isTextured() {
          return this.__isTextured;
      }
      __checkTextures(event) {
          // console.log('__checkTextures')
          const param = event ? event : {};
          let isTextured = false;
          for (const param of this.params) {
              if (param instanceof MaterialColorParam) {
                  if (param.getImage()) {
                      isTextured = true;
                      break;
                  }
              }
              else if (param instanceof MaterialFloatParam) {
                  if (param.getImage()) {
                      isTextured = true;
                      break;
                  }
              }
          }
          if (isTextured != this.__isTextured) {
              this.__isTextured = isTextured;
              let event = new TexturedChangedEvent(isTextured, param);
              this.emit('texturedChanged', event);
          }
      }
      /**
       * This method can be overridden in derived classes
       * to perform general updates (see GLPass or BaseItem).
       * @param event - The event object emitted by the parameter.
       * @private
       */
      parameterValueChanged(event) {
          this.__checkOpacity(event);
          this.__checkTextures(event);
          super.parameterValueChanged(event);
      }
      /**
       * Returns shaders class of current material, if set. Otherwise it returns `undefined`
       *
       * @return - The return value.
       */
      getShaderClass() {
          return Registry.getClassDefinition(this.getShaderName());
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes the current object as a json object.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const j = super.toJSON(context);
          j.shader = this.__shaderName;
          return j;
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context = {}) {
          if (!j.shader) {
              console.warn('Invalid Material JSON');
              return;
          }
          this.setShaderName(j.shader);
          super.fromJSON(j, context);
          this.__checkOpacity();
          this.__checkTextures();
      }
      /**
       * Sets state of current Item(Including Shaders and Materials) using a binary reader object.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          let shaderName = reader.loadStr();
          if (shaderName == 'StandardMaterial') {
              shaderName = 'StandardSurfaceShader';
          }
          if (shaderName == 'TransparentMaterial') {
              shaderName = 'StandardSurfaceShader';
          }
          this.setShaderName(shaderName);
          super.readBinary(reader, context);
          this.__checkOpacity();
          this.__checkTextures();
      }
      // ////////////////////////////////////////
      // Clone and Destroy
      /**
       * The clone method constructs a new material, copies its values
       * from this material and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned material.
       */
      clone(context) {
          const cloned = new Material('clone', ''); // TODO: what should the arguemnts be here?
          cloned.copyFrom(this, context);
          return cloned;
      }
      /**
       * When a Material is copied, first runs `BaseItem` copyFrom method, then sets shader.
       *
       * @param src - The material to copy from.
       * @param context - The context value.
       */
      copyFrom(src, context) {
          this.setShaderName(src.getShaderName());
          super.copyFrom(src, context);
      }
  }
  Registry.register('Material', Material);

  /* eslint-disable @typescript-eslint/no-explicit-any */
  /**
   * Represents a specific type of parameter, that only stores `Material` values.
   *
   * i.e.:
   * ```javascript
   * const material = new Material('itemMaterial', 'SimpleSurfaceShader')
   * material.getParameter('BaseColor').setValue(new Color(89 / 255, 182 / 255, 92 / 255))
   *
   * const materialParam = new MaterialParameter('MyMaterial', material)
   * //'myParameterOwnerItem' is an instance of a 'ParameterOwner' class.
   * // Remember that only 'ParameterOwner' and classes that extend from it can host 'Parameter' objects.
   * myParameterOwnerItem.addParameter(materialParam)
   * ```
   * **Events**
   * * **valueParameterValueChanged:** Triggered when parameter's value changes.
   * * **valueChanged:** Triggered when parameter's value changes, except on cleaning processes.
   *
   * @extends Parameter
   */
  class MaterialParameter extends Parameter {
      listenerIDs = {};
      /**
       * Create a material parameter.
       * @param name - The name of the material parameter.
       * @param value - The value of the parameter.
       */
      constructor(name = '', value = null) {
          super(name, null, 'Material');
          if (value)
              this.setValue(value);
      }
      valueParameterValueChanged(event) {
          this.emit('valueParameterValueChanged', event);
      }
      /**
       * Sets `Material` value of the parameter.
       *
       * @param value - The material value.
       */
      setValue(value) {
          if (value != null && !(value instanceof Material)) {
              throw new Error(`value provided is not an instance of a 'Material' class. Check the source of this value`);
          }
          // 0 == normal set. 1 = changed via cleaner fn, 2 = change by loading/cloning code.
          if (this.__value !== value) {
              if (this.__value) {
                  this.__value.setOwner(null);
                  this.__value.off('parameterValueChanged', this.listenerIDs['parameterValueChanged']);
              }
              this.__value = value;
              if (this.__value) {
                  this.__value.setOwner(this);
                  this.listenerIDs['parameterValueChanged'] = this.__value.on('parameterValueChanged', (event) => {
                      this.valueParameterValueChanged(event);
                  });
              }
              // During the cleaning process, we don't want notifications.
              this.emit('valueChanged');
          }
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The loadValue is used to change the value of a parameter, without triggering a
       * valueChanges.
       *
       * @param value - The context value.
       */
      loadValue(value) {
          if (this.__value) {
              this.__value.setOwner(null);
              this.__value.off('parameterValueChanged', this.listenerIDs['parameterValueChanged']);
          }
          this.__value = value;
          if (this.__value) {
              this.__value.setOwner(this);
              this.listenerIDs['parameterValueChanged'] = this.__value.on('parameterValueChanged', (event) => {
                  this.valueParameterValueChanged(event);
              });
          }
      }
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const j = {
              type: this.getClassName(),
              name: this.name,
          };
          if (this.__value) {
              if (this.__value.libraryIndex >= 0) {
                  j.libraryIndex = this.__value.libraryIndex;
              }
              else {
                  j.value = this.__value.toJSON(context);
              }
          }
          return j;
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context) {
          if (j.libraryIndex != undefined) {
              if (context && context.assetItem) {
                  const materialLibrary = context.assetItem.getMaterialLibrary();
                  const material = materialLibrary.getMaterial(j.libraryIndex);
                  if (material) {
                      this.setValue(material);
                  }
              }
          }
          else if (j.value) {
              if (this.__value && this.__value.getClassName() == j.value.type) {
                  this.__value.fromJSON(j.value);
              }
              else {
                  const material = Registry.constructClass(j.value.type);
                  if (j.value)
                      material.fromJSON(j.value, context);
                  this.setValue(material);
              }
          }
      }
      // ////////////////////////////////////////
      // Clone and Destroy
      /**
       * The clone method constructs a new material parameter, copies its values
       * from this parameter and returns it.
       *
       * @return - Returns a new material parameter.
       */
      clone() {
          const clonedParam = new MaterialParameter(this.name, this.__value);
          return clonedParam;
      }
  }
  Registry.register('MaterialParameter', MaterialParameter);

  /* eslint-disable @typescript-eslint/no-explicit-any */
  function approxEqual(a, b) {
      for (let i = 0; i < a.length; i++) {
          if (Math.abs(b[i] - a[i]) > 0.001)
              return true;
      }
      return false;
  }
  const resizeArray = (inArray, newSize) => {
      if (inArray instanceof Uint8Array) {
          const newArray = new Uint8Array(newSize);
          newArray.set(inArray);
          return newArray;
      }
      else if (inArray instanceof Int8Array) {
          const newArray = new Int8Array(newSize);
          newArray.set(inArray);
          return newArray;
      }
      else if (inArray instanceof Uint16Array) {
          const newArray = new Uint16Array(newSize);
          newArray.set(inArray);
          return newArray;
      }
      else {
          const newArray = new Float32Array(newSize);
          newArray.set(inArray);
          return newArray;
      }
  };
  class Attribute extends BaseClass {
      dataTypeName;
      stride;
      initValue = Number.NaN;
      normalized;
      data;
      mesh;
      splitValues = [];
      splits = {};
      constructor(dataTypeName, stride, initValue = Number.NaN) {
          super();
          this.dataTypeName = dataTypeName;
          this.stride = stride;
          this.initValue = initValue;
          this.init();
      }
      init() {
          this.data = new Float32Array(0);
          this.initRange(0);
      }
      /**
       * Sets the Mesh reference to the VertexAttribute. This is needed for attributes
       * assigned to meshes, and is used to calculate face vertex indices.
       * > Note: the mesh automatically calls this method when a vertex attribute is assigned.
       *
       * @param mesh - The mesh object
       */
      setMesh(mesh) {
          this.mesh = mesh;
      }
      /**
       * Returns the backing array for this attribute
       *
       * @return - The return value.
       */
      asArray() {
          return this.data;
      }
      /**
       * Returns the name of the math type this attribute stores.
       *
       * @return - The return value.
       */
      getDataTypeName() {
          return this.dataTypeName;
      }
      /**
       * Returns the count of attribute values in the data.
       *
       * @return - The return value.
       */
      getCount() {
          return this.data.length / this.stride;
      }
      /**
       * Returns the count of attribute values in the data.
       *
       * @return - The return value.
       */
      get count() {
          return this.data.length / this.stride;
      }
      /**
       * Sets the count of attribute values in the data.
       *
       * @param size - The size value.
       */
      setCount(count) {
          const prevLength = this.data.length;
          const newLength = count * this.stride;
          if (newLength > prevLength) {
              this.data = resizeArray(this.data, newLength);
              this.initRange(prevLength);
          }
          else if (newLength < prevLength) {
              this.data = this.data.slice(0, newLength);
          }
          else ;
          this.splits = {};
          this.splitValues = [];
      }
      /**
       * Fills up data values with default ones starting from the specified index.
       *
       * @param start - The start value.
       */
      initRange(start) {
          // Initialize the values to invalid values.
          for (let i = start; i < this.data.length; i++) {
              this.data[i] = this.initValue;
          }
      }
      isInitialized(a) {
          for (let i = 0; i < a.length; i++) {
              if (a[i] != this.initValue)
                  return true;
          }
          return false;
      }
      /**
       * Returns the number of elements stored in each `T`.
       *
       * @return - The return value.
       */
      get numElements() {
          return this.stride;
      }
      /**
       * Returns data value of the specified index.
       *
       * @param index - The index value.
       * @return - The return value.
       */
      getFloat32Value(index) {
          return this.data[index];
      }
      /**
       * Sets data value in the specified index.
       *
       * @param index - The index value.
       * @param value - The value param.
       */
      setFloat32Value(index, value) {
          this.data[index] = value;
      }
      /**
       * Sets data values in the specified index.
       */
      getValues(index) {
          if (index >= this.data.length / this.stride)
              throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / this.stride);
          const offset = index * this.stride;
          return this.data.subarray(offset, offset + this.stride);
      }
      /**
       * Sets data values in the specified index.
       */
      setValues(index, values) {
          if (index >= this.data.length / this.stride)
              throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / this.stride);
          const offset = index * this.stride;
          this.data.set(values, offset);
      }
      merge(other, xfo = new Xfo()) {
          const prevNumValues = this.data.length;
          const addedValues = other.data.length;
          const newLength = prevNumValues + addedValues;
          const data = new Float32Array(newLength);
          data.set(this.data, 0);
          for (let i = 0; i < addedValues; i++) {
              data[prevNumValues + i] = other.data[i];
          }
          this.data = data;
          this.splitValues = [...this.splitValues, ...other.splitValues];
      }
      // //////////////////////////////////////////////////
      // Face Vertex Values
      /**
       * The getSplits method.
       * @return - The return value.
       */
      getSplits() {
          return this.splits;
      }
      /**
       * Gets the value of a corner vertex of a face.
       * @param face - The face index.
       * @param faceVertex - The index of vertex within the face. [0... num face vertices]
       * @return - The return value.
       */
      getFaceVertexValue_array(face, faceVertex) {
          const vertex = this.mesh.getFaceVertexIndex(face, faceVertex);
          if (vertex in this.splits && face in this.splits[vertex]) {
              return this.splitValues[this.splits[vertex][face]];
          }
          return this.data.subarray(vertex * this.stride, (vertex + 1) * this.stride);
      }
      /**
       * Sets the value of a corner vertex of a face.
       * @param face - The face index.
       * @param faceVertex - The index of vertex within the face. [0... num face vertices]
       * @param value - The value value.
       */
      setFaceVertexValue_array(face, faceVertex, value) {
          const vertex = this.mesh.getFaceVertexIndex(face, faceVertex);
          this.setFaceVertexValue_ByVertexIndex(face, vertex, value);
      }
      /**
       * The setFaceVertexValue_ByVertexIndex method.
       * @param face - The face index.
       * @param vertex - The vertex value.
       * @param value - The value value.
       */
      setFaceVertexValue_ByVertexIndex(face, vertex, value) {
          const currValue = this.data.subarray(vertex * this.stride, (vertex + 1) * this.stride);
          if (!this.isInitialized(currValue)) {
              // the value is uninitialized. Initialize it.
              currValue.set(value);
          }
          else if (approxEqual(currValue, value)) ;
          else {
              // The new value is different from the existing value
              if (vertex in this.splits) {
                  // Now check if any existing splits for this vertex match the value being set.
                  // i.e. for faces around a vertex, there will often be a seam along 2 edges
                  // where the values differ. On each side of the seam, all faces can use the same
                  // value. We should see then only one split value for the vertex.
                  const vertexSplitIds = this.splits[vertex];
                  for (const fid in vertexSplitIds) {
                      const splitId = vertexSplitIds[fid];
                      if (approxEqual(this.splitValues[splitId], value)) {
                          // re-use this split value
                          vertexSplitIds[face] = splitId;
                          return;
                      }
                  }
                  // If a split already exists for this face, re-use it.
                  if (face in this.splits[vertex]) {
                      this.splitValues[this.splits[vertex][face]] = value;
                      return;
                  }
              }
              else {
                  this.splits[vertex] = {};
              }
              this.splits[vertex][face] = this.splitValues.length;
              this.splitValues.push(value);
          }
      }
      /**
       * The setSplitVertexValue method.
       * @param vertex - The vertex value.
       * @param face - The face index.
       * @param value - The value value.
       */
      setSplitVertexValue_array(vertex, face, value) {
          if (!(vertex in this.splits))
              this.splits[vertex] = {};
          if (face in this.splits[vertex]) {
              const currValue = this.splitValues[this.splits[vertex][face]];
              if (approxEqual(currValue, value))
                  return;
              console.warn('Face Vertex Already Split with different value');
          }
          this.splits[vertex][face] = this.splitValues.length;
          this.splitValues.push(value);
      }
      /**
       * The setSplitVertexValues method.
       * @param vertex - The vertex value.
       * @param faceGroup - The faceGroup value.
       * @param value - The value value.
       */
      setSplitVertexValues(vertex, faceGroup, values) {
          if (!(vertex in this.splits))
              this.splits[vertex] = {};
          const splitIndex = this.splitValues.length;
          this.splitValues.push(values);
          for (const face of faceGroup) {
              // if (face in this.splits[vertex]) {
              //     let currValue = this.splitValues[this.splits[vertex][face]];
              //     if (currValue.approxEqual(value))
              //         return;
              //     console.warn("Face Vertex Already Split with different value");
              // }
              this.splits[vertex][face] = splitIndex;
          }
      }
      /**
       * The generateSplitValues method.
       * @param splitIndices - The splitIndices value.
       * @param splitCount - The splitCount value.
       * @return - The return value.
       */
      generateSplitValues(splitIndices, splitCount) {
          if (splitCount == 0)
              return this.data;
          const numUnSplitValues = this.getCount();
          const data = resizeArray(this.data, (numUnSplitValues + splitCount) * this.stride);
          // Now duplicate the split values to generate an attributes array
          // using the shared splits across all attributes.
          // eslint-disable-next-line guard-for-in
          for (const vertex in splitIndices) {
              const faces = splitIndices[vertex];
              // eslint-disable-next-line guard-for-in
              for (const face in faces) {
                  const tgt = numUnSplitValues + faces[face];
                  if (vertex in this.splits && face in this.splits[vertex]) {
                      // this attribute has a split value in its array.
                      // we must use that value...
                      const src = this.splits[vertex][face];
                      const srcArray = this.splitValues[src];
                      for (let i = 0; i < srcArray.length; i++) {
                          data[tgt * this.stride + i] = srcArray[i];
                      }
                  }
                  else {
                      // Copy each scalar value to the new place in the array.
                      const src = parseInt(vertex);
                      for (let e = 0; e < this.stride; e++) {
                          data[tgt * this.stride + e] = this.data[src * this.stride + e];
                      }
                  }
              }
          }
          return data;
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          return {
              data: Array.from(this.data),
              dataType: this.dataTypeName,
              length: this.data.length / this.stride,
          };
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object this item must decode.
       */
      fromJSON(j) {
          const data = j.data;
          for (let i = 0; i < data.length; i++) {
              this.data[i] = data[i];
          }
      }
      /**
       * The loadSplitValues method.
       * @param reader - The reader value.
       */
      loadSplitValues(reader) {
          const splitIndices = reader.loadUInt32Array();
          if (splitIndices.length == 0)
              return;
          let offset = 0;
          let numSplitValues = 0;
          while (true) {
              const vertexId = splitIndices[offset++];
              const numSplits = splitIndices[offset++];
              const splits = {};
              for (let i = 0; i < numSplits; i++) {
                  const faceId = splitIndices[offset++];
                  const splitId = splitIndices[offset++];
                  splits[faceId] = splitId;
                  if (splitId >= numSplitValues)
                      numSplitValues = splitId + 1;
              }
              this.splits[vertexId] = splits;
              if (offset >= splitIndices.length)
                  break;
          }
          const dim = this.stride;
          const splitValues = reader.loadFloat32Array(numSplitValues * dim);
          this.splitValues = [];
          for (let i = 0; i < numSplitValues; i++) {
              const val = splitValues.slice(i * dim, i * dim + dim);
              this.splitValues.push(val);
          }
      }
      /**
       * Returns the string representation of the object's state.
       *
       * @return - The return value.
       */
      toString() {
          return JSON.stringify(this.toJSON(), null, 2);
      }
      // ////////////////////////////////////////
      // Memory
      /**
       * Returns vertex attributes buffers and its count.
       *
       * @return - The return value.
       */
      genBuffer() {
          return {
              values: this.data,
              count: this.getCount(),
              dimension: this.stride,
              dataType: this.dataTypeName,
              normalized: this.normalized,
          };
      }
  }

  /**
   * Class representing an attribute.
   */
  class Vec2Attribute extends Attribute {
      /**
       * Create a Vec2Attribute.
       */
      constructor(dataTypeName = 'Vec2') {
          super(dataTypeName, 2);
          this.normalized = false;
      }
      /**
       * Returns the Vec2 from the specified index.
       *
       * @param index - The index value.
       * @return Vec2 - The return value.
       */
      getValue(index) {
          if (index >= this.data.length / this.stride)
              throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);
          const offset = index * this.stride;
          return new Vec2(this.data[offset], this.data[offset + 1]);
      }
      /**
       * Sets Vec2 at the specified index.
       *
       * @param index - The index value.
       * @param value - The value param.
       */
      setValue(index, value) {
          if (index >= this.data.length / this.stride)
              throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);
          const offset = index * this.stride;
          this.data.set(value.asArray(), offset);
      }
      /**
       * Gets the value of a corner vertex of a face.
       * > Note: 'Ref' means that the value contains a reference to the data in the attribute.
       * > The components of the value can be changed causing the attributes data is changed.
       * > No need to call 'setFaceVertexValue'.
       * @param face - The face index.
       * @param faceVertex - The index of vertex within the face. [0... num face vertices]
       * @return - The return value.
       */
      getFaceVertexValue(face, faceVertex) {
          const array = this.getFaceVertexValue_array(face, faceVertex);
          return new Vec2(array[0], array[1]);
      }
      /**
       * Sets the value of a corner vertex of a face.
       * @param face - The face index.
       * @param faceVertex - The index of vertex within the face. [0... num face vertices]
       * @param value - The value value.
       */
      setFaceVertexValue(face, faceVertex, value) {
          this.setFaceVertexValue_array(face, faceVertex, Float32Array.from(value.asArray()));
      }
      /**
       * The setSplitVertexValue method.
       * @param vertex - The vertex value.
       * @param face - The face index.
       * @param value - The value value.
       */
      setSplitVertexValue(vertex, face, value) {
          this.setSplitVertexValue_array(vertex, face, Float32Array.from(value.asArray()));
      }
      merge(other, xfo = new Xfo()) {
          const prevNumValues = this.getCount();
          const addedValues = other.getCount();
          this.setCount(prevNumValues + addedValues);
          for (let i = 0; i < addedValues; i++) {
              this.setValue(prevNumValues + i, other.getValue(i));
          }
          this.splitValues = [...this.splitValues, ...other.splitValues];
      }
  }
  Registry.register('Vec2Attribute', Vec2Attribute);

  const mapIn$2 = (value) => {
      return MathFunctions.encode16BitFloat(value);
  };
  const mapOut$2 = (value) => {
      return MathFunctions.decode16BitFloat(value);
  };
  /**
   * Class representing an attribute.
   */
  class Vec2f16Attribute extends Vec2Attribute {
      /**
       * Create a Vec3f8Attribute.
       */
      constructor() {
          super('Vec2f16');
      }
      init() {
          this.data = new Uint16Array(0);
          this.initRange(0);
      }
      initRange(start) {
          // Initialize the values to invalid values.
          for (let i = start; i < this.data.length; i++) {
              this.data[i] = mapIn$2(Number.NaN);
          }
      }
      isInitialized(a) {
          for (let i = 0; i < a.length; i++) {
              if (Number.isFinite(mapOut$2(a[i])))
                  return true;
          }
          return false;
      }
      /**
       * Returns a copy of the Vec2 value at the specified index.
       *
       * @param index - The index value.
       * @return Vec2 - The value at the specified index.
       */
      getValue(index) {
          if (index >= this.data.length / this.stride)
              throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);
          const offset = index * this.stride;
          const valueData = this.data.subarray(offset, offset + this.stride);
          return new Vec2(mapOut$2(valueData[0]), mapOut$2(valueData[1]));
      }
      /**
       * Sets Vec2 at the specified index.
       *
       * @param index - The index value.
       * @param value - The value param.
       */
      setValue(index, value) {
          if (index >= this.data.length / this.stride)
              throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);
          const offset = index * this.stride;
          const valueData = this.data.subarray(offset, offset + this.stride);
          valueData[0] = mapIn$2(value.x);
          valueData[1] = mapIn$2(value.y);
      }
      /**
       * Gets the value of a corner vertex of a face.
       * > Note: 'Ref' means that the value contains a reference to the data in the attribute.
       * > The components of the value can be changed causing the attributes data is changed.
       * > No need to call 'setFaceVertexValue'.
       * @param face - The face index.
       * @param faceVertex - The index of vertex within the face. [0... num face vertices]
       * @return - The return value.
       */
      getFaceVertexValue(face, faceVertex) {
          const array = this.getFaceVertexValue_array(face, faceVertex);
          return new Vec2(mapOut$2(array[0]), mapOut$2(array[1]));
      }
      /**
       * Sets the value of a corner vertex of a face.
       * @param face - The face index.
       * @param faceVertex - The index of vertex within the face. [0... num face vertices]
       * @param value - The value value.
       */
      setFaceVertexValue(face, faceVertex, value) {
          const valueData = new Uint16Array(2);
          valueData[0] = mapIn$2(value.x);
          valueData[1] = mapIn$2(value.y);
          this.setFaceVertexValue_array(face, faceVertex, valueData);
      }
  }

  class Vec3Ref {
      data;
      constructor(data) {
          this.data = data;
      }
      get x() {
          return this.data[0];
      }
      set x(value) {
          this.data[0] = value;
      }
      get y() {
          return this.data[1];
      }
      set y(value) {
          this.data[1] = value;
      }
      get z() {
          return this.data[2];
      }
      set z(value) {
          this.data[2] = value;
      }
      set(x, y, z) {
          this.data[0] = x;
          this.data[1] = y;
          this.data[2] = z;
      }
  }
  /**
   * Class representing an attribute.
   */
  class Vec3Attribute extends Attribute {
      /**
       * Create a Vec3Attribute.
       */
      constructor(dataTypeName = 'Vec3') {
          super(dataTypeName, 3);
          this.normalized = false;
      }
      /**
       * Returns a copy of the Vec3 value at the specified index.
       *
       * @param index - The index value.
       * @return Vec3 - The value at the specified index.
       */
      getValue(index) {
          if (index >= this.data.length / this.stride)
              throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);
          const offset = index * this.stride;
          return new Vec3(this.data[offset + 0], this.data[offset + 1], this.data[offset + 2]);
      }
      /**
       * Returns a copy of the Vec3 value at the specified index.
       *
       * @deprecated - This method will soon be removed.
       * @return Vec3 - The value at the specified index.
       */
      getValueRef(index) {
          if (index >= this.data.length / this.stride)
              throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);
          const offset = index * this.stride;
          return new Vec3Ref(this.data.subarray(offset, offset + 3));
      }
      /**
       * Sets Vec3 at the specified index.
       *
       * @param index - The index value.
       * @param value - The value param.
       */
      setValue(index, value) {
          this.setValues(index, value.asArray());
      }
      /**
       * Gets the value of a corner vertex of a face.
       * > Note: 'Ref' means that the value contains a reference to the data in the attribute.
       * > The components of the value can be changed causing the attributes data is changed.
       * > No need to call 'setFaceVertexValue'.
       * @param face - The face index.
       * @param faceVertex - The index of vertex within the face. [0... num face vertices]
       * @return - The return value.
       */
      getFaceVertexValue(face, faceVertex) {
          const array = this.getFaceVertexValue_array(face, faceVertex);
          return new Vec3(array[0], array[1], array[2]);
      }
      /**
       * Sets the value of a corner vertex of a face.
       * @param face - The face index.
       * @param faceVertex - The index of vertex within the face. [0... num face vertices]
       * @param value - The value value.
       */
      setFaceVertexValue(face, faceVertex, value) {
          this.setFaceVertexValue_array(face, faceVertex, Float32Array.from(value.asArray()));
      }
      /**
       * The setSplitVertexValue method.
       * @param vertex - The vertex value.
       * @param face - The face index.
       * @param value - The value value.
       */
      setSplitVertexValue(vertex, face, value) {
          this.setSplitVertexValue_array(vertex, face, Float32Array.from(value.asArray()));
      }
      merge(other, xfo = new Xfo()) {
          const prevNumValues = this.getCount();
          const addedValues = other.getCount();
          // We cached these values before calling 'setCount'.
          // Maybe 'setCount' shoulnd't clear the splits. It seems heavy, but I don't want to change anything.
          // We should just re-write the system without splits anyway.
          // const splitValues = [...this.splitValues, ...other.splitValues]
          // const splits = [...this.splits, ...other.splits]
          this.setCount(prevNumValues + addedValues);
          for (let i = 0; i < addedValues; i++) {
              this.setValue(prevNumValues + i, xfo.transformVec3(other.getValue(i)));
          }
          // this.splitValues = [...this.splitValues, ...other.splitValues]
      }
  }
  Registry.register('Vec3Attribute', Vec3Attribute);

  class Vec3f8Ref {
      data;
      constructor(data) {
          this.data = data;
      }
      get x() {
          return MathFunctions.decode16BitFloat(this.data[0]);
      }
      set x(value) {
          this.data[0] = MathFunctions.encode16BitFloat(value);
      }
      get y() {
          return MathFunctions.decode16BitFloat(this.data[1]);
      }
      set y(value) {
          this.data[1] = MathFunctions.encode16BitFloat(value);
      }
      get z() {
          return MathFunctions.decode16BitFloat(this.data[2]);
      }
      set z(value) {
          this.data[2] = MathFunctions.encode16BitFloat(value);
      }
      set(x, y, z) {
          this.data[0] = MathFunctions.encode16BitFloat(x);
          this.data[1] = MathFunctions.encode16BitFloat(y);
          this.data[2] = MathFunctions.encode16BitFloat(z);
      }
  }
  const mapIn$1 = (value, valueRange) => {
      return MathFunctions.remap(value, valueRange[0], valueRange[1], -127, 127);
  };
  const mapOut$1 = (value, valueRange) => {
      return MathFunctions.remap(value, -127, 127, valueRange[0], valueRange[1]);
  };
  /**
   * Class representing an attribute.
   */
  class Vec3f8Attribute extends Vec3Attribute {
      valueRange;
      /**
       * Create a Vec3f8Attribute.
       */
      constructor(valueRange = [-1, 1]) {
          super('Vec3f8');
          this.valueRange = valueRange;
      }
      init() {
          this.data = new Int8Array(0);
          this.initRange(0);
      }
      initRange(start) {
          // Initialize the values to invalid values.
          for (let i = start; i < this.data.length; i++) {
              this.data[i] = mapIn$1(Number.NaN, this.valueRange);
          }
      }
      isInitialized(a) {
          for (let i = 0; i < a.length; i++) {
              if (Number.isFinite(mapOut$1(a[i], this.valueRange)))
                  return true;
          }
          return false;
      }
      /**
       * Returns a copy of the Vec3 value at the specified index.
       *
       * @param index - The index value.
       * @return Vec3 - The value at the specified index.
       */
      getValue(index) {
          if (index >= this.data.length / this.stride)
              throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);
          const offset = index * this.stride;
          const valueData = this.data.subarray(offset, offset + this.stride);
          return new Vec3(mapOut$1(valueData[0], this.valueRange), mapOut$1(valueData[1], this.valueRange), mapOut$1(valueData[2], this.valueRange));
      }
      /**
       * Returns a copy of the Vec3 value at the specified index.
       *
       * @deprecated - This method will soon be removed.
       * @return Vec3 - The value at the specified index.
       */
      getValueRef(index) {
          if (index >= this.data.length / this.stride)
              throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);
          const offset = index * this.stride;
          return new Vec3f8Ref(this.data.subarray(offset, offset + 3));
      }
      /**
       * Sets Vec3 at the specified index.
       *
       * @param index - The index value.
       * @param value - The value param.
       */
      setValue(index, value) {
          if (index >= this.data.length / this.stride)
              throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);
          const offset = index * this.stride;
          const valueData = this.data.subarray(offset, offset + this.stride);
          valueData[0] = mapIn$1(value.x, this.valueRange);
          valueData[1] = mapIn$1(value.y, this.valueRange);
          valueData[2] = mapIn$1(value.z, this.valueRange);
      }
      /**
       * Gets the value of a corner vertex of a face.
       * > Note: 'Ref' means that the value contains a reference to the data in the attribute.
       * > The components of the value can be changed causing the attributes data is changed.
       * > No need to call 'setFaceVertexValue'.
       * @param face - The face index.
       * @param faceVertex - The index of vertex within the face. [0... num face vertices]
       * @return - The return value.
       */
      getFaceVertexValue(face, faceVertex) {
          const array = this.getFaceVertexValue_array(face, faceVertex);
          return new Vec3(mapOut$1(array[0], this.valueRange), mapOut$1(array[1], this.valueRange), mapOut$1(array[2], this.valueRange));
      }
      /**
       * Sets the value of a corner vertex of a face.
       * @param face - The face index.
       * @param faceVertex - The index of vertex within the face. [0... num face vertices]
       * @param value - The value value.
       */
      setFaceVertexValue(face, faceVertex, value) {
          const valueData = new Int8Array(3);
          valueData[0] = mapIn$1(value.x, this.valueRange);
          valueData[1] = mapIn$1(value.y, this.valueRange);
          valueData[2] = mapIn$1(value.z, this.valueRange);
          this.setFaceVertexValue_array(face, faceVertex, valueData);
      }
      /**
       * The setSplitVertexValues method.
       * @param vertex - The vertex value.
       * @param faceGroup - The faceGroup value.
       * @param value - The value value.
       */
      setSplitVertexValues(vertex, faceGroup, values) {
          super.setSplitVertexValues(vertex, faceGroup, values.map((v) => mapIn$1(v, this.valueRange), this.valueRange));
      }
  }

  const mapIn = (value) => {
      return MathFunctions.encode16BitFloat(value);
  };
  const mapOut = (value) => {
      return MathFunctions.decode16BitFloat(value);
  };
  class Vec3f16Ref {
      data;
      constructor(data) {
          this.data = data;
      }
      get x() {
          return mapOut(this.data[0]);
      }
      set x(value) {
          this.data[0] = mapIn(value);
      }
      get y() {
          return mapOut(this.data[1]);
      }
      set y(value) {
          this.data[1] = mapIn(value);
      }
      get z() {
          return mapOut(this.data[2]);
      }
      set z(value) {
          this.data[2] = mapIn(value);
      }
      set(x, y, z) {
          this.data[0] = mapIn(x);
          this.data[1] = mapIn(y);
          this.data[2] = mapIn(z);
      }
  }
  /**
   * Class representing an attribute.
   */
  class Vec3f16Attribute extends Vec3Attribute {
      /**
       * Create a Vec3f8Attribute.
       */
      constructor() {
          super('Vec3f16');
      }
      init() {
          this.data = new Uint16Array(0);
          this.initRange(0);
      }
      initRange(start) {
          // Initialize the values to invalid values.
          for (let i = start; i < this.data.length; i++) {
              this.data[i] = mapIn(Number.NaN);
          }
      }
      isInitialized(a) {
          for (let i = 0; i < a.length; i++) {
              if (Number.isFinite(mapOut(a[i])))
                  return true;
          }
          return false;
      }
      /**
       * Returns a copy of the Vec3 value at the specified index.
       *
       * @param index - The index value.
       * @return Vec3 - The value at the specified index.
       */
      getValue(index) {
          if (index >= this.data.length / this.stride)
              throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);
          const offset = index * this.stride;
          const valueData = this.data.subarray(offset, offset + this.stride);
          return new Vec3(mapOut(valueData[0]), mapOut(valueData[1]), mapOut(valueData[2]));
      }
      /**
       * Returns a copy of the Vec3 value at the specified index.
       *
       * @deprecated - This method will soon be removed.
       * @return Vec3 - The value at the specified index.
       */
      getValueRef(index) {
          if (index >= this.data.length / this.stride)
              throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);
          const offset = index * this.stride;
          return new Vec3f16Ref(this.data.subarray(offset, offset + 3));
      }
      /**
       * Sets Vec3 at the specified index.
       *
       * @param index - The index value.
       * @param value - The value param.
       */
      setValue(index, value) {
          if (index >= this.data.length / this.stride)
              throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);
          const offset = index * this.stride;
          const valueData = this.data.subarray(offset, offset + this.stride);
          valueData[0] = mapIn(value.x);
          valueData[1] = mapIn(value.y);
          valueData[2] = mapIn(value.z);
      }
      /**
       * Gets the value of a corner vertex of a face.
       * > Note: 'Ref' means that the value contains a reference to the data in the attribute.
       * > The components of the value can be changed causing the attributes data is changed.
       * > No need to call 'setFaceVertexValue'.
       * @param face - The face index.
       * @param faceVertex - The index of vertex within the face. [0... num face vertices]
       * @return - The return value.
       */
      getFaceVertexValue(face, faceVertex) {
          const array = this.getFaceVertexValue_array(face, faceVertex);
          return new Vec3(mapOut(array[0]), mapOut(array[1]), mapOut(array[2]));
      }
      /**
       * Sets the value of a corner vertex of a face.
       * @param face - The face index.
       * @param faceVertex - The index of vertex within the face. [0... num face vertices]
       * @param value - The value value.
       */
      setFaceVertexValue(face, faceVertex, value) {
          const valueData = new Uint16Array(3);
          valueData[0] = mapIn(value.x);
          valueData[1] = mapIn(value.y);
          valueData[2] = mapIn(value.z);
          this.setFaceVertexValue_array(face, faceVertex, valueData);
      }
      /**
       * The setSplitVertexValues method.
       * @param vertex - The vertex value.
       * @param faceGroup - The faceGroup value.
       * @param value - The value value.
       */
      setSplitVertexValues(vertex, faceGroup, values) {
          super.setSplitVertexValues(vertex, faceGroup, values.map((v) => mapIn(v)));
      }
  }

  /**
   * Class representing an attribute.
   */
  class ColorAttribute extends Attribute {
      /**
       * Create a ColorAttribute.
       */
      constructor() {
          super('Color', 4);
          this.normalized = false;
      }
      /**
       * Returns a copy of the Color value at the specified index.
       *
       * @param index - The index value.
       * @return Color - The return value.
       */
      getValue(index) {
          if (index >= this.data.length / this.stride)
              throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);
          const offset = index * this.stride;
          return new Color(this.data[offset + 0], this.data[offset + 1], this.data[offset + 2], this.data[offset + 3]);
      }
      /**
       * Sets Color at the specified index.
       *
       * @param index - The index value.
       * @param value - The value param.
       */
      setValue(index, value) {
          this.setValues(index, value.asArray());
      }
      /**
       * Gets the value of a corner vertex of a face.
       * > Note: 'Ref' means that the value contains a reference to the data in the attribute.
       * > The components of the value can be changed causing the attributes data is changed.
       * > No need to call 'setFaceVertexValue'.
       * @param face - The face index.
       * @param faceVertex - The index of vertex within the face. [0... num face vertices]
       * @return - The return value.
       */
      getFaceVertexValue(face, faceVertex) {
          const array = this.getFaceVertexValue_array(face, faceVertex);
          return new Color(array[0], array[1], array[2], array[3]);
      }
      /**
       * Sets the value of a corner vertex of a face.
       * @param face - The face index.
       * @param faceVertex - The index of vertex within the face. [0... num face vertices]
       * @param value - The value value.
       */
      setFaceVertexValue(face, faceVertex, value) {
          this.setFaceVertexValue_array(face, faceVertex, Float32Array.from(value.asArray()));
      }
      /**
       * The setSplitVertexValue method.
       * @param vertex - The vertex value.
       * @param face - The face index.
       * @param value - The value value.
       */
      setSplitVertexValue(vertex, face, value) {
          this.setSplitVertexValue_array(vertex, face, Float32Array.from(value.asArray()));
      }
      merge(other, xfo = new Xfo()) {
          const prevNumValues = this.getCount();
          const addedValues = other.getCount();
          this.setCount(prevNumValues + addedValues);
          for (let i = 0; i < addedValues; i++) {
              this.setValue(prevNumValues + i, other.getValue(i));
          }
          this.splitValues = [...this.splitValues, ...other.splitValues];
      }
  }
  Registry.register('ColorAttribute', ColorAttribute);

  /* eslint-disable @typescript-eslint/no-explicit-any */
  const parse8BitPositionsArray = (range, offset, sclVec, positions_quantized, positionsAttr) => {
      for (let i = range[0]; i < range[1]; i++) {
          const pos = new Vec3(positions_quantized[i * 3 + 0] / 255.0, positions_quantized[i * 3 + 1] / 255.0, positions_quantized[i * 3 + 2] / 255.0);
          pos.multiplyInPlace(sclVec);
          pos.addInPlace(offset);
          positionsAttr.setValue(i, pos);
      }
  };
  const parse16BitPositionsArray = (range, offset, sclVec, positions_quantized, positionsAttr) => {
      for (let i = range[0]; i < range[1]; i++) {
          const pos = new Vec3(positions_quantized[i * 3 + 0] / 65535.0, positions_quantized[i * 3 + 1] / 65535.0, positions_quantized[i * 3 + 2] / 65535.0);
          pos.multiplyInPlace(sclVec);
          pos.addInPlace(offset);
          positionsAttr.setValue(i, pos);
      }
  };
  const parse8BitNormalsArray = (range, offset, sclVec, normals_quantized, normalsAttr) => {
      if (sclVec.isNull())
          sclVec.set(1, 1, 1);
      for (let i = range[0]; i < range[1]; i++) {
          const normal = new Vec3(normals_quantized[i * 3 + 0] / 255.0, normals_quantized[i * 3 + 1] / 255.0, normals_quantized[i * 3 + 2] / 255.0);
          normal.multiplyInPlace(sclVec);
          normal.addInPlace(offset);
          normal.normalizeInPlace();
          normalsAttr.setValue(i, normal);
      }
  };
  const parse8BitTextureCoordsArray = (range, offset, sclVec, texCoords_quantized, texCoordsAttr) => {
      // if (sclVec.isNull())
      //     sclVec.set(1, 1, 1);
      for (let i = range[0]; i < range[1]; i++) {
          const textureCoord = new Vec2(texCoords_quantized[i * 2 + 0] / 255.0, texCoords_quantized[i * 2 + 1] / 255.0);
          textureCoord.multiplyInPlace(sclVec);
          textureCoord.addInPlace(offset);
          texCoordsAttr.setValue(i, textureCoord);
      }
  };
  const parse16BitTextureCoordsArray = (range, offset, sclVec, texCoords_quantized, texCoordsAttr) => {
      // if (sclVec.isNull())
      //     sclVec.set(1, 1, 1);
      for (let i = range[0]; i < range[1]; i++) {
          const textureCoord = new Vec2(texCoords_quantized[i * 2 + 0] / 65535.0, texCoords_quantized[i * 2 + 1] / 65535.0);
          textureCoord.multiplyInPlace(sclVec);
          textureCoord.addInPlace(offset);
          texCoordsAttr.setValue(i, textureCoord);
      }
  };
  /**
   * Represents a base class for 3D geometry items.
   *
   * **Events**
   * * **boundingBoxChanged:** Triggered when the bounding box changes.
   * * **geomDataChanged:** Emitted when the geometry attributes have changed. The topology did not change. The Renderer will upload the new attributes to the GPU.
   * * **geomDataTopologyChanged:** Emitted when the geometry attributes and topology have changed.  The Renderer will upload the new attributes and topology to the GPU.
   *
   * @extends ParameterOwner
   */
  class BaseGeom extends ParameterOwner {
      boundingBox = new Box3();
      boundingBoxDirty = true;
      __metaData = new Map();
      #numVertices = 0;
      __vertexAttributes = new Map();
      debugColor = new Color(1, 0, 0, 1);
      /**
       * Create a base geom.
       */
      constructor() {
          super();
          this.addVertexAttribute('positions', new Vec3f16Attribute());
      }
      /**
       * Returns the current path of the item in the tree as an array of names.
       *
       * @return - Returns an array.
       */
      getPath() {
          if (this.__ownerItem == undefined)
              return [this.__name];
          else if (this.__ownerItem instanceof Parameter) {
              return [...this.__ownerItem.getPath(), 'value'];
          }
          else {
              return [...this.__ownerItem.getPath(), this.__name];
          }
      }
      /**
       * The clear method.
       */
      clear() {
          this.setNumVertices(0);
      }
      /**
       * Adds a new vertex attribute to the geometry.
       *
       * @param name - The name of the vertex attribute.
       * @param dataType - The dataType value. // TODO: is any ok vs. AttrValue | number. Unsure about how dataType is used
       * @return - Returns an attribute.
       */
      addVertexAttribute(name, attr) {
          attr.setCount(this.#numVertices);
          this.__vertexAttributes.set(name, attr);
      }
      /**
       * Checks if the the geometry has an attribute with the specified name.
       *
       * @param name - The name of the vertex attribute.
       * @return - The return value.
       */
      hasVertexAttribute(name) {
          return this.__vertexAttributes.has(name);
      }
      /**
       * Returns vertex attribute with the specified name.
       *
       * @param name - The name of the vertex attribute.
       * @return - The return value.
       */
      getVertexAttribute(name) {
          return this.__vertexAttributes.get(name);
      }
      /**
       * Returns all vertex attributes in an object with their names.
       *
       * @return - The return value.
       */
      getVertexAttributes() {
          const vertexAttributes = {};
          for (const [key, attr] of this.__vertexAttributes.entries())
              vertexAttributes[key] = attr;
          return vertexAttributes;
      }
      /**
       * Returns 'positions' vertex attribute.
       */
      get positions() {
          return this.__vertexAttributes.get('positions');
      }
      /**
       * Returns the number of vertex attributes.
       *
       * @return - The return value.
       */
      numVertices() {
          return this.#numVertices;
      }
      /**
       * Returns the number of vertex attributes.
       *
       * @return - The return value.
       */
      getNumVertices() {
          return this.#numVertices;
      }
      /**
       * Sets the number of vertices the geometry has.
       *
       * @param count - The count value.
       */
      setNumVertices(count) {
          this.#numVertices = count;
          // Resizes each of the vertex attributes to match the new count.
          this.__vertexAttributes.forEach((attr) => attr.setCount(this.#numVertices));
          this.setBoundingBoxDirty();
      }
      // ////////////////////////////////////////
      // BoundingBox
      /**
       * Returns the bounding box for geometry.
       * @return - The return value.
       */
      getBoundingBox() {
          if (this.boundingBoxDirty)
              this.updateBoundingBox();
          return this.boundingBox;
      }
      /**
       * The setBoundingBoxDirty method.
       */
      setBoundingBoxDirty() {
          this.boundingBoxDirty = true;
          this.emit('boundingBoxChanged');
      }
      /**
       * The updateBoundingBox method.
       */
      updateBoundingBox() {
          const positions = this.positions;
          const bbox = new Box3();
          if (positions) {
              const numVerts = positions.getCount();
              for (let i = 0; i < numVerts; i++)
                  bbox.addPoint(positions.getValue(i));
          }
          this.boundingBox = bbox;
          this.boundingBoxDirty = false;
      }
      /**
       * Merges a separate geometry into this one. Similar to a 'union' boolean operation.
       * @param other the other geom that will be merged into this one
       * @param xfo the transformation to be applied to the other geom as it is merged in.
       */
      merge(other, xfo = new Xfo()) {
          const prevNumVerts = this.getNumVertices();
          const addedVerts = other.getNumVertices();
          for (const [attrName, attr] of this.__vertexAttributes) {
              const otherAttr = other.getVertexAttribute(attrName);
              if (otherAttr) {
                  if (attrName == 'positions')
                      attr.merge(otherAttr, xfo);
                  else if (attrName == 'normals')
                      attr.merge(otherAttr, new Xfo(new Vec3(), xfo.ori));
              }
          }
          // Note: all the attributes have already been resized, so
          // this is just a final check.
          this.setNumVertices(prevNumVerts + addedVerts);
          this.updateBoundingBox();
      }
      // ////////////////////////////////////////
      // Metadata
      /**
       * Returns metadata value of the specified name.
       *
       * @param key - The key value.
       * @return - The return value.
       */
      getMetadata(key) {
          return this.__metaData.get(key);
      }
      /**
       * Verifies if geometry's metadata contains a value with the specified key.
       *
       * @param key - The key value.
       * @return - The return value.
       */
      hasMetadata(key) {
          return this.__metaData.has(key);
      }
      /**
       * Sets metadata value to the geometry.
       *
       * @param key - The key value.
       * @param metaData - The metaData value.
       */
      setMetadata(key, metaData) {
          this.__metaData.set(key, metaData);
      }
      /**
       * Removes metadata value from the geometry with the specified key.
       *
       * @param key - The key value.
       */
      deleteMetadata(key) {
          this.__metaData.delete(key);
      }
      // ////////////////////////////////////////
      // Memory
      /**
       * Returns vertex attributes buffers and its count.
       * @return - The return value.
       */
      genBuffers(opts) {
          const attrBuffers = {};
          for (const [attrName, attr] of this.__vertexAttributes) {
              attrBuffers[attrName] = attr.genBuffer();
          }
          return {
              numVertices: this.numVertices(),
              attrBuffers,
          };
      }
      /**
       * Once the buffers have been uploaded to the GPU, we are free to release them.
       * The GLGeomLibrary may call this function to let the geometry know it can release any handles.
       */
      freeBuffers() { }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Sets state of current Geometry(Including Vertices and Bounding Box) using a binary reader object.
       *
       * @param reader - The reader value.
       */
      loadBaseGeomBinary(reader, context) {
          this.name = reader.loadStr();
          const flags = reader.loadUInt8();
          this.debugColor = reader.loadRGBFloat32Color();
          const numVerts = reader.loadUInt32();
          this.boundingBox.set(reader.loadFloat32Vec3(), reader.loadFloat32Vec3());
          let normalsAttr;
          let texCoordsAttr;
          if (flags & (1 << 1)) {
              normalsAttr = this.getVertexAttribute('normals');
              if (!normalsAttr) {
                  normalsAttr = new Vec3f8Attribute();
                  this.addVertexAttribute('normals', normalsAttr);
              }
          }
          if (flags & (1 << 2)) {
              texCoordsAttr = this.getVertexAttribute('texCoords');
              if (!texCoordsAttr) {
                  texCoordsAttr = new Vec2f16Attribute();
                  this.addVertexAttribute('texCoords', texCoordsAttr);
              }
          }
          const numClusters = reader.loadUInt32();
          if (numClusters == 0) {
              const positionsAttr = this.positions;
              // From 3.12.0, vertex data is a mix of 16bit and 8 bit quanitization
              // without any k-means clustering.
              // @ts-ignore
              positionsAttr.data = reader.loadUInt16Array(numVerts * 3);
              if (normalsAttr) {
                  // @ts-ignore
                  normalsAttr.data = reader.loadInt8Array(numVerts * 3);
              }
              if (texCoordsAttr) {
                  // @ts-ignore
                  texCoordsAttr.data = reader.loadUInt16Array(numVerts * 2);
              }
              // This should be a no-op in each of the attributes as they already have
              // arrays of the appropriate size..
              this.setNumVertices(numVerts);
          }
          else if (numClusters == 1) {
              // Older zcad files store 32 bit floats. The renderer may convert these to 16bit.
              this.addVertexAttribute('positions', new Vec3Attribute());
              this.setNumVertices(numVerts);
              const positionsAttr = this.positions;
              {
                  const box3 = this.boundingBox;
                  // From 3.9.1, vertex data is a mix of 16bit and 8 bit quanitization
                  if (context.versions['zea-engine'].compare([3, 9, 1]) >= 0) {
                      const positions_quantized = reader.loadUInt16Array(numVerts * 3, false);
                      parse16BitPositionsArray([0, numVerts], box3.p0, box3.diagonal(), positions_quantized, positionsAttr);
                  }
                  else {
                      const positions_quantized = reader.loadUInt8Array(numVerts * 3, false);
                      parse8BitPositionsArray([0, numVerts], box3.p0, box3.diagonal(), positions_quantized, positionsAttr);
                  }
              }
              if (normalsAttr) {
                  const box3 = new Box3(reader.loadFloat32Vec3(), reader.loadFloat32Vec3());
                  const normals_quantized = reader.loadUInt8Array(numVerts * 3, false);
                  parse8BitNormalsArray([0, numVerts], box3.p0, box3.diagonal(), normals_quantized, normalsAttr);
                  normalsAttr.loadSplitValues(reader);
              }
              if (texCoordsAttr) {
                  const box2 = new Box2(reader.loadFloat32Vec2(), reader.loadFloat32Vec2());
                  // From 3.9.1, vertex data is a mix of 16bit and 8 bit quanitization
                  if (context.versions['zea-engine'].compare([3, 9, 1]) >= 0) {
                      const texCoords_quantized = reader.loadUInt16Array(numVerts * 2, false);
                      parse16BitTextureCoordsArray([0, numVerts], box2.p0, box2.diagonal(), texCoords_quantized, texCoordsAttr);
                  }
                  else {
                      const texCoords_quantized = reader.loadUInt8Array(numVerts * 2, false);
                      parse8BitTextureCoordsArray([0, numVerts], box2.p0, box2.diagonal(), texCoords_quantized, texCoordsAttr);
                  }
                  texCoordsAttr.loadSplitValues(reader);
              }
          }
          else {
              // Older zcad files store 32 bit floats. The renderer may convert these to 16bit.
              this.addVertexAttribute('positions', new Vec3Attribute());
              this.setNumVertices(numVerts);
              const positionsAttr = this.positions;
              const clusters = [];
              let offset = 0;
              for (let i = 0; i < numClusters; i++) {
                  const count = reader.loadUInt32();
                  const clusterData = {
                      range: [offset, offset + count],
                      bbox: new Box3(reader.loadFloat32Vec3(), reader.loadFloat32Vec3()),
                      normalsRange: new Box3(),
                      texCoordsRange: new Box2(),
                  };
                  if (normalsAttr) {
                      clusterData.normalsRange.set(reader.loadFloat32Vec3(), reader.loadFloat32Vec3());
                  }
                  if (texCoordsAttr) {
                      clusterData.texCoordsRange.set(reader.loadFloat32Vec2(), reader.loadFloat32Vec2());
                  }
                  clusters.push(clusterData);
                  offset += count;
              }
              // From 3.9.1, vertex data is a mix of 16bit and 8 bit quanitization
              let positions_quantized;
              if (context.versions['zea-engine'].compare([3, 9, 1]) >= 0) {
                  positions_quantized = reader.loadUInt16Array(numVerts * 3, false);
              }
              else {
                  positions_quantized = reader.loadUInt8Array(numVerts * 3, false);
              }
              let normals_quantized = null;
              let texCoords_quantized = null;
              if (normalsAttr) {
                  normals_quantized = reader.loadUInt8Array(numVerts * 3, false);
              }
              if (texCoordsAttr) {
                  texCoords_quantized = reader.loadUInt8Array(numVerts * 2, false);
              }
              for (let i = 0; i < numClusters; i++) {
                  {
                      const box3 = clusters[i].bbox;
                      // From 3.9.1, vertex data is a mix of 16bit and 8 bit quanitization
                      if (context.versions['zea-engine'].compare([3, 9, 1]) >= 0) {
                          parse16BitPositionsArray(clusters[i].range, box3.p0, box3.diagonal(), positions_quantized, positionsAttr);
                      }
                      else {
                          parse8BitPositionsArray(clusters[i].range, box3.p0, box3.diagonal(), positions_quantized, positionsAttr);
                      }
                  }
                  if (normals_quantized) {
                      const box3 = clusters[i].normalsRange;
                      parse8BitNormalsArray(clusters[i].range, box3.p0, box3.diagonal(), normals_quantized, normalsAttr);
                  }
                  if (texCoords_quantized) {
                      const box2 = clusters[i].texCoordsRange;
                      if (context.versions['zea-engine'].compare([3, 9, 1]) >= 0) {
                          parse16BitTextureCoordsArray([0, numVerts], box2.p0, box2.diagonal(), texCoords_quantized, texCoordsAttr);
                      }
                      else {
                          parse8BitTextureCoordsArray(clusters[i].range, box2.p0, box2.diagonal(), texCoords_quantized, texCoordsAttr);
                      }
                  }
              }
              if (normalsAttr) {
                  normalsAttr.loadSplitValues(reader);
              }
              if (texCoordsAttr) {
                  texCoordsAttr.loadSplitValues(reader);
              }
          }
          // Loading the attributes may have dirtied the bounding box.
          // we konw we already loaded the bbox, so force it to be valid.
          this.boundingBoxDirty = false;
      }
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const json = super.toJSON(context);
          if (!context || !context.skipTopology) {
              json.numVertices = this.#numVertices || 0;
          }
          const vertexAttributes = {};
          for (const [key, attr] of this.__vertexAttributes.entries()) {
              if (!context || !('skipAttributes' in context) || !context.skipAttributes.includes(key))
                  vertexAttributes[key] = attr.toJSON(context);
          }
          json.vertexAttributes = vertexAttributes;
          return json;
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param json - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(json, context) {
          this.clear();
          super.fromJSON(json, context);
          this.setNumVertices(json.numVertices);
          for (const name in json.vertexAttributes) {
              let attr = this.__vertexAttributes.get(name);
              const attrJSON = json.vertexAttributes[name];
              if (!attr || attr.dataTypeName != attrJSON.dataType) {
                  switch (attrJSON.dataType) {
                      case 'Vec2':
                          attr = new Vec2Attribute();
                          break;
                      case 'Vec2f16':
                          attr = new Vec2f16Attribute();
                          break;
                      case 'Vec3':
                          attr = new Vec3Attribute();
                          break;
                      case 'Vec3f16':
                          attr = new Vec3f16Attribute();
                          break;
                      case 'Vec3f8':
                          attr = new Vec3f8Attribute();
                          break;
                      case 'Color':
                          attr = new ColorAttribute();
                          break;
                      default:
                          throw 'Invalid Vectex Type: ' + attr.dataTypeName;
                  }
                  attr.setCount(this.#numVertices);
                  this.addVertexAttribute(name, attr);
              }
              if (attr) {
                  attr.fromJSON(attrJSON);
              }
              else {
                  console.warn('attr undefined, cannot execute fromJSON()');
              }
          }
          this.emit('geomDataTopologyChanged');
      }
      /**
       * Returns geometry data value in json format.
       *
       * @return - The return value.
       */
      toString() {
          return JSON.stringify(this.toJSON(), null, 2);
      }
  }

  /**
   * Class representing an attribute.
   */
  class Vec4Attribute extends Attribute {
      /**
       * Create a Vec4Attribute.
       */
      constructor() {
          super('Vec4', 4);
          this.normalized = false;
      }
      /**
       * Returns a copy of the Vec4 value at the specified index.
       *
       * @param index - The index value.
       * @return Vec4 - The value at the specified index.
       */
      getValue(index) {
          if (index >= this.data.length / this.stride)
              throw new Error('Invalid vertex index:' + index + '. Num Vertices:' + this.data.length / 3);
          const offset = index * this.stride;
          return new Vec4(this.data[offset + 0], this.data[offset + 1], this.data[offset + 2], this.data[offset + 3]);
      }
      /**
       * Sets Vec4 at the specified index.
       *
       * @param index - The index value.
       * @param value - The value param.
       */
      setValue(index, value) {
          this.setValues(index, value.asArray());
      }
      /**
       * Gets the value of a corner vertex of a face.
       * > Note: 'Ref' means that the value contains a reference to the data in the attribute.
       * > The components of the value can be changed causing the attributes data is changed.
       * > No need to call 'setFaceVertexValue'.
       * @param face - The face index.
       * @param faceVertex - The index of vertex within the face. [0... num face vertices]
       * @return - The return value.
       */
      getFaceVertexValue(face, faceVertex) {
          const array = this.getFaceVertexValue_array(face, faceVertex);
          return new Vec4(array[0], array[1], array[2], array[3]);
      }
      /**
       * Sets the value of a corner vertex of a face.
       * @param face - The face index.
       * @param faceVertex - The index of vertex within the face. [0... num face vertices]
       * @param value - The value value.
       */
      setFaceVertexValue(face, faceVertex, value) {
          this.setFaceVertexValue_array(face, faceVertex, Float32Array.from(value.asArray()));
      }
      /**
       * The setSplitVertexValue method.
       * @param vertex - The vertex value.
       * @param face - The face index.
       * @param value - The value value.
       */
      setSplitVertexValue(vertex, face, value) {
          this.setSplitVertexValue_array(vertex, face, Float32Array.from(value.asArray()));
      }
      merge(other, xfo = new Xfo()) {
          const prevNumValues = this.getCount();
          const addedValues = other.getCount();
          this.setCount(prevNumValues + addedValues);
          for (let i = 0; i < addedValues; i++) {
              this.setValue(prevNumValues + i, other.getValue(i));
          }
          this.splitValues = [...this.splitValues, ...other.splitValues];
      }
  }
  Registry.register('Vec4Attribute', Vec4Attribute);

  /**
   * Class representing a point primitive drawing type, every vertex specified is a point.
   *
   * ```
   * const points = new Points()
   * ```
   *
   * * **Events**
   * * **boundingBoxChanged:** Triggered when the bounding box changes.
   *
   * @extends BaseGeom
   */
  class Points extends BaseGeom {
      /**
       * Create points.
       */
      constructor() {
          super();
      }
      /**
       * The clear method.
       */
      clear() {
          this.setNumVertices(0);
          this.emit('geomDataTopologyChanged');
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Sets state of current geometry(Including line segments) using a binary reader object.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          super.loadBaseGeomBinary(reader, context);
          // this.computeVertexNormals();
          this.emit('geomDataChanged');
      }
  }
  Registry.register('Points', Points);

  /* eslint-disable @typescript-eslint/no-unused-vars */
  class ImageArrayParameter extends Parameter {
      constructor(name = '', value = []) {
          super(name, value, 'BaseImage[]');
      }
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const j = {
              type: this.getClassName(),
              name: this.name,
              images: this.__value.map((image) => {
                  return {
                      imageType: image?.getClassName(),
                      value: image?.toJSON(),
                  };
              }),
          };
          return j;
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object this item must decode.
       * @param context - The context value.
       * @return - Returns the json object.
       */
      fromJSON(j, context) {
          if (j.images) {
              const images = j.images;
              this.__value = images.map((imageJson) => {
                  const image = Registry.constructClass(imageJson.imageType);
                  if (image && imageJson.value)
                      image.fromJSON(imageJson.value, context);
                  return image;
              });
          }
      }
      clone() {
          const clonedParam = new ImageArrayParameter(this.name, this.__value);
          return clonedParam;
      }
  }
  Registry.register('ImageArrayParameter', ImageArrayParameter);

  /**
   * @extends Points
   */
  class FatPoints extends Points {
      sprites = new ImageArrayParameter('Sprites');
      /**
       * Create points.
       */
      constructor() {
          super();
          this.addVertexAttribute('sizes', new Attribute('Float32', 1, 1));
          this.addVertexAttribute('colors', new ColorAttribute());
          this.addVertexAttribute('spriteIndices', new Attribute('Float32', 1, -1));
          this.addParameter(this.sprites);
      }
  }
  Registry.register('FatPoints', FatPoints);

  /* eslint-disable @typescript-eslint/no-unused-vars */
  /**
   *
   * Class representing lines primitive drawing type, connecting vertices using the specified indices.
   * i.e. We have 4 points(vertices) but we don't know how they connect to each other,
   * and that's why we need indices(Numbers indicating which vertex connects to which).
   * In this case if we say that `indices` is `[0,1,2,3]`, it would connect the first vertex to the second,
   * and the third to the fourth.
   *
   * ```
   * const lines = new Lines()
   * ```
   *
   * **Events**
   * * **geomDataChanged:** Triggered when the data value of the geometry is set(This includes reading binary)
   *
   * @extends BaseGeom
   */
  class Lines extends BaseGeom {
      __indices;
      /**
       * Create lines.
       */
      constructor() {
          super();
          this.__indices = new Uint32Array();
      }
      /**
       * The clear method.
       */
      clear() {
          this.setNumSegments(0);
          this.setNumVertices(0);
          this.emit('geomDataTopologyChanged');
      }
      /**
       * Returns the specified indices(Vertex connectors)
       *
       * @return - The indices index array.
       */
      getIndices() {
          return this.__indices;
      }
      /**
       * Returns the number of line segments.
       *
       * @return - Returns the number of segments.
       */
      getNumSegments() {
          return this.__indices.length / 2;
      }
      /**
       * Returns the number of line segments.
       *
       * @return - Returns the number of segments.
       */
      getNumLineSegments() {
          return this.__indices.length / 2;
      }
      /**
       * Sets the number of line segments in the lines geometry.
       * **Important:** It resets indices values.
       *
       * @param numOfSegments - The count value.
       */
      setNumSegments(numOfSegments) {
          if (numOfSegments > this.getNumSegments()) {
              const indices = new Uint32Array(numOfSegments * 2);
              indices.set(this.__indices);
              this.__indices = indices;
          }
          else {
              this.__indices = this.__indices.slice(0, numOfSegments * 2);
          }
      }
      /**
       * Sets segment values in the specified index.
       *
       * @param index - The index value.
       * @param p0 - The p0 value.
       * @param p1 - The p1 value.
       */
      setSegmentVertexIndices(index, p0, p1) {
          if (index >= this.__indices.length / 2)
              throw new Error('Invalid line index:' + index + '. Num Segments:' + this.__indices.length / 2);
          this.__indices[index * 2 + 0] = p0;
          this.__indices[index * 2 + 1] = p1;
      }
      /**
       * The getSegmentVertexIndex method.
       *
       * @param line - The line value.
       * @param lineVertex - The lineVertex value.
       * @return - The return value.
       * @private
       */
      getSegmentVertexIndex(line, lineVertex) {
          const numSegments = this.getNumSegments();
          if (line < numSegments)
              return this.__indices[line * 2 + lineVertex];
          return -1;
      }
      /**
       * Merges a separate geometry into this one. Similar to a 'union' boolean operation.
       * @param other the other geom that will be merged into this one
       * @param xfo the transformation to be applied to the other geom as it is merged in.
       */
      merge(other, xfo = new Xfo()) {
          const prevNumVerts = this.getNumVertices();
          super.merge(other, xfo);
          const otheIndices = other.__indices;
          const indices = new Uint32Array(this.__indices.length + otheIndices.length);
          indices.set(this.__indices, 0);
          indices.set(otheIndices.map((index) => index + prevNumVerts), this.__indices.length);
          this.__indices = indices;
      }
      // ////////////////////////////////////////
      // Memory
      /**
       * Returns vertex attributes buffers and its count.
       *
       * @return - The return value.
       */
      genBuffers(opts) {
          const buffers = super.genBuffers();
          let indices;
          if (buffers.numVertices < Math.pow(2, 8)) {
              indices = new Uint8Array(this.__indices);
          }
          else if (buffers.numVertices < Math.pow(2, 16)) {
              indices = new Uint16Array(this.__indices);
          }
          else {
              indices = this.__indices;
          }
          buffers.indices = indices;
          return buffers;
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Sets state of current geometry(Including line segments) using a binary reader object.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          super.loadBaseGeomBinary(reader, context);
          this.setNumSegments(reader.loadUInt32());
          const bytes = reader.loadUInt8();
          if (bytes == 1)
              this.__indices = reader.loadUInt8Array();
          else if (bytes == 2)
              this.__indices = reader.loadUInt16Array();
          else if (bytes == 4)
              this.__indices = reader.loadUInt32Array();
          this.emit('geomDataChanged');
      }
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const j = super.toJSON(context);
          if (!context || !context.skipTopology)
              j.indices = Array.from(this.__indices);
          return j;
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context) {
          super.fromJSON(j, context);
          if (j.indices)
              this.__indices = Uint32Array.from(j.indices);
      }
  }
  Registry.register('Lines', Lines);

  /* eslint-disable prefer-rest-params */
  /**
   * The Mesh class provides a flexible and fast polygon mesh representation. It supports polygons of arbitrary complexity,
   * from basic triangles and quads to pentagons more.
   * It supports storing per face attributes, and per edge attributes.
   * The Mesh class handles converting its internal representation of polygons into a simpler triangles representation for rendering.
   *
   * ```
   * const mesh = new Mesh()
   * ```
   *
   * **Events**
   * * **geomDataTopologyChanged:** Triggered when the topology of the mesh has been changed.
   * * **geomDataChanged:** Triggered when the vertices of the mesh have changed, but not necessarily the topology.
   *
   * @extends BaseGeom
   */
  class Mesh extends BaseGeom {
      faceCounts;
      faceVertexIndices;
      __logTopologyWarnings;
      __edgeAttributes;
      __faceAttributes;
      numEdges;
      edgeVerts;
      edgeAngles;
      edgeVecs;
      edgeFaces;
      faceEdges;
      vertexEdges;
      /**
       * Creates an instance of Mesh.
       */
      constructor() {
          super();
          this.edgeFaces = [];
          this.faceEdges = [[]];
          this.faceCounts = [];
          this.faceVertexIndices = new Uint32Array();
          this.__logTopologyWarnings = false;
          this.__edgeAttributes = new Map();
          this.__faceAttributes = new Map();
          this.numEdges = 0;
          this.edgeVerts = [];
          this.vertexEdges = [];
          this.edgeAngles = new Float32Array();
          this.edgeVecs = [];
      }
      /**
       * The clear method.
       */
      clear() {
          super.clear();
          //this.init()
          //this.setNumVertices(0)
          // clear edge and face normals.
          this.edgeVerts = [];
          this.vertexEdges = [];
          this.numEdges = 0;
          this.edgeAngles = new Float32Array();
          this.emit('geomDataTopologyChanged');
      }
      /**
       * Adds a new vertex attribute to the geometry.
       *
       * @param name - The name of the vertex attribute.
       * @param attr - The attribute to add to the geometry
       */
      addVertexAttribute(name, attr) {
          super.addVertexAttribute(name, attr);
          attr.setMesh(this);
      }
      /**
       * The getFaceCounts method.
       * @return - The return value.
       */
      getFaceCounts() {
          return this.faceCounts;
      }
      /**
       * The getNumFaces method.
       * @return - The return value.
       */
      getNumFaces() {
          return this.faceCounts.length == 0 ? 0 : this.faceCounts.reduce((numFaces, fc) => (numFaces += fc));
      }
      /**
       * The getNumTriangles method.
       * @return {number} - The return value.
       */
      getNumTriangles() {
          let numTriangles = 0;
          let numTrisPerFace = 1;
          for (const fc of this.faceCounts) {
              numTriangles += fc * numTrisPerFace;
              numTrisPerFace++;
          }
          return numTriangles;
      }
      /**
       * Sets the number of faces on the mesh using an array specifying the counts per polygon size.
       * The first item in the array specifies the number of triangles, the second, the number of quads, the 3rd, the number of 5 sided polygons etc..
       * e.g. to specify 2 triangles, and 7 quads, we would pass [2, 7]
       * @param faceCounts - The faceCounts value.
       */
      setFaceCounts(faceCounts) {
          // let numFaces = 0
          let numFacesVertices = 0;
          let numVertsPerFace = 3;
          for (const fc of faceCounts) {
              // numFaces += fc
              numFacesVertices += fc * numVertsPerFace;
              numVertsPerFace++;
          }
          const prevNumFaces = this.getNumFaces();
          if (prevNumFaces == 0) {
              this.faceVertexIndices = new Uint32Array(numFacesVertices);
          }
          else {
              const faceVertexIndices = new Uint32Array(numFacesVertices);
              // Now we preserve the existing indices if they fit within the new faceVertexIndices array.
              let startSrc = 0;
              let startTgt = 0;
              numFacesVertices = 0;
              numVertsPerFace = 3;
              faceCounts.forEach((fc, index) => {
                  const endSrc = startSrc + Math.min(fc, this.faceCounts[index]) * numVertsPerFace;
                  faceVertexIndices.set(this.faceVertexIndices.slice(startSrc, endSrc), startTgt);
                  startSrc += this.faceCounts[index] * numVertsPerFace;
                  startTgt += fc * numVertsPerFace;
                  numVertsPerFace++;
              });
              this.faceVertexIndices = faceVertexIndices;
          }
          this.faceCounts = faceCounts;
      }
      /**
       * Returns the number of face vertices
       * @return - The return value.
       */
      getNumFaceVertices() {
          let numFaceVerts = 0;
          this.faceCounts.forEach((fc, index) => {
              numFaceVerts += fc * (index + 3);
          });
          return numFaceVerts;
      }
      /**
       * Returns the number of vertices indexed by this face
       * @param faceIndex - The faceIndex value.
       * @return - The return value.
       */
      getFaceVertexCount(faceIndex) {
          let idx = 0;
          let count = 0;
          this.faceCounts.some((fc, index) => {
              idx += fc;
              if (idx > faceIndex) {
                  count = index + 3;
                  return true;
              }
              return false;
          });
          return count;
      }
      getFaceVertexOffset(faceIndex) {
          let idx = 0;
          let offset = 0;
          this.faceCounts.some((fc, index) => {
              if (idx + fc > faceIndex) {
                  offset += (faceIndex - idx) * (index + 3);
                  return true;
              }
              idx += fc;
              offset += fc * (index + 3);
              return false;
          });
          return offset;
      }
      /**
       * The setFaceVertexIndices method.
       * @param faceIndex - The faceIndex value.
       * @param vertexIndices - The array of vertex indices for this face value.
       */
      setFaceVertexIndices(faceIndex, vertexIndices) {
          const faceVertexCount = this.getFaceVertexCount(faceIndex);
          if (vertexIndices.length != faceVertexCount) {
              throw new Error(`Invalid indices for face:${faceIndex} vertexIndices:${vertexIndices}. Expected ${faceVertexCount} indices`);
          }
          const offset = this.getFaceVertexOffset(faceIndex);
          this.faceVertexIndices.set(vertexIndices, offset);
      }
      /**
       * Adds a new face to the mesh
       * @param vertexIndices - The vertex indices of the face.
       * @return - The index of the face in the mesh.
       */
      addFace(vertexIndices) {
          const faceCounts = [...this.faceCounts];
          if (faceCounts.length <= vertexIndices.length - 3) {
              for (let i = faceCounts.length; i < vertexIndices.length - 3; i++)
                  faceCounts[i] = 0;
              faceCounts[vertexIndices.length - 3] = 1;
          }
          else {
              faceCounts[vertexIndices.length - 3]++;
          }
          this.setFaceCounts(faceCounts);
          // Calculate the offset in the faceVertexIndices of this new face.
          let faceIndex = 0;
          let offset = 0;
          this.faceCounts.some((fc, index) => {
              if (index + 3 == vertexIndices.length) {
                  faceIndex += fc - 1;
                  offset += (fc - 1) * (index + 3);
                  return true;
              }
              faceIndex += fc;
              offset += fc * (index + 3);
              return false;
          });
          this.faceVertexIndices.set(vertexIndices, offset);
          return faceIndex;
      }
      /**
       * Returns the vertex indices of the specified face.
       * @param faceIndex - The index of the specified face
       * @return - An array of indices into the vertex attributes
       */
      getFaceVertexIndices(faceIndex) {
          const vertexIndices = [];
          const offset = this.getFaceVertexOffset(faceIndex);
          const count = this.getFaceVertexCount(faceIndex);
          for (let i = 0; i < count; i++) {
              vertexIndices.push(this.faceVertexIndices[offset + i]);
          }
          return vertexIndices;
      }
      /**
       * Returns a single vertex index for a given face and faceVertex.
       * @param faceIndex - The faceIndex value.
       * @param faceVertex - The face vertex is the index within the face. So the first vertex index is 0.
       * @return - The vertex index
       */
      getFaceVertexIndex(faceIndex, faceVertex) {
          const offset = this.getFaceVertexOffset(faceIndex);
          return this.faceVertexIndices[offset + faceVertex];
      }
      // ///////////////////////////
      // Face Attributes
      /**
       * The addFaceAttribute method.
       * @param name - The name of the face attribute to add.
       * @param attr - The attr value
       */
      addFaceAttribute(name, attr) {
          attr.setCount(this.getNumFaces());
          this.__faceAttributes.set(name, attr);
          return attr;
      }
      /**
       * The hasFaceAttribute method.
       * @param name - The name of the face attribute.
       * @return - The return value.
       */
      hasFaceAttribute(name) {
          return this.__faceAttributes.has(name);
      }
      /**
       * The getFaceAttribute method.
       * @param name - The name of the face attribute.
       * @return - The return value.
       */
      getFaceAttribute(name) {
          return this.__faceAttributes.get(name);
      }
      // /////////////////////////
      // Edge Attributes
      /**
       * The addEdgeAttribute method.
       * @param name - The name of the edge attribute to add.
       * @param attr - The attr value
       */
      addEdgeAttribute(name, attr) {
          attr.setCount(this.numEdges);
          this.__edgeAttributes.set(name, attr);
      }
      /**
       * The hasEdgeAttribute method.
       * @param name - The name of the edge attribute.
       * @return - The return value.
       */
      hasEdgeAttribute(name) {
          return this.__edgeAttributes.has(name);
      }
      /**
       * The getEdgeAttribute method.
       * @param name - The name of the edge attribute.
       * @return - The return value.
       */
      getEdgeAttribute(name) {
          return this.__edgeAttributes.get(name);
      }
      // ///////////////////////////
      /**
       * The genTopologyInfo method.
       */
      genTopologyInfo() {
          let connectedVertices = {}; // acceleration structure.
          this.vertexEdges = []; // 2d array of vertex to edges.
          // this.vertexFaces = []; // 2d array of vertex to faces.
          this.edgeFaces = []; // flat array of 2 face indices per edge
          this.edgeVerts = []; // flat array of 2 vert indices per edge
          this.faceEdges = []; // the edges bordering each face.
          this.numEdges = 0;
          const positions = this.positions;
          const getEdgeIndex = (v0, v1) => {
              let tmp0 = v0;
              let tmp1 = v1;
              if (tmp1 < tmp0) {
                  const tmp = tmp0;
                  tmp0 = tmp1;
                  tmp1 = tmp;
              }
              const key = tmp0 + '>' + tmp1;
              if (key in connectedVertices) {
                  // console.log(key + ':' + connectedVertices[key] + " face:" + ( v0 < v1 ? 0 : 1) );
                  return connectedVertices[key];
              }
              const p0 = positions.getValue(tmp0);
              const p1 = positions.getValue(tmp1);
              const edgeVec = p1.subtract(p0);
              const edgeIndex = this.edgeFaces.length / 2;
              const edgeData = {
                  edgeIndex: edgeIndex,
                  edgeVec: edgeVec,
              };
              connectedVertices[key] = edgeData;
              this.edgeFaces.push(-1);
              this.edgeFaces.push(-1);
              this.edgeVerts.push(tmp0);
              this.edgeVerts.push(tmp1);
              // console.log(key + ':' + connectedVertices[key] + " face:" + ( v0 < v1 ? 0 : 1));
              this.numEdges++;
              return edgeData;
          };
          const addEdge = (v0, v1, faceIndex) => {
              // console.log('addEdge:' + v0 + " :" + v1 + " faceIndex:" + faceIndex );
              const edgeData = getEdgeIndex(v0, v1);
              const edgeIndex = edgeData.edgeIndex;
              if (v1 < v0) {
                  const edgeFaceIndex = edgeIndex * 2 + 0;
                  if (this.__logTopologyWarnings && this.edgeFaces[edgeFaceIndex] != -1)
                      console.warn('Edge poly 0 already set. Mesh is non-manifold.');
                  this.edgeFaces[edgeFaceIndex] = faceIndex;
              }
              else {
                  const edgeFaceIndex = edgeIndex * 2 + 1;
                  if (this.__logTopologyWarnings && this.edgeFaces[edgeFaceIndex] != -1)
                      console.warn('Edge poly 1 already set. Mesh is non-manifold.');
                  this.edgeFaces[edgeFaceIndex] = faceIndex;
              }
              if (!(faceIndex in this.faceEdges))
                  this.faceEdges[faceIndex] = [];
              this.faceEdges[faceIndex].push(edgeIndex);
              // Push the edge index onto both vertex edge lists.
              // We use Sets to avoid adding the same edge 2x to the same vertex.
              if (this.vertexEdges[v0] == undefined) {
                  this.vertexEdges[v0] = new Set();
              }
              if (this.vertexEdges[v1] == undefined) {
                  this.vertexEdges[v1] = new Set();
              }
              this.vertexEdges[v0].add(edgeIndex);
              this.vertexEdges[v1].add(edgeIndex);
              // if (this.vertexFaces[v0] == undefined) {
              //     this.vertexFaces[v0] = [];
              // }
              // this.vertexFaces[v0].push(faceIndex);
          };
          const numFaces = this.getNumFaces();
          for (let faceIndex = 0; faceIndex < numFaces; faceIndex++) {
              const faceVerts = this.getFaceVertexIndices(faceIndex);
              for (let j = 0; j < faceVerts.length; j++) {
                  const v0 = faceVerts[j];
                  const v1 = faceVerts[(j + 1) % faceVerts.length];
                  addEdge(v0, v1, faceIndex);
              }
          }
      }
      /**
       * Computes a normal value per face by averaging the triangle normals of the face.
       */
      computeFaceNormals() {
          const positions = this.positions;
          const faceNormals = new Vec3f8Attribute();
          this.addFaceAttribute('normals', faceNormals);
          const numFaces = this.getNumFaces();
          for (let faceIndex = 0; faceIndex < numFaces; faceIndex++) {
              const faceVerts = this.getFaceVertexIndices(faceIndex);
              const p0 = positions.getValue(faceVerts[0]);
              const p1 = positions.getValue(faceVerts[1]);
              let prev = p1;
              const faceNormal = new Vec3();
              for (let j = 2; j < faceVerts.length; j++) {
                  const pn = positions.getValue(faceVerts[j]);
                  const v0 = prev.subtract(p0);
                  const v1 = pn.subtract(p0);
                  faceNormal.addInPlace(v0.cross(v1).normalize());
                  prev = pn;
              }
              if (faceNormal.lengthSquared() < Number.EPSILON) ;
              else {
                  faceNormals.setValue(faceIndex, faceNormal.normalize());
              }
          }
      }
      /**
       * Calculates the angles at each edge between the adjoining faces
       */
      calculateEdgeAngles() {
          if (this.vertexEdges.length == 0)
              this.genTopologyInfo();
          this.computeFaceNormals();
          const positions = this.positions;
          const faceNormals = this.getFaceAttribute('normals');
          this.edgeVecs = [];
          this.edgeAngles = new Float32Array(this.numEdges);
          for (let i = 0; i < this.edgeFaces.length; i += 2) {
              const v0 = this.edgeVerts[i];
              const v1 = this.edgeVerts[i + 1];
              const edgeVec = positions.getValue(v1).subtract(positions.getValue(v0));
              edgeVec.normalizeInPlace();
              this.edgeVecs.push(edgeVec);
              const p0 = this.edgeFaces[i];
              const p1 = this.edgeFaces[i + 1];
              if (p0 == -1 || p1 == -1) {
                  // Flag the edge as a border edge....
                  this.edgeAngles[i / 2] = Math.PI * 2.0;
                  continue;
              }
              const n0 = faceNormals.getValue(p0);
              const n1 = faceNormals.getValue(p1);
              this.edgeAngles[i / 2] = n0.angleTo(n1);
          }
      }
      /**
       * Compute vertex normals.
       * @param hardAngle - The hardAngle value in radians.
       * @return - The return value.
       */
      computeVertexNormals(hardAngle = 1.0 /* radians */) {
          this.calculateEdgeAngles();
          const faceNormals = this.getFaceAttribute('normals');
          const normalsAttr = new Vec3f8Attribute();
          this.addVertexAttribute('normals', normalsAttr);
          // these methods are faster versions than using the methods
          // provided on the attributes. We cache values and use hard coded constants.
          // const faceNormalsBuffer = faceNormals.data.buffer
          const getFaceNormal = (index) => {
              return faceNormals.getValue(index);
          };
          const setVertexNormal = (index, value) => {
              normalsAttr.setValue(index, value);
          };
          const getConnectedEdgeVecs = (faceIndex, vertexIndex) => {
              let e0;
              let e1;
              const faceEdges = this.faceEdges[faceIndex];
              for (const e of faceEdges) {
                  if (this.edgeVerts[e * 2] == vertexIndex) {
                      if (!e0)
                          e0 = this.edgeVecs[e];
                      else
                          e1 = this.edgeVecs[e];
                  }
                  else if (this.edgeVerts[e * 2 + 1] == vertexIndex) {
                      if (!e0)
                          e0 = this.edgeVecs[e];
                      else
                          e1 = this.edgeVecs[e];
                  }
              }
              return [e0, e1];
          };
          for (let i = 0; i < this.vertexEdges.length; i++) {
              // If this face indexing doesn't start at 0, then the vertexEdges don't either.
              if (this.vertexEdges[i] == undefined)
                  continue;
              const edges = this.vertexEdges[i];
              // Groups of faces having a smooth normal at the current vertex.
              const faceGroups = [];
              const addFaceToGroup = (face) => {
                  let inGroup = false;
                  for (const faceGroup of faceGroups) {
                      inGroup = faceGroup.includes(face);
                      if (inGroup)
                          break;
                  }
                  if (!inGroup)
                      faceGroups.push([face]);
              };
              for (const e of edges) {
                  const f0 = this.edgeFaces[e * 2];
                  const f1 = this.edgeFaces[e * 2 + 1];
                  if (f0 != -1 && f1 != -1 && this.edgeAngles[e] < hardAngle) {
                      // if (f0 != -1 && f1 == -1 && this.edgeAngles[e] < hardAngle) {
                      let f0groupIndex = -1;
                      let f1groupIndex = -1;
                      for (let groupIndex = 0; groupIndex < faceGroups.length; groupIndex++) {
                          if (f0groupIndex == -1 && faceGroups[groupIndex].includes(f0))
                              f0groupIndex = groupIndex;
                          if (f1groupIndex == -1 && faceGroups[groupIndex].includes(f1))
                              f1groupIndex = groupIndex;
                      }
                      if (f0groupIndex == -1 && f1groupIndex == -1) {
                          faceGroups.push([f0, f1]);
                      }
                      else if (f0groupIndex != -1 && f1groupIndex != -1) {
                          if (f0groupIndex != f1groupIndex) {
                              // Merge the 2 groups that the smooth edge joins.
                              faceGroups[f0groupIndex] = faceGroups[f0groupIndex].concat(faceGroups[f1groupIndex]);
                              faceGroups.splice(f1groupIndex, 1);
                          }
                      }
                      else {
                          if (f0groupIndex == -1) {
                              faceGroups[f1groupIndex].push(f0);
                          }
                          if (f1groupIndex == -1) {
                              faceGroups[f0groupIndex].push(f1);
                          }
                      }
                      continue;
                  }
                  // This is a hard edge or a border edge... Add faces separately group.
                  if (f0 != -1)
                      addFaceToGroup(f0);
                  if (f1 != -1)
                      addFaceToGroup(f1);
              }
              // Sort the groups to have the biggest group first.
              faceGroups.sort((a, b) => (a.length < b.length ? 1 : a.length > b.length ? -1 : 0));
              let firstVertex = true;
              for (const faceGroup of faceGroups) {
                  const normal = new Vec3();
                  for (const faceIndex of faceGroup) {
                      const faceEdges = getConnectedEdgeVecs(faceIndex, i);
                      let weight;
                      if (faceEdges[0] && faceEdges[1]) {
                          weight = faceEdges[0].angleTo(faceEdges[1]);
                          normal.addInPlace(getFaceNormal(faceIndex).scale(weight));
                      }
                      else {
                          console.warn('variable weight is undefined because faceEdges[0] or faceEdges[1] is undefined');
                      }
                      // if (i == 1)
                      //     console.log("FaceNormal:" + faceIndex + ":" + getFaceNormal(faceIndex).toString());
                  }
                  normal.normalizeInPlace();
                  if (firstVertex) {
                      setVertexNormal(i, normal);
                      firstVertex = false;
                  }
                  else {
                      normalsAttr.setSplitVertexValues(i, faceGroup, normal.asArray());
                  }
              }
          }
          return normalsAttr;
      }
      /**
       * The computeHardEdgesIndices method.
       * @param hardAngle - The hardAngle value in radians.
       * @return - The return value.
       */
      computeHardEdgesIndices(hardAngle = 1.0) {
          if (this.edgeVerts.length == 0)
              this.calculateEdgeAngles();
          const hardEdges = [];
          const addEdge = (index) => {
              hardEdges.push(this.edgeVerts[index]);
              hardEdges.push(this.edgeVerts[index + 1]);
          };
          for (let i = 0; i < this.edgeAngles.length; i++) {
              if (this.edgeAngles[i] > hardAngle) {
                  addEdge(i * 2);
              }
          }
          return Uint32Array.from(hardEdges);
      }
      /**
       * Merges a separate geometry into this one. Similar to a 'union' boolean operation.
       * @param other the other geom that will be merged into this one
       * @param xfo the transformation to be applied to the other geom as it is merged in.
       */
      merge(other, xfo = new Xfo()) {
          const prevNumVerts = this.getNumVertices();
          super.merge(other, xfo);
          const otherFaceVertexIndices = other.faceVertexIndices;
          const faceVertexIndices = new Uint32Array(this.faceVertexIndices.length + otherFaceVertexIndices.length);
          const otherFaceCounts = other.getFaceCounts();
          let indexOffset = 0;
          let otherIndexOffset = 0;
          let mergedIndexOffset = 0;
          const numCounts = Math.max(this.faceCounts.length, otherFaceCounts.length);
          for (let i = 0; i < numCounts; i++) {
              if (this.faceCounts.length > i) {
                  // Add 'this' indices
                  const numIndicesThis = this.faceCounts[i] * (i + 3);
                  faceVertexIndices.set(this.faceVertexIndices.slice(indexOffset, indexOffset + numIndicesThis), mergedIndexOffset);
                  indexOffset += numIndicesThis;
                  mergedIndexOffset += numIndicesThis;
              }
              if (otherFaceCounts.length > i) {
                  // Add the 'other' indices
                  const numIndicesOther = otherFaceCounts[i] * (i + 3);
                  faceVertexIndices.set(otherFaceVertexIndices
                      .slice(otherIndexOffset, otherIndexOffset + numIndicesOther)
                      .map((index) => index + prevNumVerts), mergedIndexOffset);
                  otherIndexOffset += numIndicesOther;
                  mergedIndexOffset += numIndicesOther;
                  if (this.faceCounts.length == i)
                      this.faceCounts[i] = 0;
                  this.faceCounts[i] += otherFaceCounts[i];
              }
          }
          this.faceVertexIndices = faceVertexIndices;
          // Note: the merge does not correctly merge split values, as it is quite complex
          // and we don't have time now. We can come back to this, but the splits system is overly complex
          // and we can probably re-write.
          // for (const [attrName, attr] of this.__vertexAttributes) {
          //   const otherAttr = other.getVertexAttribute(attrName)
          //   if (otherAttr) {
          //     const thisSplits = attr.getSplits()
          //     const otherSplits = otherAttr.getSplits()
          //     // for (let key in otherSplits) {
          //     //   thisSplits[key] = otherSplits[key]
          //     // }
          //   }
          // }
      }
      // ////////////////////////////////////////
      // Rendering
      /**
       * The genBuffers method.
       * @param opts - The opts value.
       * @return - The return value.
       */
      genBuffers(opts) {
          // Compute the normals on demand.
          // if (!('normals' in this.__vertexAttributes)) {
          //     // this.geom.computeVertexNormals();
          //     this.addVertexAttribute("normals", Vec3, 0.0);
          // }
          const splitIndices = {};
          let splitCount = 0;
          for (const [, attr] of this.__vertexAttributes) {
              const attrSplits = attr.getSplits();
              for (const polygon in attrSplits) {
                  if (!(polygon in splitIndices))
                      splitIndices[polygon] = {};
                  const vertices = attrSplits[polygon];
                  for (const v in vertices) {
                      const vertex = parseInt(v);
                      if (!(vertex in splitIndices[polygon])) {
                          splitIndices[polygon][vertex] = splitCount;
                          splitCount++;
                      }
                  }
              }
          }
          const positions = this.positions;
          const numUnSplitVertices = positions.getCount();
          const totalNumVertices = numUnSplitVertices + splitCount;
          let indices;
          if (!opts || opts.includeIndices != false) {
              indices = this.generateTriangulatedIndices(totalNumVertices, numUnSplitVertices, splitIndices);
          }
          // let maxIndex;
          // if (debugAttrValues)
          //     maxIndex = Math.max(...indices);
          const attrBuffers = {};
          for (const [attrName, attr] of this.__vertexAttributes) {
              let values;
              if (splitCount == 0)
                  values = attr.asArray();
              else
                  values = attr.generateSplitValues(splitIndices, splitCount);
              const dimension = attr.stride;
              const count = values.length / dimension;
              // if (debugAttrValues) {
              //     if (count <= maxIndex)
              //         console.warn("Invalid indexing. Attr value is insufficient for indexing:" + attrName + ". Max Index:" + maxIndex + " Attr Size:" + count);
              // }
              attrBuffers[attrName] = {
                  values: values,
                  count: count,
                  dimension: dimension,
                  normalized: attrName == 'normals',
                  dataType: attr.getDataTypeName(),
              };
          }
          const result = {
              numVertices: this.numVertices(),
              numRenderVerts: totalNumVertices,
              indices,
              attrBuffers,
          };
          /* Disabled during TS migration.
          if (opts && opts.includeVertexNeighbors) {
            if (this.vertexEdges == undefined) this.genTopologyInfo()
      
            let count = 0
            for (let i = 0; i < this.vertexEdges.length; i++) {
              // If this face indexing doesn't start at 0, then the vertexEdges don't either.
              if (this.vertexEdges[i]) count += this.vertexEdges[i].size
            }
            // The array will be structured as a start+offset for each vertex, followed
            // by a 2d array of neighbor indices.
            const vertexNeighbors = new Uint32Array(this.vertexEdges.length * 2 + count)
            const sortFanEdges = (fanEdges: any) => {
              for (let i = 0; i < fanEdges.length; i++) {
                const feA = fanEdges[i]
                for (let j = 0; j < i; j++) {
                  const feB = fanEdges[j]
                  if (feA[0] != -1 && feA[0] == feB[1]) {
                    //  move feA after feB;
                    if (i != j + 1) {
                      fanEdges.splice(i, 1)
                      fanEdges.splice(j + 1, 0, feA)
                    }
                    break
                  }
                  if (feA[1] != -1 && feA[1] == feB[0]) {
                    //  move feA before feB;
                    fanEdges.splice(i, 1)
                    fanEdges.splice(j, 0, feA)
                    break
                  }
                }
              }
            }
            const checkFanEdges = (fanEdges: any) => {
              // now check that the faces all build a fan. Maybe starting and ending with -1
              if (fanEdges[0][0] == -1 || fanEdges[fanEdges.length - 1][1] == -1) {
                if (fanEdges[0][0] != -1 || fanEdges[fanEdges.length - 1][1] != -1) {
                  throw new Error('If fan starts with -1, it must also end with -1')
                }
              }
              for (let i = 0; i < fanEdges.length; i++) {
                const fe = fanEdges[i]
                if (fe[0] == -1 || fe[1] == -1) {
                  if (i != 0 && i != fanEdges.length - 1) {
                    throw new Error('-1 only allowed at the beginning and end of a fan.')
                  }
                }
                if (fe[0] != -1) {
                  let prev = i - 1
                  if (prev < 0) prev += fanEdges.length
                  if (fe[0] != fanEdges[prev][1]) {
                    throw new Error('Faces are not sequential')
                  }
                }
                if (fe[1] != -1) {
                  const next = (i + 1) % fanEdges.length
                  if (fe[1] != fanEdges[next][0]) {
                    throw new Error('Faces are not sequential')
                  }
                }
              }
            }
      
            // Populate the start and offset values.
            let offset = this.vertexEdges.length * 2
            for (let i = 0; i < this.vertexEdges.length; i++) {
              if (this.vertexEdges[i] == undefined) continue
              const edges = this.vertexEdges[i]
      
              // Build a sorted list of faces based on a fan around
              // the vertex.
              const fanEdges = []
              for (const e of edges) {
                const v0 = this.edgeVerts[e * 2]
                const v1 = this.edgeVerts[e * 2 + 1]
                let f0 = this.edgeFaces[e * 2]
                let f1 = this.edgeFaces[e * 2 + 1]
                let neigVert
                if (v0 == i) {
                  neigVert = v1
                } else if (v1 == i) {
                  neigVert = v0
                  // swap the faces
                  const tmp = f0
                  f0 = f1
                  f1 = tmp
                } else {
                  throw new Error('Invalid topology')
                }
                fanEdges.push([f0, f1, neigVert])
              }
              sortFanEdges(fanEdges)
              checkFanEdges(fanEdges)
              const closed = fanEdges[0][0] != -1 || fanEdges[fanEdges.length - 1][1] != -1
              let flags = 0
              if (closed) flags += 1
              vertexNeighbors[i * 2] = offset
              vertexNeighbors[i * 2 + 1] = edges.size + (flags << 8)
              for (const fe of fanEdges) {
                vertexNeighbors[offset] = fe[2]
                offset++
              }
            }
            ;(result as any).vertexNeighbors = vertexNeighbors
          }
          */
          return result;
      }
      /**
       * Compute the number of triangles. For higher degree polygons, they are divided into multiple triangles for rendering.
       * @return - Returns the number of triangles.
       */
      computeNumTriangles() {
          let numVertsPerFace = 3;
          let trisCount = 0;
          for (const fc of this.faceCounts) {
              trisCount += fc * (numVertsPerFace - 2);
              numVertsPerFace++;
          }
          return trisCount;
      }
      /**
       * To prepare data for rendering, the indices for the polygons is used to compute a new index buffer based on
       * only triangles. This is used during rendering and the resulting indices uploaded ot the GPU  by GLMesh class.
       *
       * @param totalNumVertices - The total number of vertices.
       * @param numUnSplitVertices - The total number of un-split vertices.
       * @param splitIndices - The splitIndices value.
       * @return - Returns a typed array containing the triangulated indices.
       */
      generateTriangulatedIndices(totalNumVertices, numUnSplitVertices, splitIndices) {
          const trisCount = this.computeNumTriangles();
          let triangulatedIndices;
          if (totalNumVertices < Math.pow(2, 8))
              triangulatedIndices = new Uint8Array(trisCount * 3);
          else if (totalNumVertices < Math.pow(2, 16))
              triangulatedIndices = new Uint16Array(trisCount * 3);
          else
              triangulatedIndices = new Uint32Array(trisCount * 3);
          let triangleVertex = 0;
          const addTriangleVertexIndex = function (vertex, faceIndex) {
              if (vertex in splitIndices && faceIndex in splitIndices[vertex])
                  vertex = numUnSplitVertices + splitIndices[vertex][faceIndex];
              triangulatedIndices[triangleVertex] = vertex;
              triangleVertex++;
          };
          const numFaces = this.getNumFaces();
          for (let faceIndex = 0; faceIndex < numFaces; faceIndex++) {
              const faceVerts = this.getFaceVertexIndices(faceIndex);
              for (let j = 0; j < faceVerts.length; j++) {
                  if (j >= 3) {
                      // For each additional triangle, we have to add 2 indices.
                      addTriangleVertexIndex(faceVerts[0], faceIndex);
                      addTriangleVertexIndex(faceVerts[j - 1], faceIndex);
                  }
                  addTriangleVertexIndex(faceVerts[j], faceIndex);
              }
          }
          return triangulatedIndices;
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Restores mesh properties from a binary reader.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          super.loadBaseGeomBinary(reader, context);
          this.setFaceCounts(Array.from(reader.loadUInt32Array()));
          const numFaces = this.getNumFaces();
          // Note: we can remove this. We can infer this from the above faceCounts array.
          // Do not clone the data, as its 'scratch memory' in any case.
          // We can avoid a lot of unnecessary temporary allocaiton by using shared buffers.
          const faceVertexCounts = reader.loadUInt8Array(numFaces, false);
          const offsetRange = reader.loadSInt32Vec2();
          const bytes = reader.loadUInt8();
          let faceVertexIndexDeltas;
          if (bytes == 1)
              faceVertexIndexDeltas = reader.loadUInt8Array(undefined, false);
          else if (bytes == 2)
              faceVertexIndexDeltas = reader.loadUInt16Array(undefined, false);
          else if (bytes == 4)
              faceVertexIndexDeltas = reader.loadUInt32Array(undefined, false);
          else {
              throw Error('faceVertexIndexDeltas undefined');
          }
          // ///////////////////////////////////////////////////
          // Note: The Mesh compression system needs a thorough review.
          // The C++ classes are not storing face indices in a sorted manner.
          // So quads precede triangles in the indexing, which isn't supposed to happen.
          // We should force the C++ code to store quads and triangles in order.
          // e.g. implement the 'addFace' method in C++ so it automatically does this.
          let numFaceVerts = 3;
          let offset = 0;
          const faceOffsetsByCount = this.faceCounts.map((fc, index) => {
              const result = offset;
              offset += fc * numFaceVerts;
              numFaceVerts++;
              return result;
          });
          let srcOffset = 0;
          let prevCount = 0;
          const faceOffsets = [];
          for (let faceIndex = 0; faceIndex < numFaces; faceIndex++) {
              const fc = faceVertexCounts[faceIndex];
              const offset = faceOffsetsByCount[fc];
              const count = fc + 3;
              faceOffsets[faceIndex] = offset;
              for (let j = 0; j < count; j++) {
                  const srcFaceVertex = srcOffset + j;
                  const faceVertex = offset + j;
                  const delta = faceVertexIndexDeltas[srcFaceVertex] + offsetRange.x;
                  if (faceIndex == 0)
                      this.faceVertexIndices[faceVertex] = delta;
                  else {
                      let prevFaceVertex = faceOffsets[faceIndex - 1];
                      prevFaceVertex += j < prevCount ? j : prevCount - 1;
                      this.faceVertexIndices[faceVertex] = this.faceVertexIndices[prevFaceVertex] + delta;
                  }
              }
              srcOffset += count;
              faceOffsetsByCount[fc] += count;
              prevCount = count;
          }
          if (!this.hasVertexAttribute('normals')) {
              this.computeVertexNormals();
          }
          // this.computeVertexNormals();
          this.emit('geomDataChanged');
      }
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const j = super.toJSON(context);
          if (!context || !context.skipTopology) {
              j.faceCounts = Array.from(this.faceCounts);
              j.faceVertexIndices = Array.from(this.faceVertexIndices);
          }
          return j;
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * e.g. to load data into the mesh class, provide a json structure similar to the following.
       * Note: faceCounts is an array of count values, starting with the number of triangles, then the number of quads. See #setFaceCounts
       * The faceVertexIndices array should also be sorted to contain all the triangles first, followed by the quads, and then the pentagons etc..
       * ```json
       * // This code will define a mesh made up of 2 triangles and then a quad.
       * const mesh = new Mesh()
       * mesh.fromJSON({
       *   faceCounts:[2, 1],
       *   faceVertexIndices: [0, 1, 2, 0, 2, 3, 3, 2, 4, 5],
       *   numVertices: 6,
       *   vertexAttributes: {
       *     positions: {
       *       dataType: 'Vec3'
       *       defaultScalarValue: 0.0,
       *       data: [0,0,0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 2, 1, 0, 2, 0, 0]
       *     }
       *   }
       * }
       * ```
       *
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context) {
          super.fromJSON(j, context);
          if (j.faceCounts)
              this.faceCounts = j.faceCounts;
          if (j.faceVertexIndices)
              this.faceVertexIndices = Uint32Array.from(j.faceVertexIndices);
      }
  }
  Registry.register('Mesh', Mesh);

  /** ProxyGeometries are pupulated from data unpacked using a webworker while loading zcad files.
   * These geometries represent readonly geometries with very basic topologies.
   * @extends EventEmitter
   * @private
   */
  class BaseProxy extends EventEmitter {
      name;
      buffers;
      boundingBox;
      numVertices = 0;
      libraryIndex = -1;
      /**
       * Create a base proxy.
       * @param data - The data value.
       */
      constructor(data) {
          super();
          if (data) {
              this.name = data.name;
              this.buffers = data.geomBuffers;
              this.boundingBox = new Box3();
              this.boundingBox.p0.fromJSON(data.bbox.p0);
              this.boundingBox.p1.fromJSON(data.bbox.p1);
              this.numVertices = this.buffers.numVertices;
          }
      }
      get positions() {
          return this.buffers.attrBuffers['positions'];
      }
      /**
       * Returns the number of vertex attributes.
       *
       * @return - The return value.
       */
      getNumVertices() {
          return this.numVertices;
      }
      /**
       * Returns the bounding box for geometry.
       * @return - The return value.
       */
      getBoundingBox() {
          return this.boundingBox;
      }
      /**
       * The genBuffers method.
       * @return - The return value.
       */
      genBuffers() {
          return this.buffers;
      }
      /**
       * Once the buffers have been uploaded to the GPU, we are free to release them.
       * The GLGeomLibrary may call this function to let the geometry know it can release any handles.
       */
      freeBuffers() {
          for (const attrName in this.buffers.attrBuffers) {
              const attrData = this.buffers.attrBuffers[attrName];
              attrData.values = null;
          }
          if (this.buffers.indices) {
              this.buffers.indices = null;
          }
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const json = {
              geomBuffers: this.buffers,
          };
          return json;
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param json - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(json, context) {
          this.buffers = json.geomBuffers;
      }
  }
  /** Class representing a points proxy.
   * @extends BaseProxy
   * @private
   */
  class PointsProxy extends BaseProxy {
      /**
       * Create a points proxy.
       * @param data - The data value.
       */
      constructor(data) {
          super(data);
      }
  }
  /** Class representing a lines proxy.
   * @extends BaseProxy
   * @private
   */
  class LinesProxy extends BaseProxy {
      numLineSegments = 0;
      /**
       * Create a lines proxy.
       * @param data - The data value.
       */
      constructor(data) {
          super(data);
          this.numLineSegments = this.buffers.indices.length / 2;
      }
      /**
       * Returns the number line segments in this lines proxy geometry
       *
       * @return - The return value.
       */
      getNumLineSegments() {
          return this.numLineSegments;
      }
  }
  /** Class representing a mesh proxy.
   * @extends BaseProxy
   * @private
   */
  class MeshProxy extends BaseProxy {
      numTriangles = 0;
      /**
       * Create a mesh proxy.
       * @param data - The data value.
       */
      constructor(data) {
          super(data);
          this.numTriangles = this.buffers.indices.length / 3;
      }
      /**
       * Returns the number of triangles in this mesh proxy geometry.
       *
       * @return - The return value.
       */
      getNumTriangles() {
          return this.numTriangles;
      }
  }

  class SubGeom extends ParameterOwner {
  }
  Registry.register('SubGeom', SubGeom);
  /**
   * Class representing a point primitive drawing type, every vertex specified is a point.
   *
   * ```
   * const compoundGeom = new CompoundGeom()
   * ```
   *
   * * **Events**
   * * **boundingBoxChanged:** Triggered when the bounding box changes.
   *
   * @extends BaseProxy
   */
  class CompoundGeom extends BaseProxy {
      materials = [];
      subGeoms = [];
      counts;
      materialGroupsDirty = false;
      /**
       * Create points.
       */
      constructor(data, materialLibrary) {
          super(data);
          if (data) {
              this.counts = data.geomBuffers.counts;
              // Now use the indices in the geom to look up the actual materials
              // that will be used in rendering.
              const materials = materialLibrary.getMaterials();
              data.geomBuffers.materialLibraryIndices.forEach((materialIndex, index) => {
                  this.materials[index] = materials[materialIndex];
              });
              delete data.geomBuffers.materialLibraryIndices;
              this.buffers.materials = this.materials;
          }
      }
      /**
       * Returns the number of faces, edges and point sub-geoms in this compound geom.
       *
       * @return - The return value.
       */
      getNumSubGeoms() {
          return this.buffers.numSubGeoms;
      }
      /**
       * Returns the number of Face sub-geoms in this compound geom.
       *
       * @return - The return value.
       */
      getNumFaces() {
          return this.buffers.subGeomCounts['TRIANGLES'].length;
      }
      /**
       * Returns the number of Edge sub-geoms in this compound geom.
       *
       * @return - The return value.
       */
      getNumEdges() {
          return this.buffers.subGeomCounts['LINES'].length;
      }
      /**
       * Returns the number of triangles in this compound geom.
       *
       * @return - The return value.
       */
      getNumTriangles() {
          return this.counts['TRIANGLES'] / 3;
      }
      /**
       * Returns the number line segments in this lines proxy geometry
       *
       * @return - The return value.
       */
      getNumLineSegments() {
          return this.counts['LINES'] / 2;
      }
      /**
       * Returns the number line segments in this lines proxy geometry
       *
       * @return - The return value.
       */
      getNumPoints() {
          return this.counts['POINTS'];
      }
      // ////////////////////////////////////////
      // Materials
      getSubGeomMaterial(subGeomId) {
          // Note: subGeomMaterialIndices is Uint8Array, and 0 means no custom
          // material is assigned to the subGeom.
          // Subtract 1 to get the actual material id.
          const materialIndex = this.buffers.subGeomMaterialIndices[subGeomId] - 1;
          if (materialIndex == -1)
              return undefined;
          return this.materials[materialIndex];
      }
      /**
       * Assigns a material to a sub-geom by ID;
       * @param subGeomId - The ID of the sub-geom to assign the material.
       * @param material - The material to assign.
       */
      setSubGeomMaterial(subGeomId, material) {
          if (!material) {
              if (this.buffers.subGeomMaterialIndices && this.buffers.subGeomMaterialIndices[subGeomId])
                  this.buffers.subGeomMaterialIndices[subGeomId] = 0;
          }
          else {
              let materialIndex = this.materials.indexOf(material);
              if (materialIndex == -1) {
                  materialIndex = this.materials.length;
                  this.materials[materialIndex] = material;
              }
              if (this.buffers.subGeomMaterialIndices.length == 0) {
                  this.buffers.subGeomMaterialIndices = new Uint8Array(this.buffers.numSubGeoms);
              }
              // Note: subGeomMaterialIndices is Uint8Array, and 0 means no custom
              // material is assigned to the subGeom.
              // Subtract 1 to get the actual material id.
              this.buffers.subGeomMaterialIndices[subGeomId] = materialIndex + 1;
          }
          this.materialGroupsDirty = true;
          this.emit('materialsChanged');
      }
      /**
       * Assigns a material to a sub-geom by ID;
       * @deprecated
       * Please use: setSubGeomMaterial
       * @param subGeomId - The ID of the sub-geom to assign the material.
       * @param material - The material to assign.
       */
      assignSubGeomMaterial(subGeomId, material) {
          this.setSubGeomMaterial(subGeomId, material);
      }
      /**
       * Clears all sub--geom material assignments. This means the geometry will be drawn
       * using only the material of the GeomItem or CADBody.
       */
      clearMaterials() {
          this.materials.splice(0, this.materials.length);
          this.buffers.subGeomMaterialIndices = this.buffers.subGeomMaterialIndices.map(() => 0);
          this.emit('materialsChanged');
      }
      /**
       * Each subgeom may be a assigned a different material.
       *
       * We calculate groups that enable multiple subgeoms to
       * be rendered at once using the same material id.
       * Note: this is an optimization that only applies when
       * rendering geoms in non-shattered mode.
       */
      calcMaterialGroups() {
          const materialSubGeoms = {};
          if (this.buffers.subGeomMaterialIndices.length == 0) {
              this.buffers.materialSubGeoms = {};
              let offset = 0;
              for (let key in this.buffers.counts) {
                  const count = this.buffers.counts[key];
                  if (count > 0) {
                      this.buffers.materialSubGeoms[key] = [
                          {
                              materialId: -1,
                              offset,
                              count,
                          },
                      ];
                  }
                  offset += count;
              }
              return;
          }
          // /////////////////////////////////
          // Material Groups
          let offset = 0;
          let currMaterial = -99;
          let currMaterialSubGeom = null;
          for (let i = 0; i < this.buffers.numSubGeoms; i++) {
              let key;
              let subGeomOffset = 0;
              if (i < this.buffers.subGeomCounts.TRIANGLES.length) {
                  if (!materialSubGeoms.TRIANGLES)
                      materialSubGeoms.TRIANGLES = [];
                  key = 'TRIANGLES';
              }
              else if (i < this.buffers.subGeomCounts.TRIANGLES.length + this.buffers.subGeomCounts.LINES.length) {
                  subGeomOffset = this.buffers.subGeomCounts.TRIANGLES.length;
                  key = 'LINES';
                  if (!materialSubGeoms.LINES)
                      materialSubGeoms.LINES = [];
              }
              else {
                  subGeomOffset = this.buffers.subGeomCounts.TRIANGLES.length + this.buffers.subGeomCounts.LINES.length;
                  key = 'POINTS';
                  if (!materialSubGeoms.POINTS)
                      materialSubGeoms.POINTS = [];
              }
              const materialId = this.buffers.subGeomMaterialIndices[i];
              if (currMaterial != materialId) {
                  currMaterial = materialId;
                  // Note: subGeomMaterialIndices is Uint8Array, and 0 means no custom
                  // material is assigned to the subGeom.
                  // Subtract 1 to get the actual material id.
                  currMaterialSubGeom = {
                      materialId: materialId - 1,
                      offset,
                      count: 0,
                  };
                  for (; i < this.buffers.numSubGeoms; i++) {
                      if (currMaterial != this.buffers.subGeomMaterialIndices[i]) {
                          break;
                      }
                      // When we get to the end og this geom type (e.g .TRIANGLES)
                      // start a new subgeom.
                      if (i - subGeomOffset == this.buffers.subGeomCounts[key].length) {
                          // Force the material index to be reset on line 162 above.
                          currMaterial = -99;
                          break;
                      }
                      currMaterialSubGeom.count += this.buffers.subGeomCounts[key][i - subGeomOffset];
                  }
                  offset += currMaterialSubGeom.count;
                  materialSubGeoms[key].push(currMaterialSubGeom);
                  i--;
              }
          }
          this.buffers.materialSubGeoms = materialSubGeoms;
      }
      /**
       * The genBuffers method.
       * @return - The return value.
       */
      genBuffers() {
          if (this.materialGroupsDirty)
              this.calcMaterialGroups();
          return this.buffers;
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const json = {
              // geomBuffers: this.buffers,
              materialPaths: this.materials.map((material) => material.path),
          };
          return json;
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param json - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(json, context) {
          this.counts = json.geomBuffers.counts;
          // this.buffers = json.geomBuffers
          if (json.materialPaths && context) {
              const materialPaths = json.materialPaths;
              this.materials = [];
              materialPaths.forEach((path, index) => {
                  context.resolvePath(path, (result) => {
                      if (result instanceof Material)
                          this.materials[index] = result;
                  }, () => { });
              });
          }
          this.buffers.materials = this.materials;
          this.materialGroupsDirty = true;
      }
      /**
       * Sets state of current geometry(Including line segments) using a binary reader object.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      loadMetadata(metadataReader, context) {
          const toc = metadataReader.loadUInt32Array();
          toc.forEach((offset, index) => {
              const subGeom = new SubGeom();
              metadataReader.seek(offset);
              subGeom.readBinary(metadataReader, context);
              this.subGeoms[index] = subGeom;
          });
      }
  }
  Registry.register('CompoundGeom', CompoundGeom);

  /**
   * Base Class for procedural points generated by mathematical functions.
   *
   * @extends {Points}
   */
  class ProceduralPoints extends Points {
      dirtyTopology;
      dirtyVertices;
      topologyParams;
      /**
       * Creates an instance of ProceduralPoints.
       */
      constructor() {
          super();
          this.dirtyTopology = true;
          this.dirtyVertices = true;
          // Parameters that specify topology settings.
          // Add parameters to this list to ensure the topology is recomputed.
          // All other param changes will only trigger a resize
          this.topologyParams = [];
      }
      /**
       * This method can be overridden in derived classes
       * to perform general updates (see GLPass or BaseItem).
       * @param event - The event object emitted by the parameter.
       * @private
       */
      parameterValueChanged(event) {
          this.setBoundingBoxDirty();
          if (this.topologyParams.includes(event.param.getName())) {
              this.dirtyTopology = true;
              this.emit('geomDataTopologyChanged');
          }
          else {
              this.dirtyVertices = true;
              this.setBoundingBoxDirty();
              // Let the renderer know that the geometry has changed and must be re-uploaded to the GPU.
              this.emit('geomDataChanged');
          }
          super.parameterValueChanged(event);
      }
      /**
       * If the Procedural geometry is out of date, for example if a parameter has been changed,
       * this method explicitly forces the geometry to be recomputed.
       */
      update() {
          if (this.dirtyTopology) {
              this.rebuild();
              this.dirtyTopology = false;
              this.dirtyVertices = false;
              this.rebuild();
          }
          else if (this.dirtyVertices) {
              this.dirtyVertices = false;
              this.resize();
              this.dirtyVertices = false;
          }
      }
      /**
       * Returns the bounding box for geometry.
       * @return - The return value.
       */
      getBoundingBox() {
          this.update();
          return super.getBoundingBox();
      }
      /**
       * Returns the number of vertex attributes.
       *
       * @return - The return value.
       */
      getNumVertices() {
          this.update();
          return super.getNumVertices();
      }
      // ////////////////////////////////////////
      // Rendering
      /**
       * The genBuffers method.
       * @param opts - The opts value.
       * @return - The return value.
       */
      genBuffers(opts) {
          this.update();
          return super.genBuffers(opts);
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          if (!context)
              context = {};
          context.skipTopology = true;
          context.skipAttributes = ['positions', 'normals', 'texCoords'];
          const j = super.toJSON(context);
          context.skipTopology = false;
          context.skipAttributes = [];
          return j;
      }
  }

  /**
   * Base Class for procedural lines generated by mathematical functions.
   *
   * @extends {Lines}
   */
  class ProceduralLines extends Lines {
      dirtyTopology;
      dirtyVertices;
      topologyParams;
      /**
       * Creates an instance of ProceduralLines.
       */
      constructor() {
          super();
          this.dirtyTopology = true;
          this.dirtyVertices = true;
          // Parameters that specify topology settings.
          // Add parameters to this list to ensure the topology is recomputed.
          // All other param changes will only trigger a resize
          this.topologyParams = [];
      }
      /**
       * This method can be overridden in derived classes
       * to perform general updates (see GLPass or BaseItem).
       * @param event - The event object emitted by the parameter.
       * @private
       */
      parameterValueChanged(event) {
          this.setBoundingBoxDirty();
          if (this.topologyParams.includes(event.param.getName())) {
              this.dirtyTopology = true;
              this.emit('geomDataTopologyChanged');
          }
          else {
              this.dirtyVertices = true;
              this.setBoundingBoxDirty();
              // Let the renderer know that the geometry has changed and must be re-uploaded to the GPU.
              this.emit('geomDataChanged');
          }
          super.parameterValueChanged(event);
      }
      /**
       * If the Procedural geometry is out of date, for example if a parameter has been changed,
       * this method explicitly forces the geometry to be recomputed.
       */
      update() {
          if (this.dirtyTopology) {
              this.rebuild();
              this.dirtyTopology = false;
              this.dirtyVertices = false;
              this.rebuild();
          }
          else if (this.dirtyVertices) {
              this.resize();
              this.dirtyVertices = false;
              this.resize();
          }
      }
      /**
       * Returns the bounding box for geometry.
       * @return - The return value.
       */
      getBoundingBox() {
          this.update();
          return super.getBoundingBox();
      }
      /**
       * Returns the number of vertex attributes.
       *
       * @return - The return value.
       */
      getNumVertices() {
          this.update();
          return super.getNumVertices();
      }
      // ////////////////////////////////////////
      // Rendering
      /**
       * The genBuffers method.
       * @param opts - The opts value.
       * @return - The return value.
       */
      genBuffers(opts) {
          this.update();
          return super.genBuffers();
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          if (!context)
              context = {};
          context.skipTopology = true;
          context.skipAttributes = ['positions', 'normals', 'texCoords'];
          const j = super.toJSON(context);
          context.skipTopology = false;
          context.skipAttributes = [];
          return j;
      }
  }

  /**
   * Base Class for procedural meshes generated by mathematical functions.
   *
   * @extends {Mesh}
   */
  class ProceduralMesh extends Mesh {
      dirtyTopology;
      dirtyVertices;
      topologyParams;
      /**
       * Creates an instance of ProceduralMesh.
       */
      constructor() {
          super();
          this.dirtyTopology = true;
          this.dirtyVertices = true;
          // Parameters that specify topology settings.
          // Add parameters to this list to ensure the topology is recomputed.
          // All other param changes will only trigger a resize
          this.topologyParams = [];
      }
      /**
       * This method can be overridden in derived classes
       * to perform general updates (see GLPass or BaseItem).
       * @param event - The event object emitted by the parameter.
       * @private
       */
      parameterValueChanged(event) {
          this.setBoundingBoxDirty();
          if (this.topologyParams.includes(event.param.getName())) {
              this.dirtyTopology = true;
              this.emit('geomDataTopologyChanged');
          }
          else {
              this.dirtyVertices = true;
              this.setBoundingBoxDirty();
              // Let the renderer know that the geometry has changed and must be re-uploaded to the GPU.
              this.emit('geomDataChanged');
          }
          super.parameterValueChanged(event);
      }
      /**
       * If the Procedural geometry is out of date, for example if a parameter has been changed,
       * this method explicitly forces the geometry to be recomputed.
       */
      update() {
          if (this.dirtyTopology) {
              // Clear the topology so that vertex normals can be recomputed.
              this.vertexEdges = [];
              this.dirtyTopology = false;
              this.dirtyVertices = false;
              this.rebuild();
          }
          else if (this.dirtyVertices) {
              this.dirtyVertices = false;
              this.resize();
          }
      }
      /**
       * Returns the bounding box for geometry.
       * @return - The return value.
       */
      getBoundingBox() {
          this.update();
          return super.getBoundingBox();
      }
      /**
       * Returns the number of vertex attributes.
       *
       * @return - The return value.
       */
      getNumVertices() {
          this.update();
          return super.getNumVertices();
      }
      /**
       * Compute vertex normals.
       * @param hardAngle - The hardAngle value in radians.
       * @return - The return value.
       */
      computeVertexNormals(hardAngle = 1.0 /* radians */) {
          this.update();
          return super.computeVertexNormals(hardAngle);
      }
      /**
       * The computeHardEdgesIndices method.
       * @param hardAngle - The hardAngle value in radians.
       * @return - The return value.
       */
      computeHardEdgesIndices(hardAngle = 1.0) {
          this.update();
          return super.computeHardEdgesIndices(hardAngle);
      }
      // ////////////////////////////////////////
      // Rendering
      /**
       * The genBuffers method.
       * @param opts - The opts value.
       * @return - The return value.
       */
      genBuffers(opts) {
          this.update();
          return super.genBuffers(opts);
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          if (!context)
              context = {};
          context.skipTopology = true;
          context.skipAttributes = ['positions', 'normals', 'texCoords'];
          const j = super.toJSON(context);
          context.skipTopology = false;
          context.skipAttributes = [];
          return j;
      }
  }

  /**
   * Represents an ordered grid of points along `X` and `Y` axes.
   *
   * ```
   * const pointGrid = new PointGrid(2.2, 1.5, 12, 12)
   * ```
   *
   * **Parameters**
   * * **X(`NumberParameter`):** Length of the grid along the `X` axis.
   * * **Y(`NumberParameter`):** Length of the grid along the `Y` axis.
   * * **XDivisions(`NumberParameter`):** Number of divisions along `X` axis
   * * **YDivisions(`NumberParameter`):** Number of divisions along `Y` axis
   * @extends {ProceduralPoints}
   */
  class PointGrid extends ProceduralPoints {
      /**
       * @member sizeXParam - Length of the grid along the `X` axis.
       */
      sizeXParam = new NumberParameter('SizeX', 1.0, [0, Number.MAX_VALUE]);
      /**
       * @member sizeYParam - Length of the grid along the `Y` axis.
       */
      sizeYParam = new NumberParameter('SizeY', 1.0, [0, Number.MAX_VALUE]);
      /**
       * @member divisionsXParam - Number of divisions along `X` axis
       */
      divisionsXParam = new NumberParameter('XDivisions', 1, [0, Number.MAX_VALUE], 1);
      /**
       * @member divisionsYParam - Number of divisions along `Y` axis
       */
      divisionsYParam = new NumberParameter('YDivisions', 1, [0, Number.MAX_VALUE], 1);
      /**
       * Creates an instance of PointGrid.
       *
       * @param x - The length of the point grid along the X axis.
       * @param y - The length of the point grid along the Y axis.
       * @param xDivisions - The number of divisions along the X axis.
       * @param yDivisions - The number of divisions along the Y axis.
       * @param addTextureCoords - The addTextureCoords value.
       */
      constructor(x = 1.0, y = 1.0, xDivisions = 1, yDivisions = 1) {
          super();
          this.topologyParams = [];
          if (isNaN(x) || isNaN(y) || isNaN(xDivisions) || isNaN(yDivisions))
              throw new Error('Invalid geom args');
          this.addParameter(this.sizeXParam);
          this.addParameter(this.sizeYParam);
          this.addParameter(this.divisionsXParam);
          this.addParameter(this.divisionsYParam);
          this.sizeXParam.value = x;
          this.sizeYParam.value = y;
          this.divisionsXParam.value = xDivisions;
          this.divisionsYParam.value = yDivisions;
          this.topologyParams.push('XDivisions');
          this.topologyParams.push('YDivisions');
      }
      /**
       * The rebuild method.
       * @private
       */
      rebuild() {
          const xDivisions = Math.round(this.divisionsXParam.value);
          const yDivisions = Math.round(this.divisionsYParam.value);
          this.setNumVertices(xDivisions * yDivisions);
          const texCoords = this.getVertexAttribute('texCoords');
          if (texCoords) {
              for (let i = 0; i < yDivisions; i++) {
                  const y = i / (yDivisions - 1);
                  for (let j = 0; j < xDivisions; j++) {
                      const x = j / (xDivisions - 1);
                      texCoords.setValue(i * xDivisions + j, new Vec2(x, y));
                  }
              }
          }
          this.resize();
      }
      /**
       * The resize method.
       * @private
       */
      resize() {
          const xDivisions = Math.round(this.divisionsXParam.value);
          const yDivisions = Math.round(this.divisionsYParam.value);
          const x = this.sizeXParam.value;
          const y = this.sizeYParam.value;
          const positions = this.positions;
          if (!positions)
              return;
          for (let i = 0; i < yDivisions; i++) {
              const newY = (i / (yDivisions - 1) - 0.5) * y;
              for (let j = 0; j < xDivisions; j++) {
                  const newX = (j / (xDivisions - 1) - 0.5) * x;
                  positions.setValue(i * xDivisions + j, new Vec3(newX, newY, 0.0));
              }
          }
      }
  }
  Registry.register('PointGrid', PointGrid);

  /**
   * A class for generating a rectangle shape.
   *
   * ```
   * const rect = new Rect(1.5, 2.0)
   * ```
   *
   * **Parameters**
   * * **X(`NumberParameter`):** Length of the rectangle along the `X` axis.
   * * **Y(`NumberParameter`):** Length of the rectangle along the `Y` axis.
   *
   *
   * @extends {ProceduralLines}
   */
  class Rect extends ProceduralLines {
      /**
       * @member sizeXParam - Length of the rectangle along the `X` axis.
       */
      sizeXParam = new NumberParameter('SizeX', 1.0, [0, Number.MAX_VALUE]);
      /**
       * @member sizeYParam - Length of the rectangle along the `Y` axis.
       */
      sizeYParam = new NumberParameter('SizeY', 1.0, [0, Number.MAX_VALUE]);
      /**
       * Create a rect.
       * @param x - The length of the rect along the `X` axis.
       * @param y - The length of the rect along the `Y` axis.
       */
      constructor(x = 1.0, y = 1.0) {
          super();
          if (isNaN(x) || isNaN(y))
              throw new Error('Invalid geom args');
          this.addParameter(this.sizeXParam);
          this.addParameter(this.sizeYParam);
          this.sizeXParam.value = x;
          this.sizeYParam.value = y;
          this.rebuild();
      }
      /**
       * The rebuild method.
       * @private
       */
      rebuild() {
          this.setNumVertices(4);
          this.setNumSegments(4);
          this.setSegmentVertexIndices(0, 0, 1);
          this.setSegmentVertexIndices(1, 1, 2);
          this.setSegmentVertexIndices(2, 2, 3);
          this.setSegmentVertexIndices(3, 3, 0);
          // @ts-expect-error ts-migrate(2554) FIXME: Expected 0 arguments, but got 1.
          this.resize(false);
      }
      /**
       * The resize method.
       * @private
       */
      resize() {
          const x = this.sizeXParam.value;
          const y = this.sizeYParam.value;
          const positions = this.positions;
          if (!positions)
              return;
          positions.setValue(0, new Vec3(-0.5 * x, -0.5 * y, 0.0));
          positions.setValue(1, new Vec3(0.5 * x, -0.5 * y, 0.0));
          positions.setValue(2, new Vec3(0.5 * x, 0.5 * y, 0.0));
          positions.setValue(3, new Vec3(-0.5 * x, 0.5 * y, 0.0));
      }
  }
  Registry.register('Rect', Rect);

  /**
   * A class for generating a circle shape using line segments.
   *
   * ```
   * const circle = new Circle(2.2, 12)
   * ```
   *
   * **Parameters**
   * * **Radius(`NumberParameter`):** Radius of the circle.
   * * **Angle(`NumberParameter`):** Number of segments used to build the circle.
   * * **Sides(`NumberParameter`):** Segments angle in radiants.
   *
   * @extends {ProceduralLines}
   */
  class Circle extends ProceduralLines {
      /**
       * @member angleParam - TODO
       */
      angleParam = new AngleParameter('Angle', Math.PI * 2, [0, Math.PI * 2]);
      /**
       * @member sidesParam - The number of sides that compose the circle (e.g. 3 creates a triangle)
       */
      sidesParam = new NumberParameter('Sides', 6, [0, Number.MAX_VALUE], 1);
      /**
       * @member radiusParam - The radius of the circle
       */
      radiusParam = new NumberParameter('Radius', 1, [0, Number.MAX_VALUE]);
      /**
       * Creates an instance of Circle.
       * @param radius - The radius of the circle.
       * @param sides - The number of segments.
       * @param angle - Arc segments angle(radians)
       */
      constructor(radius = 1.0, sides = 32, angle = Math.PI * 2) {
          super();
          this.topologyParams = [];
          if (isNaN(radius) || isNaN(sides))
              throw new Error('Invalid geom args');
          this.radiusParam.value = radius;
          this.sidesParam.value = sides;
          this.angleParam.value = angle;
          this.addParameter(this.radiusParam);
          this.addParameter(this.angleParam);
          this.addParameter(this.sidesParam);
          // Note: Changes in Angle can cause the Topoloty to become closed/unclosed.
          this.topologyParams.push('Angle');
          this.topologyParams.push('Sides');
      }
      /**
       * The rebuild method.
       * @private
       */
      rebuild() {
          const angle = this.angleParam.value;
          const sides = Math.round(this.sidesParam.value);
          const arc = angle < Math.PI * 2;
          const numVerts = arc ? sides + 1 : sides;
          this.setNumVertices(numVerts);
          this.setNumSegments(sides);
          for (let i = 0; i < sides; i++)
              this.setSegmentVertexIndices(i, i, (i + 1) % numVerts);
          this.resize();
      }
      /**
       * The resize method.
       * @private
       */
      resize() {
          const radius = this.radiusParam.value;
          const angle = this.angleParam.value;
          const arc = angle < Math.PI * 2;
          const step = angle / (arc ? this.positions.count - 1 : this.positions.count);
          for (let i = 0; i < this.positions.count; i++) {
              this.positions.setValue(i, new Vec3(Math.cos(step * i) * radius, Math.sin(step * i) * radius, 0.0));
          }
      }
  }
  Registry.register('Circle', Circle);

  /**
   * A class for generating a cross shape, drawing a line on the `X,Y,Z` axes.
   * The axis line length is the `size` you specify, but the middle of the line is positioned in the coordinate `(0, 0, 0)` .
   * Meaning that half of the line goes negative and half goes positive.
   *
   * ```
   * const cross = new Cross(1.5)
   * ```
   *
   * **Parameters**
   * * **Size(`NumberParameter`):** Specifies the size of the cross.
   *
   * @extends {ProceduralLines}
   */
  class Cross extends ProceduralLines {
      /**
       * @member sizeParam - Specifies the size of the cross.
       */
      sizeParam = new NumberParameter('Size', 1.0, [0, Number.MAX_VALUE]);
      /**
       * Create a cross.
       * @param size - The size of the cross.
       */
      constructor(size = 1.0) {
          super();
          if (isNaN(size))
              throw new Error('Invalid geom args');
          this.addParameter(this.sizeParam);
          this.sizeParam.value = size;
      }
      /**
       * The rebuild method.
       * @private
       */
      rebuild() {
          this.setNumVertices(6);
          this.setNumSegments(3);
          this.setSegmentVertexIndices(0, 0, 1);
          this.setSegmentVertexIndices(1, 2, 3);
          this.setSegmentVertexIndices(2, 4, 5);
          this.resize();
      }
      /**
       * The resize method.
       * @private
       */
      resize() {
          const size = this.sizeParam.value;
          const positions = this.positions;
          if (!positions)
              return;
          positions.setValue(0, new Vec3(-0.5 * size, 0, 0));
          positions.setValue(1, new Vec3(0.5 * size, 0, 0));
          positions.setValue(2, new Vec3(0, 0.5 * size, 0));
          positions.setValue(3, new Vec3(0, -0.5 * size, 0));
          positions.setValue(4, new Vec3(0, 0, 0.5 * size));
          positions.setValue(5, new Vec3(0, 0, -0.5 * size));
      }
  }
  Registry.register('Cross', Cross);

  /**
   * A class for generating a lines cuboid shape(Without faces).
   *
   * **Parameters**
   * * **X(`NumberParameter`):** Length of the line cuboid along the `X` axis
   * * **Y(`NumberParameter`):** Length of the line cuboid along the `Y` axis
   * * **Z(`NumberParameter`):** Length of the line cuboid along the `Z` axis
   * * **BaseZAtZero(`NumberParameter`):** Property to start or not `Z` axis from position `0.
   *
   * @extends {ProceduralLines}
   */
  class LinesCuboid extends ProceduralLines {
      /**
       * @member baseZAtZeroParam - Property to start or not `Z` axis from position `0.
       */
      baseZAtZeroParam = new BooleanParameter('BaseZAtZero', false);
      /**
       * @member sizeXParam - Length of the line cuboid along the `X` axis
       */
      sizeXParam = new NumberParameter('SizeX', 1, [0, Number.MAX_VALUE]);
      /**
       * @member sizeYParam - Length of the line cuboid along the `Y` axis
       */
      sizeYParam = new NumberParameter('SizeY', 1, [0, Number.MAX_VALUE]);
      /**
       * @member sizeZParam - Length of the line cuboid along the `Z` axis
       */
      sizeZParam = new NumberParameter('SizeZ', 1, [0, Number.MAX_VALUE]);
      /**
       * Create a lines cuboid.
       * @param x - The length of the line cuboid along the X axis.
       * @param y - The length of the line cuboid along the Y axis.
       * @param z - The length of the line cuboid along the Z axis.
       * @param baseZAtZero - The baseZAtZero value.
       */
      constructor(x = 1.0, y = 1.0, z = 1.0, baseZAtZero = false) {
          super();
          this.addParameter(this.sizeXParam);
          this.addParameter(this.sizeYParam);
          this.addParameter(this.sizeZParam);
          this.addParameter(this.baseZAtZeroParam);
          this.sizeXParam.value = x;
          this.sizeYParam.value = y;
          this.sizeZParam.value = z;
          this.baseZAtZeroParam.value = baseZAtZero;
      }
      /**
       * The rebuild method.
       * @private
       */
      rebuild() {
          this.setNumVertices(8);
          this.setNumSegments(12);
          this.setSegmentVertexIndices(0, 0, 1);
          this.setSegmentVertexIndices(1, 1, 2);
          this.setSegmentVertexIndices(2, 2, 3);
          this.setSegmentVertexIndices(3, 3, 0);
          this.setSegmentVertexIndices(4, 4, 5);
          this.setSegmentVertexIndices(5, 5, 6);
          this.setSegmentVertexIndices(6, 6, 7);
          this.setSegmentVertexIndices(7, 7, 4);
          this.setSegmentVertexIndices(8, 0, 4);
          this.setSegmentVertexIndices(9, 1, 5);
          this.setSegmentVertexIndices(10, 2, 6);
          this.setSegmentVertexIndices(11, 3, 7);
          this.resize();
      }
      /**
       * The resize method.
       *
       * @private
       */
      resize() {
          const x = this.sizeXParam.value;
          const y = this.sizeYParam.value;
          const z = this.sizeZParam.value;
          const baseZAtZero = this.baseZAtZeroParam.value;
          const positions = this.positions;
          if (positions) {
              let zoff = 0.5;
              if (baseZAtZero)
                  zoff = 1.0;
              positions.setValue(0, new Vec3(0.5 * x, -0.5 * y, zoff * z));
              positions.setValue(1, new Vec3(0.5 * x, 0.5 * y, zoff * z));
              positions.setValue(2, new Vec3(-0.5 * x, 0.5 * y, zoff * z));
              positions.setValue(3, new Vec3(-0.5 * x, -0.5 * y, zoff * z));
              zoff = -0.5;
              if (baseZAtZero)
                  zoff = 0.0;
              positions.setValue(4, new Vec3(0.5 * x, -0.5 * y, zoff * z));
              positions.setValue(5, new Vec3(0.5 * x, 0.5 * y, zoff * z));
              positions.setValue(6, new Vec3(-0.5 * x, 0.5 * y, zoff * z));
              positions.setValue(7, new Vec3(-0.5 * x, -0.5 * y, zoff * z));
          }
      }
  }
  Registry.register('LinesCuboid', LinesCuboid);

  /**
   * A class for generating a sphere made up of 3 circles, one on each plane: XY, YZ, XZ.
   *
   * ```
   * const linesSphere = new LinesSphere(2.2, 12)
   * ```
   *
   * **Parameters**
   * * **Radius(`NumberParameter`):** Radius of the circle.
   * * **Sides(`NumberParameter`):** Segments angle in radiants.
   *
   * @extends {ProceduralLines}
   */
  class LinesSphere extends ProceduralLines {
      /**
       * @member radiusParam - The radius of the circle
       */
      radiusParam = new NumberParameter('Radius', 6, [0, Number.MAX_VALUE]);
      /**
       * @member sidesParam - The number of sides that compose the circle (e.g. 3 creates a triangle)
       */
      sidesParam = new NumberParameter('Sides', 12, [0, Number.MAX_VALUE], 1);
      /**
       * Creates an instance of LinesSphere.
       * @param radius - The radius of the circle.
       * @param sides - The number of segments.
       * @param angle - Arc segments angle(radians)
       */
      constructor(radius = 1.0, sides = 32) {
          super();
          this.topologyParams = [];
          if (isNaN(radius) || isNaN(sides))
              throw new Error('Invalid geom args');
          this.addParameter(this.radiusParam);
          this.addParameter(this.sidesParam);
          this.radiusParam.value = radius;
          this.sidesParam.value = sides;
          this.topologyParams.push('Sides');
      }
      /**
       * The rebuild method.
       * @private
       */
      rebuild() {
          const segs = this.sidesParam.value;
          const numCirces = 3;
          this.setNumVertices(segs * numCirces);
          this.setNumSegments(segs * numCirces);
          const addSegments = (off) => {
              for (let i = 0; i < segs; i++)
                  this.setSegmentVertexIndices(i + off, i + off, ((i + 1) % segs) + off);
          };
          addSegments(0);
          addSegments(segs);
          addSegments(segs * 2);
          this.resize();
      }
      /**
       * The resize method.
       * @private
       */
      resize() {
          const radius = this.radiusParam.value;
          const segs = this.sidesParam.value;
          const angle = Math.PI * 2;
          const step = angle / segs;
          const positions = this.positions;
          if (positions) {
              for (let i = 0; i < segs; i++) {
                  positions.setValue(i, new Vec3(Math.cos(step * i) * radius, Math.sin(step * i) * radius, 0.0));
                  positions.setValue(i + segs, new Vec3(Math.cos(step * i) * radius, 0.0, Math.sin(step * i) * radius));
                  positions.setValue(i + segs * 2, new Vec3(0.0, Math.cos(step * i) * radius, Math.sin(step * i) * radius));
              }
          }
      }
  }
  Registry.register('LinesSphere', LinesSphere);

  /**
   * Represents a network of lines that cross each other to form a series of squares or rectangles.
   *
   * ```
   * const grid = new Grid(5, 5, 50, 50, true)
   * ```
   *
   * **Parameters**
   * * **X(`NumberParameter`):** Length of the grid along the `X` axis.
   * * **Y(`NumberParameter`):** Length of the grid along the `Y` axis.
   * * **XDivisions(`NumberParameter`):** Number of divisions along `X` axis
   * * **YDivisions(`NumberParameter`):** Number of divisions along `Y` axis
   * * **SkipCenterLines(`BooleanParameter`):** Property that indicates whether to display the center grid lines or not
   *
   * @extends {ProceduralLines}
   */
  class Grid extends ProceduralLines {
      /**
       * @member sizeXParam - Length of the grid along the `X` axis.
       */
      sizeXParam = new NumberParameter('SizeX', 1.0, [0, Number.MAX_VALUE]);
      /**
       * @member sizeYParam - Length of the grid along the `Y` axis.
       */
      sizeYParam = new NumberParameter('SizeY', 1.0, [0, Number.MAX_VALUE]);
      /**
       * @member divisionsXParam - Number of divisions along `X` axis
       */
      divisionsXParam = new NumberParameter('XDivisions', 1, [0, Number.MAX_VALUE], 1);
      /**
       * @member divisionsYParam - Number of divisions along `Y` axis
       */
      divisionsYParam = new NumberParameter('YDivisions', 1, [0, Number.MAX_VALUE], 1);
      /**
       * @member skipCenterLinesParam - Property that indicates whether to display the center grid lines or not
       */
      skipCenterLinesParam = new BooleanParameter('SkipCenterLines', false);
      /**
       * Create a grid.
       * @param x - The length of the grid along the `X` axis.
       * @param y - The length of the grid along the `Y` axis.
       * @param xDivisions - The number of divisions along `X` axis.
       * @param yDivisions - The number of divisions along `Y` axis.
       * @param skipCenterLines - A boolean indicating whether to display the center grid lines or not.
       */
      constructor(x = 1.0, y = 1.0, xDivisions = 10, yDivisions = 10, skipCenterLines = false) {
          super();
          this.topologyParams = [];
          if (isNaN(x) || isNaN(y) || isNaN(xDivisions) || isNaN(yDivisions))
              throw new Error('Invalid geom args');
          this.addParameter(this.sizeXParam);
          this.addParameter(this.sizeYParam);
          this.addParameter(this.divisionsXParam);
          this.addParameter(this.divisionsYParam);
          this.addParameter(this.skipCenterLinesParam);
          this.sizeXParam.value = x;
          this.sizeYParam.value = y;
          this.divisionsXParam.value = xDivisions;
          this.divisionsYParam.value = yDivisions;
          this.skipCenterLinesParam.value = skipCenterLines;
          this.topologyParams.push('XDivisions');
          this.topologyParams.push('YDivisions');
          this.topologyParams.push('SkipCenterLines');
      }
      /**
       * The rebuild method.
       * @private
       */
      rebuild() {
          const xDivisions = this.divisionsXParam.value;
          const yDivisions = this.divisionsYParam.value;
          const skipCenterLines = this.skipCenterLinesParam.value && xDivisions % 2 == 0 && yDivisions % 2 == 0;
          this.setNumVertices((xDivisions + yDivisions + 2 - (skipCenterLines ? 1 : 0)) * 2);
          this.setNumSegments(xDivisions + yDivisions + 2 - (skipCenterLines ? 1 : 0));
          let idx = 0;
          for (let i = 0; i <= xDivisions; i++) {
              if (skipCenterLines && i == xDivisions / 2)
                  continue;
              const v0 = idx * 2;
              const v1 = idx * 2 + 1;
              this.setSegmentVertexIndices(idx, v0, v1);
              idx++;
          }
          for (let i = 0; i <= yDivisions; i++) {
              if (skipCenterLines && i == xDivisions / 2)
                  continue;
              const v0 = idx * 2;
              const v1 = idx * 2 + 1;
              this.setSegmentVertexIndices(idx, v0, v1);
              idx++;
          }
          this.resize();
      }
      /**
       * The resize method.
       * @private
       */
      resize() {
          const positions = this.positions;
          const xDivisions = this.divisionsXParam.value;
          const yDivisions = this.divisionsYParam.value;
          const xSize = this.sizeXParam.value;
          const ySize = this.sizeYParam.value;
          const skipCenterLines = this.skipCenterLinesParam.value && xDivisions % 2 == 0 && yDivisions % 2 == 0;
          let idx = 0;
          for (let i = 0; i <= xDivisions; i++) {
              if (skipCenterLines && i == xDivisions / 2)
                  continue;
              const v0 = idx * 2;
              const v1 = idx * 2 + 1;
              const x = (i / xDivisions - 0.5) * xSize;
              if (positions) {
                  positions.setValue(v0, new Vec3(x, -0.5 * ySize, 0.0));
                  positions.setValue(v1, new Vec3(x, 0.5 * ySize, 0.0));
              }
              idx++;
          }
          for (let i = 0; i <= yDivisions; i++) {
              if (skipCenterLines && i == xDivisions / 2)
                  continue;
              const v0 = idx * 2;
              const v1 = idx * 2 + 1;
              const y = (i / yDivisions - 0.5) * ySize;
              if (positions) {
                  positions.setValue(v0, new Vec3(-0.5 * xSize, y, 0.0));
                  positions.setValue(v1, new Vec3(0.5 * xSize, y, 0.0));
              }
              idx++;
          }
      }
  }
  Registry.register('Grid', Grid);

  /* eslint-disable no-unused-vars */
  /**
   * Represents a cone geometry.
   *
   * ```
   * const cone = new Cone(1.2, 4.0)
   * ```
   *
   * **Parameters**
   * * **Radius(`NumberParameter`):** Specifies the radius of the base of the cone.
   * * **Height(`NumberParameter`):** Specifies the height of the cone.
   * * **Detail(`NumberParameter`):** Specifies the number of subdivisions around the `Z` axis.
   * * **Cap(`BooleanParameter`):** Specifies whether the base of the cone is capped or open.
   *
   * @extends {ProceduralMesh}
   */
  class Cone extends ProceduralMesh {
      /**
       * @member capParam - Specifies whether the base of the cone is capped or open.
       */
      capParam = new BooleanParameter('Cap', true);
      /**
       * @member detailParam - Specifies the number of subdivisions around the `Z` axis.
       */
      detailParam = new NumberParameter('Detail', 6, [0, Number.MAX_VALUE], 1);
      /**
       * @member heightParam - Specifies the height of the cone.
       */
      heightParam = new NumberParameter('Height', 1, [0, Number.MAX_VALUE]);
      /**
       * @member radiusParam - Specifies the radius of the base of the cone.
       */
      radiusParam = new NumberParameter('Radius', 6, [0, Number.MAX_VALUE]);
      /**
       * Create a cone.
       * @param radius - The radius of the base of the cone.
       * @param height - The height of the cone.
       * @param detail - The detail of the cone.
       * @param cap -  A boolean indicating whether the base of the cone is capped or open.
       * @param addNormals - Compute vertex normals for the geometry
       * @param addTextureCoords - Compute texture coordinates for the geometry
       */
      constructor(radius = 0.5, height = 1.0, detail = 32, cap = true, addNormals = true, addTextureCoords = true) {
          super();
          this.topologyParams = [];
          if (isNaN(radius) || isNaN(height) || isNaN(detail))
              throw new Error('Invalid geom args');
          this.radiusParam.value = radius;
          this.heightParam.value = height;
          this.detailParam.value = detail;
          this.capParam.value = cap;
          this.addParameter(this.radiusParam);
          this.addParameter(this.heightParam);
          this.addParameter(this.detailParam);
          this.addParameter(this.capParam);
          if (addNormals)
              this.addVertexAttribute('normals', new Vec3f8Attribute());
          if (addTextureCoords)
              this.addVertexAttribute('texCoords', new Vec2f16Attribute());
          this.topologyParams.push('Detail');
          this.topologyParams.push('Cap');
      }
      /**
       * The rebuild method.
       * @private
       */
      rebuild() {
          const nbSides = Math.round(this.detailParam.value);
          const radius = this.radiusParam.value;
          const height = this.heightParam.value;
          const cap = this.capParam.value;
          let numVertices = nbSides + 1;
          if (cap) {
              numVertices += 1;
          }
          this.setNumVertices(numVertices);
          const tipPoint = nbSides;
          const basePoint = nbSides + 1;
          // ////////////////////////////
          // Set Vertex Positions
          const positions = this.positions;
          if (positions) {
              positions.setValue(tipPoint, new Vec3(0.0, 0.0, height));
              for (let i = 0; i < nbSides; i++) {
                  const theta = -((i / nbSides) * 2.0 * Math.PI);
                  positions.setValue(i, new Vec3(radius * Math.cos(theta), radius * Math.sin(theta), 0.0));
              }
              if (cap) {
                  positions.setValue(basePoint, new Vec3(0.0, 0.0, 0.0));
              }
          }
          // ////////////////////////////
          // Build the topology
          this.setFaceCounts([nbSides + (cap ? nbSides : 0)]);
          for (let i = 0; i < nbSides; i++) {
              const j = (i + 1) % nbSides;
              this.setFaceVertexIndices(i, [j, i, tipPoint]);
          }
          if (cap) {
              for (let i = 0; i < nbSides; i++) {
                  const j = (i + 1) % nbSides;
                  this.setFaceVertexIndices(nbSides + i, [i, j, basePoint]);
              }
          }
          // ////////////////////////////
          // setUVs
          const texCoords = this.getVertexAttribute('texCoords');
          if (texCoords) {
              // Now set the attrbute values
              let tri = 0;
              for (let i = 0; i < nbSides; i++) {
                  if ('setFaceVertexValue' in texCoords) {
                      texCoords.setFaceVertexValue(tri, 0, new Vec2((i + 1) / nbSides, 0.0));
                      texCoords.setFaceVertexValue(tri, 1, new Vec2(i / nbSides, 0.0));
                      texCoords.setFaceVertexValue(tri, 2, new Vec2((i + 0.5) / nbSides, 1.0));
                  }
              }
              if (cap) {
                  for (let i = 0; i < nbSides; i++) {
                      texCoords.setFaceVertexValue(tri, 0, new Vec2(i / nbSides, 0.0));
                      texCoords.setFaceVertexValue(tri, 1, new Vec2((i + 1) / nbSides, 0.0));
                      texCoords.setFaceVertexValue(tri, 2, new Vec2((i + 0.5) / nbSides, 1.0));
                      tri++;
                  }
              }
          }
          this.resize();
      }
      /**
       * The resize method.
       * @private
       */
      resize() {
          const nbSides = Math.round(this.detailParam.value);
          const radius = this.radiusParam.value;
          const height = this.heightParam.value;
          const tipPoint = nbSides;
          const basePoint = nbSides + 1;
          const positions = this.positions;
          if (positions) {
              positions.setValue(tipPoint, new Vec3(0.0, 0.0, height));
              for (let i = 0; i < nbSides; i++) {
                  const theta = -((i / nbSides) * 2.0 * Math.PI);
                  positions.setValue(i, new Vec3(radius * Math.cos(theta), radius * Math.sin(theta), 0.0));
              }
              if (this.capParam.value) {
                  positions.setValue(basePoint, new Vec3(0.0, 0.0, 0.0));
              }
          }
          // Note: this breaks an infinite loop where computeVertexNormals calls update which calls rebuild.
          this.dirtyTopology = false;
          this.dirtyVertices = false;
          const normals = this.getVertexAttribute('normals');
          if (normals) {
              this.computeVertexNormals();
          }
      }
  }
  Registry.register('Cone', Cone);

  // import { Vec2 } from '../../../Math/Vec2'
  // import { Vec2Attribute } from '../Vec2Attribute'
  /**
   * A class for generating a cuboid geometry.
   *
   * **Parameters**
   * * **x(`NumberParameter`):** Length of the line cuboid along the `X` axis
   * * **y(`NumberParameter`):** Length of the line cuboid along the `Y` axis
   * * **z(`NumberParameter`):** Length of the line cuboid along the `Z` axis
   * * **BaseZAtZero(`NumberParameter`):** Property to start or not `Z` axis from position `0.
   *
   * @extends {ProceduralMesh}
   */
  class Cuboid extends ProceduralMesh {
      /**
       * @member baseZAtZeroParam - Property to start or not `Z` axis from position `0.
       */
      baseZAtZeroParam = new BooleanParameter('BaseZAtZero', false);
      /**
       * @member sizeXParam - Length of the line cuboid along the `X` axis
       */
      sizeXParam = new NumberParameter('SizeX', 1.0, [0, Number.MAX_VALUE]);
      /**
       * @member sizeYParam - Length of the line cuboid along the `Y` axis
       */
      sizeYParam = new NumberParameter('SizeY', 1.0, [0, Number.MAX_VALUE]);
      /**
       * @member sizeZParam - Length of the line cuboid along the `Z` axis
       */
      sizeZParam = new NumberParameter('SizeZ', 1.0, [0, Number.MAX_VALUE]);
      /**
       * Create a cuboid.
       * @param x - The length of the cuboid along the X axis.
       * @param y - The length of the cuboid along the Y axis.
       * @param z - The length of the cuboid along the Z axis.
       * @param baseZAtZero - The baseZAtZero value.
       */
      constructor(x = 1.0, y = 1.0, z = 1.0, baseZAtZero = false) {
          super();
          if (isNaN(x) || isNaN(y) || isNaN(z))
              throw new Error('Invalid geom args');
          this.addParameter(this.sizeXParam);
          this.addParameter(this.sizeYParam);
          this.addParameter(this.sizeZParam);
          this.addParameter(this.baseZAtZeroParam);
          this.sizeXParam.value = x;
          this.sizeYParam.value = y;
          this.sizeZParam.value = z;
          this.baseZAtZeroParam.value = baseZAtZero;
          this.setFaceCounts([0, 6]);
          this.setFaceVertexIndices(0, [0, 1, 2, 3]);
          this.setFaceVertexIndices(1, [7, 6, 5, 4]);
          this.setFaceVertexIndices(2, [1, 0, 4, 5]);
          this.setFaceVertexIndices(3, [3, 2, 6, 7]);
          this.setFaceVertexIndices(4, [0, 3, 7, 4]);
          this.setFaceVertexIndices(5, [2, 1, 5, 6]);
          this.setNumVertices(8);
          this.addVertexAttribute('normals', new Vec3f8Attribute());
          // this.addVertexAttribute('texCoords', new Vec2f16Attribute())
      }
      /**
       * The rebuild method.
       * @private
       */
      rebuild() {
          const normals = this.getVertexAttribute('normals');
          if (normals) {
              for (let i = 0; i < 6; i++) {
                  let normal;
                  switch (i) {
                      case 0:
                          normal = new Vec3(0, 0, 1);
                          break;
                      case 1:
                          normal = new Vec3(0, 0, -1);
                          break;
                      case 2:
                          normal = new Vec3(1, 0, 0);
                          break;
                      case 3:
                          normal = new Vec3(-1, 0, 0);
                          break;
                      case 4:
                          normal = new Vec3(0, -1, 0);
                          break;
                      //case 5:
                      default:
                          normal = new Vec3(0, 1, 0);
                          break;
                  }
                  normals.setFaceVertexValue(i, 0, normal);
                  normals.setFaceVertexValue(i, 1, normal);
                  normals.setFaceVertexValue(i, 2, normal);
                  normals.setFaceVertexValue(i, 3, normal);
              }
          } /*
          const texCoords = <Vec2Attribute>this.getVertexAttribute('texCoords')
          if (texCoords) {
            for (let i = 0; i < 6; i++) {
              texCoords.setFaceVertexValue(i, 0, new Vec2(0, 0))
              texCoords.setFaceVertexValue(i, 1, new Vec2(1, 0))
              texCoords.setFaceVertexValue(i, 2, new Vec2(1, 1))
              texCoords.setFaceVertexValue(i, 3, new Vec2(0, 1))
            }
          }
          */
          this.resize();
      }
      /**
       * The resize method.
       * @private
       */
      resize() {
          const x = this.sizeXParam.value;
          const y = this.sizeYParam.value;
          const z = this.sizeZParam.value;
          const baseZAtZero = this.baseZAtZeroParam.value;
          let zoff = 0.5;
          const positions = this.positions;
          if (baseZAtZero)
              zoff = 1.0;
          if (!positions)
              return;
          positions.setValue(0, new Vec3(0.5 * x, -0.5 * y, zoff * z));
          positions.setValue(1, new Vec3(0.5 * x, 0.5 * y, zoff * z));
          positions.setValue(2, new Vec3(-0.5 * x, 0.5 * y, zoff * z));
          positions.setValue(3, new Vec3(-0.5 * x, -0.5 * y, zoff * z));
          zoff = -0.5;
          if (baseZAtZero)
              zoff = 0.0;
          positions.setValue(4, new Vec3(0.5 * x, -0.5 * y, zoff * z));
          positions.setValue(5, new Vec3(0.5 * x, 0.5 * y, zoff * z));
          positions.setValue(6, new Vec3(-0.5 * x, 0.5 * y, zoff * z));
          positions.setValue(7, new Vec3(-0.5 * x, -0.5 * y, zoff * z));
      }
  }
  Registry.register('Cuboid', Cuboid);

  /**
   * A class for generating a cylinder geometry. It is very much like a cuboid but with `N` number of sides.
   *
   * ```
   * const cylinder = new Cylinder(1.5, 2.0, 6)
   * ```
   *
   * **Parameters**
   * * **Radius(`NumberParameter`):** Specifies the radius of the cylinder.
   * * **Height(`NumberParameter`):** Specifies the height of the cone.
   * * **Sides(`NumberParameter`):** Specifies the number of subdivisions around the `Z` axis.
   * * **Loops(`NumberParameter`):** Specifies the number of subdivisions(stacks) on the `Z` axis.
   * * **Caps(`BooleanParameter`):** Specifies whether the ends of the cylinder are capped or open.
   * * **BaseZAtZero(`BooleanParameter`):** Property to start or not `Z` axis from position `0.
   *
   * @extends {ProceduralMesh}
   */
  class Cylinder extends ProceduralMesh {
      /**
       * @member baseZAtZeroParam - Property to start or not `Z` axis from position `0.
       */
      baseZAtZeroParam = new BooleanParameter('BaseZAtZero', true);
      /**
       * @member capsParam - Specifies whether the ends of the cylinder are capped or open.
       */
      capsParam = new BooleanParameter('Caps', true);
      /**
       * @member heightParam - Specifies the height of the cone.
       */
      heightParam = new NumberParameter('Height', 1, [0, Number.MAX_VALUE]);
      /**
       * @member radiusParam - Specifies the radius of the cylinder.
       */
      radiusParam = new NumberParameter('Radius', 6, [0, Number.MAX_VALUE]);
      /**
       * @member loopsParam - Specifies the number of subdivisions(stacks) on the `Z` axis.
       */
      loopsParam = new NumberParameter('Loops', 6, [0, Number.MAX_VALUE], 1);
      /**
       * @member sidesParam - Specifies the number of subdivisions around the `Z` axis.
       */
      sidesParam = new NumberParameter('Sides', 12, [0, Number.MAX_VALUE], 1);
      /**
       * Create a cylinder.
       * @param radius - The radius of the cylinder.
       * @param height - The height of the cylinder.
       * @param sides - The number of sides.
       * @param loops - The number of loops.
       * @param caps - A boolean indicating whether the ends of the cylinder are capped or open.
       * @param baseZAtZero - The baseZAtZero value.
       */
      constructor(radius = 0.5, height = 1.0, sides = 32, loops = 2, caps = true, baseZAtZero = false, addNormals = true, addTextureCoords = true) {
          super();
          this.topologyParams = [];
          if (isNaN(radius) || isNaN(height) || isNaN(sides) || isNaN(loops))
              throw new Error('Invalid geom args');
          this.radiusParam.value = radius;
          this.heightParam.value = height;
          this.sidesParam.value = sides >= 3 ? sides : 3;
          this.loopsParam.value = loops >= 2 ? loops : 2;
          this.capsParam.value = caps;
          this.baseZAtZeroParam.value = baseZAtZero;
          this.addParameter(this.radiusParam);
          this.addParameter(this.heightParam);
          this.addParameter(this.sidesParam);
          this.addParameter(this.loopsParam);
          this.addParameter(this.capsParam);
          this.addParameter(this.baseZAtZeroParam);
          if (addNormals)
              this.addVertexAttribute('normals', new Vec2f16Attribute()); // TODO: review args/params.
          if (addTextureCoords)
              this.addVertexAttribute('texCoords', new Vec3f8Attribute());
          this.topologyParams.push('Sides');
          this.topologyParams.push('Loops');
          this.topologyParams.push('Caps');
      }
      /**
       * The rebuild method.
       * @private
       */
      rebuild() {
          const nbSides = Math.round(this.sidesParam.value);
          const nbLoops = Math.round(this.loopsParam.value);
          const caps = this.capsParam.value;
          let numVertices = nbSides * nbLoops;
          if (caps) {
              numVertices += 2;
          }
          this.setNumVertices(numVertices);
          if (caps)
              this.setFaceCounts([nbSides * 2, nbSides]);
          else
              this.setFaceCounts([0, nbSides]);
          // ////////////////////////////
          // Build the topology
          let faceIndex = 0;
          if (caps) {
              // Bottom caps topology
              for (let j = 0; j < nbSides; j++) {
                  const v0 = numVertices - 1;
                  const v1 = j;
                  const v2 = (j + 1) % nbSides;
                  this.setFaceVertexIndices(faceIndex++, [v0, v1, v2]);
              }
              // Top caps topology
              for (let j = 0; j < nbSides; j++) {
                  const v0 = nbSides * (nbLoops - 1) + j;
                  const v1 = numVertices - 2;
                  const v2 = nbSides * (nbLoops - 1) + ((j + 1) % nbSides);
                  this.setFaceVertexIndices(faceIndex++, [v0, v1, v2]);
              }
          }
          // build the topology for the body of the cylinder
          for (let i = 0; i < nbLoops - 1; i++) {
              for (let j = 0; j < nbSides; j++) {
                  const v0 = nbSides * i + ((j + 1) % nbSides);
                  const v1 = nbSides * i + j;
                  const v2 = nbSides * (i + 1) + j;
                  const v3 = nbSides * (i + 1) + ((j + 1) % nbSides);
                  this.setFaceVertexIndices(faceIndex++, [v0, v1, v2, v3]);
              }
          }
          // ////////////////////////////
          // setNormals
          const normals = this.getVertexAttribute('normals');
          if (normals) {
              // Now set the attribute values
              faceIndex = 0;
              if (caps) {
                  const normal = new Vec3(0.0, 0.0, -1.0);
                  for (let i = 0; i < nbSides; i++) {
                      normals.setFaceVertexValue(faceIndex, 0, normal);
                      normals.setFaceVertexValue(faceIndex, 1, normal);
                      normals.setFaceVertexValue(faceIndex, 2, normal);
                      faceIndex++;
                  }
                  normal.set(0.0, 0.0, 1.0);
                  for (let i = 0; i < nbSides; i++) {
                      normals.setFaceVertexValue(faceIndex, 0, normal);
                      normals.setFaceVertexValue(faceIndex, 1, normal);
                      normals.setFaceVertexValue(faceIndex, 2, normal);
                      faceIndex++;
                  }
              }
              for (let i = 0; i < nbLoops - 1; i++) {
                  for (let j = 0; j < nbSides; j++) {
                      let phi = (j / nbSides) * 2.0 * Math.PI;
                      const normal1 = new Vec3(Math.sin(phi), Math.cos(phi), 0.0);
                      normals.setFaceVertexValue(faceIndex, 0, normal1);
                      normals.setFaceVertexValue(faceIndex, 1, normal1);
                      phi = ((j + 1) / nbSides) * 2.0 * Math.PI;
                      const normal2 = new Vec3(Math.sin(phi), Math.cos(phi), 0.0);
                      normals.setFaceVertexValue(faceIndex, 2, normal2);
                      normals.setFaceVertexValue(faceIndex, 3, normal2);
                      faceIndex++;
                  }
              }
          }
          // ////////////////////////////
          // setUVs
          const texCoords = this.getVertexAttribute('texCoords');
          if (texCoords) {
              // Now set the attrbute values
              faceIndex = 0;
              if (caps) {
                  for (let i = 0; i < nbSides; i++) {
                      texCoords.setFaceVertexValue(faceIndex, 0, new Vec2(i / nbSides, 0.0));
                      texCoords.setFaceVertexValue(faceIndex, 1, new Vec2((i + 1) / nbSides, 0.0));
                      texCoords.setFaceVertexValue(faceIndex, 2, new Vec2((i + 0.5) / nbSides, 1.0));
                      faceIndex++;
                  }
                  for (let i = 0; i < nbSides; i++) {
                      texCoords.setFaceVertexValue(faceIndex, 0, new Vec2(i / nbSides, 0.0));
                      texCoords.setFaceVertexValue(faceIndex, 1, new Vec2((i + 1) / nbSides, 0.0));
                      texCoords.setFaceVertexValue(faceIndex, 2, new Vec2((i + 0.5) / nbSides, 1.0));
                      faceIndex++;
                  }
              }
              for (let i = 0; i < nbSides; i++) {
                  texCoords.setFaceVertexValue(faceIndex, 0, new Vec2((i + 1) / nbSides, 0.0));
                  texCoords.setFaceVertexValue(faceIndex, 2, new Vec2((i + 1) / nbSides, 1.0));
                  texCoords.setFaceVertexValue(faceIndex, 1, new Vec2(i / nbSides, 0.0));
                  texCoords.setFaceVertexValue(faceIndex, 3, new Vec2(i / nbSides, 1.0));
                  faceIndex++;
              }
          }
          this.resize();
      }
      /**
       * The resize method.
       * @private
       */
      resize() {
          const nbSides = Math.round(this.sidesParam.value);
          const nbLoops = Math.round(this.loopsParam.value);
          const radius = this.radiusParam.value;
          const height = this.heightParam.value;
          const caps = this.capsParam.value;
          const baseZAtZero = this.baseZAtZeroParam.value;
          let numVertices = nbSides * nbLoops;
          if (caps) {
              numVertices += 2;
          }
          let vertex = 0;
          let zoff = 0.5;
          if (baseZAtZero)
              zoff = 0.0;
          const positions = this.positions;
          if (positions) {
              for (let i = 0; i < nbLoops; i++) {
                  const z = (i / (nbLoops - 1)) * height - height * zoff;
                  for (let j = 0; j < nbSides; j++) {
                      const phi = (j / nbSides) * 2.0 * Math.PI;
                      positions.setValue(vertex, new Vec3(Math.sin(phi) * radius, Math.cos(phi) * radius, z));
                      vertex++;
                  }
              }
              if (caps) {
                  positions.setValue(numVertices - 1, new Vec3(0.0, 0.0, height * (baseZAtZero ? 0.0 : -0.5)));
                  positions.setValue(numVertices - 2, new Vec3(0.0, 0.0, height * (baseZAtZero ? 1.0 : 0.5)));
              }
          }
          this.dirtyTopology = false;
          this.dirtyVertices = false;
          const normals = this.getVertexAttribute('normals');
          if (normals) {
              this.computeVertexNormals();
          }
      }
  }
  Registry.register('Cylinder', Cylinder);

  /**
   * A class for generating a disc geometry.
   *
   * ```
   * const disc = new Disc(2.0, 22)
   * ```
   *
   * **Parameters**
   * * **Radius(`NumberParameter`):** Specifies the radius of the disc.
   * * **Sides(`NumberParameter`):** Specifies the resolution, or the disc subdivisions around `Z` axis.
   *
   * @extends {ProceduralMesh}
   */
  class Disc extends ProceduralMesh {
      /**
       * @member radiusParam - Specifies the radius of the disc.
       */
      radiusParam = new NumberParameter('Radius', 6, [0, Number.MAX_VALUE]);
      /**
       * @member sidesParam - Specifies the resolution, or the disc subdivisions around `Z` axis.
       */
      sidesParam = new NumberParameter('Sides', 12, [0, Number.MAX_VALUE], 1);
      /**
       * Creates an instance of Disc.
       *
       * @param radius - The radius of the disc.
       * @param sides - The number of sides.
       */
      constructor(radius = 0.5, sides = 32) {
          super();
          this.topologyParams = [];
          if (isNaN(radius) || isNaN(sides))
              throw new Error('Invalid geom args');
          this.addParameter(this.radiusParam);
          this.addParameter(this.sidesParam);
          this.radiusParam.value = radius;
          this.sidesParam.value = sides;
          this.addVertexAttribute('texCoords', new Vec2f16Attribute());
          this.addVertexAttribute('normals', new Vec3f8Attribute());
          this.topologyParams.push('Sides');
      }
      /**
       * The rebuild method.
       * @private
       */
      rebuild() {
          const nbSides = Math.round(this.sidesParam.value);
          this.setNumVertices(nbSides + 1);
          this.setFaceCounts([nbSides]);
          // ////////////////////////////
          // Set Vertex Positions
          const positions = this.positions;
          if (positions)
              positions.setValue(0, new Vec3(0.0, 0.0, 0.0));
          // ////////////////////////////
          // Build the topology
          for (let j = 0; j < nbSides; j++) {
              const v1 = (j % nbSides) + 1;
              const v2 = ((j + 1) % nbSides) + 1;
              this.setFaceVertexIndices(j, [0, v1, v2]);
          }
          // ////////////////////////////
          // setNormals
          const normals = this.getVertexAttribute('normals');
          if (normals) {
              // Now set the attrbute values
              const normal = new Vec3(0, 0, 1);
              normals.setValue(0, normal);
              for (let i = 0; i < nbSides; i++) {
                  normals.setValue(i + 1, normal);
              }
          }
          // ////////////////////////////
          // setUVs
          const texCoords = this.getVertexAttribute('texCoords');
          if (texCoords) {
              texCoords.setValue(0, new Vec2(0.5, 0.5));
              for (let i = 0; i < nbSides; i++) {
                  const phi = (i / nbSides) * 2.0 * Math.PI;
                  texCoords.setValue(i + 1, new Vec2(Math.sin(phi) * 0.5 + 0.5, Math.cos(phi) * 0.5 + 0.5));
              }
          }
          this.resize();
      }
      /**
       * The resize method.
       * @private
       */
      resize() {
          const nbSides = Math.round(this.sidesParam.value);
          const radius = this.radiusParam.value;
          const positions = this.positions;
          if (positions) {
              for (let i = 0; i < nbSides; i++) {
                  const phi = (i / nbSides) * 2.0 * Math.PI;
                  positions.setValue(i + 1, new Vec3(Math.sin(phi) * radius, Math.cos(phi) * radius, 0.0));
              }
          }
      }
  }
  Registry.register('Disc', Disc);

  /**
   * A class for generating a plane geometry.
   *
   * ```
   * const plane = new Plane(2.0, 1.5, 10, 10)
   * ```
   *
   * **Parameters**
   * * **SizeX(`NumberParameter`):** Length of the plane along `X` axis.
   * * **SizeY(`NumberParameter`):** Length of the plane along `Y` axis.
   * * **DetailX(`NumberParameter`):** Number of divisions along `X`axis.
   * * **DetailY(`NumberParameter`):** Number of divisions along `Y`axis.
   *
   * @extends {ProceduralMesh}
   */
  class Plane extends ProceduralMesh {
      /**
       * @member sizeXParam - Number of divisions along `X`axis.
       */
      sizeXParam = new NumberParameter('SizeX', 1.0, [0, Number.MAX_VALUE]);
      /**
       * @member sizeYParam - Number of divisions along `Y`axis.
       */
      sizeYParam = new NumberParameter('SizeY', 1.0, [0, Number.MAX_VALUE]);
      /**
       * @member detailXParam - Length of the plane along `X` axis.
       */
      detailXParam = new NumberParameter('DetailX', 1, [0, Number.MAX_VALUE], 1);
      /**
       * @member detailYParam - Length of the plane along `Y` axis.
       */
      detailYParam = new NumberParameter('DetailY', 1, [0, Number.MAX_VALUE], 1);
      /**
       * Create a plane.
       * @param SizeX - The length of the plane along the X axis.
       * @param SizeY - The length of the plane along the Y axis.
       * @param DetailX - The number of divisions along the X axis.
       * @param DetailY - The number of divisions along the Y axis.
       * @param addNormals - The addNormals value.
       * @param addTextureCoords - The addTextureCoords value.
       */
      constructor(SizeX = 1.0, SizeY = 1.0, DetailX = 1, DetailY = 1, addNormals = true, addTextureCoords = true) {
          super();
          this.topologyParams = [];
          if (isNaN(SizeX) || isNaN(SizeY) || isNaN(DetailX) || isNaN(DetailY))
              throw new Error('Invalid geom args');
          this.addParameter(this.sizeXParam);
          this.addParameter(this.sizeYParam);
          this.addParameter(this.detailXParam);
          this.addParameter(this.detailYParam);
          this.sizeXParam.value = SizeX;
          this.sizeYParam.value = SizeY;
          this.detailXParam.value = DetailX;
          this.detailYParam.value = DetailY;
          if (addNormals)
              this.addVertexAttribute('normals', new Vec3f8Attribute());
          if (addTextureCoords)
              this.addVertexAttribute('texCoords', new Vec2f16Attribute());
          this.topologyParams.push('DetailX');
          this.topologyParams.push('DetailY');
      }
      /**
       * The rebuild method.
       * @private
       */
      rebuild() {
          const detailX = this.detailXParam.value;
          const detailY = this.detailYParam.value;
          this.setNumVertices((detailX + 1) * (detailY + 1));
          this.setFaceCounts([0, detailX * detailY]);
          let quadId = 0;
          for (let i = 0; i < detailY; i++) {
              for (let j = 0; j < detailX; j++) {
                  const v0 = (detailX + 1) * (i + 1) + j;
                  const v1 = (detailX + 1) * i + j;
                  const v2 = (detailX + 1) * i + (j + 1);
                  const v3 = (detailX + 1) * (i + 1) + (j + 1);
                  this.setFaceVertexIndices(quadId, [v0, v1, v2, v3]);
                  quadId = quadId + 1;
              }
          }
          let voff = 0;
          const normals = this.getVertexAttribute('normals');
          if (normals) {
              for (let i = 0; i <= detailY; i++) {
                  for (let j = 0; j <= detailX; j++) {
                      normals.setValue(voff, new Vec3(0, 0, 1));
                      voff++;
                  }
              }
          }
          voff = 0;
          const texCoords = this.getVertexAttribute('texCoords');
          if (texCoords) {
              for (let i = 0; i <= detailY; i++) {
                  const y = i / detailY;
                  for (let j = 0; j <= detailX; j++) {
                      const x = j / detailX;
                      texCoords.setValue(voff, new Vec2(x, y));
                      voff++;
                  }
              }
          }
          this.resize();
      }
      /**
       * The resize method.
       *
       * @private
       */
      resize() {
          const sizeX = this.sizeXParam.value;
          const sizeY = this.sizeYParam.value;
          const detailX = this.detailXParam.value;
          const detailY = this.detailYParam.value;
          const positions = this.positions;
          if (!positions)
              return;
          let voff = 0;
          for (let i = 0; i <= detailY; i++) {
              const y = (i / detailY - 0.5) * sizeY;
              for (let j = 0; j <= detailX; j++) {
                  const x = (j / detailX - 0.5) * sizeX;
                  positions.setValue(voff, new Vec3(x, y, 0.0));
                  voff++;
              }
          }
      }
  }
  Registry.register('Plane', Plane);

  /**
   * A class for generating a sphere geometry.
   *
   * ```
   * const sphere = new Sphere(1.4, 13)
   * ```
   *
   * **Parameters**
   * * **Radius(`NumberParameter`):** Radius of the sphere.
   * * **Sides(`NumberParameter`):** Specifies the number of subdivisions around the `Z` axis.
   * * **Loops(`NumberParameter`):** Specifies the number of subdivisions(stacks) along the `Z` axis.
   *
   * @extends {ProceduralMesh}
   */
  class Sphere extends ProceduralMesh {
      /**
       * @member radiusParam - Radius of the sphere.
       */
      radiusParam = new NumberParameter('Radius', 1.0, [0, Number.MAX_VALUE]);
      /**
       * @member sidesParam - Specifies the number of subdivisions around the `Z` axis.
       */
      sidesParam = new NumberParameter('Sides', 12, [0, Number.MAX_VALUE], 1);
      /**
       * @member loopsParam - Specifies the number of subdivisions(stacks) along the `Z` axis.
       */
      loopsParam = new NumberParameter('Loops', 6, [0, Number.MAX_VALUE], 1);
      /**
       * Creates an instance of Sphere.
       * @param radius - The radius of the sphere.
       * @param sides - The number of sides.
       * @param loops - The number of loops.
       * @param addNormals - Compute vertex normals for the geometry
       * @param addTextureCoords - Compute texture coordinates for the geometry
       */
      constructor(radius = 1.0, sides = 12, loops = 12, addNormals = true, addTextureCoords = true) {
          super();
          if (isNaN(radius) || isNaN(sides) || isNaN(loops))
              throw new Error('Invalid geom args');
          this.addParameter(this.radiusParam);
          this.addParameter(this.sidesParam);
          this.addParameter(this.loopsParam);
          this.radiusParam.value = radius;
          this.sidesParam.value = sides;
          this.loopsParam.value = loops;
          if (addNormals)
              this.addVertexAttribute('normals', new Vec3f8Attribute());
          if (addTextureCoords)
              this.addVertexAttribute('texCoords', new Vec2f16Attribute());
          this.topologyParams.push('Sides');
          this.topologyParams.push('Loops');
      }
      /**
       * The rebuild method.
       * @private
       */
      rebuild() {
          const radius = this.radiusParam.value;
          const nbSides = Math.round(this.sidesParam.value);
          const nbLoops = Math.round(this.loopsParam.value);
          const numVertices = 2 + nbSides * nbLoops;
          const numTris = nbSides * 2;
          const numQuads = nbSides * nbLoops;
          this.setNumVertices(numVertices);
          this.setFaceCounts([numTris, numQuads]);
          // ////////////////////////////
          // Set Vertex Positions
          const positions = this.positions;
          const normals = this.getVertexAttribute('normals');
          const normal = new Vec3(0.0, 0.0, 1.0);
          let vertex = 0;
          if (!positions)
              return;
          positions.setValue(vertex, new Vec3(0.0, 0.0, radius));
          if (normals)
              normals.setValue(vertex, new Vec3(0.0, 0.0, 1.0));
          vertex++;
          for (let i = 0; i < nbLoops; i++) {
              const theta = ((i + 1) / (nbLoops + 1)) * Math.PI;
              for (let j = 0; j < nbSides; j++) {
                  const phi = -((j / nbSides) * 2.0 * Math.PI);
                  normal.set(Math.sin(theta) * Math.cos(phi), Math.sin(theta) * Math.sin(phi), Math.cos(theta));
                  // Set positions and normals at the same time.
                  positions.setValue(vertex, normal.scale(radius));
                  if (normals)
                      normals.setValue(vertex, normal);
                  vertex++;
              }
          }
          positions.setValue(vertex, new Vec3(0.0, 0.0, -radius));
          if (normals)
              normals.setValue(vertex, new Vec3(0.0, 0.0, -1.0));
          vertex++;
          // ////////////////////////////
          // Build the topology
          const texCoords = this.getVertexAttribute('texCoords');
          // build the fan at the first pole.
          let faceIndex = 0;
          for (let j = 0; j < nbSides; j++) {
              const v0 = 0;
              const v1 = ((j + 1) % nbSides) + 1;
              const v2 = j + 1;
              this.setFaceVertexIndices(faceIndex, [v0, v1, v2]);
              if (texCoords) {
                  const uv0 = new Vec2(0.5, 0.0);
                  const uv1 = new Vec2((j + 1) / (nbSides - 1), 1 / (nbLoops + 1));
                  const uv2 = new Vec2(j / (nbSides - 1), 1 / (nbLoops + 1));
                  texCoords.setFaceVertexValue(faceIndex, 0, uv0);
                  texCoords.setFaceVertexValue(faceIndex, 1, uv1);
                  texCoords.setFaceVertexValue(faceIndex, 2, uv2);
              }
              faceIndex++;
          }
          // Build the fan at the second pole.
          for (let j = 0; j < nbSides; j++) {
              const v0 = numVertices - 1;
              const v2 = nbSides * (nbLoops - 1) + ((j + 1) % nbSides) + 1;
              const v1 = nbSides * (nbLoops - 1) + j + 1;
              this.setFaceVertexIndices(faceIndex, [v0, v1, v2]);
              if (texCoords) {
                  const uv0 = new Vec2(0.5, 1.0);
                  const uv1 = new Vec2((j + 1) / (nbSides - 1), 1 - 1 / (nbLoops + 1));
                  const uv2 = new Vec2(j / (nbSides - 1), 1 - 1 / (nbLoops + 1));
                  texCoords.setFaceVertexValue(faceIndex, 0, uv0);
                  texCoords.setFaceVertexValue(faceIndex, 1, uv1);
                  texCoords.setFaceVertexValue(faceIndex, 2, uv2);
              }
              faceIndex++;
          }
          for (let i = 0; i < nbLoops - 1; i++) {
              for (let j = 0; j < nbSides; j++) {
                  const v0 = nbSides * i + j + 1;
                  const v1 = nbSides * i + ((j + 1) % nbSides) + 1;
                  const v2 = nbSides * (i + 1) + ((j + 1) % nbSides) + 1;
                  const v3 = nbSides * (i + 1) + j + 1;
                  this.setFaceVertexIndices(faceIndex, [v0, v1, v2, v3]);
                  if (texCoords) {
                      texCoords.setFaceVertexValue(faceIndex, 0, new Vec2(j / nbSides, (i + 1) / nbLoops));
                      texCoords.setFaceVertexValue(faceIndex, 1, new Vec2((j + 1) / nbSides, (i + 1) / nbLoops));
                      texCoords.setFaceVertexValue(faceIndex, 2, new Vec2((j + 1) / nbSides, (i + 2) / nbLoops));
                      texCoords.setFaceVertexValue(faceIndex, 3, new Vec2(j / nbSides, (i + 2) / nbLoops));
                  }
                  faceIndex++;
              }
          }
      }
      /**
       * The resize method.
       * @private
       */
      resize() {
          const radius = this.radiusParam.value;
          const nbSides = Math.round(this.sidesParam.value);
          const nbLoops = Math.round(this.loopsParam.value);
          if (!nbSides || !nbLoops) {
              console.warn('resize() failed');
              return;
          }
          // ////////////////////////////
          // Set Vertex Positions
          const positions = this.positions;
          const normals = this.getVertexAttribute('normals');
          let vertex = 0;
          const normal = new Vec3(0.0, 0.0, 1.0);
          positions.setValue(vertex, new Vec3(0.0, 0.0, radius));
          if (normals)
              normals.setValue(vertex, new Vec3(0.0, 0.0, 1.0));
          vertex++;
          for (let i = 0; i < nbLoops; i++) {
              const theta = ((i + 1) / (nbLoops + 1)) * Math.PI;
              for (let j = 0; j < nbSides; j++) {
                  const phi = -((j / nbSides) * 2.0 * Math.PI);
                  normal.set(Math.sin(theta) * Math.cos(phi), Math.sin(theta) * Math.sin(phi), Math.cos(theta));
                  // Set positions and normals at the same time.
                  positions.setValue(vertex, normal.scale(radius));
                  if (normals)
                      normals.setValue(vertex, normal);
                  vertex++;
              }
          }
          positions.setValue(vertex, new Vec3(0.0, 0.0, -radius));
          if (normals)
              normals.setValue(vertex, new Vec3(0.0, 0.0, -1.0));
          vertex++;
      }
  }
  Registry.register('Sphere', Sphere);

  /**
   * A class for generating a torus geometry.
   *
   * ```
   * const torus = new Torus(0.4, 1.3)
   * ```
   *
   * @extends ProceduralMesh
   */
  class Torus extends ProceduralMesh {
      innerRadiusParam = new NumberParameter('InnerRadius', 1, [0, Number.MAX_VALUE]);
      outerRadiusParam = new NumberParameter('OuterRadius', 1, [0, Number.MAX_VALUE]);
      arcAngleParam = new AngleParameter('ArcAngle', Math.PI * 2, [0, Math.PI * 2]);
      detailParam = new NumberParameter('Detail', 12, [0, Number.MAX_VALUE], 1);
      /**
       * Creates an instance of Torus.
       *
       * @param innerRadius - The inner radius of the torus.
       * @param outerRadius - The outer radius of the torus.
       * @param detail - The detail of the cone.
       * @param arcAngle - The angle of the arc.
       */
      constructor(innerRadius = 0.5, outerRadius = 3, detail = 32, arcAngle = Math.PI * 2.0) {
          super();
          if (isNaN(innerRadius) || isNaN(outerRadius) || isNaN(detail))
              throw new Error('Invalid geom args');
          this.addParameter(this.innerRadiusParam);
          this.addParameter(this.outerRadiusParam);
          this.addParameter(this.arcAngleParam);
          this.addParameter(this.detailParam);
          this.innerRadiusParam.value = innerRadius;
          this.outerRadiusParam.value = outerRadius;
          this.detailParam.value = detail >= 3 ? detail : 33;
          this.arcAngleParam.value = arcAngle;
          this.addVertexAttribute('texCoords', new Vec2f16Attribute());
          this.addVertexAttribute('normals', new Vec3f8Attribute());
          this.topologyParams.push('Detail');
          this.topologyParams.push('ArcAngle');
      }
      /**
       * The rebuild method.
       * @private
       */
      rebuild() {
          const arcAngle = this.arcAngleParam.value;
          const open = arcAngle < 2.0 * Math.PI;
          const detail = Math.round(this.detailParam.value);
          const nbSlices = detail;
          const nbLoops = detail * 2 + (open ? 1 : 0);
          const numVertices = nbSlices * nbLoops;
          this.setNumVertices(numVertices);
          this.setFaceCounts([0, nbSlices * nbLoops]);
          // ////////////////////////////
          // Build the topology and texCoords
          const texCoords = this.getVertexAttribute('texCoords');
          if (texCoords) {
              let faceIndex = 0;
              for (let i = 0; i < (open ? nbLoops - 1 : nbLoops); i++) {
                  for (let j = 0; j < nbSlices; j++) {
                      const ip = (i + 1) % nbLoops;
                      const jp = (j + 1) % nbSlices;
                      const v0 = nbSlices * i + j;
                      const v1 = nbSlices * i + jp;
                      const v2 = nbSlices * ip + jp;
                      const v3 = nbSlices * ip + j;
                      this.setFaceVertexIndices(faceIndex, [v0, v1, v2, v3]);
                      texCoords.setFaceVertexValue(faceIndex, 0, new Vec2(i / nbLoops, j / nbLoops));
                      texCoords.setFaceVertexValue(faceIndex, 1, new Vec2(i / nbLoops, (j + 1) / nbLoops));
                      texCoords.setFaceVertexValue(faceIndex, 2, new Vec2((i + 1) / nbLoops, (j + 1) / nbLoops));
                      texCoords.setFaceVertexValue(faceIndex, 3, new Vec2((i + 1) / nbLoops, j / nbLoops));
                      faceIndex++;
                  }
              }
          }
          this.resize();
      }
      /**
       * The resize method.
       * @private
       */
      resize() {
          const innerRadius = this.innerRadiusParam.value;
          const outerRadius = this.outerRadiusParam.value;
          const arcAngle = this.arcAngleParam.value;
          const detail = Math.round(this.detailParam.value);
          const open = arcAngle < 2.0 * Math.PI;
          const nbSlices = detail;
          const nbLoops = detail * 2 + (open ? 1 : 0);
          const positions = this.positions;
          const normals = this.getVertexAttribute('normals');
          if (!positions || !normals)
              return;
          let vertex = 0;
          for (let i = 0; i < nbLoops; i++) {
              // const theta = (i / nbLoops) * arcAngle
              const theta = -((i / (open ? nbLoops - 1 : nbLoops)) * arcAngle);
              const ctheta = Math.cos(theta);
              const stheta = Math.sin(theta);
              for (let j = 0; j < nbSlices; j++) {
                  const phi = (j / nbSlices) * 2.0 * Math.PI;
                  const sphi = Math.sin(phi);
                  const cphi = Math.cos(phi);
                  const d = outerRadius + cphi * innerRadius;
                  // Set positions and normals at the same time.
                  positions.setValue(vertex, new Vec3(ctheta * d, stheta * d, innerRadius * sphi));
                  normals.setValue(vertex, new Vec3(ctheta * cphi, stheta * cphi, sphi));
                  vertex++;
              }
          }
      }
  }
  Registry.register('Torus', Torus);

  /* eslint-disable @typescript-eslint/no-explicit-any */
  /** Class representing a geometry parameter.
   * @extends Parameter
   * @private
   */
  class GeometryParameter extends Parameter {
      listenerIDs = {};
      /**
       * Create a geometry parameter.
       * @param name - The name of the color parameter.
       * @param value - The value of the parameter.
       */
      constructor(name = '', value = null) {
          super(name, null, 'Geometry');
          if (value)
              this.setValue(value);
      }
      emitBoundingBoxDirtied(event) {
          this.emit('boundingBoxChanged', event);
      }
      /**
       * The setValue method.
       * @param value - The geom value.
       */
      setValue(value) {
          if (value != null && !(value instanceof BaseGeom) && !(value instanceof BaseProxy)) {
              throw new Error(`value provided is not an instance of a 'BaseGeom' or 'BaseProxy' class. Check the source of this value`);
          }
          // 0 == normal set. 1 = changed via cleaner fn, 2 = change by loading/cloning code.
          if (this.__value !== value) {
              if (this.__value) {
                  if (this.__value instanceof BaseGeom)
                      this.__value.setOwner(null);
                  this.__value.off('boundingBoxChanged', this.listenerIDs['boundingBoxChanged']);
              }
              this.__value = value;
              if (this.__value instanceof BaseGeom)
                  this.__value.setOwner(this);
              this.listenerIDs['boundingBoxChanged'] = this.__value.on('boundingBoxChanged', (event) => {
                  this.emitBoundingBoxDirtied(event);
              });
              this.emit('valueChanged');
          }
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The loadValue is used to change the value of a parameter, without triggering a
       * valueChanges, or setting the USER_EDITED state.
       *
       * @param value - The context value.
       */
      loadValue(value) {
          this.setValue(value);
      }
      /**
       * The toJSON method encodes this type as a json object for persistence.
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const j = {
              type: this.getClassName(),
              name: this.name,
          };
          const geom = this.__value;
          if (geom instanceof BaseProxy) {
              j.libraryIndex = geom.libraryIndex;
          }
          else {
              j.value = geom?.toJSON(context);
          }
          return j;
      }
      /**
       * The fromJSON method decodes a json object for this type.
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context) {
          if (j.name)
              this.name = j.name;
          if (j.libraryIndex != undefined) {
              const geomLibrary = context.assetItem.geomLibrary;
              const newGeom = geomLibrary.getGeom(j.libraryIndex);
              this.setValue(newGeom);
          }
          else if (j.value != undefined) {
              if (!this.value || this.value.getClassName() != j.value.type) {
                  const newGeom = Registry.constructClass(j.value.type);
                  newGeom.fromJSON(j.value, context);
                  this.setValue(newGeom);
              }
              else {
                  this.value.fromJSON(j.value, context);
                  this.emit('valueChanged');
              }
          }
      }
      // ////////////////////////////////////////
      // Clone and Destroy
      /**
       * The clone method constructs a new geometry parameter, copies its values
       * from this parameter and returns it.
       * @return - Returns a new geometry parameter.
       */
      clone() {
          const clonedParam = new GeometryParameter(this.name, this.__value);
          return clonedParam;
      }
  }
  Registry.register('GeometryParameter', GeometryParameter);

  // let ResourceLoaderWorker = require("worker-loader?inline!./ResourceLoaderWorker.js");
  /**
   * Represents a BaseImage with the ability to load data.
   *
   * **Events**
   * * **loaded:** Triggered when the data is loaded.
   * * **updated:** Triggered when the data is updated.
   * @extends BaseImage
   */
  class DataImage extends BaseImage {
      __data = new Uint8Array(4);
      /**
       * Create a data image.
       * @param name - The name value.
       */
      constructor(name) {
          super(name);
          this.format = 'RGBA';
          this.type = 'UNSIGNED_BYTE';
          // this.__data = new Uint8Array(4);
          this.width = 1;
          this.height = 1;
      }
      /**
       * Returns an indicator of current item's loaded state.
       * @return - `true` if bytes data is fully loaded, `false` otherwise.
       */
      isLoaded() {
          return this.loaded;
      }
      // TODO: video / webcam will return true.
      /**
       * Images are static content, so the value for this method is always going to be `false`
       *
       * @return - The return value.
       */
      isStream() {
          return false;
      }
      /**
       * Sets Image's data by recieving an bytes array.
       *
       * @param width - The width value.
       * @param height - The height value.
       * @param data - The data value.
       */
      setData(width, height, data) {
          if (this.__data == data)
              return;
          this.width = width;
          this.height = height;
          this.__data = data;
          if (!this.loaded) {
              this.loaded = true;
              this.emit('loaded');
          }
          else
              this.emit('updated');
      }
      /**
       * Returns all parameters and class state values(Including data).
       *
       * @return - The return value.
       */
      getParams() {
          const params = super.getParams();
          params['data'] = this.__data;
          return params;
      }
  }
  Registry.register('DataImage2D', DataImage);
  Registry.register('DataImage', DataImage);

  // Cache of any images already loaded.
  const imageDataLibrary$1 = {};
  /** Class representing a file image.
   * @extends BaseImage
   */
  class FileImage extends BaseImage {
      crossOrigin;
      url;
      __data = null;
      /**
       * Create a file image.
       * @param name - The name value.
       * @param filePath - The filePath value.
       * @param params - The params value.
       */
      constructor(name, filePath = '', params = {}) {
          super(name);
          this.type = 'UNSIGNED_BYTE';
          this.crossOrigin = 'anonymous';
          if (filePath && filePath != '')
              this.load(filePath);
      }
      /**
       * Defines how to handle cross origin request.
       *
       * **Possible values:**
       * * **anonymous** - CORS requests for this element will have the credentials flag set to 'same-origin'.
       * * **use-credentials** - CORS requests for this element will have the credentials flag set to 'include'.
       * * **""** - Setting the attribute name to an empty value, like crossorigin or crossorigin="", is the same as anonymous.
       *
       * @default anonymous
       * @param crossOrigin - The crossOrigin value.
       */
      setCrossOrigin(crossOrigin) {
          this.crossOrigin = crossOrigin;
      }
      /**
       * Returns the HTML DOM element used to load the image file.
       * Be
       * @returns { HTMLImageElement | null }
       */
      getDOMElement() {
          return this.__data;
      }
      /**
       * Uses the specify url to load an Image element and adds it to the data library.
       * Sets the state of the current object.
       *
       * @param url - The url value.
       * @param format - The format value.
       * @return Returns a promise that resolves once the image is loaded.
       */
      load(url, format = 'RGB') {
          return new Promise((resolve, reject) => {
              if (!format) {
                  // Try to guess the format from the
                  const suffixSt = url.lastIndexOf('.');
                  if (suffixSt != -1) {
                      const ext = url.substring(suffixSt).toLowerCase();
                      if (ext == '.png') {
                          // TODO: Check webp for alpha channel..
                          format = 'RGBA';
                      }
                  }
              }
              this.format = format;
              this.loaded = false;
              const loaded = () => {
                  this.url = url;
                  this.width = this.__data.width;
                  this.height = this.__data.height;
                  this.loaded = true;
                  this.emit('loaded');
                  resolve();
              };
              if (url in imageDataLibrary$1) {
                  this.__data = imageDataLibrary$1[url];
                  if (this.__data.complete) {
                      loaded();
                  }
                  else {
                      this.__data.addEventListener('load', loaded);
                      this.__data.addEventListener('error', reject);
                  }
              }
              else {
                  this.__data = new Image();
                  this.__data.crossOrigin = this.crossOrigin;
                  this.__data.src = url;
                  this.__data.addEventListener('load', loaded);
                  this.__data.addEventListener('error', reject);
                  imageDataLibrary$1[url] = this.__data;
              }
          });
      }
      /**
       * Loads in Image file using the given URL
       *
       * @param url - The url value.
       * @param format - The format value. Can be 'RGB' or 'RGBA' for files that contain an alpha channel. This will cause objects to be drawn using the Transparent pass.
       */
      setImageURL(url, format = 'RGB') {
          this.load(url, format);
      }
      /**
       * The getParams method.
       * @return - The return value.
       */
      getParams() {
          const params = super.getParams();
          if (this.loaded) {
              params['data'] = this.__data;
          }
          return params;
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The readBinary method.
       * @param reader - The reader param.
       * @param context - The context param.
       */
      readBinary(reader, context) {
          // super.readBinary(reader, context);
          this.setName(reader.loadStr());
          const filePath = reader.loadStr();
          if (typeof filePath === 'string' && filePath != '') {
              const basePath = context.url.substring(0, context.url.lastIndexOf('/'));
              this.load(basePath + '/' + filePath);
          }
      }
  }
  /** Class representing a 2D file image.
   * @extends FileImage
   */
  class FileImage2D extends FileImage {
      /**
       * Create a file image 2D.
       * @param filePath - The filePath value.
       * @param params - The params value.
       */
      constructor(filePath, params = {}) {
          console.warn('FileImage2D is becoming deprecated in favor of simple FileImage');
          super(filePath, params);
      }
  }
  Registry.register('FileImage2D', FileImage);
  Registry.register('FileImage', FileImage);

  /* eslint-disable require-jsdoc */
  /**
   * Class representing a LDR (low dynamic range) image.
   *
   * ```
   * const image = new LDRImage()
   * image.load("https://storage.googleapis.com/zea-playground-assets/zea-engine/texture.png")
   * ```
   *
   * **Parameters**
   * * **PreferredSize(`NumberParameter`):** _todo_
   *
   * **Events:**
   * * **loaded:** Triggered when image data is loaded.
   *
   * **File Types:** jpg, jpeg, png
   *
   * @extends FileImage
   */
  class LDRImage extends FileImage {
      /**
       * Create a LDR image.
       * @param name - The name value.
       * @param filePath - The filePath value.
       * @param params - The params value.
       */
      constructor(name, filePath, params) {
          super(name, filePath, params);
      }
  }
  Registry.register('LDRImage', LDRImage);

  /**
   * Class representing a VLH image.
   *
   * **Events**
   * * **loaded:** Triggered when image data is loaded.
   * * **updated:** Triggered when image data is updated.
   *
   * @extends BaseImage
   */
  class HDRImage extends BaseImage {
      exposure = 1.0;
      hdrTint = new Color(1, 1, 1, 1);
      __data;
      /**
       * Create a VLH image.
       * @param name - The name value.
       * @param params - The params value.
       */
      constructor(name, params = {}) {
          super(name); // TODO: used to be: super(name, params)
          let filepath;
          if (name != undefined && name.includes('.')) {
              filepath = name;
              this.setName(name.substring(name.lastIndexOf('/') + 1, name.lastIndexOf('.')));
          }
          this.type = 'HDR';
          if (filepath) {
              this.load(filepath);
          }
      }
      /**
       * The __decodeData method.
       * @param entries - The entries value.
       * @private
       */
      __decodeData(entries) {
          return new Promise((resolve, reject) => {
              const ldr = entries.ldr;
              const cdm = entries.cdm;
              // ///////////////////////////////
              // Parse the data.
              const blob = new Blob([ldr.buffer]);
              const ldrPic = new Image();
              ldrPic.onload = () => {
                  this.width = ldrPic.width;
                  this.height = ldrPic.height;
                  // console.log(resourcePath + ": [" + this.width + ", " + this.height + "]");
                  this.__data = {
                      ldr: ldrPic,
                      cdm: cdm,
                  };
                  if (!this.loaded) {
                      this.loaded = true;
                      this.emit('loaded');
                  }
                  else {
                      this.emit('updated');
                  }
                  resolve();
              };
              ldrPic.src = URL.createObjectURL(blob);
          });
      }
      /**
       * Loads a vlh file given a URL.
       * @param url - The URL of the vlh file to load
       * @return - Returns a promise that resolves once the initial load is complete
       */
      load(url) {
          this.loaded = false;
          return new Promise((resolve, reject) => {
              const filename = url.lastIndexOf('/') > -1 ? url.substring(url.lastIndexOf('/') + 1) : '';
              const stem = filename.substring(0, filename.lastIndexOf('.'));
              if (this.getName() == '') {
                  this.setName(stem);
              }
              this.type = 'FLOAT';
              resourceLoader.loadFile('archive', url).then((entries) => {
                  if (!entries.ldr || !entries.cdm) {
                      for (const name in entries) {
                          if (name.endsWith('.jpg')) {
                              entries.ldr = entries[name];
                              delete entries[name];
                          }
                          else if (name.endsWith('.bin')) {
                              entries.cdm = entries[name];
                              delete entries[name];
                          }
                      }
                  }
                  this.__decodeData(entries).then(() => {
                      resolve();
                  });
              }, (error) => {
                  this.emit('error', error);
                  reject(error);
              });
          });
      }
      /**
       * Returns if the data is a stream or not.
       *
       * @return - The return value.
       */
      isStream() {
          return false;
      }
      /**
       * Returns all parameters and class state values.
       *
       * @return - The return value.
       */
      getParams() {
          const params = super.getParams();
          if (this.loaded) {
              params['data'] = this.__data;
              params['exposure'] = this.exposure;
          }
          return params;
      }
      /**
       * The setHDRTint method.
       * @private
       * @param hdrTint - The hdrTint value.
       */
      setHDRTint(hdrTint) {
          this.hdrTint = hdrTint;
      }
      /**
       * The getHDRTint method.
       * @private
       * @return - The return value.
       */
      getHDRTint() {
          return this.hdrTint;
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Sets state of current Image using a binary reader object, and adds it to the resource loader.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          // super.readBinary(reader, context);
          this.setName(reader.loadStr());
          let url = reader.loadStr();
          if (typeof url === 'string' && url != '') {
              this.load(url);
          }
      }
  }
  Registry.register('HDRImage', HDRImage);

  /**
   * Class representing a LDR (low dynamic range) video.
   *
   * ```
   * const video = new LDRVideo()
   * video.load("https://storage.googleapis.com/zea-playground-assets/zea-engine/video.mp4")
   * ```
   *
   * **Parameters**
   * * **Mute(`BooleanParameter`):** Mutes video volume.
   * * **Loop(`BooleanParameter`):** Repeats video over and over again.
   * * **Gain(`NumberParameter`):** Sets loudness of the video before going through any processing.
   * * **SpatializeAudio(`BooleanParameter`):** Enables/Disables spatial(Surrounding) audio.
   * * **refDistance(`NumberParameter`):** _todo_
   * * **maxDistance(`NumberParameter`):** _todo_
   * * **rolloffFactor(`NumberParameter`):** _todo_
   * * **coneInnerAngle(`NumberParameter`):** _todo_
   * * **coneOuterAngle(`NumberParameter`):** _todo_
   * * **coneOuterGain(`NumberParameter`):** _todo_
   *
   * **File Types:** mp4, ogg
   *
   * @extends FileImage
   */
  class LDRVideo extends FileImage {
      videoElem = new HTMLVideoElement();
      muteParam = new BooleanParameter('Mute', false);
      loopParam = new BooleanParameter('Loop', true);
      spatializeAudioParam = new BooleanParameter('SpatializeAudio', true);
      refDistanceParam = new NumberParameter('refDistance', 2);
      maxDistanceParam = new NumberParameter('maxDistance', 10000);
      rolloffFactorParam = new NumberParameter('rolloffFactor', 1);
      coneInnerAngleParam = new NumberParameter('coneInnerAngle', 360);
      coneOuterAngleParam = new NumberParameter('coneOuterAngle', 0);
      coneOuterGainParam = new NumberParameter('coneOuterGain', 1);
      gainParam = new NumberParameter('Gain', 2.0);
      /**
       * Create a LDR video.
       * @param name - The name value.
       * @param filePath - The filePath value.
       * @param params - The params value.
       */
      constructor(name, filePath, params) {
          super(name, filePath, params);
          this.format = 'RGB';
          this.type = 'UNSIGNED_BYTE';
          this.addParameter(this.muteParam);
          this.addParameter(this.loopParam);
          this.addParameter(this.spatializeAudioParam);
          this.addParameter(this.refDistanceParam);
          this.addParameter(this.maxDistanceParam);
          this.addParameter(this.rolloffFactorParam);
          this.addParameter(this.coneInnerAngleParam);
          this.addParameter(this.coneOuterAngleParam);
          this.addParameter(this.coneOuterGainParam);
          this.addParameter(this.gainParam).setRange([0, 5]);
      }
      getAudioSource() {
          return this.videoElem;
      }
      /**
       * Uses the specify url to load an Image element and adds it to the data library.
       * Sets the state of the current object.
       *
       * @param url - The url value.
       * @param format - The format value.
       * @return Returns a promise that resolves once the image is loaded.
       */
      load(url, format = 'RGB') {
          return new Promise((resolve, reject) => {
              resourceLoader.incrementWorkload(1);
              // TODO - confirm its necessary to add to DOM
              this.videoElem.style.display = 'none';
              this.videoElem.preload = 'auto';
              this.videoElem.crossOrigin = 'anonymous';
              // videoElem.crossorigin = true;
              document.body.appendChild(this.videoElem);
              this.videoElem.addEventListener('loadedmetadata', () => {
                  // videoElem.play();
                  this.videoElem.muted = this.muteParam.value;
                  this.muteParam.on('valueChanged', () => {
                      this.videoElem.muted = this.muteParam.value;
                  });
                  this.videoElem.loop = this.loopParam.value;
                  this.loopParam.on('valueChanged', () => {
                      this.videoElem.loop = this.loopParam.value;
                  });
                  this.width = this.videoElem.videoHeight;
                  this.height = this.videoElem.videoWidth;
                  this.loaded = true;
                  resourceLoader.incrementWorkDone(1);
                  this.emit('loaded');
                  resolve(promise);
                  let prevFrame = 0;
                  const frameRate = 29.97;
                  const timerCallback = () => {
                      if (this.videoElem.paused || this.videoElem.ended) {
                          return;
                      }
                      // Check to see if the video has progressed to the next frame.
                      // If so, then we emit and update, which will cause a redraw.
                      const currentFrame = Math.floor(this.videoElem.currentTime * frameRate);
                      if (prevFrame != currentFrame) {
                          this.emit('updated');
                          prevFrame = currentFrame;
                      }
                      setTimeout(timerCallback, 20); // Sample at 50fps.
                  };
                  timerCallback();
              }, false);
              this.videoElem.src = url;
              // this.videoElem.load();
              const promise = this.videoElem.play();
              if (promise !== undefined) {
                  promise
                      .then((_) => {
                      console.log('Autoplay started!');
                      // Autoplay started!
                  })
                      .catch(() => {
                      console.log('Autoplay was prevented.');
                      // Autoplay was prevented.
                      // Show a "Play" button so that user can start playback.
                  });
              }
          });
      }
      /**
       * The getParams method.
       * @return - The return value.
       */
      getParams() {
          const params = super.getParams();
          if (this.loaded) {
              params['data'] = this.videoElem;
          }
          return params;
      }
  }
  Registry.register('LDRVideo', LDRVideo);

  //@ts-nocheck
  // Stream object for reading off bytes from a byte array
  function ByteStream(data) {
      this.data = data;
      this.pos = 0;
  }
  // read the next byte off the stream
  ByteStream.prototype.readByte = function () {
      return this.data[this.pos++];
  };
  // look at the next byte in the stream without updating the stream position
  ByteStream.prototype.peekByte = function () {
      return this.data[this.pos];
  };
  // read an array of bytes
  ByteStream.prototype.readBytes = function (n) {
      var bytes = new Array(n);
      for (var i = 0; i < n; i++) {
          bytes[i] = this.readByte();
      }
      return bytes;
  };
  // peek at an array of bytes without updating the stream position
  ByteStream.prototype.peekBytes = function (n) {
      var bytes = new Array(n);
      for (var i = 0; i < n; i++) {
          bytes[i] = this.data[this.pos + i];
      }
      return bytes;
  };
  // read a string from a byte set
  ByteStream.prototype.readString = function (len) {
      var str = '';
      for (var i = 0; i < len; i++) {
          str += String.fromCharCode(this.readByte());
      }
      return str;
  };
  // read a single byte and return an array of bit booleans
  ByteStream.prototype.readBitArray = function () {
      var arr = [];
      var bite = this.readByte();
      for (var i = 7; i >= 0; i--) {
          arr.push(!!(bite & (1 << i)));
      }
      return arr;
  };
  // read an unsigned int with endian option
  ByteStream.prototype.readUnsigned = function (littleEndian) {
      var a = this.readBytes(2);
      if (littleEndian) {
          return (a[1] << 8) + a[0];
      }
      else {
          return (a[0] << 8) + a[1];
      }
  };
  function DataParser(data) {
      //@ts-ignore
      this.stream = new ByteStream(data);
      // the final parsed object from the data
      this.output = {};
  }
  DataParser.prototype.parse = function (schema) {
      // the top level schema is just the top level parts array
      this.parseParts(this.output, schema);
      return this.output;
  };
  // parse a set of hierarchy parts providing the parent object, and the subschema
  DataParser.prototype.parseParts = function (obj, schema) {
      for (var i = 0; i < schema.length; i++) {
          var part = schema[i];
          this.parsePart(obj, part);
      }
  };
  DataParser.prototype.parsePart = function (obj, part) {
      var name = part.label;
      var value;
      // make sure the part meets any parse requirements
      if (part.requires && !part.requires(this.stream, this.output, obj)) {
          return;
      }
      if (part.loop) {
          // create a parse loop over the parts
          var items = [];
          while (part.loop(this.stream)) {
              var item = {};
              this.parseParts(item, part.parts);
              items.push(item);
          }
          obj[name] = items;
      }
      else if (part.parts) {
          // process any child parts
          value = {};
          this.parseParts(value, part.parts);
          obj[name] = value;
      }
      else if (part.parser) {
          // parse the value using a parser
          value = part.parser(this.stream, this.output, obj);
          if (!part.skip) {
              obj[name] = value;
          }
      }
      else if (part.bits) {
          // convert the next byte to a set of bit fields
          obj[name] = this.parseBits(part.bits);
      }
  };
  // combine bits to calculate value
  function bitsToNum(bitArray) {
      return bitArray.reduce(function (s, n) {
          return s * 2 + n;
      }, 0);
  }
  // parse a byte as a bit set (flags and values)
  DataParser.prototype.parseBits = function (details) {
      var out = {};
      var bits = this.stream.readBitArray();
      for (var key in details) {
          var item = details[key];
          if (item.length) {
              // convert the bit set to value
              out[key] = bitsToNum(bits.slice(item.index, item.index + item.length));
          }
          else {
              out[key] = bits[item.index];
          }
      }
      return out;
  };
  // a set of common parsers used with DataParser
  var Parsers = {
      // read a byte
      readByte: function () {
          return function (stream) {
              return stream.readByte();
          };
      },
      // read an array of bytes
      readBytes: function (length) {
          return function (stream) {
              return stream.readBytes(length);
          };
      },
      // read a string from bytes
      readString: function (length) {
          return function (stream) {
              return stream.readString(length);
          };
      },
      // read an unsigned int (with endian)
      readUnsigned: function (littleEndian) {
          return function (stream) {
              return stream.readUnsigned(littleEndian);
          };
      },
      // read an array of byte sets
      readArray: function (size, countFunc) {
          return function (stream, obj, parent) {
              var count = countFunc(stream, obj, parent);
              var arr = new Array(count);
              for (var i = 0; i < count; i++) {
                  arr[i] = stream.readBytes(size);
              }
              return arr;
          };
      },
  };
  // object used to represent array buffer data for a gif file
  // a set of 0x00 terminated subblocks
  var subBlocks = {
      label: 'blocks',
      parser: function (stream) {
          var out = [];
          var terminator = 0x00;
          for (var size = stream.readByte(); size !== terminator; size = stream.readByte()) {
              out = out.concat(stream.readBytes(size));
          }
          return out;
      },
  };
  // global control extension
  var gce = {
      label: 'gce',
      requires: function (stream) {
          // just peek at the top two bytes, and if true do this
          var codes = stream.peekBytes(2);
          return codes[0] === 0x21 && codes[1] === 0xf9;
      },
      parts: [
          { label: 'codes', parser: Parsers.readBytes(2), skip: true },
          { label: 'byteSize', parser: Parsers.readByte() },
          {
              label: 'extras',
              bits: {
                  future: { index: 0, length: 3 },
                  disposal: { index: 3, length: 3 },
                  userInput: { index: 6 },
                  transparentColorGiven: { index: 7 },
              },
          },
          { label: 'delay', parser: Parsers.readUnsigned(true) },
          { label: 'transparentColorIndex', parser: Parsers.readByte() },
          { label: 'terminator', parser: Parsers.readByte(), skip: true },
      ],
  };
  // image pipeline block
  var image = {
      label: 'image',
      requires: function (stream) {
          // peek at the next byte
          var code = stream.peekByte();
          return code === 0x2c;
      },
      parts: [
          { label: 'code', parser: Parsers.readByte(), skip: true },
          {
              label: 'descriptor',
              parts: [
                  { label: 'left', parser: Parsers.readUnsigned(true) },
                  { label: 'top', parser: Parsers.readUnsigned(true) },
                  { label: 'width', parser: Parsers.readUnsigned(true) },
                  { label: 'height', parser: Parsers.readUnsigned(true) },
                  {
                      label: 'lct',
                      bits: {
                          exists: { index: 0 },
                          interlaced: { index: 1 },
                          sort: { index: 2 },
                          future: { index: 3, length: 2 },
                          size: { index: 5, length: 3 },
                      },
                  },
              ],
          },
          {
              label: 'lct',
              requires: function (stream, obj, parent) {
                  return parent.descriptor.lct.exists;
              },
              parser: Parsers.readArray(3, function (stream, obj, parent) {
                  return Math.pow(2, parent.descriptor.lct.size + 1);
              }),
          },
          {
              label: 'data',
              parts: [{ label: 'minCodeSize', parser: Parsers.readByte() }, subBlocks],
          },
      ],
  };
  // plain text block
  var text = {
      label: 'text',
      requires: function (stream) {
          // just peek at the top two bytes, and if true do this
          var codes = stream.peekBytes(2);
          return codes[0] === 0x21 && codes[1] === 0x01;
      },
      parts: [
          { label: 'codes', parser: Parsers.readBytes(2), skip: true },
          { label: 'blockSize', parser: Parsers.readByte() },
          {
              label: 'preData',
              parser: function (stream, obj, parent) {
                  return stream.readBytes(parent.text.blockSize);
              },
          },
          subBlocks,
      ],
  };
  // application block
  var application = {
      label: 'application',
      requires: function (stream, obj, parent) {
          // make sure this frame doesn't already have a gce, text, comment, or image
          // as that means this block should be attached to the next frame
          //if(parent.gce || parent.text || parent.image || parent.comment){ return false; }
          // peek at the top two bytes
          var codes = stream.peekBytes(2);
          return codes[0] === 0x21 && codes[1] === 0xff;
      },
      parts: [
          { label: 'codes', parser: Parsers.readBytes(2), skip: true },
          { label: 'blockSize', parser: Parsers.readByte() },
          {
              label: 'id',
              parser: function (stream, obj, parent) {
                  return stream.readString(parent.blockSize);
              },
          },
          subBlocks,
      ],
  };
  // comment block
  var comment = {
      label: 'comment',
      requires: function (stream, obj, parent) {
          // make sure this frame doesn't already have a gce, text, comment, or image
          // as that means this block should be attached to the next frame
          //if(parent.gce || parent.text || parent.image || parent.comment){ return false; }
          // peek at the top two bytes
          var codes = stream.peekBytes(2);
          return codes[0] === 0x21 && codes[1] === 0xfe;
      },
      parts: [{ label: 'codes', parser: Parsers.readBytes(2), skip: true }, subBlocks],
  };
  // frames of ext and image data
  var frames = {
      label: 'frames',
      parts: [gce, application, comment, image, text],
      loop: function (stream) {
          var nextCode = stream.peekByte();
          // rather than check for a terminator, we should check for the existence
          // of an ext or image block to avoid infinite loops
          //var terminator = 0x3B;
          //return nextCode !== terminator;
          return nextCode === 0x21 || nextCode === 0x2c;
      },
  };
  // main GIF schema
  var schemaGIF = [
      {
          label: 'header',
          parts: [
              { label: 'signature', parser: Parsers.readString(3) },
              { label: 'version', parser: Parsers.readString(3) },
          ],
      },
      {
          label: 'lsd',
          parts: [
              { label: 'width', parser: Parsers.readUnsigned(true) },
              { label: 'height', parser: Parsers.readUnsigned(true) },
              {
                  label: 'gct',
                  bits: {
                      exists: { index: 0 },
                      resolution: { index: 1, length: 3 },
                      sort: { index: 4 },
                      size: { index: 5, length: 3 },
                  },
              },
              { label: 'backgroundColorIndex', parser: Parsers.readByte() },
              { label: 'pixelAspectRatio', parser: Parsers.readByte() },
          ],
      },
      {
          label: 'gct',
          requires: function (stream, obj) {
              return obj.lsd.gct.exists;
          },
          parser: Parsers.readArray(3, function (stream, obj) {
              return Math.pow(2, obj.lsd.gct.size + 1);
          }),
      },
      frames, // content frames
  ];
  var gifSchema = schemaGIF;
  function GIF(arrayBuffer) {
      // convert to byte array
      var byteData = new Uint8Array(arrayBuffer);
      //@ts-ignore
      var parser = new DataParser(byteData);
      // parse the data
      this.raw = parser.parse(gifSchema);
      // set a flag to make sure the gif contains at least one image
      this.raw.hasImages = false;
      for (var f = 0; f < this.raw.frames.length; f++) {
          if (this.raw.frames[f].image) {
              this.raw.hasImages = true;
              break;
          }
      }
  }
  // process a single gif image frames data, decompressing it using LZW
  // if buildPatch is true, the returned image will be a clamped 8 bit image patch
  // for use directly with a canvas.
  GIF.prototype.decompressFrame = function (index, buildPatch) {
      // make sure a valid frame is requested
      if (index >= this.raw.frames.length) {
          return null;
      }
      var frame = this.raw.frames[index];
      if (frame.image) {
          // get the number of pixels
          var totalPixels = frame.image.descriptor.width * frame.image.descriptor.height;
          // do lzw decompression
          var pixels = lzw(frame.image.data.minCodeSize, frame.image.data.blocks, totalPixels);
          // deal with interlacing if necessary
          if (frame.image.descriptor.lct.interlaced) {
              pixels = deinterlace(pixels, frame.image.descriptor.width);
          }
          // setup usable image object
          var image = {
              pixels: pixels,
              dims: {
                  top: frame.image.descriptor.top,
                  left: frame.image.descriptor.left,
                  width: frame.image.descriptor.width,
                  height: frame.image.descriptor.height,
              },
          };
          // color table
          if (frame.image.descriptor.lct && frame.image.descriptor.lct.exists) {
              image.colorTable = frame.image.lct;
          }
          else {
              image.colorTable = this.raw.gct;
          }
          // add per frame relevant gce information
          if (frame.gce) {
              image.delay = (frame.gce.delay || 10) * 10; // convert to ms
              image.disposalType = frame.gce.extras.disposal;
              // transparency
              if (frame.gce.extras.transparentColorGiven) {
                  image.transparentIndex = frame.gce.transparentColorIndex;
              }
          }
          // create canvas usable imagedata if desired
          if (buildPatch) {
              image.patch = generatePatch(image);
          }
          return image;
      }
      // frame does not contains image
      return null;
      /**
       * javascript port of java LZW decompression
       * Original java author url: https://gist.github.com/devunwired/4479231
       */
      function lzw(minCodeSize, data, pixelCount) {
          var MAX_STACK_SIZE = 4096;
          var nullCode = -1;
          var npix = pixelCount;
          var available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, i, datum, data_size, first, top, bi, pi;
          var dstPixels = new Array(pixelCount);
          var prefix = new Array(MAX_STACK_SIZE);
          var suffix = new Array(MAX_STACK_SIZE);
          var pixelStack = new Array(MAX_STACK_SIZE + 1);
          // Initialize GIF data stream decoder.
          data_size = minCodeSize;
          clear = 1 << data_size;
          end_of_information = clear + 1;
          available = clear + 2;
          old_code = nullCode;
          code_size = data_size + 1;
          code_mask = (1 << code_size) - 1;
          for (code = 0; code < clear; code++) {
              prefix[code] = 0;
              suffix[code] = code;
          }
          // Decode GIF pixel stream.
          datum = bits = first = top = pi = bi = 0;
          for (i = 0; i < npix;) {
              if (top === 0) {
                  if (bits < code_size) {
                      // get the next byte
                      datum += data[bi] << bits;
                      bits += 8;
                      bi++;
                      continue;
                  }
                  // Get the next code.
                  code = datum & code_mask;
                  datum >>= code_size;
                  bits -= code_size;
                  // Interpret the code
                  if (code > available || code == end_of_information) {
                      break;
                  }
                  if (code == clear) {
                      // Reset decoder.
                      code_size = data_size + 1;
                      code_mask = (1 << code_size) - 1;
                      available = clear + 2;
                      old_code = nullCode;
                      continue;
                  }
                  if (old_code == nullCode) {
                      pixelStack[top++] = suffix[code];
                      old_code = code;
                      first = code;
                      continue;
                  }
                  in_code = code;
                  if (code == available) {
                      pixelStack[top++] = first;
                      code = old_code;
                  }
                  while (code > clear) {
                      pixelStack[top++] = suffix[code];
                      code = prefix[code];
                  }
                  first = suffix[code] & 0xff;
                  pixelStack[top++] = first;
                  // add a new string to the table, but only if space is available
                  // if not, just continue with current table until a clear code is found
                  // (deferred clear code implementation as per GIF spec)
                  if (available < MAX_STACK_SIZE) {
                      prefix[available] = old_code;
                      suffix[available] = first;
                      available++;
                      if ((available & code_mask) === 0 && available < MAX_STACK_SIZE) {
                          code_size++;
                          code_mask += available;
                      }
                  }
                  old_code = in_code;
              }
              // Pop a pixel off the pixel stack.
              top--;
              dstPixels[pi++] = pixelStack[top];
              i++;
          }
          for (i = pi; i < npix; i++) {
              dstPixels[i] = 0; // clear missing pixels
          }
          return dstPixels;
      }
      // deinterlace function from https://github.com/shachaf/jsgif
      function deinterlace(pixels, width) {
          var newPixels = new Array(pixels.length);
          var rows = pixels.length / width;
          var cpRow = function (toRow, fromRow) {
              var fromPixels = pixels.slice(fromRow * width, (fromRow + 1) * width);
              newPixels.splice.apply(newPixels, [toRow * width, width].concat(fromPixels));
          };
          // See appendix E.
          var offsets = [0, 4, 2, 1];
          var steps = [8, 8, 4, 2];
          var fromRow = 0;
          for (var pass = 0; pass < 4; pass++) {
              for (var toRow = offsets[pass]; toRow < rows; toRow += steps[pass]) {
                  cpRow(toRow, fromRow);
                  fromRow++;
              }
          }
          return newPixels;
      }
      // create a clamped byte array patch for the frame image to be used directly with a canvas
      // TODO: could potentially squeeze some performance by doing a direct 32bit write per iteration
      function generatePatch(image) {
          var totalPixels = image.pixels.length;
          var patchData = new Uint8ClampedArray(totalPixels * 4);
          for (var i = 0; i < totalPixels; i++) {
              var pos = i * 4;
              var colorIndex = image.pixels[i];
              var color = image.colorTable[colorIndex];
              patchData[pos] = color[0];
              patchData[pos + 1] = color[1];
              patchData[pos + 2] = color[2];
              patchData[pos + 3] = colorIndex !== image.transparentIndex ? 255 : 0;
          }
          return patchData;
      }
  };
  // returns all frames decompressed
  GIF.prototype.decompressFrames = function (buildPatch) {
      var frames = [];
      for (var i = 0; i < this.raw.frames.length; i++) {
          var frame = this.raw.frames[i];
          if (frame.image) {
              frames.push(this.decompressFrame(i, buildPatch));
          }
      }
      return frames;
  };

  /* eslint-disable prefer-promise-reject-errors */
  const imageDataLibrary = {};
  /**
   * Class representing a GIF image.
   *
   * ```
   * const image = new GIFImage()
   * image.load("https://storage.googleapis.com/zea-playground-assets/zea-engine/texture.gif")
   * ```
   *
   * **Parameters**
   * * **StreamAtlasDesc:**
   * * **StreamAtlasIndex:**
   *
   * **Events**
   * * **loaded:** Triggered when the gif data is loaded.
   *
   * **File Types:** gif
   *
   * @extends FileImage
   */
  class GIFImage extends FileImage {
      __streamAtlas;
      play;
      stop;
      __resourcePromise;
      __unpackedData;
      streamAtlasDescParam = new Vec4Parameter('StreamAtlasDesc');
      streamAtlasIndexParam = new NumberParameter('StreamAtlasIndex', 0);
      /**
       * Create a GIF image.
       * @param name - The name value.
       * @param filePath - The filePath value.
       * @param params - The params value.
       */
      constructor(name, filePath = '', params = {}) {
          super(name, filePath, params);
          this.format = 'RGBA';
          this.type = 'UNSIGNED_BYTE';
          this.__streamAtlas = true;
          this.addParameter(this.streamAtlasDescParam);
          this.addParameter(this.streamAtlasIndexParam);
          const frameParam = this.streamAtlasIndexParam;
          frameParam.setRange([0, 1]);
          let playing;
          let frame = 0;
          const incrementFrame = (numFrames) => {
              frameParam.value = frame;
              if (playing)
                  setTimeout(() => incrementFrame(numFrames), this.getFrameDelay(frame));
              frame = (frame + 1) % numFrames;
          };
          this.play = () => {
              this.__resourcePromise.then(() => {
                  playing = true;
                  let frameParam_check = frameParam.getRange();
                  if (!frameParam_check) {
                      // should range be always be intialized?
                      console.warn('numFrames is null');
                      return;
                  }
                  const numFrames = frameParam_check[1];
                  incrementFrame(numFrames);
              });
          };
          this.stop = () => {
              playing = false;
          };
      }
      /**
       * The getFrameDelay method.
       * @param index - The index value.
       * @return - The return value.
       */
      getFrameDelay(index) {
          // Note: Frame delays are in centisecs (not millisecs which the timers will require.)
          return this.__unpackedData.frameDelays[index] * 10;
      }
      /**
       * Uses the specify url to load an Image element and adds it to the data library.
       * Sets the state of the current object.
       *
       * @param url - The url value.
       * @param format - The format value.
       * @return Returns a promise that resolves once the image is loaded.
       */
      load(url, format = 'RGB') {
          // this.__streamAtlasDesc = new Vec4();
          if (url in imageDataLibrary) {
              this.__resourcePromise = imageDataLibrary[url];
              return this.__resourcePromise;
          }
          else {
              this.__resourcePromise = new Promise((resolve, reject) => {
                  resourceLoader.incrementWorkload(1);
                  // if (fileDesc.assets && fileDesc.assets.atlas) {
                  //   const imageElem = new Image()
                  //   imageElem.crossOrigin = 'anonymous'
                  //   imageElem.src = fileDesc.assets.atlas.url
                  //   imageElem.addEventListener('load', () => {
                  //     resolve({
                  //       width: fileDesc.assets.atlas.width,
                  //       height: fileDesc.assets.atlas.height,
                  //       atlasSize: fileDesc.assets.atlas.atlasSize,
                  //       frameDelays: fileDesc.assets.atlas.frameDelays,
                  //       frameRange: [0, fileDesc.assets.atlas.frameDelays.length],
                  //       imageData: imageElem,
                  //     })
                  //     resourceLoader.incrementWorkDone(1)
                  //   })
                  //   return
                  // }
                  loadBinfile(url, (data) => {
                      console.warn('Unpacking Gif client side:' + url);
                      const start = performance.now();
                      // Decompressing using: https://github.com/matt-way/gifuct-js
                      //@ts-ignore
                      const gif = new GIF(data);
                      const frames = gif.decompressFrames(true);
                      // do something with the frame data
                      const sideLength = Math.sqrt(frames.length);
                      const atlasSize = [sideLength, sideLength];
                      if (MathFunctions.fract(sideLength) > 0.0) {
                          atlasSize[0] = Math.floor(atlasSize[0] + 1);
                          if (MathFunctions.fract(sideLength) > 0.5) {
                              atlasSize[1] = Math.floor(atlasSize[1] + 1);
                          }
                          else {
                              atlasSize[1] = Math.floor(atlasSize[1]);
                          }
                      }
                      const width = frames[0].dims.width;
                      const height = frames[0].dims.height;
                      // gif patch canvas
                      const tempCanvas = document.createElement('canvas');
                      const tempCtx = tempCanvas.getContext('2d');
                      // full gif canvas
                      const gifCanvas = document.createElement('canvas');
                      const gifCtx = gifCanvas.getContext('2d');
                      gifCanvas.width = width;
                      gifCanvas.height = height;
                      // The atlas for all the frames.
                      const atlasCanvas = document.createElement('canvas');
                      const atlasCtx = atlasCanvas.getContext('2d');
                      atlasCanvas.width = atlasSize[0] * width;
                      atlasCanvas.height = atlasSize[1] * height;
                      let frameImageData;
                      const frameDelays = [];
                      const renderFrame = (frame, index) => {
                          const dims = frame.dims;
                          // Note: the server side library returns centisecs (1/100 second) for
                          // frame delays, so normalize here so that client and servers
                          // valueus are in the
                          frameDelays.push(frame.delay / 10);
                          if (!frameImageData || dims.width != frameImageData.width || dims.height != frameImageData.height) {
                              tempCanvas.width = dims.width;
                              tempCanvas.height = dims.height;
                              frameImageData = tempCtx?.createImageData(dims.width, dims.height);
                          }
                          // set the patch data as an override
                          frameImageData.data.set(frame.patch);
                          tempCtx?.putImageData(frameImageData, 0, 0);
                          // Note: undocumented disposal method.
                          // See Ids here: https://github.com/theturtle32/Flash-Animated-GIF-Library/blob/master/AS3GifPlayer/src/com/worlize/gif/constants/DisposalType.as
                          // From what I can gather, 2 means we should clear the background first.
                          // this seems to work with Gifs featuring moving transparency.
                          // For fully opaque gifs, we should avoid this.
                          if (frame.disposalType == 2)
                              gifCtx?.clearRect(0, 0, gifCanvas.width, gifCanvas.height);
                          gifCtx?.drawImage(tempCanvas, dims.left, dims.top);
                          atlasCtx?.drawImage(gifCanvas, (index % atlasSize[0]) * width, Math.floor(index / atlasSize[0]) * height);
                      };
                      for (let i = 0; i < frames.length; i++) {
                          // console.log(frame);
                          renderFrame(frames[i], i);
                      }
                      resourceLoader.incrementWorkDone(1);
                      const imageData = atlasCtx?.getImageData(0, 0, atlasCanvas.width, atlasCanvas.height);
                      const ms = performance.now() - start;
                      console.log(`Decode GIF '${url}' time:` + ms);
                      resolve({
                          width: atlasCanvas.width,
                          height: atlasCanvas.height,
                          atlasSize,
                          frameRange: [0, frames.length],
                          frameDelays,
                          imageData,
                      });
                  }, (statusText) => {
                      const msg = 'Unable to Load URL:' + statusText + ':' + url;
                      console.warn(msg);
                      reject(msg);
                  });
              });
              imageDataLibrary[url] = this.__resourcePromise;
          }
          this.__resourcePromise.then((unpackedData) => {
              this.width = unpackedData.width;
              this.height = unpackedData.height;
              this.streamAtlasDescParam.value = new Vec4(unpackedData.atlasSize[0], unpackedData.atlasSize[1], 0, 0);
              this.streamAtlasIndexParam.setRange(unpackedData.frameRange);
              this.__unpackedData = unpackedData;
              this.__data = unpackedData.imageData;
              // ////////////////////////
              // Playback
              this.loaded = true;
              this.emit('loaded');
          });
          return this.__resourcePromise;
      }
  }
  Registry.register('GIFImage', GIFImage);

  /* eslint-disable new-cap */
  /**
   * An EnvMap can load High Dynamic Range environment map images, necessary for high quality PBR lighting.
   *
   *
   * **Parameters**
   * * **HeadLightMode(`BooleanParameter`):** Enables Headlight mode so that the environment lighting is aligned with the camera.
   * With Headlight mode on, the top of the env map is aligned with the direction of the camera, so a the view is generally well lit.
   *
   * @extends HDRImage
   */
  class EnvMap extends HDRImage {
      utf8decoder;
      shCoeffs;
      luminanceData;
      headlightModeParam = new BooleanParameter('HeadLightMode', false);
      /**
       * Create an env map.
       * @param name - The name value.
       * @param params - The params value.
       */
      constructor(name, params = {}) {
          super(name, params);
          this.addParameter(this.headlightModeParam);
          this.utf8decoder = new TextDecoder();
          this.shCoeffs = [];
      }
      /**
       * The __decodeData method.
       * @param entries - The entries value.
       * @return
       * @private
       */
      __decodeData(entries) {
          const samples = entries.samples;
          if (samples) {
              this.luminanceData = JSON.parse(this.utf8decoder.decode(samples));
              if (this.luminanceData.shCoeffs) {
                  for (let i = 0; i < 9; i++) {
                      this.shCoeffs[i] = new Color(this.luminanceData.shCoeffs[i * 3 + 0], this.luminanceData.shCoeffs[i * 3 + 1], this.luminanceData.shCoeffs[i * 3 + 2]);
                  }
              }
          }
          return super.__decodeData(entries);
      }
      /**
       * Calculate the luminance of the Environment in the direction.
       *
       * @param dir - The dir value.
       * @return - The return value.
       */
      dirToLuminance(dir) {
          // normal is assumed to have unit length
          const x = dir.x;
          const y = dir.y;
          const z = dir.z;
          // band 0
          const result = this.shCoeffs[0].scale(0.886227);
          // band 1
          result.addInPlace(this.shCoeffs[1].scale(2.0 * 0.511664 * y));
          result.addInPlace(this.shCoeffs[2].scale(2.0 * 0.511664 * z));
          result.addInPlace(this.shCoeffs[3].scale(2.0 * 0.511664 * x));
          // band 2
          result.addInPlace(this.shCoeffs[4].scale(2.0 * 0.429043 * x * y));
          result.addInPlace(this.shCoeffs[5].scale(2.0 * 0.429043 * y * z));
          result.addInPlace(this.shCoeffs[6].scale(0.743125 * z * z - 0.247708));
          result.addInPlace(this.shCoeffs[7].scale(2.0 * 0.429043 * x * z));
          result.addInPlace(this.shCoeffs[8].scale(0.429043 * (x * x - y * y)));
          return result.luminance();
      }
  }
  Registry.register('EnvMap', EnvMap);

  // eslint-disable-next-line require-jsdoc
  function getLanguage() {
      if (!globalThis.navigator)
          return 'en';
      // Check if a language is explicitly selected.
      const searchParams = new URLSearchParams(globalThis.location.search);
      if (searchParams.has('lang'))
          return searchParams.get('lang');
      const nav = globalThis.navigator;
      let i;
      let language;
      const clean = (language) => {
          if (language.startsWith('en'))
              return 'En';
          else if (language.startsWith('es'))
              return 'Es';
          else if (language.startsWith('fr'))
              return 'Fr';
          else if (language.startsWith('gb') || language.startsWith('de'))
              return 'Gb';
          return language;
      };
      // support for HTML 5.1 "navigator.languages"
      if (Array.isArray(nav.languages)) {
          for (i = 0; i < nav.languages.length; i++) {
              language = nav.languages[i];
              if (language && language.length) {
                  return clean(language);
              }
          }
      }
      // support for other well known properties in browsers
      // const browserLanguagePropertyKeys = ['language', 'browserLanguage', 'systemLanguage', 'userLanguage']
      // for (i = 0; i < browserLanguagePropertyKeys.length; i++) {
      //   language = nav[browserLanguagePropertyKeys[i]]
      //   if (language && language.length) {
      //     return clean(language)
      //   }
      // }
      return null;
  }
  /** Class representing a label manager.
   * @private
   */
  class LabelManager extends EventEmitter {
      __language;
      __foundLabelLibraries;
      __labelLibraries;
      /**
       * Create a label manager.
       */
      constructor() {
          super();
          this.__labelLibraries = {};
          this.__language = getLanguage();
          this.__foundLabelLibraries = {};
      }
      /**
       * Load a label library into the manager.
       * @param name - The name of the library.
       * @param url- The json data of of the library.
       */
      loadLibrary(name, url) {
          const stem = name.substring(0, name.lastIndexOf('.'));
          this.__foundLabelLibraries[stem] = url;
          if (name.endsWith('.labels')) {
              loadTextfile(url, (text) => {
                  this.__labelLibraries[stem] = JSON.parse(text);
                  this.emit('labelLibraryLoaded', { library: stem });
              });
          }
          else if (name.endsWith('.xlsx')) {
              // @ts-ignore
              const XLSX = globalThis.XLSX;
              // Note: example taken from here..
              // https://stackoverflow.com/questions/8238407/how-to-parse-excel-file-in-javascript-html5
              // and here:
              // https://github.com/SheetJS/js-xlsx/tree/master/demos/xhr
              loadBinfile(url, (data) => {
                  const unit8array = new Uint8Array(data);
                  // @ts-ignore
                  const workbook = XLSX.read(unit8array, {
                      type: 'array',
                  });
                  const json = {};
                  workbook.SheetNames.forEach(function (sheetName) {
                      // Here is your object
                      // @ts-ignore
                      const rows = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {});
                      // @ts-ignore
                      rows.forEach(function (row) {
                          const identifier = row.Identifier;
                          delete row.Identifier;
                          json[identifier] = row;
                      });
                  });
                  this.__labelLibraries[stem] = json;
                  this.emit('labelLibraryLoaded', { library: stem });
              });
          }
      }
      /**
       * Checks if the library is found.
       * @param name - The name of the library.
       * @return - Returns true if the library is found.
       */
      isLibraryFound(name) {
          return name in this.__foundLabelLibraries;
      }
      /**
       * Checks if the library is loaded.
       * @param name - The name of the library.
       * @return - Returns true if the library is loaded.
       */
      isLibraryLoaded(name) {
          return name in this.__labelLibraries;
      }
      /**
       * The getLabelText method.
       * @param libraryName - The name of the library.
       * @param labelName - The name of the label.
       * @return - The return value.
       */
      getLabelText(libraryName, labelName) {
          const library = this.__labelLibraries[libraryName];
          if (!library) {
              throw new Error("LabelLibrary: '" +
                  libraryName +
                  "' not found in LabelManager. Found: [" +
                  Object.keys(this.__labelLibraries) +
                  ']');
          }
          const label = library[labelName];
          if (!label) {
              throw new Error("Label: '" +
                  labelName +
                  "' not found in LabelLibrary: '" +
                  libraryName +
                  "'. Found: [" +
                  Object.keys(library) +
                  ']');
          }
          const labelText = label[this.__language];
          if (!labelText) {
              if (label['En'])
                  return label['En'];
              throw new Error("labelText: '" + this.__language + "' not found in Label. Found: [" + Object.keys(label) + ']');
          }
          return labelText;
      }
      /**
       * The setLabelText method.
       * @param libraryName - The name of the library.
       * @param labelName - The name of the label.
       * @param labelText - The text of the label.
       */
      setLabelText(libraryName, labelName, labelText) {
          let library = this.__labelLibraries[libraryName];
          if (!library) {
              library = {};
              this.__labelLibraries[libraryName] = library;
          }
          let label = library[labelName];
          if (!label) {
              label = {};
              library[labelName] = label;
          }
          label[this.__language] = labelText;
          // TODO: Push to server.
      }
      setLanguage(ln) {
          this.__language = ln;
      }
  }
  const labelManager = new LabelManager();

  /* eslint-disable guard-for-in */
  // http://stackoverflow.com/questions/1255512/how-to-draw-a-rounded-rectangle-on-html-canvas
  /**
   * Draws a rounded rectangle using the current state of the canvas.
   * If you omit the last three params, it will draw a rectangle
   * outline with a 5 pixel border radius
   * @param ctx
   * @param x - The top left x coordinate
   * @param y - The top left y coordinate
   * @param width - The width of the rectangle
   * @param height - The height of the rectangle
   *
   * @param radius - The corner radius; It can also be an object to specify different radii for corners
   * @param radius.tl - Top left
   * @param radius.tr - Top right
   * @param radius.br - Bottom right
   * @param radius.bl - Bottom left
   *
   * @param fill - Whether to fill the rectangle.
   * @param stroke - Whether to stroke the rectangle.
   * @param strokeWidth - The strokeWidth param.
   * @private
   */
  function roundRect(ctx, x, y, width, height, radius, fill = false, stroke = true, strokeWidth) {
      if (typeof stroke == 'undefined') {
          stroke = true;
      }
      if (typeof radius === 'undefined') {
          radius = 5;
      }
      if (typeof radius === 'number') {
          radius = {
              tl: radius,
              tr: radius,
              br: radius,
              bl: radius,
          };
      }
      else {
          const defaultRadius = {
              tl: 0,
              tr: 0,
              br: 0,
              bl: 0,
          };
          for (const side in defaultRadius) {
              radius[side] = radius[side] || defaultRadius[side];
          }
      }
      ctx.beginPath();
      ctx.moveTo(x + radius.tl, y);
      ctx.lineTo(x + width - radius.tr, y);
      ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);
      ctx.lineTo(x + width, y + height - radius.br);
      ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);
      ctx.lineTo(x + radius.bl, y + height);
      ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);
      ctx.lineTo(x, y + radius.tl);
      ctx.quadraticCurveTo(x, y, x + radius.tl, y);
      ctx.closePath();
      if (fill) {
          ctx.fill();
      }
      if (stroke) {
          ctx.lineWidth = strokeWidth;
          ctx.stroke();
      }
  }
  // TODO: rewrite
  /**
   * Represents a 2D label item the scene.
   * Since displaying text in the scene is not an easy task,
   * we've abstracted the complicated logic behind this class, transforming any text into a 2D image(`DataImage`).
   *
   * **Library List**
   * * LabelPack
   *
   * **Parameters**
   * * **Library(`StringParameter`):** Library you wan to use for your label, see **Library List** above.
   * * **Text(`StringParameter`):**
   * * **FontColor(`ColorParameter`):**
   * * **Margin(`NumberParameter`):**
   * * **BorderWidth(`NumberParameter`):**
   * * **BorderRadius(`NumberParameter`):**
   * * **Outline(`BooleanParameter`):**
   * * **OutlineColor(`BooleanParameter`):**
   * * **Background(`BooleanParameter`):**
   * * **ColorParameter(`BackgroundColor`):**
   * * **FillBackground(`BooleanParameter`):**
   * * **StrokeBackgroundOutline(`BooleanParameter`):**
   * * **FontSize(`NumberParameter`):** Represents FontSize of the label
   * * **Font(`StringParameter`):**
   *
   * **Events**
   * * **loaded:** Triggered when label's data is loaded.
   * * **updated:** Triggered when label's data changes.
   * * **labelRendered:** Triggered when the text image is rendered. Contains `width`, `height` and data of the image.
   *
   * @extends DataImage
   */
  class Label extends DataImage {
      needsRender;
      canvasElem;
      requestedReRender = false;
      /**
       * Creates a label instance. Creating a canvas element that hosts the specified text.
       *
       * @param name - The name value.
       * @param library - The library value.
       */
      marginParam;
      borderRadiusParam;
      /**
       * @member libraryParam - Library you wan to use for your label, see **Library List** above.
       */
      libraryParam = new StringParameter('Library');
      /**
       * @member textParam - text to display on the label
       */
      textParam = new StringParameter('Text', '');
      /**
       * @member fontColorParam - TODO
       */
      fontColorParam = new ColorParameter('FontColor', new Color(0, 0, 0));
      /**
       * @member - TODO
       */
      fontSizeParam = new NumberParameter('FontSize', 22);
      /**
       * @member fontParam - TODO
       */
      fontParam = new StringParameter('Font', 'Helvetica');
      /**
       * @member borderWidthParam - Border around the label
       */
      borderWidthParam = new NumberParameter('BorderWidth', 2);
      /**
       * @member outlineParam - TODO
       */
      outlineParam = new BooleanParameter('Outline', false);
      /**
       * @member outlineColorParam - TODO
       */
      outlineColorParam = new ColorParameter('OutlineColor', new Color(0, 0, 0));
      /**
       * @member backgroundParam - TODO
       */
      backgroundParam = new BooleanParameter('Background', true);
      /**
       * @member backgroundColorParam - TODO
       */
      backgroundColorParam = new ColorParameter('BackgroundColor', new Color('#FBC02D'));
      /**
       * @member fillBackgroundParam - TODO
       */
      fillBackgroundParam = new BooleanParameter('FillBackground', true);
      /**
       * @member strokeBackgroundOutlineParam - TODO
       */
      strokeBackgroundOutlineParam = new BooleanParameter('StrokeBackgroundOutline', true);
      constructor(name, library) {
          super(name);
          this.canvasElem = document.createElement('canvas');
          const fontSize = 22;
          this.marginParam = new NumberParameter('Margin', fontSize * 0.5);
          this.borderRadiusParam = new NumberParameter('BorderRadius', fontSize * 0.5);
          this.addParameter(this.marginParam);
          this.addParameter(this.borderRadiusParam);
          this.addParameter(this.libraryParam);
          this.addParameter(this.textParam);
          this.addParameter(this.fontColorParam);
          this.addParameter(this.fontSizeParam);
          this.addParameter(this.fontParam);
          this.addParameter(this.borderWidthParam);
          this.addParameter(this.outlineParam);
          this.addParameter(this.outlineColorParam);
          this.addParameter(this.backgroundParam);
          this.addParameter(this.backgroundColorParam);
          this.addParameter(this.fillBackgroundParam);
          this.addParameter(this.strokeBackgroundOutlineParam);
          const reload = () => {
              this.loadLabelData();
          };
          this.on('nameChanged', reload);
          if (library)
              this.libraryParam.value = library;
          this.requestedReRender = false;
          this.needsRender = false;
          this.loadLabelData();
      }
      /**
       * This method can be overridden in derived classes
       * to perform general updates (see GLPass or BaseItem).
       *
       * @param event - The event object.
       * @private
       */
      __parameterValueChanged(event) {
          super.parameterValueChanged(event);
          if (!this.requestedReRender) {
              this.requestedReRender = true;
              this.loadLabelData();
          }
      }
      /**
       * Method in charge of basically do everything, set text, load/update it, get the library, load the font, etc.
       */
      loadLabelData() {
          const onLoaded = () => {
              this.requestedReRender = false;
              this.needsRender = true;
              if (!this.loaded) {
                  this.loaded = true;
                  this.emit('loaded');
              }
              else {
                  this.emit('updated');
              }
          };
          const loadText = () => {
              return new Promise((resolve) => {
                  const library = this.libraryParam.value;
                  if (library == '') {
                      resolve();
                      return;
                  }
                  if (!labelManager.isLibraryFound(library)) {
                      console.warn('Label Library not found:', library);
                      resolve();
                      return;
                  }
                  const getLibraryText = () => {
                      try {
                          const name = this.getName();
                          // console.log("Text Loaded:" + name);
                          const text = labelManager.getLabelText(library, name);
                          this.textParam.value = text;
                      }
                      catch (e) {
                          // Note: if the text is not found in the labels pack
                          // an exception is thrown, and we catch it here.
                          console.warn(e);
                      }
                      resolve();
                  };
                  if (!labelManager.isLibraryLoaded(library)) {
                      labelManager.on('labelLibraryLoaded', (event) => {
                          const loadedLibrary = event.library;
                          if (loadedLibrary == library)
                              getLibraryText();
                      });
                  }
                  else {
                      getLibraryText();
                  }
              });
          };
          const loadFont = () => {
              return new Promise((resolve) => {
                  if (document.fonts != undefined) {
                      const font = this.fontParam.value;
                      const fontSize = this.fontSizeParam.value;
                      document.fonts.load(fontSize + 'px "' + font + '"').then(() => {
                          // console.log("Font Loaded:" + font);
                          resolve();
                      });
                  }
                  else {
                      resolve();
                  }
              });
          };
          Promise.all([loadText(), loadFont()]).then(onLoaded);
      }
      /**
       * Renders the label text to a canvas element ready to display.
       * Here is where all parameters are applied to the canvas containing the text,
       * then the image data is extracted from the canvas context.
       */
      renderLabelToImage() {
          // console.log("renderLabelToImage")
          const ctx2d = this.canvasElem.getContext('2d', {
              alpha: true,
          });
          let text = this.textParam.value;
          if (text == '')
              text = this.getName();
          const font = this.fontParam.value;
          const fontColor = this.fontColorParam.value;
          const textAlign = 'left'; // this.textAlignParam.value
          const fontSize = this.fontSizeParam.value;
          const margin = this.marginParam.value;
          const borderWidth = this.borderWidthParam.value;
          const borderRadius = this.borderRadiusParam.value;
          const outline = this.outlineParam.value;
          const outlineColor = this.outlineColorParam.value;
          const background = this.backgroundParam.value;
          const backgroundColor = this.backgroundColorParam.value;
          const fillBackground = this.fillBackgroundParam.value;
          const strokeBackgroundOutline = this.strokeBackgroundOutlineParam.value;
          // let ratio = devicePixelRatio / backingStoreRatio;
          const marginAndBorder = margin + borderWidth;
          const lines = text.split('\n');
          ctx2d.font = fontSize + 'px "' + font + '"';
          // console.log("renderLabelToImage:" + ctx2d.font);
          let width = 0;
          lines.forEach((line) => {
              width = Math.max(ctx2d.measureText(line).width, width);
          });
          const fontHeight = fontSize; // parseInt(fontSize)
          this.width = Math.ceil(width + marginAndBorder * 2);
          this.height = Math.ceil(fontHeight * lines.length + marginAndBorder * 2);
          ctx2d.canvas.width = this.width;
          ctx2d.canvas.height = this.height;
          this.canvasElem.width = this.width;
          this.canvasElem.height = this.height;
          // ctx2d.clearRect(0, 0, this.width, this.height);
          ctx2d.fillStyle = 'rgba(0, 0, 0, 0.0)';
          ctx2d.fillRect(0, 0, this.width, this.height);
          if (background) {
              ctx2d.fillStyle = backgroundColor.toHex();
              ctx2d.strokeStyle = outlineColor.toHex();
              roundRect(ctx2d, borderWidth, borderWidth, this.width - borderWidth * 2, this.height - borderWidth * 2, borderRadius, fillBackground, strokeBackgroundOutline, borderWidth);
          }
          ctx2d.font = fontSize + 'px "' + font + '"';
          ctx2d.textAlign = textAlign;
          ctx2d.fillStyle = fontColor.toHex();
          ctx2d.textBaseline = 'hanging';
          lines.forEach((line, index) => {
              ctx2d.fillText(line, marginAndBorder, marginAndBorder + index * fontHeight);
          });
          if (outline) {
              ctx2d.strokeStyle = outlineColor.toHex();
              ctx2d.lineWidth = 1.5;
              ctx2d.strokeText(text, marginAndBorder, marginAndBorder);
          }
          this.__data = ctx2d.getImageData(0, 0, this.width, this.height);
          this.needsRender = false;
          this.emit('labelRendered', {
              width: this.width,
              height: this.height,
              data: this.__data,
          });
      }
      /**
       *  Returns all parameters and class state values(Including data).
       *
       * @return - The return value.
       */
      getParams() {
          if (this.needsRender)
              this.renderLabelToImage();
          return super.getParams();
      }
  }
  Registry.register('Label', Label);

  /** Class representing a 2D video stream image.
   * @private
   * @extends BaseImage
   */
  class VideoStreamImage2D extends BaseImage {
      __data;
      __intervalId;
      /**
       * Create a 2D video stream image.
       */
      constructor() {
          super('');
      }
      /**
       * The connectWebcam method.
       * @param width - The width of the video.
       * @param height - The height of the video.
       * @param rearCamera - Boolean determining if it is a rear camera or not.
       */
      connectWebcam(width, height, rearCamera = false) {
          const video = {
              width,
              height,
              frameRate: {
                  ideal: 60,
                  max: 60,
              },
          };
          if (rearCamera) {
              video.facingMode = {
                  exact: 'environment',
              };
          }
          else {
              video.facingMode = {
                  facingMode: 'user',
              };
          }
          const domElement = document.createElement('video');
          // TODO - confirm its necessary to add to DOM
          domElement.style.display = 'none';
          domElement.preload = 'auto';
          domElement.crossOrigin = 'anonymous';
          // domElement.crossorigin = true;
          document.body.appendChild(domElement);
          // List cameras and microphones.
          // navigator.mediaDevices.enumerateDevices()
          //     .then((devices)=>{
          //         // devices.forEach((device)=>{
          //         //     if (device.kind == "videoinput") {
          //         //         console.log(device.kind + ": " + device.label + " id = " + device.deviceId);
          //         //         videoinputs.push(device);
          //         //     }
          //         // });
          //     })
          //     .catch(function(err) {
          //         console.log(err.name + ": " + err.message);
          //     });
          navigator.mediaDevices
              .getUserMedia({
              audio: false,
              video,
          })
              .then((mediaStream) => {
              domElement.srcObject = mediaStream;
              domElement.onloadedmetadata = (e) => {
                  domElement.play();
                  this.width = domElement.videoWidth;
                  this.height = domElement.videoHeight;
                  console.log('Webcam:[' + this.width + ', ' + this.height + ']');
                  this.__data = domElement;
                  this.loaded = true;
                  this.emit('loaded');
                  let prevFrame = 0;
                  const frameRate = 60;
                  const timerCallback = () => {
                      if (domElement.paused || domElement.ended) {
                          return;
                      }
                      // Check to see if the video has progressed to the next frame.
                      // If so, then we emit and update, which will cause a redraw.
                      const currentFrame = Math.floor(domElement.currentTime * frameRate);
                      if (prevFrame != currentFrame) {
                          this.emit('updated');
                          prevFrame = currentFrame;
                      }
                      setTimeout(timerCallback, 20); // Sample at 50fps.
                  };
                  timerCallback();
              };
          })
              .catch(function (err) {
              /* handle the error */
          });
      }
      /**
       * The setVideoStream method.
       * @param video - The video value.
       */
      setVideoStream(video) {
          this.loaded = false;
          this.width = video.videoWidth;
          this.height = video.videoHeight;
          this.start();
          this.__data = video;
          this.loaded = true;
          this.emit('loaded');
      }
      // getAudioSource() {
      //     return this.__data;
      // }
      /**
       * The stop method.
       */
      stop() {
          clearInterval(this.__intervalId);
      }
      /**
       * The start method.
       */
      start() {
          // @ts-ignore
          this.__intervalId = setInterval(() => {
              this.emit('updated');
          }, 20); // Sample at 50fps.
      }
      /**
       * The isLoaded method.
       * @return - The return value.
       */
      isLoaded() {
          return this.loaded;
      }
      /**
       * The getParams method.
       * @return - The return value.
       */
      getParams() {
          return {
              type: this.type,
              format: this.format,
              width: this.width,
              height: this.height,
              data: this.__data,
              flipY: true,
          };
      }
  }
  Registry.register('VideoStreamImage2D', VideoStreamImage2D);

  class FatLinesMaterial extends Material {
      baseColorParam = new MaterialColorParam('BaseColor', new Color(1.0, 1, 0.5));
      opacityParam = new NumberParameter('Opacity', 1.0);
      lineThicknessParam = new NumberParameter('LineThickness', 0.01);
      overlayParam = new NumberParameter('Overlay', 0.0);
      constructor(name) {
          super(name);
          this.__shaderName = 'FatLinesShader';
          this.addParameter(this.baseColorParam);
          this.addParameter(this.opacityParam);
          this.addParameter(this.overlayParam);
          this.addParameter(this.lineThicknessParam);
      }
      isTextured() {
          // Note: this is to force the generation of the MaterialShaderBinding
          // see GLShaderMaterials.addGLGeomItem
          return true;
      }
  }
  Registry.register('FatLinesMaterial', FatLinesMaterial);

  class FatPointsMaterial extends Material {
      baseColorParam = new MaterialColorParam('BaseColor', new Color(1, 1, 1));
      pointSizeParam = new NumberParameter('PointSize', 1);
      borderWidthParam = new NumberParameter('BorderWidth', 0.2);
      overlayParam = new NumberParameter('Overlay', 0.0);
      constructor(name) {
          super(name);
          this.__shaderName = 'FatPointsShader';
          this.addParameter(this.baseColorParam);
          this.addParameter(this.pointSizeParam);
          this.addParameter(this.borderWidthParam);
          this.addParameter(this.overlayParam);
      }
      /**
       * The clone method constructs a new material, copies its values
       * from this item and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned material.
       */
      clone(context) {
          const cloned = new FatPointsMaterial();
          cloned.copyFrom(this, context);
          return cloned;
      }
  }
  Registry.register('FatPointsMaterial', FatPointsMaterial);

  class FlatSurfaceMaterial extends Material {
      baseColorParam = new MaterialColorParam('BaseColor', new Color(1.0, 1, 0.5));
      overlayParam = new MaterialFloatParam('Overlay', 0.0);
      constructor(name) {
          super(name);
          this.__shaderName = 'FlatSurfaceShader';
          this.addParameter(this.baseColorParam);
          this.addParameter(this.overlayParam);
      }
      /**
       * The clone method constructs a new material, copies its values
       * from this item and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned material.
       */
      clone(context) {
          const cloned = new FlatSurfaceMaterial();
          cloned.copyFrom(this, context);
          return cloned;
      }
  }
  Registry.register('FlatSurfaceMaterial', FlatSurfaceMaterial);

  class LinesMaterial extends Material {
      baseColorParam = new MaterialColorParam('BaseColor', new Color(1.0, 1, 0.5));
      opacityParam = new MaterialFloatParam('Opacity', 0.7, [0, 1]);
      overlayParam = new MaterialFloatParam('Overlay', 0.000001); // Provide a slight overlay so lines draw over meshes
      constructor(name) {
          super(name);
          this.__shaderName = 'LinesShader';
          this.addParameter(this.baseColorParam);
          this.addParameter(this.opacityParam);
          this.addParameter(this.overlayParam);
      }
      /**
       * The clone method constructs a new material, copies its values
       * from this item and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned material.
       */
      clone(context) {
          const cloned = new LinesMaterial();
          cloned.copyFrom(this, context);
          return cloned;
      }
  }
  Registry.register('LinesMaterial', LinesMaterial);

  class PointsMaterial extends Material {
      baseColorParam = new MaterialColorParam('BaseColor', new Color(1.0, 1, 0.5));
      pointSizeParam = new MaterialFloatParam('PointSize', 2);
      overlayParam = new MaterialFloatParam('Overlay', 0.00002); // Provide a slight overlay so lines draw over meshes
      constructor(name) {
          super(name);
          this.__shaderName = 'PointsShader';
          this.addParameter(this.baseColorParam);
          this.addParameter(this.pointSizeParam);
          this.addParameter(this.overlayParam);
      }
      /**
       * The clone method constructs a new material, copies its values
       * from this item and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned material.
       */
      clone(context) {
          const cloned = new PointsMaterial();
          cloned.copyFrom(this, context);
          return cloned;
      }
  }
  Registry.register('PointsMaterial', PointsMaterial);

  class ScreenSpaceMaterial extends Material {
      baseColorParam = new MaterialColorParam('BaseColor', new Color(1.0, 1, 0.5));
      constructor(name) {
          super(name);
          this.__shaderName = 'ScreenSpaceShader';
          this.addParameter(this.baseColorParam);
      }
      /**
       * The clone method constructs a new material, copies its values
       * from this item and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned material.
       */
      clone(context) {
          const cloned = new ScreenSpaceMaterial();
          cloned.copyFrom(this, context);
          return cloned;
      }
  }
  Registry.register('ScreenSpaceMaterial', ScreenSpaceMaterial);

  class SimpleSurfaceMaterial extends Material {
      baseColorParam = new MaterialColorParam('BaseColor', new Color(1.0, 1, 0.5));
      opacityParam = new MaterialFloatParam('Opacity', 1, [0, 1]);
      emissiveStrengthParam = new MaterialFloatParam('EmissiveStrength', 0, [0, 1]);
      constructor(name) {
          super(name);
          this.__shaderName = 'SimpleSurfaceShader';
          this.addParameter(this.baseColorParam);
          this.addParameter(this.opacityParam);
          this.addParameter(this.emissiveStrengthParam);
      }
      /**
       * The clone method constructs a new material, copies its values
       * from this item and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned material.
       */
      clone(context) {
          const cloned = new SimpleSurfaceMaterial();
          cloned.copyFrom(this, context);
          return cloned;
      }
  }
  Registry.register('SimpleSurfaceMaterial', SimpleSurfaceMaterial);

  class StandardSurfaceMaterial extends Material {
      baseColorParam = new MaterialColorParam('BaseColor', new Color(1.0, 1, 0.5));
      normalParam = new MaterialColorParam('Normal', new Color(1.0, 1, 0.5));
      ambientOcclusion = new MaterialFloatParam('AmbientOcclusion', 1, [0, 1]);
      metallicParam = new MaterialFloatParam('Metallic', 0.05, [0, 1]);
      roughnessParam = new MaterialFloatParam('Roughness', 0.5, [0, 1]);
      reflectanceParam = new MaterialFloatParam('Reflectance', 0.5, [0, 1]);
      emissiveStrengthParam = new MaterialFloatParam('EmissiveStrength', 0, [0, 1]);
      opacityParam = new MaterialFloatParam('Opacity', 1, [0, 1]);
      edgeWeightParam = new MaterialFloatParam('EdgeWeight', 0.7, [0, 1]);
      overlayParam = new MaterialFloatParam('Overlay', 0, [0, 1]);
      edgeColorParam = new MaterialColorParam('EdgeColor', new Color(0.1, 0.1, 0.1, 0.8));
      pointColorParam = new MaterialColorParam('PointColor', new Color(0.1, 0.1, 0.1));
      pointSizeParam = new MaterialFloatParam('PointSize', 4, [0, Number.MAX_VALUE]);
      constructor(name) {
          super(name);
          this.__shaderName = 'StandardSurfaceShader';
          this.addParameter(this.baseColorParam);
          this.addParameter(this.normalParam);
          this.addParameter(this.ambientOcclusion);
          this.addParameter(this.metallicParam);
          this.addParameter(this.roughnessParam);
          this.addParameter(this.reflectanceParam);
          this.addParameter(this.emissiveStrengthParam);
          this.addParameter(this.opacityParam);
          this.addParameter(this.edgeWeightParam);
          this.addParameter(this.overlayParam);
          this.addParameter(this.edgeColorParam);
          this.addParameter(this.pointColorParam);
          this.addParameter(this.pointSizeParam);
      }
      /**
       * The clone method constructs a new material, copies its values
       * from this item and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned material.
       */
      clone(context) {
          const cloned = new StandardSurfaceMaterial();
          cloned.copyFrom(this, context);
          return cloned;
      }
  }
  Registry.register('StandardSurfaceMaterial', StandardSurfaceMaterial);

  class VertexColorMaterial extends Material {
      constructor(name) {
          super(name);
          this.__shaderName = 'VertexColorShader';
      }
      /**
       * The clone method constructs a new material, copies its values
       * from this item and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned material.
       */
      clone(context) {
          const cloned = new VertexColorMaterial();
          cloned.copyFrom(this, context);
          return cloned;
      }
      /**
       * The supportsInstancing method.
       * @return - return false for shaders that cannot be rendered in instanced mode.
       */
      static supportsInstancing() {
          return false;
      }
  }
  Registry.register('VertexColorMaterial', VertexColorMaterial);

  class MaskMaterial extends SimpleSurfaceMaterial {
      constructor(name) {
          super(name);
          this.baseColorParam.value = new Color(1.0, 0.0, 0.0, 0.2);
      }
      clone(context) {
          const cloned = new MaskMaterial();
          cloned.copyFrom(this, context);
          return cloned;
      }
  }
  Registry.register('MaskMaterial', MaskMaterial);

  class EnvProjectionMaterial extends Material {
      projectionCenter = new Vec3Parameter('projectionCenter', new Vec3(0.0, 0, 1.7));
      constructor(name) {
          super(name);
          this.__shaderName = 'EnvProjectionShader';
          this.addParameter(this.projectionCenter);
      }
      clone(context) {
          const cloned = new EnvProjectionMaterial();
          cloned.copyFrom(this, context);
          return cloned;
      }
      isTextured() {
          // Note: this is to force the generation of the MaterialShaderBinding
          // see GLShaderMaterials.addGLGeomItem
          return true;
      }
  }
  Registry.register('EnvProjectionMaterial', EnvProjectionMaterial);

  /**
   * Provides a context for loading assets. This context can provide the units of the loading scene.
   * E.g. you can specify the scene units as 'millimeters' in the context object.
   * To load external references, you can also provide a dictionary that maps filenames to URLs that are used
   * to resolve the URL of an external reference that a given asset is expecting to find.
   */
  class CloneContext extends EventEmitter {
      assetItem;
      /**
       * Create a AssetLoadContext
       * @param context The source context to base this context on.
       */
      constructor() {
          super();
          this.assetItem = null;
      }
  }

  /* eslint-disable no-unused-vars */
  /**
   * TreeItem type of class designed for making duplications of parts of the tree.
   *
   * @extends {TreeItem}
   */
  class InstanceItem extends TreeItem {
      srcTreePath = [];
      srcTree = null;
      /**
       * Create an instance item.
       * @param name - The name of the instance item.
       */
      constructor(name) {
          super(name);
      }
      /**
       * Clones passed in `TreeItem` all the way down and adds it as a child of current item.
       *
       * @param treeItem - The treeItem value.
       */
      setSrcTree(treeItem) {
          this.srcTree = treeItem;
          const clonedContext = new CloneContext();
          const clonedTree = this.srcTree.clone(clonedContext);
          clonedTree.localXfoParam.value = new Xfo();
          this.addChild(clonedTree, false, false);
      }
      /**
       * Returns the last `TreeItem` cloned.
       *
       * @return - The return value.
       */
      getSrcTree() {
          return this.srcTree;
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Sets state of current Item(Including cloned item) using a binary reader object.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          super.readBinary(reader, context);
          this.srcTreePath = reader.loadStrArray();
          if (this.srcTreePath.length > 0) {
              context.resolvePath(this.srcTreePath, (treeItem) => {
                  this.setSrcTree(treeItem);
              }, (error) => {
                  console.warn(`Error loading InstanceItem: ${this.getPath()}, unable to resolve: ${this.srcTreePath}. ` + error.message);
              });
          }
      }
      // ////////////////////////////////////////
      // Clone and Destroy
      /**
       * The clone method constructs a new instance item, copies its values
       * from this item and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned geom item.
       */
      clone(context) {
          const cloned = new InstanceItem();
          cloned.copyFrom(this, context);
          return cloned;
      }
      /**
       * Copies current TreeItem with all its children.
       *
       * @param src - The tree item to copy from.
       * @param context - The context value.
       */
      copyFrom(src, context) {
          super.copyFrom(src, context);
          this.srcTreePath = src.srcTreePath;
          if (this.srcTreePath.length > 0 && this.getNumChildren() == 0) {
              src.once('childAdded', (event) => {
                  const childAddedEvent = event;
                  const childItem = childAddedEvent.childItem;
                  this.setSrcTree(childItem);
              });
          }
      }
  }
  Registry.register('InstanceItem', InstanceItem);

  /**
   * Base class that represents geometry items with layering, overlaying and cut away features.
   *
   * **Events**
   * * **cutAwayChanged:** Triggered when the cutaway variables change(if enabled or not, the vector and the distance).
   * @extends TreeItem
   */
  class BaseGeomItem extends TreeItem {
      overlay;
      cutAway;
      cutAwayVector;
      cutAwayDist;
      layers;
      /**
       * @member materialParam - The Material to use when rendering this GeomItem
       */
      materialParam = new MaterialParameter('Material');
      /**
       * Create a base geometry item.
       * @param name - The name of the base geom item.
       */
      constructor(name) {
          super(name);
          this.addParameter(this.materialParam);
          this.overlay = false;
          this.cutAway = false;
          this.cutAwayVector = new Vec3(0, 0, 0);
          this.cutAwayDist = 0;
          this.layers = [];
      }
      /**
       * Sets overlay value.
       *
       * @todo Need to find the layer and add this item to it.
       * @param val - `true` to enable it.
       */
      setOverlay(val) {
          // TODO: need to find the layer and add this item to it.
          this.overlay = val;
      }
      /**
       * Returns `true` if overlay is enabled for current item.
       *
       * @return - The return value.
       */
      isOverlay() {
          return this.overlay;
      }
      /**
       * Adds a layer to current item.
       *
       * @todo Need to find the layer and add this item to it.
       * @param name - The name of the layer.
       */
      addLayer(name) {
          // TODO: need to find the layer and add this item to it.
          this.layers.push(name);
      }
      /**
       * Returns all layers in current item.
       *
       * @return - The return value.
       */
      getLayers() {
          return this.layers;
      }
      // ////////////////////////////////////////
      // Cutaways
      /**
       * Checks if cutaway is enabled.
       *
       * @return - Returns `true` if enabled.
       */
      isCutawayEnabled() {
          return this.cutAway;
      }
      /**
       * Sets cutaway state.
       *
       * @param state - `true` to enable it, otherwise `false`.
       */
      setCutawayEnabled(state) {
          this.cutAway = state;
          this.emit('cutAwayChanged');
      }
      /**
       * Returns cutaway vector value.
       *
       * @return - `Vec3` when it is set, `false` on default.
       */
      getCutVector() {
          return this.cutAwayVector;
      }
      /**
       * Sets cutaway vector value.
       *
       * @param cutAwayVector - The cutAwayVector value.
       */
      setCutVector(cutAwayVector) {
          this.cutAwayVector = cutAwayVector;
          this.emit('cutAwayChanged');
      }
      /**
       * Getter for the cutaway distance.
       *
       * @return - The return value.
       */
      getCutDist() {
          return this.cutAwayDist;
      }
      /**
       * Sets cutaway distance value.
       *
       * @param cutAwayDist - The cutAwayDist value.
       */
      setCutDist(cutAwayDist) {
          this.cutAwayDist = cutAwayDist;
          this.emit('cutAwayChanged');
      }
      // ///////////////////////////
      // Persistence
      /**
       * Sets state of current Item(Including layers & material) using a binary reader object.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          super.readBinary(reader, context);
          if (context.versions['zea-engine'].compare([0, 0, 4]) >= 0) {
              const materialName = reader.loadStr();
              // const materialName = 'Material' + this.__bodyDescId;
              const materialLibrary = context.assetItem.getMaterialLibrary();
              let material = materialLibrary.getMaterial(materialName);
              if (!material) {
                  // console.warn("BaseGeomItem :'" + this.name + "' Material not found:" + materialName);
                  // material = materialLibrary.getMaterial('DefaultMaterial');
                  material = new Material(materialName, 'SimpleSurfaceShader');
                  material.getParameter('BaseColor').loadValue(Color.random(0.25));
                  context.assetItem.getMaterialLibrary().addMaterial(material);
              }
              this.materialParam.loadValue(material);
              this.layers = reader.loadStrArray();
              if (this.layers.length > 0) {
                  // console.log("Layers:", this.layers)
                  for (const layer of this.layers)
                      context.addGeomToLayer(this, layer);
              }
          }
      }
  }

  let calculatePreciseBoundingBoxes = false;
  /** The operator the calculates the global Xfo of a TreeItem based on its parents GlobalXfo and its own LocalXfo
   * @extends Operator
   * @private
   */
  class CalcGeomMatOperator extends Operator {
      globalXfo = new XfoOperatorInput('GlobalXfo');
      geomOffsetXfo = new XfoOperatorInput('GeomOffsetXfo');
      geomMat = new Mat4OperatorOutput('GeomMat');
      /**
       *Creates an instance of CalcGeomMatOperator.
       *
       * @param globalXfoParam
       * @param geomOffsetXfoParam
       * @param geomMatParam
       * @memberof CalcGeomMatOperator
       */
      constructor(globalXfoParam, geomOffsetXfoParam, geomMatParam) {
          super('CalcGeomMatOperator');
          this.globalXfo.setParam(globalXfoParam);
          this.geomOffsetXfo.setParam(geomOffsetXfoParam);
          this.geomMat.setParam(geomMatParam);
          this.addInput(this.globalXfo);
          this.addInput(this.geomOffsetXfo);
          this.addOutput(this.geomMat);
      }
      /**
       * The evaluate method.
       */
      evaluate() {
          const globalMat4 = this.globalXfo.getValue().toMat4();
          const geomOffsetMat4 = this.geomOffsetXfo.getValue().toMat4();
          this.geomMat.setClean(globalMat4.multiply(geomOffsetMat4));
      }
  }
  /**
   * Class representing a geometry item in a scene tree.
   *
   * **Parameters**
   * * **Geometry(`GeometryParameter`):** The geometry to be rendered for this GeomItem
   * * **Material(`MaterialParameter`):** The Material to use when rendering this GeomItem
   * * **GeomOffsetXfo(`XfoParameter`):** Provides an offset transformation that is applied only to the geometry and not inherited by child items.
   * * **GeomMat(`Mat4Parameter`):** Calculated from the GlobalXfo and the GeomOffsetXfo, this matrix is provided to the renderer for rendering.
   *
   * @extends BaseGeomItem
   */
  class GeomItem extends BaseGeomItem {
      listenerIDs = {};
      geomBBox;
      geomIndex = -1;
      assetItem = null;
      calcGeomMatOperator;
      cullable = true;
      /**
       * @member geomOffsetXfoParam - Provides an offset transformation that is applied only to the geometry and not inherited by child items.
       */
      geomOffsetXfoParam = new XfoParameter('GeomOffsetXfo');
      /**
       * @member geomParam - The geometry to be rendered for this GeomItem
       */
      geomParam = new GeometryParameter('Geometry');
      /**
       * @member geomMatParam - Calculated from the GlobalXfo and the GeomOffsetXfo, this matrix is provided to the renderer for rendering.
       */
      geomMatParam = new Mat4Parameter('GeomMat');
      /**
       * Creates a geometry item.
       * @param name - The name of the geom item.
       * @param geometry - The geometry value.
       * @param material - The material value.
       * @param xfo - The initial Xfo of the new GeomItem.
       */
      constructor(name, geometry, material, xfo) {
          super(name);
          this.addParameter(this.geomParam);
          this.addParameter(this.geomOffsetXfoParam);
          this.addParameter(this.geomMatParam);
          const geomChanged = () => {
              this.setBoundingBoxDirty();
          };
          this.geomParam.on('valueChanged', geomChanged);
          this.geomParam.on('boundingBoxChanged', geomChanged);
          this.calcGeomMatOperator = new CalcGeomMatOperator(this.globalXfoParam, this.geomOffsetXfoParam, this.geomMatParam);
          if (geometry)
              this.geomParam.loadValue(geometry);
          if (material)
              this.materialParam.loadValue(material);
          if (xfo)
              this.localXfoParam.value = xfo;
      }
      /**
       * The _cleanBoundingBox method.
       * @private
       */
      _cleanBoundingBox() {
          if (this.disableBoundingBox)
              return new Box3();
          const bbox = super._cleanBoundingBox();
          if (this.geomBBox) {
              // Note: this bbox is the global bounding box of the geomItem
              // transformed into the space of the geometry. We reapply
              // the geom matrix to get back the points in global space.
              const mat4 = this.geomMatParam.value;
              bbox.addPoint(mat4.transformVec3(this.geomBBox.p0));
              bbox.addPoint(mat4.transformVec3(this.geomBBox.p1));
          }
          else {
              const geom = this.geomParam.value;
              if (geom) {
                  if (calculatePreciseBoundingBoxes) {
                      // Note: compting the precise bounding box is much slower and
                      // can make loading big scenes take a bit longer.
                      const mat4 = this.geomMatParam.value;
                      const buffers = geom.genBuffers();
                      if (geom instanceof BaseProxy) {
                          const positions = buffers.attrBuffers['positions'].values;
                          const getVertex = (index) => {
                              const start = index * 3;
                              const value = new Vec3();
                              value.fromArray(positions.subarray(start, start + 3));
                              return value;
                          };
                          for (let i = 0; i < geom.getNumVertices(); i++) {
                              bbox.addPoint(mat4.transformVec3(getVertex(i)));
                          }
                      }
                      else {
                          const positions = geom.getVertexAttribute('positions');
                          for (let i = 0; i < geom.getNumVertices(); i++) {
                              bbox.addPoint(mat4.transformVec3(positions.getValue(i)));
                          }
                      }
                  }
                  else {
                      bbox.addBox3(geom.getBoundingBox(), this.geomMatParam.value);
                  }
              }
          }
          return bbox;
      }
      // ///////////////////////////
      // Debugging
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param json - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(json, context) {
          super.fromJSON(json, context);
      }
      /**
       * Loads state of the Item from a binary object.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          super.readBinary(reader, context);
          const itemFlags = reader.loadUInt8();
          const geomIndex = reader.loadUInt32();
          const geomLibrary = context.assetItem.getGeometryLibrary();
          this.geomIndex = geomIndex;
          this.assetItem = context.assetItem;
          const geom = geomLibrary.getGeom(geomIndex);
          if (geom) {
              this.geomParam.loadValue(geom);
          }
          else {
              const onGeomLoaded = (event) => {
                  const { range } = event;
                  if (geomIndex >= range[0] && geomIndex < range[1]) {
                      const geom = geomLibrary.getGeom(geomIndex);
                      if (geom)
                          this.geomParam.value = geom;
                      else
                          console.warn('Geom not loaded:', this.getName());
                      geomLibrary.off('rangeLoaded', onGeomLoadedListenerID);
                  }
              };
              const onGeomLoadedListenerID = geomLibrary.on('rangeLoaded', onGeomLoaded);
          }
          // this.setVisibility(j.visibility);
          // Note: to save space, some values are skipped if they are identity values
          const geomOffsetXfoFlag = 1 << 2;
          if (itemFlags & geomOffsetXfoFlag) {
              this.geomOffsetXfoParam.value = new Xfo(reader.loadFloat32Vec3(), reader.loadFloat32Quat(), reader.loadFloat32Vec3());
          }
          // BaseGeomItem now handles loading materials.
          if (context.versions['zea-engine'].compare([0, 0, 4]) < 0) {
              const materialFlag = 1 << 3;
              if (itemFlags & materialFlag) {
                  const materialLibrary = context.assetItem.getMaterialLibrary();
                  const materialName = reader.loadStr();
                  let material = materialLibrary.getMaterial(materialName);
                  if (!material) {
                      console.warn("Geom :'" + this.__name + "' Material not found:" + materialName);
                      material = materialLibrary.getMaterial('Default');
                  }
                  this.materialParam.loadValue(material);
              }
              else {
                  // Force nodes to have a material so we can see them.
                  this.materialParam.loadValue(context.assetItem.getMaterialLibrary().getMaterial('Default'));
              }
          }
          // Note: deprecated value. Not sure if we need to load this here.
          // I think not, but need to test first.
          if (context.versions['zea-engine'].compare([3, 0, 0]) < 0) {
              // Load the 'lightmapCoordOffset' value which we no longer use.
              // Note: we need to load it to increment the file pointer.
              reader.loadFloat32Vec2();
          }
          else {
              this.geomBBox = new Box3(reader.loadFloat32Vec3(), reader.loadFloat32Vec3());
          }
      }
      /**
       * Returns string representation of current object's state.
       * @param context
       * @return - The return value.
       */
      toString(context) {
          return JSON.stringify(this.toJSON(context), null, 2);
      }
      // ////////////////////////////////////////
      // Clone and Destroy
      /**
       * The clone method constructs a new geom item, copies its values
       * from this item and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned geom item.
       */
      clone(context) {
          const cloned = new GeomItem();
          cloned.copyFrom(this, context);
          return cloned;
      }
      /**
       * Copies current GeomItem with all its children.
       *
       * @param src - The geom item to copy from.
       * @param context - The context value.
       */
      copyFrom(src, context) {
          super.copyFrom(src, context);
          this.geomOffsetXfoParam.value = src.geomOffsetXfoParam.value;
          if (!src.geomParam.value && src.geomIndex != -1) {
              const geomLibrary = src.assetItem.getGeometryLibrary();
              this.assetItem = src.assetItem;
              this.geomIndex = src.geomIndex;
              this.geomBBox = src.geomBBox;
              const onGeomLoaded = (event) => {
                  const { range } = event;
                  if (this.geomIndex >= range[0] && this.geomIndex < range[1]) {
                      const geom = geomLibrary.getGeom(this.geomIndex);
                      // Note: we need the 'valueChanged' event to be received by the
                      // renderer to then load the geometry into the GPU.
                      // @ts-ignore
                      if (geom)
                          this.geomParam.value = geom;
                      else
                          console.warn('Geom not loaded:', this.getName());
                      geomLibrary.off('rangeLoaded', this.listenerIDs['rangeLoaded']);
                  }
              };
              this.listenerIDs['rangeLoaded'] = geomLibrary.on('rangeLoaded', onGeomLoaded);
          }
          // Geom Xfo should be dirty after cloning.
          // Note: this might not be necessary. It should
          // always be dirty after cloning.
          this.geomMatParam.setDirty(0);
      }
      /**
       * Sets the global boolean that controls if GeomItems calculate precise bounding boxes
       * or use the approximate bounding boxes that are much faster to generate.
       * Note: computing the precise bounding box is much slower and can make loading
       * big scenes take a bit longer. This setting is only relevant to geometries loaded
       * from zcad files.
       * @deprecated
       * zcad files from version 3.11.0 contain precise bounding boxes by default.
       * @param value - true for precise bounding boxes, else false for faster approximate bounding boxes.
       */
      static setCalculatePreciseBoundingBoxes(value) {
          calculatePreciseBoundingBoxes = value;
      }
  }
  Registry.register('GeomItem', GeomItem);

  /**
   * @private
   * @extends BaseGeom
   */
  class CompoundGeomLoader extends BaseGeom {
      numSubGeoms = 0;
      indices = new Uint8Array(0);
      offsets = {};
      counts = {};
      // For each type of geom (TRIANGLES, LINES)
      // A material id, and each start and end of the block
      materialSubGeoms = {};
      subGeomOffsets = {};
      subGeomCounts = {};
      materialLibraryIndices = new Uint32Array(0);
      subGeomMaterialIndices = new Uint8Array(0);
      /**
       * Create points.
       */
      constructor() {
          super();
      }
      genBuffers() {
          const attrBuffers = {};
          for (const [attrName, attr] of this.__vertexAttributes) {
              attrBuffers[attrName] = attr.genBuffer();
          }
          const numVertices = this.numVertices();
          const result = {
              numVertices,
              numRenderVerts: numVertices,
              indices: this.indices,
              attrBuffers,
              offsets: this.offsets,
              counts: this.counts,
              numSubGeoms: this.numSubGeoms,
              subGeomOffsets: this.subGeomOffsets,
              subGeomCounts: this.subGeomCounts,
              materialLibraryIndices: this.materialLibraryIndices,
              subGeomMaterialIndices: this.subGeomMaterialIndices,
              materialSubGeoms: this.materialSubGeoms,
          };
          return result;
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Sets state of current geometry(Including line segments) using a binary reader object.
       *
       * @param {BinReader} reader - The reader value.
       * @param {Record<string, unknown>} context - The context value.
       */
      readBinary(reader, context) {
          super.loadBaseGeomBinary(reader, context);
          const geomCountsByType = reader.loadUInt32Array(3);
          this.offsets['TRIANGLES'] = 0;
          this.counts['TRIANGLES'] = geomCountsByType[0];
          this.offsets['LINES'] = geomCountsByType[0];
          this.counts['LINES'] = geomCountsByType[1];
          this.offsets['POINTS'] = geomCountsByType[0] + geomCountsByType[1];
          this.counts['POINTS'] = geomCountsByType[2];
          const bytes = reader.loadUInt8();
          // Note: do not clone the source arrays as we will transfer the
          // entire buffer back to the main thread where it will be freed once
          // the data is uploaded to the GPU.
          if (bytes == 1)
              this.indices = reader.loadUInt8Array();
          else if (bytes == 2)
              this.indices = reader.loadUInt16Array();
          else if (bytes == 4)
              this.indices = reader.loadUInt32Array();
          // /////////////////////////////////
          // TRIANGLES subgeoms
          const bytesMeshSubGeoms = reader.loadUInt8();
          let subGeomCountsMesh;
          if (bytesMeshSubGeoms == 1)
              subGeomCountsMesh = reader.loadUInt8Array();
          else if (bytesMeshSubGeoms == 2)
              subGeomCountsMesh = reader.loadUInt16Array();
          else if (bytesMeshSubGeoms == 4)
              subGeomCountsMesh = reader.loadUInt32Array();
          else {
              throw Error('subGeomOffsets undefined');
          }
          const subGeomOffsetsMesh = new Uint32Array(subGeomCountsMesh.length);
          let offset = 0;
          for (let i = 0; i < subGeomCountsMesh.length; i++) {
              subGeomOffsetsMesh[i] = offset;
              offset += subGeomCountsMesh[i];
          }
          this.subGeomOffsets['TRIANGLES'] = subGeomOffsetsMesh;
          this.subGeomCounts['TRIANGLES'] = subGeomCountsMesh;
          // /////////////////////////////////
          // LINES subgeoms
          const bytesLinesSubGeoms = reader.loadUInt8();
          let subGeomCountsLines;
          if (bytesLinesSubGeoms == 1)
              subGeomCountsLines = reader.loadUInt8Array();
          else if (bytesLinesSubGeoms == 2)
              subGeomCountsLines = reader.loadUInt16Array();
          else if (bytesLinesSubGeoms == 4)
              subGeomCountsLines = reader.loadUInt32Array();
          else {
              throw Error('subGeomOffsets undefined');
          }
          const subGeomOffsetsLines = new Uint32Array(subGeomCountsLines.length);
          for (let i = 0; i < subGeomCountsLines.length; i++) {
              subGeomOffsetsLines[i] = offset;
              offset += subGeomCountsLines[i];
          }
          this.subGeomOffsets['LINES'] = subGeomOffsetsLines;
          this.subGeomCounts['LINES'] = subGeomCountsLines;
          // /////////////////////////////////
          // POINTS subgeoms
          const numPointsSubGeoms = reader.loadUInt32();
          const subGeomOffsetsPoints = new Uint32Array(numPointsSubGeoms);
          const subGeomCountsPoints = new Uint8Array(numPointsSubGeoms);
          for (let i = 0; i < numPointsSubGeoms; i++) {
              subGeomOffsetsPoints[i] = offset;
              subGeomCountsPoints[i] = 1;
              offset++;
          }
          this.subGeomOffsets['POINTS'] = subGeomOffsetsPoints;
          this.subGeomCounts['POINTS'] = subGeomCountsPoints;
          if (context.versions['zea-engine'].compare([3, 11, 0]) > 0) {
              // Points sub-geoms were not being exported before this release.
              this.numSubGeoms = subGeomCountsMesh.length + subGeomCountsLines.length + numPointsSubGeoms;
          }
          else {
              this.numSubGeoms = subGeomCountsMesh.length + subGeomCountsLines.length;
          }
          // /////////////////////////////////
          // Materials
          const numMaterials = reader.loadUInt32();
          if (numMaterials > 0) {
              this.materialLibraryIndices = reader.loadUInt32Array(numMaterials);
              this.subGeomMaterialIndices = reader.loadUInt8Array(this.numSubGeoms);
              // /////////////////////////////////
              // Material Groups
              let offset = 0;
              let currMaterial = -99;
              let currMaterialSubGeom = null;
              for (let i = 0; i < this.numSubGeoms; i++) {
                  let key;
                  let subGeomOffset = 0;
                  if (i < this.subGeomCounts.TRIANGLES.length) {
                      if (!this.materialSubGeoms.TRIANGLES)
                          this.materialSubGeoms.TRIANGLES = [];
                      key = 'TRIANGLES';
                  }
                  else if (i < this.subGeomCounts.TRIANGLES.length + this.subGeomCounts.LINES.length) {
                      subGeomOffset = this.subGeomCounts.TRIANGLES.length;
                      key = 'LINES';
                      if (!this.materialSubGeoms.LINES)
                          this.materialSubGeoms.LINES = [];
                  }
                  else {
                      subGeomOffset = this.subGeomCounts.TRIANGLES.length + this.subGeomCounts.LINES.length;
                      key = 'POINTS';
                      if (!this.materialSubGeoms.POINTS)
                          this.materialSubGeoms.POINTS = [];
                  }
                  const materialId = this.subGeomMaterialIndices[i];
                  if (currMaterial != materialId) {
                      currMaterial = materialId;
                      // Note: subGeomMaterialIndices is Uint8Array, and 0 means no custom
                      // material is assigned to the subGeom.
                      // Subtract 1 to get the actual material id.
                      currMaterialSubGeom = {
                          materialId: materialId - 1,
                          offset,
                          count: 0,
                      };
                      for (; i < this.numSubGeoms; i++) {
                          if (currMaterial != this.subGeomMaterialIndices[i]) {
                              break;
                          }
                          // When we get to the end og this geom type (e.g .TRIANGLES)
                          // start a new subgeom.
                          if (i - subGeomOffset == this.subGeomCounts[key].length) {
                              // Force the material index to be reset on line 162 above.
                              currMaterial = -99;
                              break;
                          }
                          currMaterialSubGeom.count += this.subGeomCounts[key][i - subGeomOffset];
                      }
                      offset += currMaterialSubGeom.count;
                      this.materialSubGeoms[key].push(currMaterialSubGeom);
                      i--;
                  }
              }
              // Note: older version of zcad files would list materials for TRIANGLES and LINES,
              // but not points, leaving the points unrendered.
              if (this.subGeomCounts.POINTS.length > 0 && !this.materialSubGeoms.POINTS) {
                  this.materialSubGeoms.POINTS = [
                      {
                          materialId: -1,
                          offset,
                          count: this.subGeomCounts.POINTS.length,
                      },
                  ];
              }
          }
          else {
              this.materialSubGeoms = {};
              let offset = 0;
              for (let key in this.counts) {
                  const count = this.counts[key];
                  if (count > 0) {
                      this.materialSubGeoms[key] = [
                          {
                              materialId: -1,
                              offset,
                              count,
                          },
                      ];
                  }
                  offset += count;
              }
          }
          this.emit('geomDataChanged', {});
      }
  }

  /* eslint-disable guard-for-in */
  // key, toc, geomIndexOffset, geomsRange, isMobileDevice, bufferSlice, genBuffersOpts, context
  const parseGeomsBinary = (data, callback) => {
      // eslint-disable-next-line guard-for-in
      for (const key in data.context.versions) {
          const v = data.context.versions[key];
          const version = new Version('');
          version.major = v.major;
          version.minor = v.minor;
          version.patch = v.patch;
          version.branch = v.branch;
          data.context.versions[key] = version;
      }
      const geomDatas = [];
      const byteOffset = data.byteOffset;
      // console.log('byteOffset:' + byteOffset, ' geomsRange:', data.geomsRange)
      const transferables = [];
      for (let i = data.geomsRange[0]; i < data.geomsRange[1]; i++) {
          const reader = new BinReader(data.bufferSlice, data.toc[i] - byteOffset, data.isMobileDevice);
          const className = reader.loadStr();
          const pos = reader.pos();
          // const name = reader.loadStr()
          // console.log(
          //   i +
          //     ':' +
          //     byteOffset +
          //     ' className:' +
          //     className +
          //     ' name:' +
          //     name /* + " pos:" + (data.toc[i] - byteOffset) + " bufferSlice.byteLength:" +  bufferSlice.byteLength*/
          // )
          let geom;
          switch (className) {
              case 'Points':
                  geom = new Points();
                  break;
              case 'Lines':
                  geom = new Lines();
                  break;
              case 'Mesh':
                  geom = new Mesh();
                  break;
              case 'CompoundGeom':
                  geom = new CompoundGeomLoader();
                  break;
              default:
                  throw new Error('Unsupported Geom type:' + className);
          }
          try {
              reader.seek(pos); // Reset the pointer to the start of the item data.
              geom.readBinary(reader, data.context);
          }
          catch (e) {
              console.warn('Error loading:' + geom.name + '\n:' + e);
              geomDatas.push({});
              continue;
          }
          const geomBuffers = geom.genBuffers(data.genBuffersOpts);
          // /////////////////////////////////
          // Transferables
          // Transfer all the attributes and indices back to the main thread.
          if (geomBuffers.indices)
              transferables.push(geomBuffers.indices.buffer);
          for (const attrName in geomBuffers.attrBuffers) {
              // Note: The type value assigned to the attribute can
              // not be transferred back to the main thread. Convert to
              // the type name here and send back as a string.
              const attrData = geomBuffers.attrBuffers[attrName];
              transferables.push(attrData.values.buffer);
          }
          // Compoound Geom buffers
          if (geomBuffers.materialLibraryIndices) {
              transferables.push(geomBuffers.materialLibraryIndices.buffer);
          }
          if (geomBuffers.subGeomMaterialIndices) {
              transferables.push(geomBuffers.subGeomMaterialIndices.buffer);
          }
          if (geomBuffers.subGeomOffsets) {
              for (let key in geomBuffers.subGeomOffsets) {
                  transferables.push(geomBuffers.subGeomOffsets[key].buffer);
              }
          }
          // if (geomBuffers.vertexNeighbors) {
          //   transferables.push(geomBuffers.vertexNeighbors.buffer)
          // }
          // /////////////////////////////////
          geomDatas.push({
              name: geom.name,
              type: className,
              geomBuffers,
              bbox: geom.getBoundingBox(),
          });
      }
      callback({
          taskId: data.taskId,
          geomLibraryId: data.geomLibraryId,
          geomFileID: data.geomFileID,
          geomIndexOffset: data.geomIndexOffset,
          geomsRange: data.geomsRange,
          geomDatas,
      }, transferables);
  };

  const handleMessage = function (srcData, postMessage) {
    parseGeomsBinary(srcData, (resultData, transferables) => {
      postMessage(resultData, transferables);
    });
  };

  // Check to see if we are running in the Worker before assigning onmessage
  if (globalThis.document === undefined) {
    globalThis.onmessage = function (event) {
      if (!event.data) {
        // Note: we see this occur when loading one large asset many times.
        // Like when loading the portafil.
        // It may be due to memory issues, but its not clear.
        console.warn('GeomLibrary worker.postMessage failed. data was lost on the way to the web worker.');
        return
      }
      // Our worker gets triggered
      if (!event.data.context) {
        return
      }
      handleMessage(event.data, self.postMessage);
    };
  }

  var WorkerFactory$1 = createBase64WorkerFactory('', null, false);
  /* eslint-enable */

  /* eslint-disable require-jsdoc */
  class GeomParserMainThread extends EventEmitter {
      constructor() {
          super();
      }
      addTask(taskData, transferables) {
          return new Promise((resolve) => {
              // @ts-ignore
              handleMessage(taskData, (results) => {
                  if (results.eventName) {
                      this.emit(results.eventName, results);
                      return;
                  }
                  resolve(results);
              });
          });
      }
  }
  class GeomParserWorkerPool extends WorkerPool {
      constructor() {
          super(true);
      }
      constructWorker() {
          const worker = new WorkerFactory$1();
          return Promise.resolve(worker);
      }
  }
  let geomParserWorkerPool;
  // In NodeJS, we don't use the workers to parse data.
  if (!globalThis.navigator) {
      geomParserWorkerPool = new GeomParserMainThread();
  }
  else {
      geomParserWorkerPool = new GeomParserWorkerPool();
  }
  // /////////////////////////////////////////////
  // GeomLibrary
  let numGeomLibraries = 0;
  /** Class representing a geometry library.
   */
  class GeomLibrary extends EventEmitter {
      assetItem;
      listenerIDs = {};
      streamInfos = {};
      genBuffersOpts = {};
      loadContext;
      numGeoms = -1;
      numGeomFiles = 1;
      geoms = [];
      basePath = '';
      loadedCount = 0;
      /**
       * Create a geom library.
       */
      constructor(assetItem) {
          super();
          this.assetItem = assetItem;
          numGeomLibraries++;
      }
      /**
       * The returns true if all the geometries have been loaded and the loaded event has already been emitted.
       * @return - True if all geometries are already loaded, else false.
       */
      isLoaded() {
          return this.numGeoms == -1 || this.loadedCount == this.numGeoms;
      }
      /**
       * Loads a single geometry file for this GeomLibrary.
       *
       * @private
       *
       * @param geomFileID - The index of the file to load
       * @param incrementProgress - If true, the progress bar is incremented and decremented.
       * @return the promise resolves once the file is loaded, but not parsed.
       */
      loadGeomFile(geomFileID, incrementProgress = false) {
          if (incrementProgress)
              resourceLoader.incrementWorkload(1);
          return new Promise((resolve) => {
              const geomFileUrl = this.basePath + geomFileID + '.zgeoms';
              resourceLoader.loadFile('archive', geomFileUrl, false).then((entries) => {
                  const geomsData = entries[Object.keys(entries)[0]];
                  const streamFileParsedListenerID = this.on('streamFileParsed', (event) => {
                      if (event.geomFileID == geomFileID) {
                          if (incrementProgress)
                              resourceLoader.incrementWorkDone(1);
                          // console.log(`GeomFileLoaded :${geomFileID} > ${this.loadedGeomFiles}/${this.numGeomFiles}`)
                          this.off('streamFileParsed', streamFileParsedListenerID);
                          resolve();
                      }
                  });
                  this.readBinaryBuffer(geomFileID, geomsData.buffer, this.loadContext);
              });
          });
      }
      /**
       * Loads the geometry files for this GeomLibrary.
       * @param geomLibraryJSON - The json data describing the data needed to be loaded by the geom library
       * @param basePath - The base path of the file. (this is theURL of the zcad file without its extension.)
       * @param context - The value param.
       */
      loadGeomFilesStream(geomLibraryJSON, basePath, context) {
          this.numGeomFiles = geomLibraryJSON.numGeomFiles
              ? geomLibraryJSON.numGeomFiles
              : geomLibraryJSON.numGeomsPerFile.length;
          resourceLoader.incrementWorkload(this.numGeomFiles);
          this.numGeoms = geomLibraryJSON.numGeoms;
          this.basePath = basePath;
          this.loadContext = context;
          for (let geomFileID = 0; geomFileID < this.numGeomFiles; geomFileID++) {
              this.loadGeomFile(geomFileID, false).finally(() => resourceLoader.incrementWorkDone());
          }
      }
      /**
       * The setGenBufferOption method.
       * @param key - The key value.
       * @param value - The value param.
       */
      setGenBufferOption(key, value) {
          this.genBuffersOpts[key] = value;
      }
      /**
       * The setNumGeoms method.
       * @param expectedNumGeoms - The expectedNumGeoms value.
       */
      setNumGeoms(expectedNumGeoms) {
          this.numGeoms = expectedNumGeoms;
      }
      /**
       * Returns the number of geometries the GeomLibrary has, or will have at the end of loading.
       * @return - The number of geometries.
       */
      getNumGeoms() {
          return this.numGeoms;
      }
      /**
       * The getGeom method.
       * @param index - The index value.
       * @return - The stored geometry
       */
      getGeom(index) {
          if (index >= this.geoms.length) {
              // console.warn("Geom index invalid:" + index);
              return null;
          }
          return this.geoms[index];
      }
      /**
       * The getGeom method.
       * @param index - The index value.
       * @return - The stored geometry
       */
      setGeom(index, geom) {
          geom.libraryIndex = index;
          this.geoms[index] = geom;
      }
      /**
       * The readBinaryBuffer method.
       * @param geomFileID - The key value.
       * @param buffer - The buffer value.
       * @param context - The context value.
       */
      readBinaryBuffer(geomFileID, buffer, context) {
          const reader = new BinReader(buffer, 0, SystemDesc.isMobileDevice);
          const numGeoms = reader.loadUInt32();
          // Geoms within a given file are offset into the array of geometries of the library.
          // Note: One day, the geom library should already know all the offsets for each file before loading.
          const geomIndexOffset = reader.loadUInt32();
          this.streamInfos[geomFileID] = {
              total: numGeoms,
              done: 0,
          };
          if (numGeoms == 0) {
              const event = new StreamFileParsedEvent(geomFileID, 0);
              this.emit('streamFileParsed', event);
              return;
          }
          if (this.numGeoms == -1) {
              // Note: for loading geom streams, we need to know the total number
              // ahead of time to be able to generate accurate progress reports.
              this.numGeoms = numGeoms;
          }
          const toc = reader.loadUInt32Array(numGeoms);
          // TODO: Use SharedArrayBuffer once available.
          // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer
          if (numGeomLibraries > 1 || this.numGeomFiles > 1) {
              // In scenes loading many files, we just load each file on a different worker.
              // This has one big advantage that we don't clone the buffer using the 'slice' method
              // potentially reducing temporary memory consumption by a lot.
              const geomsRange = [0, numGeoms];
              const byteOffset = 0;
              geomParserWorkerPool
                  .addTask({
                  geomFileID,
                  toc,
                  byteOffset,
                  geomIndexOffset,
                  geomsRange,
                  isMobileDevice: reader.isMobileDevice,
                  bufferSlice: buffer,
                  genBuffersOpts: this.genBuffersOpts,
                  context: {
                      versions: context.versions,
                  },
              }, [buffer])
                  .then((results) => {
                  // @ts-ignore
                  this.receiveGeomDatas(results);
              });
          }
          else {
              // Often we are loading many small files, and we want as few workloads as possible.
              // e.g. one file per worker.
              // but sometimes we are loading one big file and we need to break the file into chunks
              // to get it processed on all available cores.
              const bytesPerWorkload = 2000000;
              let offset = 0;
              while (offset < numGeoms) {
                  const bufferSliceStart = toc[offset];
                  let byteCount = 0;
                  let offsetEnd = offset;
                  while (offsetEnd < numGeoms && byteCount < bytesPerWorkload) {
                      offsetEnd++;
                      byteCount = toc[offsetEnd] - bufferSliceStart;
                  }
                  let geomsRange;
                  let bufferSliceEnd;
                  if (offsetEnd >= numGeoms) {
                      geomsRange = [offset, numGeoms];
                      bufferSliceEnd = buffer.byteLength;
                  }
                  else {
                      geomsRange = [offset, offsetEnd];
                      bufferSliceEnd = toc[geomsRange[1]];
                  }
                  const passWholeBuffer = offset == 0 && offsetEnd == numGeoms;
                  const byteOffset = passWholeBuffer ? 0 : toc[geomsRange[0]];
                  const bufferSlice = passWholeBuffer ? buffer : buffer.slice(bufferSliceStart, bufferSliceEnd);
                  offset = offsetEnd;
                  // ////////////////////////////////////////////
                  // Multi Threaded Parsing
                  geomParserWorkerPool
                      .addTask({
                      geomFileID,
                      toc,
                      byteOffset,
                      geomIndexOffset,
                      geomsRange,
                      isMobileDevice: reader.isMobileDevice,
                      bufferSlice,
                      genBuffersOpts: this.genBuffersOpts,
                      context: {
                          versions: context.versions,
                      },
                  }, [bufferSlice])
                      .then((results) => {
                      // @ts-ignore
                      this.receiveGeomDatas(results);
                  });
              }
          }
      }
      /**
       * The receiveGeomDatas method.
       * @private
       * @param data - The data received back from the web worker
       * @return - returns true once all data for this geom library has been loaded.
       */
      receiveGeomDatas(results) {
          const { geomFileID, geomDatas, geomIndexOffset, geomsRange } = results;
          // We are storing a subset of the geoms from a binary file
          // which is a subset of the geoms in an asset.
          // geomIndexOffset: the offset of the file geoms in the asset.
          // geomsRange: the range of geoms in the bin file.
          const offset = geomIndexOffset + geomsRange[0];
          const storedRange = [offset, geomIndexOffset + geomsRange[1]];
          for (let i = 0; i < geomDatas.length; i++) {
              const geomData = geomDatas[i];
              if (!geomData.type)
                  continue;
              let proxy;
              switch (geomData.type) {
                  case 'Points':
                      proxy = new PointsProxy(geomData);
                      break;
                  case 'Lines':
                      proxy = new LinesProxy(geomData);
                      break;
                  case 'Mesh':
                  case 'Plane': // TODO: Support procedural shape params
                  case 'Sphere':
                  case 'Cone':
                      proxy = new MeshProxy(geomData);
                      break;
                  case 'CompoundGeom':
                      proxy = new CompoundGeom(geomData, this.assetItem.getMaterialLibrary());
                      break;
                  default:
                      throw new Error('Unsupported Geom type:');
              }
              this.setGeom(offset + i, proxy);
          }
          const event = new RangeLoadedEvent(storedRange);
          this.emit('rangeLoaded', event);
          const loaded = storedRange[1] - storedRange[0];
          // console.log("GeomLibrary Loaded:" + loaded);
          // Each file in the stream has its own counter for the number of
          // geoms, and once each stream file finishes parsing, we fire a signal.
          const streamInfo = this.streamInfos[geomFileID];
          streamInfo.done += loaded;
          // console.log('receiveGeomDatas:', geomFileID + ' Loaded:' + streamInfo.done + ' of :' + streamInfo.total)
          if (streamInfo.done == streamInfo.total) {
              const event = new StreamFileParsedEvent(geomFileID, streamInfo.done);
              this.emit('streamFileParsed', event);
              // Emit from the resource loader so anyone can listen.
              resourceLoader.emit('streamGeomsLoaded', event);
          }
          // Once all the geoms from all the files are loaded and parsed
          // fire the loaded signal.
          this.loadedCount += loaded;
          // console.log('this.loadedCount:', this.assetItem.path, this.loadedCount, ' this.numGeoms:', this.numGeoms)
          if (this.loadedCount == this.numGeoms) {
              // console.log('GeomLibrary Loaded:', this.assetItem.path, ' loaded:', this.loadedCount)
              this.emit('loaded');
          }
          // Return true if we are done loading geoms
          // This allows the worker to be shut down and free up memory.
          return this.loadedCount == this.numGeoms;
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The toJSON method encodes this type as a json object for persistence.
       * @return - Returns the json object.
       */
      toJSON() {
          return {
              numGeoms: this.geoms.length,
          };
      }
      /**
       * The toString method.
       * @return - The return value.
       */
      toString() {
          return JSON.stringify(this.toJSON(), null, 2);
      }
      /**
       *
       */
      loadMetadata(data, context) {
          const reader = new BinReader(data.buffer, 0, SystemDesc.isMobileDevice);
          const toc = reader.loadUInt32Array();
          for (let i = 0; i < toc.length; i++) {
              try {
                  const geom = this.geoms[i];
                  if (!geom) {
                      console.warn('Error loading metadata for geom that was not yet loaded: ', i);
                  }
                  if (geom instanceof CompoundGeom) {
                      reader.seek(toc[i]); // Reset the pointer to the start of the item data.
                      geom.loadMetadata(reader, context);
                  }
              }
              catch (e) {
                  console.warn('Error loading geom metadata: ', i);
              }
          }
      }
  }

  /** Class representing a material library in a scene tree.
   * @private
   */
  class MaterialLibrary extends BaseItem {
      assetItem;
      images = {};
      materials = [];
      __materialsMap = {};
      constructor(assetItem) {
          super();
          this.assetItem = assetItem;
      }
      /**
       * The clear method.
       */
      clear() {
          this.images = {};
          this.materials = [];
          this.__materialsMap = {};
      }
      /**
       * The getPath method.
       * @return - The return value.
       */
      getPath() {
          if (this.assetItem instanceof BaseItem) {
              return [...this.assetItem.getPath(), 'MaterialLibrary'];
          }
          else {
              return ['MaterialLibrary'];
          }
      }
      /**
       * The resolvePath method traverses the subtree from this item down
       * matching each name in the path with a child until it reaches the
       * end of the path.
       *
       * @param path - The path value.
       * @param index - The index value.
       * @return - The return value.
       */
      resolvePath(path, index = 0) {
          if (index == 0) {
              if (path[0] == '.' || path[0] == 'MaterialLibrary')
                  index++;
          }
          // Maybe the name is a parameter name.
          const material = this.getMaterial(path[index]);
          if (material) {
              if (index < path.length) {
                  return material.resolvePath(path, index + 1);
              }
              return material;
          }
          throw new Error(`Unable to resolve path : [${path.toString()}] after: 'MaterialLibrary' \nNo material called : "${path[index]}"`);
      }
      /**
       * The getNumMaterials method.
       * @return - The return value.
       */
      getNumMaterials() {
          return this.materials.length;
      }
      /**
       * The getMaterials method.
       * @return - The return value.
       */
      getMaterials() {
          return this.materials;
      }
      /**
       * The getMaterialNames method.
       * @return - The return value.
       */
      getMaterialNames() {
          const names = [];
          this.materials.forEach((material) => {
              names.push(material.getName());
          });
          return names;
      }
      /**
       * The hasMaterial method.
       * @param name - The name value.
       * @return - The return value.
       */
      hasMaterial(name) {
          return name in this.__materialsMap;
      }
      /**
       * Add a material.
       * @param material - The material value.
       */
      addMaterial(material) {
          material.setOwner(this);
          material.libraryIndex = this.materials.length;
          this.__materialsMap[material.getName()] = this.materials.length;
          this.materials.push(material);
      }
      /**
       * The getMaterial method.
       * @param nameOrIndex - The material name or its index.
       * @param assert - The assert value.
       * @return - The return value.
       */
      getMaterial(nameOrIndex) {
          if (typeof nameOrIndex == 'string') {
              const index = this.__materialsMap[nameOrIndex];
              if (index == undefined) {
                  return null;
              }
              return this.materials[index];
          }
          else if (Number.isFinite(nameOrIndex)) {
              return this.materials[nameOrIndex];
          }
      }
      /**
       * The hasImage method.
       * @param name - The material name.
       * @return - The return value.
       */
      hasImage(name) {
          return name in this.images;
      }
      /**
       * The addImage method.
       * @param image - The image value.
       */
      addImage(image) {
          image.setOwner(this);
          this.images[image.getName()] = image;
      }
      /**
       * The getImage method.
       * @param name - The material name.
       * @param assert - The assert value.
       * @return - The return value.
       */
      getImage(name, assert = true) {
          const res = this.images[name];
          if (!res && assert) {
              throw new Error('Image:' + name + ' not found in library:' + this.getImageNames());
          }
          return res;
      }
      /**
       * The getImageNames method.
       * @return - The return value.
       */
      getImageNames() {
          const names = [];
          // eslint-disable-next-line guard-for-in
          for (const name in this.images) {
              names.push(name);
          }
          return names;
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The load method.
       * @param filePath - The file path.
       */
      load(filePath) {
          const xhr = new XMLHttpRequest();
          xhr.open('GET', filePath, true);
          xhr.ontimeout = () => {
              throw new Error('The request for ' + filePath + ' timed out.');
          };
          xhr.onload = () => {
              if (xhr.readyState === 4) {
                  if (xhr.status === 200) {
                      this.fromJSON(JSON.parse(xhr.responseText));
                  }
                  else {
                      console.warn(xhr.statusText);
                  }
              }
          };
          xhr.send(null);
      }
      /**
       * The toJSON method encodes the current object as a json object.
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context = {}) {
          const j = {
              numMaterials: this.getNumMaterials(),
              images: {},
              materials: [],
          };
          for (const key in this.images) {
              j.images[key] = this.images[key].toJSON(context);
          }
          // eslint-disable-next-line guard-for-in
          for (const material of this.materials) {
              j.materials.push(material.toJSON(context));
          }
          return j;
      }
      /**
       * The fromJSON method decodes a json object for this type.
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context = {}) {
          // eslint-disable-next-line guard-for-in
          for (const name in j.textures) {
              const image = new FileImage(name);
              image.fromJSON(j.textures[name]);
              this.images[name] = image; // TODO: texture -> image
          }
          // eslint-disable-next-line guard-for-in
          for (const name in j.materials) {
              const material = new Material(name);
              material.fromJSON(j.materials[name]);
              this.addMaterial(material);
          }
      }
      /**
       * The readBinary method.
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          // if (context.version == undefined) context.version = 0
          /*const name = */ reader.loadStr();
          const numTextures = reader.loadUInt32();
          for (let i = 0; i < numTextures; i++) {
              const type = reader.loadStr();
              const texture = Registry.constructClass(type);
              texture.readBinary(reader, context);
              this.images[texture.getName()] = texture;
          }
          const numMaterials = reader.loadUInt32();
          if (numMaterials > 0) {
              const toc = reader.loadUInt32Array(numMaterials);
              for (let i = 0; i < numMaterials; i++) {
                  const shaderName = reader.loadStr();
                  let material;
                  switch (shaderName) {
                      case 'StandardMaterial':
                      case 'TransparentMaterial':
                      case 'StandardSurfaceShader':
                          material = Registry.constructClass('StandardSurfaceMaterial');
                          break;
                      case 'SimpleSurfaceShader':
                      case 'SimpleSurfaceMaterial':
                          material = Registry.constructClass('SimpleSurfaceMaterial');
                          break;
                      case 'PointsShader':
                      case 'PointsMaterial':
                          material = Registry.constructClass('PointsMaterial');
                          break;
                      case 'FatPointsShader':
                      case 'FatPointsMaterial':
                          material = Registry.constructClass('FatPointsMaterial');
                          break;
                      case 'LinesShader':
                      case 'LinesMaterial':
                          material = Registry.constructClass('LinesMaterial');
                          break;
                      default:
                          material = new Material('');
                          break;
                  }
                  reader.seek(toc[i]); // Reset the pointer to the start of the item data.
                  material.readBinary(reader, context); // (reader, context, this.images)
                  // Note: the compound geom now looks up materials by indexes
                  // and so the index of the material in the zcad file must mow match
                  // the index in the MaterialLibrary. (GeomItem looks up materials by name.)
                  this.materials[i] = material;
                  material.libraryIndex = i;
                  this.__materialsMap[material.getName()] = i;
              }
          }
          this.emit('loaded');
      }
      /**
       * The toString method.
       * @return - The return value.
       */
      toString() {
          return JSON.stringify(this.toJSON(), null, 2);
      }
  }

  /**
   * Provides a context for loading assets. This context can provide the units of the loading scene.
   * E.g. you can specify the scene units as 'millimeters' in the context object.
   * To load external references, you can also provide a dictionary that maps filenames to URLs that are used
   * to resolve the URL of an external reference that a given asset is expecting to find.
   */
  class AssetLoadContext extends EventEmitter {
      units = 'meters';
      versions = {};
      sdk = '';
      url = '';
      folder = '';
      camera = null;
      assetItem = null;
      resources = null; // a mapping of the key to asset urls.
      xrefs = {}; // a mapping of the xrefs that have been loaded to their paths.
      xrefLoadCallback = null; // When XRefs load, this callback can be used to supply the URL for the zcad file
      lazyLoading;
      postLoadCallbacks = [];
      promisses = [];
      urlStack = [];
      assetStack = [];
      addGeomToLayer;
      /**
       * Create a AssetLoadContext
       * @param context The source context to base this context on.
       */
      constructor(context) {
          super();
          if (context) {
              this.units = context.units;
              this.sdk = context.sdk;
              this.camera = context.camera;
              this.resources = context.resources;
              this.xrefs = context.xrefs;
              this.xrefLoadCallback = context.xrefLoadCallback;
              this.urlStack = [...context.urlStack];
              this.assetStack = [...context.assetStack];
          }
      }
      /**
       * During loading, asynchronous processes may be launched, and subsequently completed.
       * These method helps the Asset track how many asynchronous loading operations may be
       * occurring with the tree during load.
       * As each external reference starts to load, it adds a promise, letting the owning
       * Asset know to wait till the children promisses are resolved before emitting its own 'loaded' event.
       */
      addPromise(promise) {
          this.promisses.push(promise);
      }
      /**
       * Resolves a path within the loading asset. This is used to connect
       * items within the tree to other items. e.g. a Group can find its members.
       * or an instance can find its source tree.
       * @param path the path within the tree relative to the loading asset
       * @param onSucceed called with the successful result of the path resolution.
       * @param onFail called when the path resolution fails.
       */
      resolvePath(path, onSucceed, onFail) {
          // Note: Why not return a Promise here?
          // Promise evaluation is always async, so
          // all promises will be resolved after the current call stack
          // has terminated. In our case, we want all paths
          // to be resolved before the end of the function, which
          // we can handle easily with callback functions.
          try {
              const item = this.assetItem.resolvePath(path);
              onSucceed(item);
          }
          catch (e) {
              // Some paths resolve to items generated during load,
              // so push a callback to re-try after the load is complete.
              this.postLoadCallbacks.push(() => {
                  try {
                      const param = this.assetItem.resolvePath(path);
                      onSucceed(param);
                  }
                  catch (e) {
                      if (onFail) {
                          onFail(e);
                      }
                      else {
                          throw new Error(e.message);
                      }
                  }
              });
          }
      }
      /**
       * Adds a function to be called back once the main load call stack exists.
       * This is used to connect parts of the tree together after loading.
       * e.g. an instance will
       * @param postLoadCallback
       */
      addPLCB(postLoadCallback) {
          this.postLoadCallbacks.push(postLoadCallback);
      }
      /**
       * Triggers the resolution of any remaining callbacks.
       * During loading, InstanceItems, or Groups may try to resolve other
       * Items, but they might not be available yet, which causes a Post
       * Load Callback (PLCB) to be registered. The last step in loading
       * should be to resolve the PLCBs.
       */
      resolvePLCBs() {
          for (const cb of this.postLoadCallbacks)
              cb();
          this.postLoadCallbacks = [];
      }
      /**
       * The clone method constructs a new AssetLoadContext, copies its values
       * from this instance and returns it.
       */
      clone() {
          return new AssetLoadContext(this);
      }
  }

  /* eslint-disable @typescript-eslint/no-explicit-any */
  /**
   * BaseGroup are a special type of `TreeItem` that allows you to gather/classify/organize/modify
   * multiple items contained within the group. Items can be added to the group directly, or using
   * its path.
   * All parameters set to the group are also set to the children; in other words, it's a faster way
   * to apply common things to multiple items.
   *
   * **Parameters**
   * * **Items(`ItemSetParameter`):** _todo_
   *
   * @extends TreeItem
   */
  class BaseGroup extends TreeItem {
      /**
       * @member itemsParam - TODO
       */
      itemsParam = new ItemSetParameter('Items', (item) => item instanceof TreeItem);
      itemsEventHandlers = [];
      searchRoot;
      /**
       * Creates an instance of a group.
       *
       * @param name - The name of the group.
       */
      constructor(name) {
          super(name);
          this.addParameter(this.itemsParam);
          this.itemsParam.on('itemAdded', (event) => {
              this.bindItem(event.item, event.index);
              this.emit('itemAdded', event);
          });
          this.itemsParam.on('itemRemoved', (event) => {
              this.unbindItem(event.item, event.index);
              this.emit('itemRemoved', event);
          });
      }
      // ////////////////////////////////////////
      // Visibility
      /**
       * The updateVisibility method.
       * @return - The return value.
       * @private
       */
      updateVisibility() {
          if (super.updateVisibility()) {
              const value = this.isVisible();
              Array.from(this.itemsParam.value).forEach((item) => {
                  if (item instanceof TreeItem)
                      item.propagateVisibility(value ? 1 : -1);
              });
              return true;
          }
          return false;
      }
      /**
       * Calculates the new opacity value based on the opacityParam value
       * and the lowest of the inherited opacity values.
       */
      updateOpacity() {
          super.updateOpacity();
          Array.from(this.itemsParam.value).forEach((member) => {
              member.setInheritedOpacity(this, this.opacity);
          });
      }
      // ////////////////////////////////////////
      // Highlights
      /**
       * Adds a highlight to the tree item.
       *
       * @param name - The name of the tree item.
       * @param color - The color of the highlight.
       * @param propagateToChildren - A boolean indicating whether to propagate to children.
       */
      addHighlight(name, color, propagateToChildren = true) {
          super.addHighlight(name, color, propagateToChildren);
          if (propagateToChildren) {
              Array.from(this.itemsParam.value).forEach((item) => {
                  item.addHighlight(name, color, true);
              });
          }
      }
      /**
       * Removes a highlight to the tree item.
       *
       * @param name - The name of the tree item.
       * @param propagateToChildren - A boolean indicating whether to propagate to children.
       */
      removeHighlight(name, propagateToChildren = true) {
          super.removeHighlight(name, propagateToChildren);
          if (propagateToChildren) {
              Array.from(this.itemsParam.value).forEach((item) => {
                  item.removeHighlight(name, true);
              });
          }
      }
      // ////////////////////////////////////////
      // Items
      /**
       *  sets the root item to be used as the search root.
       * @param treeItem
       */
      setSearchRoot(treeItem) {
          this.searchRoot = treeItem;
      }
      /**
       * The setOwner method assigns a new owner to the item. The owner of a group becomes its search root unless another search root is already set.
       *
       * @param ownerItem - The new owner item.
       */
      setOwner(ownerItem) {
          if (!this.searchRoot || this.searchRoot == this.getOwner())
              this.searchRoot = ownerItem;
          super.setOwner(ownerItem);
      }
      /**
       * The __bindItem method.
       * @param item - The item value.
       * @param index - The index value.
       * @private
       */
      bindItem(item, index) {
          if (!(item instanceof TreeItem))
              return;
          const listenerIDs = {};
          listenerIDs['pointerDown'] = item.on('pointerDown', (event) => {
              this.onPointerDown(event);
          });
          listenerIDs['pointerUp'] = item.on('pointerUp', (event) => {
              this.onPointerUp(event);
          });
          listenerIDs['pointerMove'] = item.on('pointerMove', (event) => {
              this.onPointerMove(event);
          });
          listenerIDs['pointerEnter'] = item.on('pointerEnter', (event) => {
              this.onPointerEnter(event);
          });
          listenerIDs['pointerLeave'] = item.on('pointerLeave', (event) => {
              this.onPointerLeave(event);
          });
          listenerIDs['pointerClick'] = item.on('pointerClick', (event) => {
              this.onPointerClick(event);
          });
          listenerIDs['pointerDoubleClick'] = item.on('pointerDoubleClick', (event) => {
              this.onPointerDoubleClick(event);
          });
          listenerIDs['pointerLongPress'] = item.on('pointerLongPress', (event) => {
              this.onPointerLongPress(event);
          });
          listenerIDs['BoundingBox.valueChanged'] = item.boundingBoxParam.on('valueChanged', () => {
              this.setBoundingBoxDirty();
          });
          if (!this.isVisible()) {
              // Decrement the visibility counter which might cause
              // this item to become invisible. (or it might already be invisible.)
              item.propagateVisibility(-1);
          }
          // ///////////////////////////////
          // Update the highlight
          this.highlights.forEach((name) => {
              item.addHighlight(name, this.highlightMapping[name], true);
          });
          this.itemsEventHandlers.splice(index, 0, listenerIDs);
      }
      /**
       * The unbindItem method.
       * @param item - The item value.
       * @param index - The index value.
       * @private
       */
      unbindItem(item, index) {
          if (!(item instanceof TreeItem))
              return;
          const listenerIDs = this.itemsEventHandlers[index];
          // eslint-disable-next-line guard-for-in
          for (let key in listenerIDs) {
              const parts = key.split('.');
              if (parts.length > 1) {
                  const param = item.getParameter(parts[0]);
                  if (param)
                      param.off(parts[1], listenerIDs[key]);
              }
              else {
                  item.off(key, listenerIDs[key]);
              }
          }
          if (!this.isVisible()) {
              // Increment the Visibility counter which might cause
              // this item to become visible.
              // It will stay invisible if its parent is invisible, or if
              // multiple groups connect to it and say it is invisible.
              item.propagateVisibility(1);
          }
          // ///////////////////////////////
          // Update the highlight
          this.highlights.forEach((name) => {
              item.removeHighlight(name, true);
          });
          this.setBoundingBoxDirty();
          this.itemsEventHandlers.splice(index, 1);
      }
      /**
       * Adds an item to the group(See `Items` parameter).
       *
       * @param item - The item value.
       * @param emit - The emit value.
       */
      addItem(item, emit = true) {
          if (!item) {
              console.warn('Error adding item to group. Item is null');
              return;
          }
          this.itemsParam.addItem(item, emit);
      }
      /**
       * Removes an item from the group(See `Items` parameter).
       *
       * @param item - The item value.
       * @param emit - The emit value.
       */
      removeItem(item, emit = true) {
          const paramItems = this.itemsParam.value;
          if (!paramItems)
              return;
          const itemIndex = Array.from(paramItems).indexOf(item);
          if (itemIndex != -1)
              this.itemsParam.removeItem(itemIndex, emit);
      }
      /**
       * Removes all items from the group.
       *
       * @param emit - `true` triggers `valueChanged` event.
       */
      clearItems(emit = true) {
          // Note: Unbind reversed so that indices
          // do not get changed during the unbind.
          const paramItems = this.itemsParam.value;
          if (!paramItems)
              return;
          const items = Array.from(paramItems);
          for (let i = items.length - 1; i >= 0; i--) {
              this.unbindItem(items[i], i);
          }
          this.itemsParam.clearItems(emit);
      }
      /**
       * Returns the list of `TreeItem` objects owned by the group.
       *
       * @return - The return value.
       */
      getItems() {
          return this.itemsParam.value;
      }
      /**
       * Sets an entire new array of items to the BaseGroup replacing any previous items.
       *
       * @param items - List of `TreeItem` you want to add to the group
       */
      setItems(items) {
          this.clearItems(false);
          this.itemsParam.setItems(items);
      }
  }

  /* eslint-disable no-unused-vars */
  // TODO:  SelectionGroup in the zea-ux should extend this class.
  /**
   * @extends BaseGroup
   */
  class SelectionSet extends BaseGroup {
      #highlightUpdateRequested = false;
      /**
       * @member highlightedParam - Whether or not the TreeItem should be highlighted.
       */
      highlightedParam = new BooleanParameter('Highlighted', false);
      /**
       * @member highlightColorParam - The color of the highlight.
       */
      highlightColorParam = new ColorParameter('HighlightColor', new Color(0.5, 0.5, 1));
      /**
       * @member highlightFillParam - TODO
       */
      highlightFillParam = new NumberParameter('HighlightFill', 0.0, [0, 1]);
      /**
       * Creates an instance of a group.
       *
       * @param name - The name of the group.
       */
      constructor(name) {
          super(name);
          this.addParameter(this.highlightedParam);
          this.highlightedParam.on('valueChanged', () => {
              this.updateHighlight();
          });
          this.addParameter(this.highlightColorParam);
          this.highlightColorParam.on('valueChanged', () => {
              this.updateHighlight();
          });
          this.addParameter(this.highlightFillParam);
          this.highlightFillParam.on('valueChanged', () => {
              this.updateHighlight();
          });
      }
      // /////////////////////////////
      /**
       * The updateHighlight method.
       * @private
       */
      updateHighlight() {
          // Make this function async so that we don't pull on the
          // graph immediately when we receive a notification.
          // Note: propagating using an operator would be much better.
          if (!this.#highlightUpdateRequested) {
              this.#highlightUpdateRequested = true;
              setTimeout(() => {
                  this.#updateHighlightHelper();
                  this.#highlightUpdateRequested = false;
              }, 0);
          }
      }
      /**
       * The updateHighlight method.
       * @private
       */
      #updateHighlightHelper() {
          let highlighted = this.highlightedParam.value;
          let color;
          if (highlighted) {
              color = this.highlightColorParam.value.clone();
              color.a = this.highlightFillParam.value;
          }
          const key = 'groupItemHighlight' + this.getId();
          Array.from(this.itemsParam.value).forEach((item) => {
              if (item instanceof TreeItem) {
                  if (highlighted)
                      item.addHighlight(key, color, true);
                  else
                      item.removeHighlight(key, true);
              }
          });
      }
      /**
       * Changes selection's state of the group with all items it owns.
       *
       * @param sel - Boolean indicating the new selection state.
       */
      setSelected(sel) {
          super.setSelected(sel);
          this.updateHighlight();
      }
      // ////////////////////////////////////////
      // Items
      /**
       * The __bindItem method.
       * @param item - The item value.
       * @param index - The index value.
       * @private
       */
      bindItem(item, index) {
          super.bindItem(item, index);
          if (!(item instanceof TreeItem))
              return;
          // ///////////////////////////////
          // Update the highlight
          if (item instanceof TreeItem && this.highlightedParam.value) {
              const color = this.highlightColorParam.value;
              color.a = this.highlightFillParam.value;
              item.addHighlight('groupItemHighlight' + this.getId(), color, true);
          }
      }
      /**
       * The unbindItem method.
       * @param item - The item value.
       * @param index - The index value.
       * @private
       */
      unbindItem(item, index) {
          super.unbindItem(item, index);
          if (!(item instanceof TreeItem))
              return;
          if (this.highlightedParam.value) {
              item.removeHighlight('groupItemHighlight' + this.getId(), true);
          }
      }
      // ////////////////////////////////////////
      // Clone
      /**
       * The clone method constructs a new group,
       * copies its values and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned group.
       */
      clone(context) {
          const cloned = new SelectionSet(this.__name + ' clone');
          cloned.copyFrom(this, context);
          return cloned;
      }
  }
  Registry.register('SelectionSet', SelectionSet); // TODO

  class GroupGlobalXfoOperator extends CalcGlobalXfoOperator {
      offsetXfo = new Xfo();
      bindXfo = new Xfo();
      invBindXfo = new Xfo();
      #editingPivot = false;
      groupTransformXfo = new XfoOperatorOutput('GroupTransformXfo');
      constructor(globalXfoParam, localXfoParam, groupTransformXfoParam) {
          super(globalXfoParam, localXfoParam);
          this.groupTransformXfo.setParam(groupTransformXfoParam);
          this.addOutput(this.groupTransformXfo);
      }
      set editingPivot(value) {
          this.#editingPivot = value;
          // During pivot editing, the group global does not include the
          // Local Offset Xfo. So we need to make sure it is recalcuated when
          // changing modes.
          this.setDirty();
      }
      get editingPivot() {
          return this.#editingPivot;
      }
      /**
       * Create a GroupMemberXfoOperator operator.
       * @param bindXfo - The Bind Xfo calculated from the initial Transforms of the Group Members.
       */
      setBindXfo(bindXfo) {
          this.bindXfo = bindXfo;
          this.invBindXfo = bindXfo.inverse();
          this.setDirty();
      }
      /**
       * The backPropagateValue method inverts the mathematics of the 'evaluate'
       * method so it can propagate the value backwards to its inputs.
       * @param value - the new value being set on the output GlobalXfo
       */
      backPropagateValue(value) {
          let parentGlobalXfo;
          if (this.parentGlobal.isConnected()) {
              parentGlobalXfo = this.parentGlobal.getValue();
          }
          else {
              parentGlobalXfo = new Xfo();
          }
          if (this.editingPivot) {
              this.bindXfo = value;
              this.invBindXfo = this.bindXfo.inverse();
              this.offsetXfo = parentGlobalXfo.inverse().multiply(this.bindXfo);
              this.setDirty();
          }
          else {
              const parentGlobalWithOffsetXfo = parentGlobalXfo.multiply(this.offsetXfo);
              this.localXfo.setValue(parentGlobalWithOffsetXfo.inverse().multiply(value));
          }
      }
      /**
       * The evaluate method calculates a new global Xfo based on the parents Global Xfo,
       * and the local Xfo value.
       */
      evaluate() {
          let parentGlobalWithOffsetXfo;
          if (this.parentGlobal.isConnected()) {
              const parentGlobalXfo = this.parentGlobal.getValue();
              parentGlobalWithOffsetXfo = parentGlobalXfo.multiply(this.offsetXfo);
          }
          else {
              parentGlobalWithOffsetXfo = this.offsetXfo;
          }
          if (this.editingPivot) {
              let globalXfo = parentGlobalWithOffsetXfo;
              this.globalXfo.setClean(globalXfo);
              const groupTransformXfo = globalXfo.multiply(this.localXfo.getValue()).multiply(this.invBindXfo);
              this.groupTransformXfo.setClean(groupTransformXfo);
          }
          else {
              let globalXfo = parentGlobalWithOffsetXfo.multiply(this.localXfo.getValue());
              this.globalXfo.setClean(globalXfo);
              const groupTransformXfo = globalXfo.multiply(this.invBindXfo);
              this.groupTransformXfo.setClean(groupTransformXfo);
          }
      }
  }
  /** An operator for modifying group members by the groups Xfo
   * @private
   * @extends Operator
   *
   */
  class GroupMemberXfoOperator extends Operator {
      #enabled;
      groupTransformXfo = new XfoOperatorInput('GroupTransformXfo');
      memberGlobalXfo = new XfoOperatorOutput('MemberGlobalXfo', exports.OperatorOutputMode.OP_READ_WRITE);
      /**
       * Create a GroupMemberXfoOperator operator.
       * @param groupTransformXfoParam - The parameter on the Group which defines the displacement to apply to the members.
       * @param memberXfoGlobalParam - The GlobalXfo param found on the Member.
       */
      constructor(groupTransformXfoParam, memberXfoGlobalParam) {
          super();
          this.groupTransformXfo.setParam(groupTransformXfoParam);
          this.memberGlobalXfo.setParam(memberXfoGlobalParam);
          this.addInput(this.groupTransformXfo);
          this.addOutput(this.memberGlobalXfo);
          this.#enabled = true;
      }
      /**
       * used to temporarily disable/enable the operator when the Group bind Xfo is being calculated
       */
      disable() {
          this.#enabled = false;
          this.setDirty();
      }
      /**
       * used to temporarily disable/enable the operator when the Group bind Xfo is being calculated
       */
      enable() {
          this.#enabled = true;
          this.setDirty();
      }
      /**
       * The evaluate method.
       */
      evaluate() {
          const memberGlobalXfo = this.memberGlobalXfo.getValue();
          if (this.#enabled) {
              const groupTransformXfo = this.groupTransformXfo.getValue();
              this.memberGlobalXfo.setClean(groupTransformXfo.multiply(memberGlobalXfo));
          }
          else {
              this.memberGlobalXfo.setClean(memberGlobalXfo);
          }
      }
      /**
       * When the value on a Parameter is modified by a user by calling 'setValue,
       * then if any operators are bound, the value of the Parameter cannot be modified
       * directly as it is the result of a computation. Instead, the Parameter calls
       * 'backPropagateValue' on the Operator to cause the Operator to handle propagating
       * the value to one or more of its inputs.
       * to its inputs.
       * @param value - The value param.
       * @return - The modified value.
       */
      backPropagateValue(value) {
          if (this.#enabled) {
              const invGroupTransformXfo = this.groupTransformXfo.getValue().inverse();
              return invGroupTransformXfo.multiply(value);
          }
          return value;
      }
  }

  /* eslint-disable no-unused-vars */
  const GROUP_XFO_MODES = {
      disabled: 0,
      manual: 1,
      first: 2,
      average: 3,
      globalOri: 4,
  };
  /**
   * The KinematicGroup is used to control the transform of a collection of objects int eh scene.
   * Objects can be added to a kinematic group and then the group can be transformed, causing each
   * of the members to be transformed as one.
   *
   **Parameters**
   * **InitialXfoMode(`MultiChoiceParameter`):** _todo_
   * **GroupTransform(`XfoParameter`):** _todo_
   *
   * @extends BaseGroup
   */
  class KinematicGroup extends BaseGroup {
      calculatingGroupXfo;
      memberXfoOps;
      #highlightUpdateRequested = false;
      /**
       * @member initialXfoModeParam - TODO
       */
      initialXfoModeParam = new MultiChoiceParameter('InitialXfoMode', GROUP_XFO_MODES.average, [
          'manual',
          'first',
          'average',
          'global',
      ]);
      /**
       * @member groupTransformParam - Provides the transformation Xfo that is applied to each Group Member.
       */
      groupTransformParam = new XfoParameter('GroupTransform', new Xfo());
      /**
       * @member highlightedParam - Whether or not the TreeItem should be highlighted.
       */
      highlightedParam = new BooleanParameter('Highlighted', false);
      /**
       * @member highlightColorParam - The color of the highlight.
       */
      highlightColorParam = new ColorParameter('HighlightColor', new Color(1, 1, 0));
      /**
       * @member highlightFillParam - TODO
       */
      highlightFillParam = new NumberParameter('HighlightFill', 0.0, [0, 1]);
      /**
       * Creates an instance of a group.
       *
       * @param name - The name of the group.
       */
      constructor(name = '') {
          super(name);
          // Items which can be constructed by a user (not loaded in binary data.)
          this.calculatingGroupXfo = false;
          this.memberXfoOps = [];
          this.addParameter(this.initialXfoModeParam);
          this.initialXfoModeParam.on('valueChanged', () => {
              this.calcGroupXfo();
          });
          this.addParameter(this.groupTransformParam);
          this.addParameter(this.highlightedParam);
          this.highlightedParam.on('valueChanged', () => {
              this.#updateHighlight();
          });
          this.addParameter(this.highlightColorParam);
          this.highlightColorParam.on('valueChanged', () => {
              this.#updateHighlight();
          });
          this.addParameter(this.highlightFillParam);
          this.highlightFillParam.on('valueChanged', () => {
              this.#updateHighlight();
          });
          this.globalXfoOp = new GroupGlobalXfoOperator(this.globalXfoParam, this.localXfoParam, this.groupTransformParam);
      }
      /**
       * Returns enum of available xfo modes.
       *
       * | Name | Default |
       * | --- | --- |
       * | manual | <code>0</code> |
       * | first | <code>1</code> |
       * | average | <code>2</code> |
       * | globalOri | <code>3</code> |
       */
      static get INITIAL_XFO_MODES() {
          return GROUP_XFO_MODES;
      }
      /**
       * Returns bind Xfo that is used to compute the groupTransform
       * Note: The Bind Xfo is determined by the 'GROUP_XFO_MODES' value.
       */
      get bindXfo() {
          return this.globalXfoOp.bindXfo;
      }
      /**
       * The updateHighlight method.
       * @private
       */
      #updateHighlight() {
          // Make this function async so that we don't pull on the
          // graph immediately when we receive a notification.
          // Note: propagating using an operator would be much better.
          if (!this.#highlightUpdateRequested) {
              this.#highlightUpdateRequested = true;
              setTimeout(() => {
                  this.#updateHighlightHelper();
                  this.#highlightUpdateRequested = false;
              }, 0);
          }
      }
      #updateHighlightHelper() {
          let highlighted = this.highlightedParam.value;
          let color;
          if (highlighted) {
              color = this.highlightColorParam.value.clone();
              color.a = this.highlightFillParam.value;
          }
          const key = 'groupItemHighlight' + this.getId();
          Array.from(this.itemsParam.value).forEach((item) => {
              if (item instanceof TreeItem) {
                  if (highlighted)
                      item.addHighlight(key, color, true);
                  else
                      item.removeHighlight(key, true);
              }
          });
      }
      // ////////////////////////////////////////
      // Global Xfo
      /**
       * Calculate the group Xfo translate.
       * @private
       * @return - Returns a new Xfo.
       */
      calcGroupXfo() {
          const items = Array.from(this.itemsParam.value);
          if (items.length == 0)
              return;
          this.editingPivot = true;
          // TODO: Disable the group operator?
          const initialXfoMode = this.initialXfoModeParam.value;
          let xfo;
          if (initialXfoMode == GROUP_XFO_MODES.manual) {
              // The xfo is manually set by the current global xfo.
              xfo = this.globalXfoParam.value;
          }
          else if (initialXfoMode == GROUP_XFO_MODES.first && items[0] instanceof TreeItem) {
              xfo = items[0].globalXfoParam.value;
          }
          else if (initialXfoMode == GROUP_XFO_MODES.average) {
              xfo = new Xfo();
              xfo.ori.set(0, 0, 0, 0);
              let numTreeItems = 0;
              items.forEach((item, index) => {
                  if (item instanceof TreeItem) {
                      const itemXfo = item.globalXfoParam.value;
                      xfo.tr.addInPlace(itemXfo.tr);
                      // Note: Averaging rotations causes weird and confusing orientation.
                      // This also matches the behavior of the SelectionGroupXfoOperator in zea-ux.
                      if (index == 0)
                          xfo.ori = itemXfo.ori;
                      numTreeItems++;
                  }
              });
              xfo.tr.scaleInPlace(1 / numTreeItems);
              xfo.ori.normalizeInPlace();
              // xfo.sc.scaleInPlace(1/ numTreeItems);
          }
          else if (initialXfoMode == GROUP_XFO_MODES.globalOri) {
              xfo = new Xfo();
              let numTreeItems = 0;
              items.forEach((item, index) => {
                  if (item instanceof TreeItem) {
                      const itemXfo = item.globalXfoParam.value;
                      xfo.tr.addInPlace(itemXfo.tr);
                      numTreeItems++;
                  }
              });
              xfo.tr.scaleInPlace(1 / numTreeItems);
          }
          else {
              throw new Error('Invalid GROUP_XFO_MODES.');
          }
          this.globalXfoParam.value = xfo;
          this.editingPivot = false;
      }
      get editingPivot() {
          return this.globalXfoOp.editingPivot;
      }
      set editingPivot(value) {
          this.globalXfoOp.editingPivot = value;
      }
      // ////////////////////////////////////////
      // Items
      /**
       * The __bindItem method.
       * @param item - The item value.
       * @param index - The index value.
       * @private
       */
      bindItem(item, index) {
          super.bindItem(item, index);
          if (!(item instanceof TreeItem))
              return;
          const memberGlobalXfoParam = item.globalXfoParam;
          const memberXfoOp = new GroupMemberXfoOperator(this.groupTransformParam, memberGlobalXfoParam);
          this.memberXfoOps.splice(index, 0, memberXfoOp);
          if (this.highlightedParam.value) {
              const color = this.highlightColorParam.value;
              color.a = this.highlightFillParam.value;
              item.addHighlight('groupItemHighlight' + this.getId(), color, true);
          }
      }
      /**
       * The unbindItem method.
       * @param item - The item value.
       * @param index - The index value.
       * @private
       */
      unbindItem(item, index) {
          super.unbindItem(item, index);
          if (!(item instanceof TreeItem))
              return;
          this.memberXfoOps[index].detach();
          this.memberXfoOps.splice(index, 1);
          if (this.highlightedParam.value) {
              item.removeHighlight('groupItemHighlight' + this.getId(), true);
          }
      }
      /**
       * Adds an item to the group(See `Items` parameter).
       *
       * @param item - The item value.
       * @param emit - The emit value.
       */
      addItem(item, emit = true) {
          super.addItem(item, emit);
          if (emit) {
              this.calcGroupXfo();
          }
      }
      /**
       * Removes an item from the group(See `Items` parameter).
       *
       * @param item - The item value.
       * @param emit - The emit value.
       */
      removeItem(item, emit = true) {
          super.removeItem(item, emit);
          if (emit) {
              this.calcGroupXfo();
          }
      }
      /**
       * Sets an entire new array of items to the BaseGroup replacing any previous items.
       *
       * @param items - List of `TreeItem` you want to add to the group
       */
      setItems(items) {
          super.setItems(items); // TODO: originally: super.setItems(emit) -- should emit be done here?
          this.calcGroupXfo();
      }
      /**
       * Removes all items from the group.
       *
       * @param emit - `true` triggers `valueChanged` event.
       */
      clearItems(emit = true) {
          super.clearItems(emit);
          this.memberXfoOps = [];
          if (emit) {
              this.calcGroupXfo();
          }
      }
      // ////////////////////////////////////////
      // Clone
      /**
       * The clone method constructs a new group,
       * copies its values and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned group.
       */
      clone(context) {
          const cloned = new KinematicGroup();
          cloned.copyFrom(this, context);
          return cloned;
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Encodes the current object as a json object.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context) {
          const json = super.toJSON(context);
          json.bindXfo = this.globalXfoOp.bindXfo.toJSON();
          const groupGlobalXfoOperator = this.globalXfoOp;
          json.offsetXfo = groupGlobalXfoOperator.offsetXfo.toJSON();
          return json;
      }
      /**
       * Decodes a json object for this type.
       *
       * @param json - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(json, context) {
          super.fromJSON(json, context);
          const xfo = new Xfo();
          xfo.fromJSON(json.bindXfo);
          const groupGlobalXfoOperator = this.globalXfoOp;
          groupGlobalXfoOperator.setBindXfo(xfo);
          if (json.offsetXfo) {
              groupGlobalXfoOperator.offsetXfo.fromJSON(json.offsetXfo);
          }
      }
  }
  Registry.register('KinematicGroup', KinematicGroup);

  /* eslint-disable no-unused-vars */
  /**
   *
   * **Parameters**
   * * **Material(`MaterialParameter`):** _todo_
   *
   * @extends BaseGroup
   */
  class MaterialGroup extends BaseGroup {
      // TODO: should BaseGroup have the materialParam?
      /**
       * @member materialParam - The Material to use when rendering this GeomItem
       */
      materialParam = new MaterialParameter('Material');
      __backupMaterials = {};
      /**
       * Creates an instance of a group.
       *
       * @param name - The name of the group.
       */
      constructor(name) {
          super(name);
          this.addParameter(this.materialParam);
          this.materialParam.on('valueChanged', () => {
              this.updateMaterial();
          });
      }
      // /////////////////////////////
      /**
       * The updateHighlight method.
       * @private
       */
      updateHighlight() {
          // Make this function async so that we don't pull on the
          // graph immediately when we receive a notification.
          // Note: propagating using an operator would be much better.
          // setTimeout(() => {}, 0)
          // TODO: make this async
          this.updateHighlightHelper();
      }
      /**
       * The updateHighlight method.
       * @private
       */
      updateHighlightHelper() {
          let highlighted = false;
          let color;
          if (this.isSelected()) {
              color = this.getHighlight();
              highlighted = true;
              color.a = 0.2;
          }
          const key = 'kinematicGroupItemHighlight' + this.getId();
          Array.from(this.itemsParam.value).forEach((item) => {
              if (item instanceof TreeItem) {
                  if (highlighted)
                      item.addHighlight(key, color, true);
                  else
                      item.removeHighlight(key, true);
              }
          });
      }
      /**
       * Changes selection's state of the group with all items it owns.
       *
       * @param sel - Boolean indicating the new selection state.
       */
      setSelected(sel) {
          super.setSelected(sel);
          this.updateHighlight();
      }
      // ////////////////////////////////////////
      // Materials
      /**
       * The updateOpacity method.
       */
      updateOpacity() {
          super.updateOpacity();
          Array.from(this.itemsParam.value).forEach((item) => {
              if (item instanceof TreeItem) {
                  item.opacityParam.value = this.opacity;
              }
          });
      }
      /**
       * The updateMaterial method.
       * @private
       */
      updateMaterial() {
          // Make this function async so that we don't pull on the
          // graph immediately when we receive a notification.
          // Note: propagating using an operator would be much better.
          // setTimeout(() => {}, 0)
          // TODO: make async
          this.updateMaterialHelper();
      }
      /**
       * The updateMaterial method.
       * @private
       */
      updateMaterialHelper() {
          const material = this.materialParam.value;
          // TODO: Bind an operator
          Array.from(this.itemsParam.value).forEach((item) => {
              item.traverse((treeItem) => {
                  if (treeItem instanceof BaseGeomItem) {
                      const baseGeomItem = treeItem;
                      const p = baseGeomItem.materialParam;
                      if (material) {
                          const m = p.value;
                          // TODO: How do we filter material assignments? this is a nasty hack.
                          // but else we end up assigning surface materials to our edges.
                          if (m != material && (!m || m.getShaderName() != 'LinesShader')) {
                              this.__backupMaterials[p.getId()] = m;
                              p.value = material;
                          }
                      }
                      else if (this.__backupMaterials[p.getId()]) {
                          p.value = this.__backupMaterials[p.getId()];
                      }
                  }
              });
          });
      }
      // ////////////////////////////////////////
      // Items
      /**
       * The __bindItem method.
       * @param item - The item value.
       * @param index - The index value.
       * @private
       */
      bindItem(item, index) {
          super.bindItem(item, index);
          if (!(item instanceof TreeItem))
              return;
          // ///////////////////////////////
          // Update the highlight
          if (this.isSelected()) {
              const color = this.getHighlight();
              color.a = 0.2;
              const key = 'materialGroupItemHighlight' + this.getId();
              item.addHighlight(key, color, true);
          }
          // ///////////////////////////////
          // Update the Material
          const material = this.materialParam.value;
          if (material) {
              // TODO: Bind an operator instead
              item.traverse((treeItem) => {
                  if (treeItem instanceof BaseGeomItem) {
                      const baseGeomItem = treeItem;
                      const p = baseGeomItem.materialParam;
                      if (material) {
                          const m = p.value;
                          // TODO: How do we filter material assignments? this is a nasty hack.
                          // but else we end up assigning surface materials to our edges.
                          if (m != material && (!m || m.getShaderName() != 'LinesShader')) {
                              this.__backupMaterials[p.getId()] = m;
                              p.value = material;
                          }
                      }
                  }
              }, true);
          }
          item.opacityParam.value = this.opacity;
      }
      /**
       * The unbindItem method.
       * @param item - The item value.
       * @param index - The index value.
       * @private
       */
      unbindItem(item, index) {
          super.unbindItem(item, index);
          if (!(item instanceof TreeItem))
              return;
          if (this.isSelected()) {
              const key = 'materialGroupItemHighlight' + this.getId();
              item.removeHighlight(key, true);
          }
      }
      // ////////////////////////////////////////
      // Clone
      /**
       * The clone method constructs a new group,
       * copies its values and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned group.
       */
      clone(context) {
          const cloned = new MaterialGroup(this.__name + 'clone');
          cloned.copyFrom(this, context);
          return cloned;
      }
  }
  Registry.register('MaterialGroup', MaterialGroup);

  /**
   * An operator that calculates the delta transform of the group since items were bound to it.
   * @extends Operator
   *
   */
  class CuttingPlaneOperator extends Operator {
      groupGlobalXfo = new XfoOperatorInput('GroupGlobalXfo');
      cuttingPlane = new Vec4OperatorOutput('CuttingPlane');
      /**
       * Create a GroupMemberXfoOperator operator.
       * @param groupGlobalXfoParam - The GlobalXfo param found on the Group.
       * @param cuttingPlaneParam - The parameter on the Group which defines the displacement to apply to the members.
       */
      constructor(groupGlobalXfoParam, cuttingPlaneParam) {
          super();
          this.groupGlobalXfo.setParam(groupGlobalXfoParam);
          this.cuttingPlane.setParam(cuttingPlaneParam);
          this.addInput(this.groupGlobalXfo);
          this.addOutput(this.cuttingPlane);
      }
      /**
       * The evaluate method.
       */
      evaluate() {
          const groupGlobalXfo = this.groupGlobalXfo.getValue();
          const vec = groupGlobalXfo.ori.getZaxis();
          const dist = groupGlobalXfo.tr.dot(vec);
          this.cuttingPlane.setClean(new Vec4(vec.x, vec.y, vec.z, -dist));
      }
  }

  /* eslint-disable no-unused-vars */
  /**
   * Groups are a special type of `BaseGroup` that allows you to gather/classify/organize/modify
   * multiple items contained within the group. Items can be added to the group directly, or using
   * its path.
   * All parameters set to the group are also set to the children; in other words, it's a faster way
   * to apply common things to multiple items.
   *
   * **Parameters**
   * * **CutAwayEnabled(`BooleanParameter`):** _todo_
   * * **CutPlaneNormal(`Vec3Parameter`):** _todo_
   * * **CutPlaneDist(`NumberParameter`):** _todo_
   *
   * @extends BaseGroup
   */
  class CuttingPlane extends BaseGroup {
      cutPlaneOp;
      cutAwayEnabledParam = new BooleanParameter('CutAwayEnabled', false);
      cutPlaneParam = new Vec4Parameter('CutPlane', new Vec4(1, 0, 0));
      /**
       * Creates an instance of a group.
       *
       * @param name - The name of the group.
       */
      constructor(name = '') {
          super(name);
          this.addParameter(this.cutAwayEnabledParam);
          this.addParameter(this.cutPlaneParam);
          this.cutPlaneOp = new CuttingPlaneOperator(this.globalXfoParam, this.cutPlaneParam);
          this.cutAwayEnabledParam.on('valueChanged', (event) => {
              this.updateCutaway(event);
          });
          this.cutPlaneParam.on('valueChanged', (event) => {
              this.updateCutaway(event);
          });
          // Create the geometry to display the plane.
          const material = new Material('plane', 'FlatSurfaceShader');
          material.getParameter('BaseColor').value = new Color(1, 1, 1, 0.2);
          const plane = new GeomItem(`PlaneGeom`, new Plane(1, 1), material);
          plane.setSelectable(false);
          this.addChild(plane);
          const borderMaterial = new Material('border', 'LinesShader');
          borderMaterial.getParameter('BaseColor').value = new Color(1, 0, 0, 1);
          const border = new GeomItem(`BorderGeom`, new Rect(1, 1), borderMaterial);
          border.setSelectable(false);
          this.addChild(border);
      }
      // ////////////////////////////////////////
      // Cutaways
      /**
       * The updateCutaway method.
       * @param item - The item in the group.
       * @private
       */
      updateCutaway(item) {
          // Make this function async so that we don't pull on the
          // graph immediately when we receive a notification.
          // Note: making this async broke the tests.
          // Note: propagating using an operator would be much better.
          // setTimeout(() => {
          const cutEnabled = this.cutAwayEnabledParam.value;
          const cutPlane = this.cutPlaneParam.value;
          const cutAwayVector = cutPlane.xyz;
          const cutAwayDist = cutPlane.w;
          if (item instanceof BaseGeomItem) {
              item.setCutawayEnabled(cutEnabled);
              item.setCutVector(cutAwayVector);
              item.setCutDist(cutAwayDist);
          }
          else {
              Array.from(this.itemsParam.value).forEach((item) => {
                  item.traverse((item) => {
                      if (item instanceof BaseGeomItem) {
                          item.setCutawayEnabled(cutEnabled);
                          item.setCutVector(cutAwayVector);
                          item.setCutDist(cutAwayDist);
                      }
                  }, true);
              });
          }
          // }, 0)
      }
      // ////////////////////////////////////////
      // Items
      /**
       * The __bindItem method.
       * @param item - The item value.
       * @param index - The index value.
       * @private
       */
      bindItem(item, index) {
          if (!(item instanceof TreeItem))
              return;
          // ///////////////////////////////
          // Update the item cutaway
          const cutEnabled = this.cutAwayEnabledParam.value;
          if (cutEnabled) {
              this.updateCutaway(item);
          }
          const bbox = new Box3();
          // const xfo = this.globalXfoParam.value
          // const invxfo = xfo.inverse()
          Array.from(this.itemsParam.value).forEach((item) => {
              if (item instanceof TreeItem) {
                  // const itemxfo = invxfo.multiply(item.globalXfoParam.value)
                  // bbox.addBox3(item.boundingBoxParam.value, itemxfo.toMat4())
                  bbox.addBox3(item.boundingBoxParam.value);
              }
          });
          {
              const sizex = bbox.p1.x - bbox.p0.x;
              const sizey = bbox.p1.y - bbox.p0.y;
              const xfo = new Xfo();
              xfo.sc.set(sizex, sizey, 1);
              this.getChild(0).localXfoParam.value = xfo;
              this.getChild(1).localXfoParam.value = xfo;
          }
      }
      /**
       * The unbindItem method.
       * @param item - The item value.
       * @param index - The index value.
       * @private
       */
      unbindItem(item, index) {
          if (!(item instanceof TreeItem))
              return;
          // ///////////////////////////////
          // Update the item cutaway
          item.traverse((treeItem) => {
              if (treeItem instanceof BaseGeomItem) {
                  treeItem.setCutawayEnabled(false);
              }
          }, true);
      }
      // ////////////////////////////////////////
      // Clone
      /**
       * The clone method constructs a new group,
       * copies its values and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned group.
       */
      clone(context) {
          const cloned = new CuttingPlane();
          cloned.copyFrom(this, context);
          return cloned;
      }
  }
  Registry.register('CuttingPlane', CuttingPlane);

  /**
   * Given a units string, load returns a factor relative to meters
   * e.g. for Millimeters, returns 0.001, for Meters, returns 1.0
   * Given 2 different units, the factors are combined together to calculate the conversion between the 2 units.
   * @param units the name of the units value for the load context.
   * Supports: ['millimeters', 'centimeters', 'decimeters', 'meters', 'kilometers', 'inches', 'feet', 'miles']
   * @return Returns the factor relative to meters.
   */
  const getUnitsFactor = (units) => {
      switch (units.toLowerCase()) {
          case 'millimeters':
              return 0.001;
          case 'centimeters':
              return 0.01;
          case 'decimeters':
              return 0.1;
          case 'meters':
              return 1.0;
          case 'kilometers':
              return 1000.0;
          case 'inches':
              return 0.0254;
          case 'feet':
              return 0.3048;
          case 'miles':
              return 1609.34;
      }
      return 1.0;
  };

  /**
   * Represents a TreeItem with rendering and material capabilities.
   *
   * @extends TreeItem
   */
  class AssetItem extends TreeItem {
      geomLibrary = new GeomLibrary(this);
      materialLibrary = new MaterialLibrary(this);
      loaded = false;
      engineDataVersion;
      unitsScale = 1.0;
      units = 'meters';
      /**
       * Create an asset item.
       * @param name - The name of the asset item.
       */
      constructor(name = '') {
          super(name);
      }
      /**
       * Loads all the geometries and metadata from the asset file.
       * @param url - The URL of the asset to load
       * @return - Returns a promise that resolves once the initial load is complete
       */
      load(url) {
          return Promise.reject(`This method is not implemented for this Asset Item: ${url}`);
      }
      /**
       * Returns the loaded status of current item.
       *
       * @return - Returns true if the asset has already loaded its data.
       */
      isLoaded() {
          return this.loaded;
      }
      /**
       * Returns the zea engine version as an array with major, minor, patch order.
       *
       * @return - The return value.
       */
      getEngineDataVersion() {
          return this.engineDataVersion;
      }
      /**
       * Returns asset `GeomLibrary` that is in charge of rendering geometry data using workers.
       *
       * @return - The return value.
       */
      getGeometryLibrary() {
          return this.geomLibrary;
      }
      /**
       * Returns `MaterialLibrary` that is in charge of storing all materials of current Item.
       *
       * @return - The return value.
       */
      getMaterialLibrary() {
          return this.materialLibrary;
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * The readBinary method.
       * @param reader - The reader value.
       * @param context - The context value.
       */
      readBinary(reader, context) {
          context.assetItem = this;
          if (!context.units)
              context.units = 'meters';
          if (!context.versions['zea-engine']) {
              context.versions['zea-engine'] = new Version(reader.loadStr());
          }
          this.engineDataVersion = context.versions['zea-engine'];
          // console.log('Loading file version:', this.engineDataVersion.toString(), ' generated using :', context.sdk)
          const loadUnits = () => {
              this.units = reader.loadStr();
              // console.log('File units:', this.units)
              // Add this param so it is displayed in the CADViewer.
              this.addParameter(new StringParameter('FileUnits', this.units));
              // Calculate a scale factor to convert
              // the asset units to the units of the context we are loading in.
              if (this.units != context.units) {
                  const unitsFactor = getUnitsFactor(this.units);
                  const contextUnitsFactor = getUnitsFactor(context.units);
                  this.unitsScale = unitsFactor / contextUnitsFactor;
              }
              // The context propagates the new units to children assets.
              // This means that a child asset applies a unitsScale relative to this asset.
              context.units = this.units;
              // Apply units change to existing Xfo (avoid changing tr).
              const localXfoParam = this.localXfoParam;
              const xfo = localXfoParam.value;
              xfo.sc.scaleInPlace(this.unitsScale);
              localXfoParam.value = xfo;
          };
          if (context.versions['zea-engine'].compare([0, 0, 6]) > 0) {
              // Loading units modifies our Xfo, which then propagates up
              // the tree forcing a re-computation. Better just do it at
              // the start.
              loadUnits();
          }
          let layerRoot;
          const layers = {};
          context.addGeomToLayer = (geomItem, layer) => {
              if (!layers[layer]) {
                  if (!layerRoot) {
                      layerRoot = new TreeItem('Layers');
                      this.addChild(layerRoot, false);
                  }
                  const group = new BaseGroup(layer);
                  layerRoot.addChild(group, false);
                  layers[layer] = group;
              }
              layers[layer].addItem(geomItem);
          };
          this.materialLibrary.readBinary(reader, context);
          super.readBinary(reader, context);
          if (context.versions['zea-engine'].compare([0, 0, 5]) >= 0 &&
              context.versions['zea-engine'].compare([0, 0, 7]) < 0) {
              loadUnits();
          }
          // Invoke all the post-load callbacks to resolve any
          // remaining references.
          context.resolvePLCBs();
          this.loaded = true;
      }
      /** Checks if this item or its subtree have finished loading their geometries. */
      haveGeomsLoaded() {
          if (!this.geomLibrary.isLoaded())
              return false;
          let result = true;
          this.traverse((item) => {
              if (item instanceof AssetItem) {
                  if (!item.haveGeomsLoaded()) {
                      result = false;
                  }
                  // Stop the depth first traversal at each AsseItem, as the
                  // 'haveGeomsLoaded' call has already recursivly checked that subtree.
                  return false;
              }
              // As soon as we have one false value, we can stop traversal
              return result;
          }, false);
          return result;
      }
      /**
       * The toJSON method encodes this type as a json object for persistence.
       *
       * @param context - The context value.
       * @return - Returns the json object.
       */
      toJSON(context = {}) {
          context.makeRelative = (path) => {
              const assetPath = this.getPath();
              const start = path.slice(0, assetPath.length);
              for (let i = 0; i < start.length - 1; i++) {
                  if (start[i] != assetPath[i]) {
                      console.warn('Param Path is not relative to the asset. May not be able to be resolved at load time:' + path);
                      return path;
                  }
              }
              // Relative paths start with a symbol for the root element.
              const relativePath = path.slice(assetPath.length - 1);
              relativePath[0] = '.';
              return relativePath;
          };
          context.assetItem = this;
          const j = super.toJSON(context);
          j.materialLibrary = this.materialLibrary.toJSON();
          return j;
      }
      /**
       * The fromJSON method decodes a json object for this type.
       *
       * @param j - The json object this item must decode.
       * @param context - The context value.
       */
      fromJSON(j, context = new AssetLoadContext()) {
          context.assetItem = this;
          this.materialLibrary.fromJSON(j.materialLibrary, context);
          super.fromJSON(j, context);
          // Invoke all the post-load callbacks to resolve any
          // remaining references.
          context.resolvePLCBs();
      }
      // ////////////////////////////////////////
      // Clone and Destroy
      /**
       * The clone method constructs a new tree item, copies its values
       * from this item and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned tree item.
       */
      clone(context) {
          const cloned = new AssetItem();
          cloned.copyFrom(this, context);
          return cloned;
      }
      /**
       * Copies current TreeItem with all its children.
       *
       * @param src - The tree item to copy from.
       * @param context - The context value.
       */
      copyFrom(src, context) {
          this.geomLibrary = src.geomLibrary;
          this.materialLibrary = src.materialLibrary;
          this.units = src.units;
          super.copyFrom(src, context);
          this.loaded = src.loaded;
          if (!src.loaded) {
              src.once('loaded', () => {
                  this.units = src.units;
                  const srcLocalXfo = src.localXfoParam.value;
                  const localXfo = this.localXfoParam.value;
                  localXfo.sc = srcLocalXfo.sc.clone();
                  this.localXfoParam.value = localXfo;
                  // Note: An XRef stored in an assembly may contain a cache of its subtree.
                  // If the XRef url does resolve to a file, we must clear this cache before loading the actual data.
                  this.removeAllChildren();
                  src.getChildren().forEach((srcChildItem) => {
                      this.addChild(srcChildItem.clone(context), false, false);
                  });
                  this.loaded = true;
                  this.emit('loaded');
                  // We cn only determine if the geoms are loaded, after the initial tree is loaded.
                  // As we clone a subtree that may contain asset items. (happens when loading XRefs)
                  // The cloned tree needs to emit events when the source tree emits its events.
                  if (!src.haveGeomsLoaded()) {
                      src.once('geomsLoaded', () => this.emit('geomsLoaded'));
                  }
                  else {
                      this.emit('geomsLoaded');
                  }
              });
          }
          else {
              this.emit('loaded');
              if (!src.haveGeomsLoaded()) {
                  src.once('geomsLoaded', () => this.emit('geomsLoaded'));
              }
              else {
                  this.emit('geomsLoaded');
              }
          }
      }
  }
  Registry.register('AssetItem', AssetItem);

  /**
   * A special type of TreeItem(Item with hierarchical abilities) class that represents a banner in a 2D dimension.
   * Can own any type of `BaseImage`.
   * **Parameters**
   * * **Image(`ImageParameter`):** Is the BaseImage you want to display on the board.
   * * **PixelsPerMeter(`NumberParameter`):** Quality and Size of the board. The bigger the number, the smaller the board.
   * * **Alpha(`NumberParameter`):** Transparency of the board, from 0 to 1.
   * * **AlignedToCamera(`BooleanParameter`):** Faces or not the board to the camera at all time(Moves with camera movement).
   * * **DrawOnTop(`BooleanParameter`):** The billboards are rendered overlaid on the scene.
   * * **FixedSizeOnscreen(`BooleanParameter`):** The billboards are rendered at a fixed size on screen, regardless of the distance to the billboard.
   *
   * @extends TreeItem
   */
  class BillboardItem extends TreeItem {
      /**
       * Creates a billboard item.
       *
       * @param name - The name of the billboard item.
       * @param image - The image value.
       */
      /**
       * @member imageParam - Is the BaseImage you want to display on the board.
       */
      imageParam = new ImageParameter('Image');
      /**
       * @member pixelsPerMeterParam - Quality and Size of the board. The bigger the number, the smaller the board.
       */
      pixelsPerMeterParam = new NumberParameter('PixelsPerMeter', 1000.0);
      /**
       * @member alphaParam - Transparency of the board, from 0 to 1.
       */
      alphaParam = new NumberParameter('Alpha', 1.0);
      /**
       * @member colorParam - The color of the billboard
       */
      colorParam = new ColorParameter('Color', new Color(1.0, 1.0, 1.0));
      /**
       * @member alignedToCameraParam - Faces or not the board to the camera at all time(Moves with camera movement).
       */
      alignedToCameraParam = new BooleanParameter('AlignedToCamera', false);
      /**
       * @member drawOnTopParam - The billboards are rendered overlaid on the scene.
       */
      drawOnTopParam = new BooleanParameter('DrawOnTop', false);
      /**
       * @member fixedSizeOnscreenParam - The billboards are rendered at a fixed size on screen, regardless of the distance to the billboard.
       */
      fixedSizeOnscreenParam = new BooleanParameter('FixedSizeOnscreen', false);
      /**
       * @member pivotParam - Where the pivot of the billboard is.
       */
      pivotParam = new Vec2Parameter('Pivot', new Vec2(0.5, 0.0));
      constructor(name, image) {
          super(name);
          const imageParamResult = this.addParameter(this.imageParam);
          if (image)
              imageParamResult.value = image; // Note: this dirties the param and will ensure it is saved to JSON
          this.addParameter(this.pixelsPerMeterParam);
          this.addParameter(this.alphaParam);
          this.addParameter(this.colorParam);
          this.addParameter(this.alignedToCameraParam);
          this.addParameter(this.drawOnTopParam);
          this.addParameter(this.fixedSizeOnscreenParam);
          this.addParameter(this.pivotParam);
      }
  }
  Registry.register('BillboardItem', BillboardItem);

  /* eslint-disable no-unused-vars */
  /**
   * The Camera class is used to provide a point of view of the scene. The viewport is assigned
   * a camera, which is uses during drawing. The camera controls the view and projection used to
   * render the scene.
   *
   * Cameras can provide a perspective projection, or an orthographic projection, and anything in between.
   * To configure whether th projection provided by the camera is Orthographic or Perspective, set
   * the value of the 'isOrthographic' Parameter to a value between 0 and 1. 0.0 being fully perspective
   * and 1.0 being fully Orthographic.
   * Alternatively, you can call camera.setIsOrthographic and pass the value, and a time in milliseconds to
   * take to transition between the current value and your new value.
   * ```javascript
   *   camera.setIsOrthographic(1, 400);
   * ```
   *
   * By default, the Camera automatically adjusts the near and far planes as the focal distance is modified. This
   * behavior can be disabled, by setting the adjustNearAndFarPlanesToFocalDist property to false.
   * Alternatively, you can also adjust the factors that are used to modify the near and far plane based on the
   * focal distance.
   * ```javascript
   *   camera.adjustNearAndFarPlanesToFocalDist = true
   *   camera.nearDistFactor = 0.01
   *   camera.farDistFactor = 5
   * ```
   *
   * **Parameters**
   * * **isOrthographic(`NumberParameter`):** Controls the projection matrix generated by the camera. A value of 0.0, means a perspective projection, while 1 an orthographic projection. Any value in between generates a blended perspective -> orthographic projection.
   * * **fov(`NumberParameter`):** The vertical angle of the view frustum when generating a perspective projection. In orthographic mode, this value is used to calculate the size of the view at the target distance.
   * * **near(`NumberParameter`):** The near clipping distance of the camera.
   * * **far(`NumberParameter`):** The far clipping distance of the camera.
   * * **focalDistance(`NumberParameter`):** The distance at which the camera is focussed. Note: the CameraManipulator sets the focal distance when zooming in on a target.
   *
   * **Events**
   * * **projectionParamChanged:** When on of the parameters above change, the camera emits this event. Note: the Viewport listens to this event and triggers re-rendering.
   * * **movementFinished:** Triggered at the conclusion of some action. E.g. when a zoom action is finished, or when the mouse is released after an orbit action. The viewport listens to this event and triggers a re-rendering of the selection buffers.
   *
   * @extends TreeItem
   */
  class Camera extends TreeItem {
      isOrthographicParam = new NumberParameter('isOrthographic', 0.0);
      fovParam = new NumberParameter('fov', 1.0);
      nearParam = new NumberParameter('near', 0.1);
      farParam = new NumberParameter('far', 1000.0);
      focalDistanceParam = new NumberParameter('focalDistance', 5.0);
      // Controls whether the camera automatically adjusts the near and far planes
      // as the focal distance changes. Set to false to explicitly control the near
      // and far planes.
      adjustNearAndFarPlanesToFocalDist = true;
      // The factor by which the near plane is adjusted based on the focal distance.
      nearDistFactor = 0.01;
      // The factor by which the far plane is adjusted based on the focal distance.
      farDistFactor = 100;
      frameOnBoundingSphere = false;
      viewHeight = 0;
      intervalId = -1;
      /**
       * Instantiates a camera object, setting default configuration like zoom, target and positioning.
       *
       * @param name - The name of the camera.
       */
      constructor(name = 'Camera') {
          super(name);
          this.addParameter(this.isOrthographicParam);
          this.addParameter(this.fovParam);
          this.addParameter(this.nearParam);
          this.addParameter(this.farParam);
          this.addParameter(this.focalDistanceParam);
          const emitProjChanged = (event) => {
              this.emit('projectionParamChanged', event);
          };
          this.isOrthographicParam.on('valueChanged', emitProjChanged);
          this.fovParam.on('valueChanged', emitProjChanged);
          this.nearParam.on('valueChanged', emitProjChanged);
          this.farParam.on('valueChanged', emitProjChanged);
          // Initial viewing coords of a person standing 3 meters away from the
          // center of the stage looking at something 1 meter off the ground.
          this.setPositionAndTarget(new Vec3(3, 3, 1.75), new Vec3(0, 0, 1));
          this.setLensFocalLength('28mm');
      }
      // ////////////////////////////////////////////
      // Getters/setters.
      /**
       * Returns `near` parameter value.
       *
       * @return - Returns the near value.
       */
      getNear() {
          return this.nearParam.value;
      }
      /**
       * Sets `near` parameter value
       *
       * @param value - The near value.
       */
      setNear(value) {
          this.nearParam.value = value;
      }
      /**
       * Returns `far` parameter value.
       *
       * @return - Returns the far value.
       */
      getFar() {
          return this.farParam.value;
      }
      /**
       * Sets `far` parameter value
       *
       * @param value - The far value.
       */
      setFar(value) {
          this.farParam.value = value;
      }
      /**
       * Getter for the camera field of view (FOV).
       * The FOV defines the vertical angle of the view frustum
       * The horizontal angle is calculated from the FOV and the Viewport aspect ratio.
       *
       * @return - Returns the FOV value.
       */
      getFov() {
          return this.fovParam.value;
      }
      /**
       * Setter for the camera field of view (FOV).
       * The FOV defines the vertical angle of the view frustum
       * The horizontal angle is calculated from the FOV and the Viewport aspect ratio.
       * > Note: The Fov can also be set by calling #setLensFocalLength
       *
       * @param value - The new FOV value.
       */
      setFov(value) {
          this.fovParam.value = value;
      }
      /**
       * Getter for the camera frustum height value.
       * The frustum hight value is used to compute the orthographic projection of the scene.
       *
       * @return - Returns the Frustum Height value.
       */
      getFrustumHeight() {
          return this.viewHeight;
      }
      /**
       * Setter for the camera frustum height in orthographic mode.
       * > Note: in perspective mode, the frustum height is calculated based on the FOV value and focal distance.
       *
       * @param value - The new Frustum Height value.
       */
      setFrustumHeight(value) {
          this.viewHeight = value;
          this.emit('projectionParamChanged');
      }
      /**
       * Setter for the camera lens focal length. This method calculates a new vertical Field of View value
       * from the provided camera lense focal length.
       * > Note: conversion from Lense Focal length to Fov is based on the table found here: https://www.nikonians.org/reviews/fov-tables
       *
       * **Focal Length accepted values as string values:** 10mm, 11mm, 12mm, 14mm, 15mm, 17mm, 18mm,
       * 19mm, 20mm, 24mm, 28mm, 30mm, 35mm, 45mm, 50mm, 55mm, 60mm, 70mm, 75mm, 80mm,
       * 85mm, 90mm, 100mm, 105mm, 120mm, 125mm, 135mm, 150mm, 170mm, 180mm, 210mm, 300mm,
       * 400mm, 500mm, 600mm, 800mm
       *
       * @param value - The lens focal length value.
       */
      setLensFocalLength(value) {
          // https://www.nikonians.org/reviews/fov-tables
          const mapping = {
              '10mm': 100.4,
              '11mm': 95.0,
              '12mm': 90.0,
              '14mm': 81.2,
              '15mm': 77.3,
              '17mm': 70.4,
              '18mm': 67.4,
              '19mm': 64.6,
              '20mm': 61.9,
              '24mm': 53.1,
              '28mm': 46.4,
              '30mm': 43.6,
              '35mm': 37.8,
              '45mm': 29.9,
              '50mm': 27.0,
              '55mm': 24.6,
              '60mm': 22.6,
              '70mm': 19.5,
              '75mm': 18.2,
              '80mm': 17.1,
              '85mm': 16.1,
              '90mm': 15.2,
              '100mm': 13.7,
              '105mm': 13.0,
              '120mm': 11.4,
              '125mm': 11.0,
              '135mm': 10.2,
              '150mm': 9.1,
              '170mm': 8.1,
              '180mm': 7.6,
              '210mm': 6.5,
              '300mm': 4.6,
              '400mm': 3.4,
              '500mm': 2.7,
              '600mm': 2.3,
              '800mm': 1.7,
          };
          if (!(value in mapping)) {
              console.warn('Camera lense focal length not supported:' + value);
              return;
          }
          this.fovParam.value = MathFunctions.degToRad(mapping[value]);
      }
      /**
       * Returns `focalDistance` parameter value.
       *
       * @return - Returns the lens focal length value..
       */
      getFocalDistance() {
          return this.focalDistanceParam.value;
      }
      /**
       * Sets `focalDistance` parameter value.
       *
       * @errors on dist value lower or less than zero.
       * @param dist - The focal distance value.
       */
      setFocalDistance(dist) {
          if (dist < 0.0001)
              console.error('Never set focal distance to zero');
          this.focalDistanceParam.value = dist;
          if (this.adjustNearAndFarPlanesToFocalDist) {
              this.nearParam.value = dist * this.nearDistFactor;
              this.farParam.value = dist * this.farDistFactor;
          }
      }
      /**
       * Returns true if the camera is providing an orthographic projection.
       * @return - true if orthographic else false
       */
      isOrthographic() {
          return this.isOrthographicParam.value == 1.0;
      }
      /**
       * Sets the camera to be orthographic. The value can be between 0, and 1.
       * A value of 0 means fully perspective. A value of 1 means fully orthographic.
       * Any value in between produces a linear interpolation of perspective and orthographic.
       *
       * @param value - The value param.
       * @param duration - The duration in milliseconds to change the projection.
       */
      setIsOrthographic(value, duration = 0) {
          if (this.intervalId)
              clearInterval(this.intervalId);
          if (value > 0.5) {
              const fov = this.fovParam.value;
              const focalDistance = this.focalDistanceParam.value;
              this.viewHeight = Math.sin(fov * 0.5) * focalDistance * 2;
          }
          if (duration == 0) {
              this.isOrthographicParam.value = value;
          }
          else {
              const count = Math.round(duration / 20); // each step is 20ms
              let i = 0;
              const prevValue = this.isOrthographicParam.value;
              const applyMovement = () => {
                  i++;
                  const lerpValue = MathFunctions.lerp(prevValue, value, i / count);
                  this.isOrthographicParam.value = lerpValue;
                  if (i < count) {
                      this.intervalId = window.setTimeout(applyMovement, 20);
                  }
                  else {
                      this.intervalId = -1;
                      this.emit('movementFinished');
                  }
              };
              applyMovement();
          }
      }
      /**
       * Setter for the camera position and target.
       * As described at the start of the class, this is a `TreeItem`,
       * which means we can move it around using translation modifiers.
       * You can do it this way or using the changing `TreeItem` parameters,
       * although we recommend this one because it also changes focal distance.
       *
       * @param position - The position of the camera.
       * @param target - The target of the camera.
       */
      setPositionAndTarget(position, target) {
          this.setFocalDistance(position.distanceTo(target));
          const xfo = new Xfo();
          xfo.setLookAt(position, target, new Vec3(0.0, 0.0, 1.0));
          this.globalXfoParam.value = xfo;
          this.emit('movementFinished');
      }
      /**
       * Getter for the target position.
       * @return - Returns the target position.
       */
      getTargetPosition() {
          const focalDistance = this.focalDistanceParam.value;
          const xfo = this.globalXfoParam.value;
          const target = xfo.ori.getZaxis();
          target.scaleInPlace(-focalDistance);
          target.addInPlace(xfo.tr);
          return target;
      }
      // ///////////////////////////
      /**
       * Calculates a new camera position that frames all the items passed in `treeItems` array, moving
       * the camera to a point where we can see all of them.
       *
       * @param viewport - The viewport value.
       * @param treeItems - The treeItems value.
       * @param duration - The duration of time to apply the frame. A value of 0 specifies an instantaneous movement of the camera.
       * @param frameBorder - The variable to use to provide an empty space around the border for geometries.
       */
      frameView(viewport, treeItems, duration = 0, frameBorder = 0.1) {
          const focalDistance = this.focalDistanceParam.value;
          const fovY = this.fovParam.value;
          const newGlobalXfo = this.globalXfoParam.value.clone();
          const aspectRatio = viewport.getWidth() / viewport.getHeight();
          const fovX = Math.atan(Math.tan(fovY * 0.5) * aspectRatio) * 2.0;
          let newFocalDistance = focalDistance;
          if (this.frameOnBoundingSphere) {
              const box3 = new Box3();
              for (const treeItem of treeItems) {
                  box3.addBox3(treeItem.boundingBoxParam.value);
              }
              if (!box3.isValid()) {
                  console.warn('Bounding box not valid.');
                  return;
              }
              const cameraViewVec = newGlobalXfo.ori.getZaxis();
              const targetOffset = cameraViewVec.scale(-focalDistance);
              const currTarget = newGlobalXfo.tr.add(targetOffset);
              const newTarget = box3.center();
              const pan = newTarget.subtract(currTarget);
              newGlobalXfo.tr.addInPlace(pan);
              // Compute the distance the camera should be to fit the entire bounding sphere
              newFocalDistance = box3.size() / Math.tan(fovY);
              // const dollyDist = newFocalDistance - focalDistance
              // newGlobalXfo.tr.addInPlace(cameraViewVec.scale(dollyDist))
          }
          else {
              // Based on the solution described here:
              // https://stackoverflow.com/a/66113254/5546902
              const boundaryPoints = [];
              {
                  treeItems.forEach((treeItem) => {
                      treeItem.traverse((childItem) => {
                          // Stop traversal when we hig an item with a disabled bounding box
                          // or non-tree item.
                          if (!(childItem instanceof TreeItem))
                              return false;
                          if (childItem.disableBoundingBox)
                              return false;
                          if (!childItem.isVisible() || !childItem.isSelectable())
                              return false;
                          if (childItem instanceof GeomItem) {
                              const geom = childItem.geomParam.value;
                              if (geom) {
                                  const box3 = geom.getBoundingBox();
                                  if (box3.isValid()) {
                                      const mat4 = childItem.geomMatParam.value;
                                      boundaryPoints.push(mat4.transformVec3(box3.p0));
                                      boundaryPoints.push(mat4.transformVec3(new Vec3(box3.p0.x, box3.p0.y, box3.p1.z)));
                                      boundaryPoints.push(mat4.transformVec3(new Vec3(box3.p0.x, box3.p1.y, box3.p0.z)));
                                      boundaryPoints.push(mat4.transformVec3(new Vec3(box3.p1.x, box3.p0.y, box3.p0.z)));
                                      boundaryPoints.push(mat4.transformVec3(new Vec3(box3.p0.x, box3.p1.y, box3.p1.z)));
                                      boundaryPoints.push(mat4.transformVec3(new Vec3(box3.p1.x, box3.p0.y, box3.p1.z)));
                                      boundaryPoints.push(mat4.transformVec3(new Vec3(box3.p1.x, box3.p1.y, box3.p0.z)));
                                      boundaryPoints.push(mat4.transformVec3(box3.p1));
                                      return;
                                  }
                              }
                          }
                          if (childItem.getNumChildren() == 0) {
                              const box3 = childItem.boundingBoxParam.value;
                              if (box3.isValid()) {
                                  // Note: passing box3.p0 into boundaryPoints caused corruption later on.
                                  // I could not figure out how/why, but by constructing a new vector here,
                                  // we avoid the problem.
                                  boundaryPoints.push(new Vec3(box3.p0.x, box3.p0.y, box3.p0.z));
                                  boundaryPoints.push(new Vec3(box3.p0.x, box3.p0.y, box3.p1.z));
                                  boundaryPoints.push(new Vec3(box3.p0.x, box3.p1.y, box3.p0.z));
                                  boundaryPoints.push(new Vec3(box3.p1.x, box3.p0.y, box3.p0.z));
                                  boundaryPoints.push(new Vec3(box3.p0.x, box3.p1.y, box3.p1.z));
                                  boundaryPoints.push(new Vec3(box3.p1.x, box3.p0.y, box3.p1.z));
                                  boundaryPoints.push(new Vec3(box3.p1.x, box3.p1.y, box3.p0.z));
                                  boundaryPoints.push(new Vec3(box3.p1.x, box3.p1.y, box3.p1.z));
                                  return;
                              }
                          }
                      });
                  });
              }
              if (boundaryPoints.length == 0)
                  return;
              const angleX = this.isOrthographic() ? 0 : fovX / 2;
              const angleY = this.isOrthographic() ? 0 : fovY / 2;
              const frustumPlaneNormals = {};
              frustumPlaneNormals.XPos = new Vec3(Math.cos(angleX), 0, Math.sin(angleX));
              frustumPlaneNormals.XNeg = new Vec3(-Math.cos(angleX), 0, Math.sin(angleX));
              frustumPlaneNormals.YPos = new Vec3(0, Math.cos(angleY), Math.sin(angleY));
              frustumPlaneNormals.YNeg = new Vec3(0, -Math.cos(angleY), Math.sin(angleY));
              frustumPlaneNormals.ZPos = new Vec3(0, 0, 1);
              frustumPlaneNormals.ZNeg = new Vec3(0, 0, -1);
              const frustumPlaneNormalsWs = {};
              const frustumPlaneOffsets = {};
              // eslint-disable-next-line guard-for-in
              for (const key in frustumPlaneNormals) {
                  frustumPlaneNormalsWs[key] = newGlobalXfo.ori.rotateVec3(frustumPlaneNormals[key]);
                  frustumPlaneOffsets[key] = Number.NEGATIVE_INFINITY;
              }
              const centroid = new Vec3();
              boundaryPoints.forEach((point, index) => {
                  // Previously we had corrupt values coming through there. That is fixed,
                  // but just in case, we filter them out again here.
                  if (!Number.isFinite(point.x) || !Number.isFinite(point.y) || !Number.isFinite(point.z)) {
                      return;
                  }
                  const delta = point.subtract(newGlobalXfo.tr);
                  // eslint-disable-next-line guard-for-in
                  for (const key in frustumPlaneNormals) {
                      const planeOffset = delta.dot(frustumPlaneNormalsWs[key]);
                      if (planeOffset > frustumPlaneOffsets[key] && planeOffset != Number.POSITIVE_INFINITY) {
                          frustumPlaneOffsets[key] = planeOffset;
                      }
                  }
                  centroid.addInPlace(point);
              });
              // eslint-disable-next-line guard-for-in
              // Check for invalid planes.
              for (const key in frustumPlaneOffsets) {
                  if (frustumPlaneOffsets[key] == Number.POSITIVE_INFINITY)
                      return;
              }
              centroid.scaleInPlace(1 / boundaryPoints.length);
              let dolly = 0;
              if (this.isOrthographic()) {
                  const pan = new Vec3((-frustumPlaneOffsets.XNeg + frustumPlaneOffsets.XPos) * 0.5, (-frustumPlaneOffsets.YNeg + frustumPlaneOffsets.YPos) * 0.5, (-frustumPlaneOffsets.ZNeg + frustumPlaneOffsets.ZPos) * 0.5);
                  // Move the camera back by 2x the depth range of the scene.
                  const zrange = frustumPlaneOffsets.ZNeg + frustumPlaneOffsets.ZPos;
                  dolly = zrange * 2;
                  pan.z = -frustumPlaneOffsets.ZNeg + dolly;
                  newGlobalXfo.tr.addInPlace(newGlobalXfo.ori.rotateVec3(pan));
                  newFocalDistance = zrange * 2;
                  const viewWidth = frustumPlaneOffsets.XPos + frustumPlaneOffsets.XNeg;
                  const viewHeight = frustumPlaneOffsets.YPos + frustumPlaneOffsets.YNeg;
                  this.viewHeight = Math.max(viewHeight, viewWidth / aspectRatio);
                  this.viewHeight += this.viewHeight * frameBorder;
              }
              else {
                  const angleX = fovX / 2;
                  const angleY = fovY / 2;
                  // Now we solve the problem in 2D. For each camera plane (XZ and YZ), we calculate the lines in 2d that
                  // represent the frustum planes for the top and bottom, adjusted so they touch the boundary points. We
                  // then find the intersection of these 2 2d lines to calculate the adjustment in that axis for the camera.
                  // We need to dolly back to fix the plane which needs the most adjustment.
                  // Calculate a 2d point on the line for each plane, and a direction.
                  const xP0 = new Vec2(Math.cos(angleX) * frustumPlaneOffsets.XPos, Math.sin(angleX) * frustumPlaneOffsets.XPos);
                  const xP1 = xP0.add(new Vec2(Math.sin(angleX), -Math.cos(angleX)));
                  const xP2 = new Vec2(-Math.cos(angleX) * frustumPlaneOffsets.XNeg, Math.sin(angleX) * frustumPlaneOffsets.XNeg);
                  const xP3 = xP2.add(new Vec2(-Math.sin(angleX), -Math.cos(angleX)));
                  const xP = Vec2.intersectionOfLines(xP0, xP1, xP2, xP3);
                  const yP0 = new Vec2(Math.cos(angleY) * frustumPlaneOffsets.YPos, Math.sin(angleY) * frustumPlaneOffsets.YPos);
                  const yP1 = yP0.add(new Vec2(Math.sin(angleY), -Math.cos(angleY)));
                  const yP2 = new Vec2(-Math.cos(angleY) * frustumPlaneOffsets.YNeg, Math.sin(angleY) * frustumPlaneOffsets.YNeg);
                  const yP3 = yP2.add(new Vec2(-Math.sin(angleY), -Math.cos(angleY)));
                  const yP = Vec2.intersectionOfLines(yP0, yP1, yP2, yP3);
                  if (xP === null || yP === null) {
                      console.warn('xP or yP === null');
                      return;
                  }
                  dolly = Math.max(xP.y, yP.y);
                  const pan = new Vec3(xP.x, yP.x, dolly);
                  newGlobalXfo.tr.addInPlace(newGlobalXfo.ori.rotateVec3(pan));
                  newFocalDistance = centroid.distanceTo(newGlobalXfo.tr);
                  const frameBorderAdjustment = newFocalDistance * frameBorder;
                  newGlobalXfo.tr.addInPlace(newGlobalXfo.ori.rotateVec3(new Vec3(0, 0, frameBorderAdjustment)));
                  dolly += frameBorderAdjustment;
              }
              if (this.adjustNearAndFarPlanesToFocalDist) {
                  frustumPlaneOffsets.ZPos -= dolly;
                  frustumPlaneOffsets.ZNeg += dolly;
                  const near = frustumPlaneOffsets.ZNeg * this.nearDistFactor;
                  const far = -frustumPlaneOffsets.ZPos * this.farDistFactor;
                  this.nearParam.value = near;
                  this.farParam.value = far;
              }
          }
          if (duration == 0) {
              this.setFocalDistance(newFocalDistance);
              this.globalXfoParam.value = newGlobalXfo;
              this.emit('movementFinished');
          }
          else {
              if (this.intervalId > 0)
                  window.clearTimeout(this.intervalId);
              const count = Math.round(duration / 20); // each step is 20ms
              let i = 0;
              const prevFocalDistance = this.focalDistanceParam.value;
              const prevXfo = this.globalXfoParam.value;
              const applyMovement = () => {
                  i++;
                  const t = i / count;
                  const focalDistance = MathFunctions.lerp(prevFocalDistance, newFocalDistance, t);
                  const globalXfo = prevXfo.lerp(newGlobalXfo, t);
                  this.globalXfoParam.value = globalXfo;
                  this.setFocalDistance(focalDistance);
                  if (i < count) {
                      this.intervalId = window.setTimeout(applyMovement, 20);
                  }
                  else {
                      this.intervalId = -1;
                      this.emit('movementFinished');
                  }
              };
              applyMovement();
          }
      }
      /**
       * Sets camera perspective from a Mat4 object.
       *
       * @param mat - The mat value.
       * @param aspect - The aspect value.
       */
      updateProjectionMatrix(mat, aspect) {
          const isOrthographic = this.isOrthographicParam.value;
          const fov = this.fovParam.value;
          const near = this.nearParam.value;
          const far = this.farParam.value;
          const orthoMat = new Mat4();
          if (isOrthographic > 0.0) {
              const halfHeight = this.viewHeight * 0.5;
              const bottom = -halfHeight;
              const top = halfHeight;
              const left = halfHeight * -aspect;
              const right = halfHeight * aspect;
              orthoMat.setOrthographicMatrix(left, right, bottom, top, near, far);
          }
          if (isOrthographic < 1.0) {
              mat.setPerspectiveMatrix(fov, aspect, near, far);
          }
          if (isOrthographic == 1.0) {
              mat.setFromMat4(orthoMat);
          }
          else if (isOrthographic > 0.0) {
              mat.set(MathFunctions.lerp(mat.m00, orthoMat.m00, isOrthographic), MathFunctions.lerp(mat.m01, orthoMat.m01, isOrthographic), MathFunctions.lerp(mat.m02, orthoMat.m02, isOrthographic), MathFunctions.lerp(mat.m03, orthoMat.m03, isOrthographic), MathFunctions.lerp(mat.m10, orthoMat.m10, isOrthographic), MathFunctions.lerp(mat.m11, orthoMat.m11, isOrthographic), MathFunctions.lerp(mat.m12, orthoMat.m12, isOrthographic), MathFunctions.lerp(mat.m13, orthoMat.m13, isOrthographic), MathFunctions.lerp(mat.m20, orthoMat.m20, isOrthographic), MathFunctions.lerp(mat.m21, orthoMat.m21, isOrthographic), MathFunctions.lerp(mat.m22, orthoMat.m22, isOrthographic), MathFunctions.lerp(mat.m23, orthoMat.m23, isOrthographic), MathFunctions.lerp(mat.m30, orthoMat.m30, isOrthographic), MathFunctions.lerp(mat.m31, orthoMat.m31, isOrthographic), MathFunctions.lerp(mat.m32, orthoMat.m32, isOrthographic), MathFunctions.lerp(mat.m33, orthoMat.m33, isOrthographic));
          }
      }
  }
  Registry.register('Camera', Camera);

  /**
   * Class for loading zcad files.
   * The CADAsset is a TreeItem and can be added to the scene tree.
   *
   * **Events**
   * * **loaded:** Emitted when the  asset is loaded
   * @extends AssetItem
   */
  class CADAsset extends AssetItem {
      cadfileVersion = new Version('0,0,0');
      sdk;
      url;
      metadataLoadPromise;
      metadataLoaded = false;
      /**
       * Create a CAD asset.
       * @param {string} name - The name value.
       */
      constructor(name) {
          super(name);
      }
      /**
       * The clone method constructs a new CADAsset, copies its values
       * from this item and returns it.
       *
       * @param context - The CloneContext param.
       * @return - The cloned instance.
       */
      clone(context) {
          const cloned = new CADAsset();
          cloned.copyFrom(this, context);
          return cloned;
      }
      /**
       * Copies current TreeItem with all its children.
       *
       * @param src - The tree item to copy from.
       * @param context - The context value.
       */
      copyFrom(src, context) {
          super.copyFrom(src, context);
          this.url = src.url;
          if (!src.loaded) {
              src.once('geomsLoaded', (event) => {
                  this.emit('geomsLoaded', event);
              });
          }
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Returns the version of the data loaded by the CADAsset.
       *
       * @return - The version value.
       */
      getVersion() {
          return this.cadfileVersion;
      }
      /**
       * Initializes CADAsset's asset, material, version and layers; adding current `CADAsset` Geometry Item toall the layers in reader
       *
       * @param {BinReader} reader - The reader param.
       * @param {AssetLoadContext} context - The load context object that provides additional data such as the units of the scene we are loading into.
       */
      readRootLevelBinary(reader, context) {
          // Reset the versions dictionary. We don't want a shared context to provide from other asset loads.
          context.versions = {};
          context.versions['zea-cad'] = new Version(reader.loadStr());
          context.sdk = reader.loadStr();
          this.sdk = context.sdk;
          // console.log('Loading CAD File version:', this.cadfileVersion, ' exported using SDK:', context.cadSDK)
          super.readBinary(reader, context);
      }
      /**
       * Enables loading zcad data records.
       *
       * @param {Record<string, Uint8Array>} entries - The entries that were stored in the zcad file.
       * @param {AssetLoadContext} context - The load context object that provides additional data such as the units of the scene we are loading into.
       */
      async loadZCADEntries(entries, context) {
          const treeReader = new BinReader((entries.tree2 || entries.tree).buffer, 0, SystemDesc.isMobileDevice);
          // Note: An XRef stored in an assembly may contain a cache of its subtree.
          // If the XRef url does resolve to a file, we must clear this cache before loading the actual data.
          // keep the assembly level features and apply them after the load.
          this.removeAllChildren();
          const name = this.getName();
          this.readRootLevelBinary(treeReader, context);
          // Maintain the name provided by the user before loading.
          if (name != '')
              this.setName(name);
          context.versions['zea-cad'] = this.getVersion();
          context.versions['zea-engine'] = this.getEngineDataVersion();
          if (entries.geomsdata) {
              // If metadata is available, load it straight away.
              this.metadataLoadPromise = new Promise((resolve) => {
                  this.geomLibrary.once('loaded', () => {
                      this.geomLibrary.loadMetadata(entries.geomsdata, context);
                      this.metadataLoaded = true;
                      resolve();
                  });
              });
          }
          if (entries.geoms) {
              const geomFileID = -1;
              this.geomLibrary.readBinaryBuffer(geomFileID, entries.geoms.buffer, context);
          }
          else if (entries['geomLibrary.json']) {
              const geomLibraryJSON = JSON.parse(new TextDecoder('utf-8').decode(entries['geomLibrary.json']));
              const url = context.url;
              const filename = url.lastIndexOf('/') > -1 ? url.substring(url.lastIndexOf('/') + 1) : '';
              const stem = filename.substring(0, filename.lastIndexOf('.'));
              const basePath = context.folder + stem;
              if (geomLibraryJSON.numGeomFiles == 0) {
                  console.error("Corrupt zcad file. Missing 'geoms':", url);
              }
              else {
                  this.geomLibrary.loadGeomFilesStream(geomLibraryJSON, basePath, context);
              }
          }
          return new Promise((resolve, reject) => {
              Promise.allSettled(context.promisses)
                  .then(() => {
                  this.loaded = true;
                  this.emit('loaded');
                  resolve();
                  // Now check if we have GeomLibraries loading that we need to wait for.
                  // We want to emit an event when the entire sub-tree has loaded.
                  const geomPromises = [];
                  if (!this.geomLibrary.isLoaded()) {
                      geomPromises.push(new Promise((resolve) => this.geomLibrary.once('loaded', resolve)));
                  }
                  const includeThis = false;
                  this.traverse((item) => {
                      if (item instanceof CADAsset && !item.geomLibrary.isLoaded()) {
                          geomPromises.push(new Promise((resolve) => item.once('geomsLoaded', resolve)));
                      }
                  }, includeThis);
                  Promise.allSettled(geomPromises).then(() => this.emit('geomsLoaded'));
              })
                  .catch((reason) => {
                  reject(reason);
              });
          });
      }
      /**
       * Loads all the geometries and metadata from the asset file.
       * @param data - The URL of the asset to load, or the ArrayBuffer of the asset.
       * @param context - The load context object that provides additional data such as paths to external references.
       * @return - Returns a promise that resolves once the load of the tree is complete. Geometries, textures and other resources might still be loading.
       */
      async load(data, context = new AssetLoadContext()) {
          // Clone the context to avoid modifying the input context
          // which could be shared between assets and supplying desired units values.
          context = context.clone();
          // These values are used by XRef to generate URLS.
          context.assetItem = this;
          return new Promise((resolve, reject) => {
              // We add a 'workload' to the resource loader, to represent the
              // parsing of the loaded zcad file.
              // Note: this addresses an issue where the load count drops to 0 as soon
              // as loadFile('archive' resolves.
              resourceLoader.incrementWorkload(1);
              if (typeof data == 'string') {
                  const url = data;
                  const folder = url.lastIndexOf('/') > -1 ? url.substring(0, url.lastIndexOf('/')) + '/' : '';
                  this.url = url;
                  context.url = url;
                  context.folder = folder;
                  context.urlStack.push(url);
                  context.assetStack.push(this);
                  resourceLoader.loadFile('archive', url).then((entries) => {
                      if (!(entries.tree2 || entries.tree)) {
                          resourceLoader.incrementWorkDone(1);
                          const error = "Corrupt zcad file. Missing 'tree':" + url;
                          this.emit('error', error);
                          reject(error);
                          return;
                      }
                      this.loadZCADEntries(entries, context).then(() => {
                          resourceLoader.incrementWorkDone(1);
                          resolve();
                      });
                  }, (error) => {
                      resourceLoader.incrementWorkDone(1);
                      this.emit('error', error);
                      reject(error);
                  });
              }
              else if (data instanceof ArrayBuffer) {
                  // Note: Some clients have asked to be able to load zcad files
                  // directly from ArrayBuffers, potentially generated from Node.fs module.
                  const archiveUnpacker = resourceLoader.plugins['archive'];
                  archiveUnpacker.extractFile(data).then((entries) => {
                      this.loadZCADEntries(entries, context).then(() => {
                          resourceLoader.incrementWorkDone(1);
                          resolve();
                      });
                  }, (error) => {
                      resourceLoader.incrementWorkDone(1);
                      this.emit('error', error);
                      reject(error);
                  });
              }
          });
      }
      /**
       * Loads the metadata file for the previously loaded zcad file.
       * Note: in most cases, the CADAsset can generate the url for the metadata file.
       *
       * @param metaDataUrl - The URL of the metadata file to load.
       */
      loadMetadata(metaDataUrl = '') {
          if (this.metadataLoaded)
              return Promise.resolve();
          if (this.metadataLoadPromise)
              return this.metadataLoadPromise;
          this.metadataLoadPromise = new Promise((resolve, reject) => {
              if (this.metadataLoaded)
                  resolve();
              if (metaDataUrl == '') {
                  const url = this.url;
                  const base = url.substring(0, url.lastIndexOf('.'));
                  metaDataUrl = base + '.zmetadata';
              }
              resourceLoader.incrementWorkload();
              resourceLoader.loadFile('archive', metaDataUrl).then((entries) => {
                  const context = new AssetLoadContext();
                  context.versions['zea-engine'] = this.getEngineDataVersion();
                  this.geomLibrary.loadMetadata(entries.geomsdata, context);
                  resourceLoader.incrementWorkDone(1);
                  this.metadataLoaded = true;
                  resolve();
              }, (error) => {
                  resourceLoader.incrementWorkDone(1);
                  this.emit('error', error);
                  reject(error);
              });
          });
          return this.metadataLoadPromise;
      }
  }
  Registry.register('CADAsset', CADAsset);

  /**
   * Represents a Tree Item of an Assembly modeling. Brings together components to define a larger product.
   *
   * @extends TreeItem
   */
  class CADAssembly extends TreeItem {
      /**
       * Create a CAD assembly.
       *
       * @param name - The name of the tree item.
       */
      constructor(name) {
          super(name);
      }
      /**
       * The clone method constructs a new CADAssembly item, copies its values
       * from this item and returns it.
       *
       * @param context - The CloneContext param.
       * @return - The cloned instance.
       */
      clone(context) {
          const cloned = new CADAssembly();
          cloned.copyFrom(this, context);
          return cloned;
      }
  }
  Registry.register('CADAssembly', CADAssembly);

  /**
   * Represents a Part within a CAD assembly.
   *
   * @extends TreeItem
   */
  class CADPart extends TreeItem {
      /**
       * Creates an instance of CADPart setting up the initial configuration for Material and Color parameters.
       *
       * @param name - The name value.
       */
      constructor(name) {
          super(name);
      }
      /**
       * The clone method constructs a new CADPart, copies its values
       * from this item and returns it.
       *
       * @param context - The CloneContext param.
       * @return - The cloned instance.
       */
      clone(context) {
          const cloned = new CADPart();
          cloned.copyFrom(this, context);
          return cloned;
      }
  }
  Registry.register('CADPart', CADPart);

  /**
   * Represents a Body within a CAD Part. A Body is made up of either a single mesh or a collection of meshes, one for each surface.
   * When a zcad file is produced, the tool can  optimize bodies to contain only one mesh to speed up loading of large models, and support bigger models being loaded.
   *
   * @extends GeomItem
   */
  class CADBody extends GeomItem {
      shattered = false;
      /**
       * Creates an instance of CADBody setting up the initial configuration for Material and Color parameters.
       *
       * @param {string} name - The name value.
       */
      constructor(name) {
          super(name);
      }
      /**
       * Sets the state of this CADBody whether the geometry isdisplayed as
       * 'shattered', meaning that each face, edge and vertex can be selected
       * individually.
       *
       * @param state - The state value.
       */
      setShatterState(state) {
          if (this.shattered != state) {
              this.shattered = state;
              this.emit('shatterStateChanged', new StateChangedEvent(state));
          }
      }
      /**
       * The clone method constructs a new CADBody, copies its values
       * from this item and returns it.
       *
       * @param context - The CloneContext param.
       * @return - The cloned instance.
       */
      clone(context) {
          const cloned = new CADBody();
          cloned.copyFrom(this, context);
          return cloned;
      }
      // ///////////////////////////
      // Persistence
      /**
       * Initializes CADBody's asset, material, version and layers; adding current `CADBody` Geometry Item toall the layers in reader
       *
       * @param reader - The reader param.
       * @param context - The context param.
       */
      readBinary(reader, context) {
          if (context.versions['zea-engine'].compare([3, 9, 0]) < 0) {
              BaseGeomItem.prototype.readBinary.call(this, reader, context);
              // Note: the bodyDescId is now deprecated as it is part of the parametric surface evaluation code.
              // The BinReader must read the value to continue loading others.
              /* const bodyDescId = */ reader.loadSInt32();
              if (context.versions['zea-cad'].compare([0, 0, 4]) < 0) {
                  const materialName = reader.loadStr();
                  const materialLibrary = context.assetItem.getMaterialLibrary();
                  let material = materialLibrary.getMaterial(materialName);
                  if (!material) {
                      material = new Material(materialName, 'SimpleSurfaceShader');
                      material.getParameter('BaseColor').setValue(Color.random(0.25));
                      context.assetItem.getMaterialLibrary().addMaterial(material);
                  }
                  this.materialParam.setValue(material);
              }
              if (context.versions['zea-cad'].compare([0, 0, 2]) >= 0 && context.versions['zea-cad'].compare([0, 0, 4]) < 0) {
                  this.layers = reader.loadStrArray();
                  // console.log("Layers:", this.layers)
                  // Note: addGeomToLayer should take a 'BaseGeomItem'
                  // @ts-ignore
                  for (const layer of this.layers)
                      context.addGeomToLayer(this, layer);
              }
          }
          else {
              super.readBinary(reader, context);
          }
      }
  }
  Registry.register('CADBody', CADBody);

  const plane = new Cuboid(1, 1, 1);
  let planeMaterial = null;
  // Disable all highlighting so it never shows on screen.
  class PMIPickingPlane extends GeomItem {
      addHighlight(name, color, propagateToChildren = true) { }
      removeHighlight(name, propagateToChildren = true) { }
  }
  /**
   * Represents a view of PMI data. within a CAD assembly.
   *
   * @extends TreeItem
   */
  class PMIItem extends TreeItem {
      materialMapping = {};
      /**
       * Creates an instance of PMIItem setting up the initial configuration for Material and Color parameters.
       *
       * @param {string} name - The name value.
       */
      constructor(name) {
          super(name);
      }
      /**
       * The clone method constructs a new PMIItem, copies its values
       * from this item and returns it.
       *
       * @param {number} flags - The flags param.
       * @return {PMIItem} - The return value.
       */
      clone(context) {
          const cloned = new PMIItem();
          cloned.copyFrom(this, context);
          return cloned;
      }
      /**
       * Changes the current state of the selection of this item.
       * Note: the PMIItem also activates the PMI linking when selected.
       *
       * @emits `selectedChanged` with selected state
       * @param sel - Boolean indicating the new selection state.
       */
      setSelected(sel) {
          super.setSelected(sel);
          if (sel)
              this.activate();
          else
              this.deactivate();
      }
      /**
       * Activates the PMIView, adjusting visibility of the PMI items and the camera Xfo
       */
      activate() { }
      /**
       * Deactivates the PMIItem
       */
      deactivate() { }
      /**
       * Adds a highlight to the tree item.
       *
       * @param {string} name - The name of the tree item.
       * @param {Color} color - The color of the highlight.
       * @param {boolean} propagateToChildren - A boolean indicating whether to propagate to children.
       */
      addHighlight(name, color, propagateToChildren = true) {
          super.addHighlight(name, color, false);
          // Instead of adding highlights around the PMI text, which makes it difficult to read
          // we clone the material and modify it so the text, symbols, and line colors
          // become the highlight color.
          if (propagateToChildren) {
              const baseColor = color.clone();
              baseColor.a = 1.0; // highlight colors often have zero alpha, as it controls the highlight fill.
              const materialCache = {};
              this.traverse((treeItem) => {
                  if (treeItem instanceof PMIPickingPlane)
                      return false;
                  if (treeItem instanceof GeomItem) {
                      const material = treeItem.materialParam.value;
                      this.materialMapping[treeItem.getId()] = material;
                      if (!(material.getId() in materialCache)) {
                          const highlightMaterial = material.clone();
                          if (highlightMaterial.hasParameter('BaseColor')) {
                              const param = highlightMaterial.getParameter('BaseColor');
                              if (param instanceof MaterialColorParam)
                                  param.colorSpace = exports.ColorSpace.Gamma;
                              param.setValue(baseColor);
                          }
                          if (highlightMaterial.hasParameter('EdgeColor')) {
                              const param = highlightMaterial.getParameter('EdgeColor');
                              if (param instanceof MaterialColorParam)
                                  param.colorSpace = exports.ColorSpace.Gamma;
                              param.setValue(baseColor);
                          }
                          if (highlightMaterial.hasParameter('Overlay')) {
                              highlightMaterial.getParameter('Overlay').setValue(0.85);
                          }
                          // This *hack* forces PMI text to be rendered to the transparent layer
                          // which means it will not have an outline drawn around it.
                          // Maybe we should add PMI to the 'OverLay' pass.
                          // This would assume that the overlay pass does not clear the depth buffer, which
                          // it does right now.
                          // @ts-ignore
                          highlightMaterial.__isOpaque = false;
                          treeItem.materialParam.value = highlightMaterial;
                          // We can reuse this material on other PMI items with the same
                          // original material
                          materialCache[material.getId()] = highlightMaterial;
                      }
                      treeItem.materialParam.value = materialCache[material.getId()];
                  }
              });
          }
          const pmiContainer = this.getOwner().getOwner(); // TODO: check
          const pmiOwner = pmiContainer.getOwner();
          if (pmiOwner) {
              const linkedBodies = {};
              const linkedBodyElements = {};
              const linkedEntitiesParam = this.getParameter('LinkedEntities');
              if (linkedEntitiesParam) {
                  const linkedEntityPaths = linkedEntitiesParam.getValue();
                  linkedEntityPaths.forEach((pathStr, index) => {
                      if (pathStr == '')
                          return;
                      const path = pathStr.split(', ');
                      const elemId = path.pop();
                      try {
                          const cadBody = pmiOwner.resolvePath(path);
                          if (cadBody && cadBody instanceof CADBody) {
                              if (cadBody.getNumChildren() == 0) {
                                  cadBody.setShatterState(true);
                                  if (!linkedBodies[cadBody.getId()]) {
                                      linkedBodies[cadBody.getId()] = cadBody;
                                      linkedBodyElements[cadBody.getId()] = [];
                                  }
                                  linkedBodyElements[cadBody.getId()].push(elemId);
                              }
                              else {
                                  const linkedEntity = cadBody.getChildByName(elemId);
                                  if (linkedEntity)
                                      linkedEntity.addHighlight(name, color, true);
                              }
                              // linkedEntity.addHighlight(name + ':' + elemId, color, true)
                          }
                          else {
                              console.log('linkedEntity.addHighlight(name, color, true):', path);
                          }
                      }
                      catch (e) {
                          console.log(index + ':' + e.message);
                      }
                  });
                  for (let key in linkedBodies) {
                      const cadBody = linkedBodies[key];
                      const elemIds = linkedBodyElements[key];
                      cadBody.addHighlight(name + ':' + elemIds.toString(), color, true);
                  }
              }
          }
      }
      /**
       * Removes a highlight to the tree item.
       *
       * @param {string} name - The name of the tree item.
       * @param {boolean} propagateToChildren - A boolean indicating whether to propagate to children.
       */
      removeHighlight(name, propagateToChildren = true) {
          // super.removeHighlight(name, propagateToChildren)
          super.removeHighlight(name, false);
          if (propagateToChildren) {
              this.traverse((treeItem) => {
                  if (treeItem instanceof GeomItem) {
                      if (treeItem.getId() in this.materialMapping) {
                          treeItem.materialParam.value = this.materialMapping[treeItem.getId()];
                          delete this.materialMapping[treeItem.getId()];
                      }
                  }
              });
          }
          const pmiContainer = this.getOwner().getOwner();
          const pmiOwner = pmiContainer.getOwner();
          if (pmiOwner) {
              const linkedBodies = {};
              const linkedBodyElements = {};
              const linkedEntitiesParam = this.getParameter('LinkedEntities');
              if (linkedEntitiesParam) {
                  const linkedEntityPaths = linkedEntitiesParam.getValue();
                  linkedEntityPaths.forEach((pathStr) => {
                      if (pathStr == '')
                          return;
                      const path = pathStr.split(', ');
                      const elemId = path.pop();
                      try {
                          const cadBody = pmiOwner.resolvePath(path);
                          if (cadBody && cadBody instanceof CADBody) {
                              if (cadBody.getNumChildren() == 0) {
                                  cadBody.setShatterState(false);
                                  if (!linkedBodies[cadBody.getId()]) {
                                      linkedBodies[cadBody.getId()] = cadBody;
                                      linkedBodyElements[cadBody.getId()] = [];
                                  }
                                  linkedBodyElements[cadBody.getId()].push(elemId);
                              }
                              else {
                                  const linkedEntity = cadBody.getChildByName(elemId);
                                  if (linkedEntity)
                                      linkedEntity.removeHighlight(name, true);
                              }
                              // linkedEntity.addHighlight(name + ':' + elemId, color, true)
                          }
                          else {
                              console.log('linkedEntity.addHighlight(name, color, true):failed');
                          }
                      }
                      catch (e) {
                          console.log(e.message);
                      }
                  });
                  for (let key in linkedBodies) {
                      const cadBody = linkedBodies[key];
                      const elemIds = linkedBodyElements[key];
                      cadBody.removeHighlight(name + ':' + elemIds.toString(), true);
                  }
              }
          }
      }
      // ///////////////////////////
      // Persistence
      /**
       * Load the binary data for this class
       * @param reader - The reader param.
       * @param context - The context param.
       */
      readBinary(reader, context) {
          super.readBinary(reader, context);
          this.traverse((item) => {
              if (item instanceof GeomItem) {
                  const material = item.materialParam.value;
                  if (material.getShaderName() == 'StandardSurfaceShader') {
                      material.setShaderName('FlatSurfaceShader');
                  }
                  // This *hack* forces PMI text to be rendered to the transparent layer
                  // which means it will not have an outline drawn around it.
                  // Maybe we should add PMI to the 'OverLay' pass.
                  // This would assume that the overlay pass does not clear the depth buffer, which
                  // it does right now.
                  // @ts-ignore
                  item.opacity = 0.99;
              }
          });
          // Here we place a transparent plane behind the PMI Text to enable
          // easier clicking on PMI items in the 3d Viewport.
          context.assetItem.getGeometryLibrary().once('loaded', () => {
              this.traverse((item) => {
                  // Note: We could implement a PMIText class that is generated in the bridge
                  // when processing PMI, so we don't need to do this hacky name check.
                  // Then the Text would be able to generate the plane during load.
                  if (item.getName().startsWith('Text')) {
                      const planeItems = [];
                      item.traverse((item) => {
                          if (item instanceof GeomItem) {
                              const geom = item.geomParam.value;
                              const bbox = geom.getBoundingBox();
                              if (!planeMaterial) {
                                  planeMaterial = new FlatSurfaceMaterial('plane');
                                  planeMaterial.baseColorParam.value = new Color(1, 1, 0, 0.001);
                                  planeMaterial.overlayParam.value = -0.001;
                              }
                              const planeGeomItem = new PMIPickingPlane('plane', plane, planeMaterial);
                              const xfo = item.localXfoParam.value.multiply(item.geomOffsetXfoParam.value);
                              xfo.tr.addInPlace(bbox.center());
                              xfo.sc.multiplyInPlace(bbox.diagonal());
                              planeGeomItem.localXfoParam.value = xfo;
                              planeItems.push(planeGeomItem);
                          }
                      }, false);
                      planeItems.forEach((planeItem) => item.addChild(planeItem, false));
                      return false;
                  }
              }, false);
          });
      }
  }
  Registry.register('PMIItem', PMIItem);

  /**
   * Represents a view of PMI data. within a CAD assembly.
   *
   * @extends PMIItem
   */
  class PMIView extends PMIItem {
      camera;
      /**
       * Creates an instance of PMIView setting up the initial configuration for Material and Color parameters.
       *
       * @param {string} name - The name value.
       */
      constructor(name) {
          super(name);
          this.camera = null;
      }
      /**
       * The clone method constructs a new PMIView, copies its values
       * from this item and returns it.
       *
       * @param context - The clone context.
       * @return - The return value.
       */
      clone(context) {
          const cloned = new PMIView();
          cloned.copyFrom(this, context);
          return cloned;
      }
      /**
       * Activates the PMIView, adjusting visibility of the PMI items and the camera Xfo
       */
      activate() {
          super.activate();
          let graphicalItems = [];
          if (this.hasParameter('GraphicalElements')) {
              graphicalItems = this.getParameter('GraphicalElements').getValue();
          }
          const findAssetItem = () => {
              let item = this;
              while (item && !(item instanceof CADAsset))
                  item = item.getParentItem();
              if (item instanceof CADAsset)
                  return item;
              return null;
          };
          const assetItem = findAssetItem();
          const pmiContainer = this.getParentItem().getParentItem();
          const pmiOwner = pmiContainer.getParentItem();
          if (pmiOwner) {
              const pmiItems = [];
              pmiContainer.traverse((item) => {
                  if (item instanceof PMIView)
                      return;
                  if (item instanceof PMIItem)
                      pmiItems.push(item);
              });
              pmiItems.forEach((pmiItem) => {
                  const visible = graphicalItems.includes(pmiItem.getName());
                  pmiItem.setVisible(visible);
              });
          }
          if (this.camera) {
              const cameraXfo = this.localXfoParam.value.clone();
              const TargetPoint = this.getParameter('TargetPoint').getValue().clone();
              const CameraType = this.getParameter('CameraType').getValue();
              cameraXfo.tr.scaleInPlace(assetItem.unitsScale);
              TargetPoint.scaleInPlace(assetItem.unitsScale);
              const dist = cameraXfo.tr.distanceTo(TargetPoint);
              cameraXfo.sc.set(1.0, 1.0, 1.0);
              this.camera.globalXfoParam.value = cameraXfo;
              this.camera.setFocalDistance(dist);
              if (CameraType == 'Camera_Orthographic') {
                  this.camera.setIsOrthographic(1, 0);
                  // When switching from perspective to ortho here is how the zoom is computed:
                  // _zoom = 1.f;
                  // float coef = _targetDistance * CATTan(CATDegreeToRadian * _viewAngle);
                  // if (coef > 0.f) _zoom = 1./ coef;
                  if (this.hasParameter('CameraZoom') && assetItem) {
                      const CameraZoom = this.getParameter('CameraZoom').getValue();
                      const FrustHeight = (1 / CameraZoom) * assetItem.unitsScale * 2;
                      this.camera.setFrustumHeight(FrustHeight);
                  }
              }
          }
          if (this.hasParameter('ClippingPlaneOrigin')) {
              const clippingPlaneOrigin = this.getParameter('ClippingPlaneOrigin').getValue();
              const clippingPlaneNormal = this.getParameter('ClippingPlaneNormal').getValue();
              const cutEnabled = true;
              const cutAwayDist = -clippingPlaneOrigin.dot(clippingPlaneNormal) * assetItem.unitsScale;
              pmiOwner.traverse((item) => {
                  if (item instanceof PMIItem)
                      return false;
                  if (item instanceof GeomItem) {
                      item.setCutawayEnabled(cutEnabled);
                      item.setCutVector(clippingPlaneNormal);
                      item.setCutDist(cutAwayDist);
                  }
              });
          }
          else {
              pmiOwner.traverse((item) => {
                  if (item instanceof PMIItem)
                      return false;
                  if (item instanceof GeomItem) {
                      item.setCutawayEnabled(false);
                  }
              });
          }
      }
      /**
       * Deactivates the PMIItem
       */
      deactivate() {
          super.deactivate();
          // if (this.hasParameter('GraphicalElements')) {
          //   const pmiContainer = (this.getOwner() as TreeItem).getOwner() as TreeItem
          //   const pmiOwner = pmiContainer.getOwner()
          //   if (pmiOwner) {
          //     const pmiItems: TreeItem[] = []
          //     pmiContainer.traverse((item: TreeItem) => {
          //       if (item instanceof PMIView) return
          //       if (item instanceof PMIItem) pmiItems.push(item)
          //     })
          //     pmiItems.forEach((pmiItem) => {
          //       pmiItem.setVisible(true)
          //     })
          //   }
          // }
          // // Note: leave the camera as is
          // if (this.camera) {
          //   this.camera.setIsOrthographic(0)
          // }
      }
      // ///////////////////////////
      // Persistence
      /**
       * Load the binary data for this class
       * @param reader - The reader param.
       * @param context - The context param.
       */
      readBinary(reader, context) {
          super.readBinary(reader, context);
          if (context.camera) {
              this.camera = context.camera;
          }
      }
  }
  Registry.register('PMIView', PMIView);

  /**
   * Represents a view of PMI data. within a CAD assembly.
   *
   * @extends TreeItem
   */
  class XRef extends CADAsset {
      /**
       * @member configurationParam - Stores the value of the configuration this XRef must attempt to load
       */
      configurationParam = new StringParameter('Configuration');
      /**
       * Creates an instance of XRef setting up the initial configuration for Material and Color parameters.
       *
       * @param {string} name - The name value.
       */
      constructor(name) {
          super(name);
          this.addParameter(this.configurationParam);
      }
      /**
       * The clone method constructs a new XRef, copies its values
       * from this item and returns it.
       *
       * @param context - The context value.
       * @return - Returns a new cloned xref.
       */
      clone(context) {
          const cloned = new XRef();
          cloned.copyFrom(this, context);
          return cloned;
      }
      // ///////////////////////////
      // Persistence
      /**
       * Initializes XRef's asset, material, version and layers; adding current `XRef` Geometry Item toall the layers in reader
       *
       * @paramreader - The reader param.
       * @param context - The load context param.
       */
      readBinary(reader, context) {
          let relativePath;
          if (context.versions['zea-engine'].compare([3, 13, 1]) >= 0) {
              TreeItem.prototype.readBinary.call(this, reader, context);
              relativePath = reader.loadStr();
          }
          else {
              reader.loadStr(); // read type
              const name = reader.loadStr(); // read name
              this.setName(name);
              relativePath = reader.loadStr();
              const xfo = new Xfo();
              if (context.versions['zea-cad'].compare([3, 6, 2]) > 0) {
                  xfo.tr = reader.loadFloat32Vec3();
                  xfo.ori = reader.loadFloat32Quat();
                  this.localXfoParam.value = xfo;
              }
              else {
                  // Note: the SpatialBridge now encodes the 'ReferenceName' into the
                  // XRef, while CADEx didn't provide one. Use the name if it is provided.
                  if (name == '')
                      this.setName(relativePath);
              }
              // XRefs can now contain custom props that may contain colors, or configurations.
              if (context.versions['zea-engine'].compare([3, 11, 1]) > 0) {
                  // Note: after the refactor of the Class hierarchy where
                  // we inverted the relationship between BaseItem and PArameterOWner
                  // we needed to fix this code path.
                  //@ts-ignore
                  this.readBinaryParams(reader, context);
              }
          }
          const assemblyFeatures = this.getChildByName('Assembly Features');
          if (assemblyFeatures) {
              this.removeChildByHandle(assemblyFeatures);
          }
          // /////////////////////////////////////
          // URL
          // If a resources dict has been provided, look it up, else
          // generate a url.
          let url = undefined;
          if (context.resources) {
              if (context.resources[relativePath]) {
                  url = context.resources[relativePath];
              }
              else {
                  // CAD systems seem to have flexible path resolution strategies that we dont yet support.
                  // e.g. looking in multiple folders for a file.
                  // The relative paths often break.
                  // If the user provides a mapping table, we will use it, else
                  // we assume files will all be in the same folder.
                  if (relativePath.includes('/')) {
                      relativePath = relativePath.slice(relativePath.lastIndexOf('/') + 1);
                  }
                  else if (relativePath.includes('\\')) {
                      relativePath = relativePath.slice(relativePath.lastIndexOf('\\') + 1);
                  }
                  if (context.resources[relativePath]) {
                      url = context.resources[relativePath];
                  }
                  else if (context.xrefLoadCallback) {
                      url = context.xrefLoadCallback.call(context, relativePath, this);
                  }
              }
          }
          else if (context.xrefLoadCallback) {
              url = context.xrefLoadCallback.call(context, relativePath, this);
          }
          else {
              if (relativePath.includes('/')) {
                  relativePath = relativePath.slice(relativePath.lastIndexOf('/') + 1);
              }
              else if (relativePath.includes('\\')) {
                  relativePath = relativePath.slice(relativePath.lastIndexOf('\\') + 1);
              }
              // Generate a url relative to the folder of the asset we are currently loading.
              url = context.folder + relativePath + '.zcad';
          }
          if (url) {
              // Note: this occurs in Vallee data: CELA00925.sldasm (imports its self.)
              if (context.urlStack.includes(url)) {
                  const index = context.urlStack.indexOf(url);
                  const asset = context.assetStack[index];
                  console.warn('Circular load occurring at:', asset.path);
                  return;
              }
              // If an XRef already exists to the same zcad file, we can just clone the existing XRef.
              // This means the geometry will only be loaded once, and it will become re-used
              // by the cloned XRefs.
              if (context.xrefs[url]) {
                  context.addPromise(new Promise((resolve, reject) => {
                      const xref = context.xrefs[url];
                      const copyFromXRef = () => {
                          const name = this.name;
                          const xfo = this.localXfoParam.value;
                          this.copyFrom(xref);
                          // Make sure we keep our name and Xfo.
                          this.setName(name);
                          if (this.units != context.units) {
                              // The scale factor we must apply is relative to our parent, which
                              // could have a different units to the scrc(cloned) XRef. We re-calculate
                              // units scale based on our parents unit.
                              const unitsFactor = getUnitsFactor(this.units);
                              const contextUnitsFactor = getUnitsFactor(context.units);
                              this.unitsScale = unitsFactor / contextUnitsFactor;
                              xfo.sc.scaleInPlace(this.unitsScale);
                              xfo.tr.scaleInPlace(this.unitsScale);
                          }
                          this.localXfoParam.value = xfo;
                          if (assemblyFeatures) {
                              this.applyAssemblyLevelFeatures(assemblyFeatures);
                          }
                          resolve();
                      };
                      const loadFailed = () => {
                          this.emit('error');
                          reject();
                      };
                      if (!xref.loaded) {
                          xref.once('xrefLoaded', copyFromXRef);
                          xref.once('error', loadFailed);
                      }
                      else {
                          copyFromXRef();
                      }
                  }));
              }
              else {
                  context.xrefs[url] = this;
                  context.addPromise(new Promise((resolve, reject) => {
                      this.load(url, new AssetLoadContext(context)).then(() => {
                          this.emit('xrefLoaded');
                          // CADAsset applies a units scale to the sc, but not the tr.
                          const xfo = this.localXfoParam.value;
                          xfo.tr.scaleInPlace(this.unitsScale);
                          this.localXfoParam.value = xfo;
                          if (assemblyFeatures) {
                              this.applyAssemblyLevelFeatures(assemblyFeatures);
                          }
                          resolve();
                      }, () => {
                          // console.warn(`While Loading ${this.getPath()} unable to load XRef: ${relativePath}`)
                          reject();
                      });
                  }));
              }
          }
          else {
              console.warn(`While Loading ${this.getPath()} unable to load XRef: ${relativePath}`);
              // If the XRef didn't resolve, we can keep the Assembly features,
              // which represent a cache of the data as it was last saved.
              if (assemblyFeatures) {
                  const children = assemblyFeatures.getChildren();
                  for (const subFeatureTreeItem of children) {
                      this.addChild(subFeatureTreeItem, false);
                  }
              }
          }
      }
      applyAssemblyLevelFeatures(assemblyFeatures) {
          // An Xef contains only one child. Either a part or an assembly.
          // this.applyFeatureToChildren(assemblyFeatures, this)
          const featureTreeChild = assemblyFeatures.getChild(0);
          const prototypeTreeItem = this.getChild(0);
          if (featureTreeChild && prototypeTreeItem)
              this.applyFeature(featureTreeChild, prototypeTreeItem);
          // this.addChild(assemblyFeatures)
      }
      applyFeatureToChildren(featureTreeItem, prototypeTreeItem) {
          const children = [...featureTreeItem.getChildren()];
          for (const subFeatureTreeItem of children) {
              const subAssemblyTreeItem = prototypeTreeItem.getChildByName(subFeatureTreeItem.name);
              if (subAssemblyTreeItem) {
                  this.applyFeature(subFeatureTreeItem, subAssemblyTreeItem);
              }
              else
                  console.log(`Feature node: ${subFeatureTreeItem.path} does not match a node in the assembly tree for the following XRef:`, this.name);
          }
      }
      applyFeature(featureTreeItem, prototypeTreeItem) {
          const xfo = featureTreeItem.localXfoParam.value;
          if (!xfo.isIdentity()) {
              prototypeTreeItem.localXfoParam.value = featureTreeItem.localXfoParam.value;
          }
          if (featureTreeItem instanceof GeomItem) {
              const material = featureTreeItem.materialParam.value;
              prototypeTreeItem.traverse((subTreeItem) => {
                  if (subTreeItem instanceof GeomItem) {
                      subTreeItem.materialParam.value = material;
                      // Remove any per-face materials that would override the assembly material
                      const geom = subTreeItem.geomParam.value;
                      if (geom instanceof CompoundGeom)
                          geom.clearMaterials();
                      else {
                          subTreeItem.geomParam.once('valueChanged', () => {
                              const geom = subTreeItem.geomParam.value;
                              if (geom instanceof CompoundGeom) {
                                  geom.clearMaterials();
                              }
                          });
                      }
                  }
              }, true);
              // Note: the GeomItem can contain children with other data to apply in the tree.
              // We allow the traversal to continue.
          }
          else if (featureTreeItem instanceof CADPart) {
              if (prototypeTreeItem instanceof CADPart) {
                  const xfo = prototypeTreeItem.localXfoParam.value;
                  const parentItem = prototypeTreeItem.parent;
                  parentItem.removeChildByHandle(prototypeTreeItem);
                  parentItem.addChild(featureTreeItem, false, false);
                  featureTreeItem.localXfoParam.value = xfo;
              }
              else if (prototypeTreeItem instanceof XRef || prototypeTreeItem instanceof InstanceItem) {
                  // Transfer the Xfo to the prototypeTreeItem.
                  // Note: the featureTreeItem contains a transfer that probabably matches
                  // that of the prototypeTreeItem. However, it may have changed, so we keep it.
                  prototypeTreeItem.localXfoParam.value = featureTreeItem.localXfoParam.value;
                  featureTreeItem.localXfoParam.value = new Xfo();
                  prototypeTreeItem.removeAllChildren();
                  prototypeTreeItem.addChild(featureTreeItem, false, false);
              }
              return;
          }
          if (prototypeTreeItem instanceof XRef && prototypeTreeItem.getNumChildren() == 1) {
              // Note: the Assembly Feature tree does not include nodes for Instance items.
              // and instead only has the prototype. We need to step down into the
              // prototype to access its children.
              prototypeTreeItem = prototypeTreeItem.getChild(0);
          }
          if (prototypeTreeItem) {
              this.applyFeatureToChildren(featureTreeItem, prototypeTreeItem);
          }
      }
  }
  Registry.register('XRef', XRef);

  const PassType = {
      PRE: 1,
      OPAQUE: 2,
      TRANSPARENT: 3,
      OVERLAY: 4,
  };
  /** This class abstracts the rendering of a collection of geometries to screen.
   * @extends ParameterOwner
   */
  class GLPass extends ParameterOwner {
      enabled = true;
      passIndex = -1;
      __gl = null;
      renderer = null;
      __renderer = null;
      enabledParam = new BooleanParameter('Enabled', true);
      /**
       * Create a GL pass.
       */
      constructor() {
          super();
          this.enabled = true;
          this.passIndex = 0;
          this.addParameter(this.enabledParam);
          this.enabledParam.on('valueChanged', () => (this.enabled = this.enabledParam.value));
      }
      /**
       * The __parameterValueChanged method.
       * @param event - The event object.
       * @private
       */
      parameterValueChanged(event) {
          super.parameterValueChanged(event);
          if (this.renderer)
              this.renderer.requestRedraw();
      }
      /**
       * The init method.
       * @param renderer - The renderer value.
       * @param passIndex - The index of the pass in the GLRenderer
       */
      init(renderer, passIndex) {
          if (passIndex == undefined)
              throw new Error('Missing constructor argument.'); // Type checking. Seomthing that TypeScript will do for us.
          this.__gl = renderer.gl;
          this.renderer = renderer;
          this.__renderer = renderer;
          this.passIndex = passIndex;
      }
      /**
       * The setPassIndex method.
       * @param passIndex - The index of the pass in the GLRenderer
       */
      setPassIndex(passIndex) {
          this.passIndex = passIndex;
      }
      /**
       * Returns the pass type. OPAQUE passes are always rendered first, followed by TRANSPARENT passes, and finally OVERLAY.
       * @return - The pass type value.
       */
      getPassType() {
          return PassType.OPAQUE;
      }
      /**
       * The itemAddedToScene method is called on each pass when a new item
       * is added to the scene, and the renderer must decide how to render it.
       * It allows Passes to select geometries to handle the drawing of.
       * @param treeItem - The treeItem value.
       * @param rargs - Extra return values are passed back in this object.
       * The object contains a parameter 'continueInSubTree', which can be set to false,
       * so the subtree of this node will not be traversed after this node is handled.
       * @return - The return value.
       */
      itemAddedToScene(treeItem, rargs) {
          throw Error(`${this.constructor.name} must implement itemAddedToScene and itemRemovedFromScene`);
      }
      /**
       * The itemRemovedFromScene method is called on each pass when aa item
       * is removed to the scene, and the pass must handle cleaning up any resources.
       * @param treeItem - The treeItem value.
       * @param rargs - Extra return values are passed back in this object.
       * @return - The return value.
       */
      itemRemovedFromScene(treeItem, rargs) {
          throw Error(`${this.constructor.name} must implement itemAddedToScene and itemRemovedFromScene`);
      }
      /**
       * The startPresenting method.
       */
      startPresenting() { }
      /**
       * The stopPresenting method.
       */
      stopPresenting() { }
      // ///////////////////////////////////
      // Rendering
      /**
       * The draw method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          throw Error('draw not implemented on GLPass');
      }
      /**
       * The drawHighlightedGeoms method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawHighlightedGeoms(renderstate) { }
      /**
       * The drawGeomData method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawGeomData(renderstate) { }
      /**
       * The getGeomItemAndDist method.
       * @param geomData - The geomData value.
       */
      getGeomItemAndDist(geomData) {
          throw Error('getGeomItemAndDist not implemented on GLPass');
      }
  }

  /**
   * Class representing a GL CAD pass.
   *
   * **Events**
   * * **updated**
   * @extends GLPass
   */
  class GLCADPass extends GLPass {
      /**
       * Create a GL CAD pass.
       * @param {boolean} debugMode - If true, then puts the GLCADPass rendering into debug mode.
       */
      constructor(debugMode = false) {
          super();
          console.warn('GLCADPass is deprecated. No need to install this pass in the renderer.');
      }
      /**
       * The itemAddedToScene method is called on each pass when a new item
       * is added to the scene, and the renderer must decide how to render it.
       * It allows Passes to select geometries to handle the drawing of.
       * @param {TreeItem} treeItem - The treeItem value.
       * @param {object} rargs - Extra return values are passed back in this object.
       * The object contains a parameter 'continueInSubTree', which can be set to false,
       * so the subtree of this node will not be traversed after this node is handled.
       * @return {Boolean} - The return value.
       */
      itemAddedToScene(treeItem, rargs) {
          return false;
      }
      /**
       * The itemRemovedFromScene method is called on each pass when aa item
       * is removed to the scene, and the pass must handle cleaning up any resources.
       * @param {TreeItem} treeItem - The treeItem value.
       * @param {object} rargs - Extra return values are passed back in this object.
       * @return {Boolean} - The return value.
       */
      itemRemovedFromScene(treeItem, rargs) {
          return false;
      }
  }

  /**
   * The GridTreeItem displays a grid of a given size and resolution. The Grid is oriented on the XY plane
   * and highlights the X and Y axes with Red and Green lines. Grids are useful in displaying scene scale and coordinate system.
   * The Grid geometry does not return a bounding box and so does not effect the bounding of the scene.
   *
   * @extends {TreeItem}
   */
  class GridTreeItem extends TreeItem {
      /**
       * Creates an instance of GridTree.
       *
       * @param gridSize
       * @param resolution
       * @param gridColor
       */
      constructor(gridSize = 5, resolution = 50, gridColor = new Color('#DCDCDC')) {
          super('GridTree');
          this.disableBoundingBox = true;
          this.setSelectable(false);
          const gridMaterial = new LinesMaterial('gridMaterial');
          gridMaterial.baseColorParam.value = gridColor;
          gridMaterial.overlayParam.value = 0.0;
          const grid = new Grid(gridSize, gridSize, resolution, resolution, true);
          const gridItem = new GeomItem('GridItem', grid, gridMaterial);
          gridItem.setSelectable(false);
          this.addChild(gridItem, false);
          const axisLine = new Lines();
          axisLine.setNumVertices(2);
          axisLine.setNumSegments(1);
          axisLine.setSegmentVertexIndices(0, 0, 1);
          const positions = axisLine.getVertexAttribute('positions');
          positions.setValue(0, new Vec3(gridSize * -0.5, 0.0, 0.0));
          positions.setValue(1, new Vec3(gridSize * 0.5, 0.0, 0.0));
          const gridXAxisMaterial = new LinesMaterial('gridXAxisMaterial');
          gridXAxisMaterial.baseColorParam.value = new Color(gridColor.luminance(), 0, 0);
          gridXAxisMaterial.overlayParam.value = 0.0;
          const gridXAxis = new GeomItem('xAxisLine', axisLine, gridXAxisMaterial);
          gridXAxis.setSelectable(false);
          this.addChild(gridXAxis, false);
          const gridYAxisMaterial = new LinesMaterial('gridYAxisMaterial');
          gridYAxisMaterial.baseColorParam.value = new Color(0, gridColor.luminance(), 0);
          gridYAxisMaterial.overlayParam.value = 0.0;
          const zAxisLineItem = new GeomItem('yAxisLine', axisLine, gridYAxisMaterial);
          zAxisLineItem.setSelectable(false);
          const geomOffset = new Xfo();
          geomOffset.ori.setFromAxisAndAngle(new Vec3(0, 0, 1), Math.PI * 0.5);
          zAxisLineItem.geomOffsetXfoParam.value = geomOffset;
          this.addChild(zAxisLineItem, false);
      }
      /**
       * @private
       * @return - Reset Bounding Box
       */
      _cleanBoundingBox() {
          return new Box3();
      }
  }
  Registry.register('GridTreeItem', GridTreeItem);

  const defaultGridColor = new Color('#DCDCDC');
  /**
   * Class representing the environment where all the displayed assets live.
   */
  class Scene {
      /**
       * @member envMapParam - The image displayed and used for the environment map.
       */
      envMapParam = new ImageParameter('EnvMap');
      /**
       * @member displayEnvMapParam - Boolean that determines whether or not the environment map should be displayed.
       */
      displayEnvMapParam = new BooleanParameter('Display EnvMap', false);
      /**
       * @member envMapLODParam - TODO
       */
      envMapLODParam = new NumberParameter('EnvMapLOD', 0);
      root = new TreeItem('root');
      /**
       * Create a scene.
       */
      constructor() { }
      /**
       * Returns the scene's root item(`TreeItem`) that owns every item in the scene.
       *
       * @return - The return value.
       */
      getRoot() {
          return this.root;
      }
      /**
       * Returns resourceLoader object set on class initialization.
       *
       * @return - The return value.
       */
      getResourceLoader() {
          return resourceLoader;
      }
      /**
       * Sets Environment Map with the BaseImage you'd like to display in your scene background.
       *
       * @param envMap - The envMap value.
       */
      setEnvMap(envMap) {
          this.envMapParam.value = envMap;
      }
      /**
       * Sets up and displays the scene grid of a given size and resolution. The Grid is oriented on the XY plane
       * and highlights the X and Y axes with Red and Green lines. Grids are useful in displaying scene scale and coordinate system.
       * The Grid geometry does not return a bounding box and so does not effect the bounding of the scene.
       * The GridTreeItem display a grid of a given size and resolution. The Grid is oriented on the XY plane
       * and highlights the X and Y axes with Red and Green lines.
       *
       * @param gridSize - The size of the grid.
       * @param resolution - The resolution of the grid.
       * @param gridColor - The color of the grid.
       * @return - The return value.
       */
      setupGrid(gridSize = 5, resolution = 50, gridColor = defaultGridColor) {
          const gridTreeItem = new GridTreeItem(gridSize, resolution, gridColor);
          this.root.addChild(gridTreeItem, false);
          return gridTreeItem;
      }
  }

  /**
   * Class designed to load and handle `.vla` files.
   *
   * **Events**
   * * **loaded:** Triggered once the tree is loaded. Note: the tree bounding box is valid once the tree is loaded.
   * * **geomsLoaded:** Triggered once all geometries are loaded.
   *
   * @extends AssetItem
   */
  class VLAAsset extends AssetItem {
      /**
       * Create a VLA asset.
       * @param name - The name value.
       */
      constructor(name) {
          super(name);
          // A signal that is emitted once all the geometries are loaded.
          // Often the state machine will activate the
          // first state when this signal emits.
          this.geomLibrary.on('loaded', () => {
              this.emit('geomsLoaded');
          });
      }
      // ////////////////////////////////////////
      // Persistence
      /**
       * Sets state of current asset using a binary reader object.
       *
       * @param reader - The reader value.
       * @param context - The context value.
       * @return - The return value.
       */
      readBinary(reader, context) {
          if (context.versions['zea-engine']) ;
          else {
              // Now we split the mesh out from the engine version.
              context.versions['zea-mesh'] = new Version(reader.loadStr());
          }
          // console.log('Loading Mesh File version:', context.versions['zea-mesh'])
          const numGeomsFiles = reader.loadUInt32();
          super.readBinary(reader, context);
          if (context.versions['zea-engine'].compare([2, 1, 0]) < 0) {
              // Some data is no longer being read at the end of the buffer
              // so we skip to the end here.
              // The data was the atlas size of the lightmap that we no longer support.
              reader.loadFloat32Vec2();
          }
          this.geomLibrary.setNumGeoms(reader.loadUInt32());
          return numGeomsFiles;
      }
      /**
       * Loads all the geometries and metadata from the asset file.
       * @param url - The URL of the asset to load
       * @param context - The load context object that provides additional data such as the units of the scene we are loading into.
       * @return - Returns a promise that resolves once the initial load is complete
       */
      load(url, context = new AssetLoadContext()) {
          return new Promise((resolve, reject) => {
              const folder = url.lastIndexOf('/') > -1 ? url.substring(0, url.lastIndexOf('/')) + '/' : '';
              const filename = url.lastIndexOf('/') > -1 ? url.substring(url.lastIndexOf('/') + 1) : '';
              const stem = filename.substring(0, filename.lastIndexOf('.'));
              let numGeomsFiles = 0;
              context.assetItem = this;
              context.url = url;
              context.folder = folder;
              // preload in case we don't have embedded geoms.
              // completed by geomLibrary.on('loaded' ..
              resourceLoader.incrementWorkload(1);
              // To ensure that the resource loader knows when
              // parsing is done, we listen to the GeomLibrary streamFileLoaded
              // signal. This is fired once the entire stream is parsed.
              this.geomLibrary.on('loaded', () => {
                  // A chunk of geoms are now parsed, so update the resource loader.
                  resourceLoader.incrementWorkDone(1);
              });
              resourceLoader.loadFile('archive', url).then((entries) => {
                  // Load the tree file. This file contains
                  // the scene tree of the asset, and also
                  // tells us how many geom files will need to be loaded.
                  let treeReader;
                  if (entries.tree2) {
                      treeReader = new BinReader(entries.tree2.buffer, 0, SystemDesc.isMobileDevice);
                  }
                  else {
                      const entry = entries.tree ? entries.tree : entries[Object.keys(entries)[0]];
                      treeReader = new BinReader(entry.buffer, 0, SystemDesc.isMobileDevice);
                      context.versions['zea-engine'] = new Version();
                  }
                  numGeomsFiles = this.readBinary(treeReader, context);
                  this.loaded = true;
                  this.emit('loaded');
                  if (numGeomsFiles == 0 && entries.geoms) {
                      this.geomLibrary.readBinaryBuffer(-1, entries.geoms.buffer, context);
                  }
                  else {
                      const basePath = folder + stem;
                      const geomLibraryJSON = {
                          numGeomsPerFile: numGeomsFiles,
                          numGeoms: this.geomLibrary.getNumGeoms(), // Note: was set during readBinary.Why do we need to provide this again?
                      };
                      this.geomLibrary.loadGeomFilesStream(geomLibraryJSON, basePath, context);
                  }
                  resolve();
              }, (error) => {
                  this.emit('error', error);
                  reject(error);
              });
          });
      }
  }
  Registry.register('VLAAsset', VLAAsset);

  /* eslint-disable guard-for-in */
  // AssetItem.registerDataLoader('.obj', ObjDataLoader);
  /**
   * Class designed to load and handle `.obj` files.
   * Which define the geometry and other properties for objects.
   *
   * **Parameters**
   * * **splitObjects(`BooleanParameter`):** _todo_
   * * **splitGroupsIntoObjects(`BooleanParameter`):** _todo_
   * * **loadMtlFile(`BooleanParameter`):** _todo_
   * * **unitsConversion(`NumberParameter`):** _todo_
   * * **defaultShader(`StringParameter`):** _todo_
   *
   * **Events**
   * * **loaded:** Triggered once everything is loaded.
   * * **geomsLoaded:** Triggered once all geometries are loaded.
   *
   * @extends AssetItem
   */
  class ObjAsset extends AssetItem {
      splitObjects = new BooleanParameter('splitObjects', false);
      splitGroupsIntoObjects = new BooleanParameter('splitGroupsIntoObjects', false);
      loadMtlFile = new BooleanParameter('loadMtlFile', true);
      unitsConversion = new NumberParameter('unitsConversion', 1.0);
      defaultShader = new StringParameter('defaultShader', '');
      /**
       * Create an obj asset.
       * @param name - The name of the object asset.
       */
      /**
       * @member splitObjectsParam - TODO
       */
      splitObjectsParam = new BooleanParameter('splitObjects', false);
      /**
       * @member splitGroupsIntoObjectsParam - TODO
       */
      splitGroupsIntoObjectsParam = new BooleanParameter('splitGroupsIntoObjects', false);
      /**
       * @member loadMtlFileParam - TODO
       */
      loadMtlFileParam = new BooleanParameter('loadMtlFile', true);
      /**
       * @member unitsConversionParam - TODO
       */
      unitsConversionParam = new NumberParameter('unitsConversion', 1.0);
      /**
       * @member defaultShaderParam - The default shader to use.
       */
      defaultShaderParam = new StringParameter('defaultShader', '');
      constructor(name) {
          super(name);
          this.addParameter(this.splitObjectsParam);
          this.addParameter(this.splitGroupsIntoObjectsParam);
          this.addParameter(this.loadMtlFileParam);
          this.addParameter(this.unitsConversionParam);
          this.addParameter(this.defaultShaderParam);
      }
      /**
       * Loads all the geometries and metadata from the Obj file.
       * @param url - The URL of the asset to load
       * @return - Returns a promise that resolves once the initial load is complete
       */
      load(url) {
          this.loaded = false;
          return new Promise((resolve, reject) => {
              const fileFolder = url.substring(0, url.lastIndexOf('/')) + '/';
              const parseMtlData = (mtlFileData) => {
                  const lines = mtlFileData.split('\n');
                  const WHITESPACE_RE = /\s+/;
                  let material;
                  const parseColor = function (elements) {
                      if (elements.length == 3)
                          return new Color(parseFloat(elements[0]), parseFloat(elements[1]), parseFloat(elements[2]));
                      else
                          throw new Error('Unable to parse a color from the following parts:' + elements.join('_'));
                  };
                  const parseMap = (name, filename) => {
                      const fileImage = new FileImage(name);
                      fileImage.load(fileFolder + filename);
                      return fileImage;
                  };
                  for (let i = 0; i < lines.length; i++) {
                      let line = lines[i].trim();
                      if (line.startsWith('#'))
                          continue;
                      if (line.includes('#'))
                          line = line.substring(0, line.indexOf('#')).trim();
                      const elements = line.split(WHITESPACE_RE);
                      const key = elements.shift();
                      const value = elements.join(' ');
                      switch (key) {
                          case 'newmtl':
                              material = new StandardSurfaceMaterial(value);
                              this.materialLibrary.addMaterial(material);
                              break;
                          case 'Kd': {
                              material.baseColorParam.value = parseColor(elements);
                              material.baseColorParam.colorSpace == exports.ColorSpace.Linear;
                              break;
                          }
                          case 'map_Kd': {
                              material.baseColorParam.setImage(parseMap('map_Kd', elements[0]));
                              break;
                          }
                          case 'Ks':
                              const specular = (parseFloat(elements[0]) + parseFloat(elements[1]) + parseFloat(elements[2])) / 3.0;
                              material.roughnessParam.value = 1.0 - specular;
                              material.reflectanceParam.value = specular;
                              break;
                          case 'map_Ks':
                              material.roughnessParam.setImage(parseMap('map_Ks', elements[0])); /* flags=TEXTURE_INVERT */
                              material.reflectanceParam.value = 0.2;
                              break;
                          case 'd':
                              material.opacityParam.value = parseFloat(value);
                              break;
                          case 'map_d':
                              material.opacityParam.setImage(parseMap('map_Kd', elements[0]));
                              break;
                          case 'map_bump':
                              material.normalParam.setImage(parseMap('normal', elements[0])); /* flags=BUMP_TO_NORMAL */
                              break;
                          // console.warn("Unhandled material parameter: '" + key +"' in:" + filePath);
                      }
                  }
              };
              const loadMtlFile = (mtlFile) => {
                  return new Promise((resolve) => {
                      loadTextfile(mtlFile, (fileData) => {
                          resourceLoader.incrementWorkDone(1);
                          parseMtlData(fileData);
                          resourceLoader.incrementWorkDone(1);
                          resolve();
                      });
                  });
              };
              const vertices = [];
              const normals = [];
              const texCoords = [];
              const geomDatas = {};
              const parseObjData = async (fileData) => {
                  // performance.mark("parseObjData");
                  // array of lines separated by the newline
                  const lines = fileData.split('\n');
                  const WHITESPACE_RE = /\s+/;
                  let currGeom = undefined;
                  let currMtl = undefined;
                  let numGeoms = 0;
                  const newGeom = (name) => {
                      if (name in geomDatas) {
                          let suffix = 1;
                          while (name + String(suffix) in geomDatas) {
                              suffix++;
                          }
                          name = name + String(suffix);
                      }
                      currGeom = {
                          verticesRemapping: {},
                          texCoordsRemapping: {},
                          normalsRemapping: {},
                          vertexIndices: [],
                          texCoordIndices: [],
                          normalIndices: [],
                          numVertices: 0,
                          numTexCoords: 0,
                          numNormals: 0,
                          faceCounts: [],
                          material: currMtl,
                      };
                      geomDatas[name] = currGeom;
                      numGeoms++;
                  };
                  newGeom('geom');
                  const splitGroupsIntoObjects = this.splitGroupsIntoObjectsParam.value;
                  const stop = false;
                  // let numPolys = 0;
                  for (let i = 0; i < lines.length && !stop; i++) {
                      let line = lines[i].trim();
                      if (line.startsWith('#'))
                          continue;
                      if (line.includes('#'))
                          line = line.substring(0, line.indexOf('#')).trim();
                      const elements = line.split(WHITESPACE_RE);
                      const key = elements.shift();
                      const value = elements.join(' ');
                      switch (key) {
                          case '':
                          case 's':
                              // ignore shading groups
                              continue;
                          case 'mtllib':
                              if (!this.loadMtlFileParam.value)
                                  continue;
                              // Load and parse the mat lib.
                              resourceLoader.incrementWorkload(2);
                              const mtlFile = fileFolder + value;
                              if (mtlFile) {
                                  await loadMtlFile(mtlFile);
                              }
                              break;
                          case 'o':
                              newGeom(value);
                              break;
                          case 'usemtl':
                              currMtl = value;
                              newGeom(value + Object.keys(geomDatas).length);
                              break;
                          case 'g':
                              if (splitGroupsIntoObjects) {
                                  newGeom(value ? elements.join('_') : 'Group' + numGeoms);
                              }
                              break;
                          case 'v':
                              vertices.push(elements.map((i) => parseFloat(i)));
                              break;
                          case 'vt':
                              texCoords.push(elements.map((i) => parseFloat(i)));
                              break;
                          case 'vn':
                              normals.push(elements.map((i) => parseFloat(i)));
                              break;
                          case 'f': {
                              const v_poly = [];
                              const vt_poly = [];
                              const vn_poly = [];
                              for (let j = 0, eleLen = elements.length; j < eleLen; j++) {
                                  // v/vt/vn
                                  const indices = elements[j].split('/').map((i) => parseInt(i) - 1);
                                  const v = indices[0];
                                  // v_poly.push(v);
                                  let v_index = currGeom.verticesRemapping[v];
                                  if (v_index == undefined) {
                                      v_index = currGeom.numVertices;
                                      currGeom.verticesRemapping[v] = v_index;
                                      currGeom.numVertices++;
                                  }
                                  v_poly.push(v_index);
                                  if (indices.length > 1 && !isNaN(indices[1])) {
                                      const vt = indices[1];
                                      vt_poly.push(vt);
                                  }
                                  if (indices.length > 2 && !isNaN(indices[2])) {
                                      const vn = indices[2];
                                      vn_poly.push(vn);
                                  }
                              }
                              currGeom.vertexIndices.push(v_poly);
                              if (vn_poly.length > 0)
                                  currGeom.normalIndices.push(vn_poly);
                              if (vt_poly.length > 0)
                                  currGeom.texCoordIndices.push(vt_poly);
                              if (currGeom.faceCounts[v_poly.length - 3] == undefined) {
                                  currGeom.faceCounts[v_poly.length - 3] = [];
                              }
                              currGeom.faceCounts[v_poly.length - 3]++;
                              // numPolys++;
                              // if(numPolys == 16000)
                              //     stop = true;
                              break;
                          }
                          default: {
                              console.warn('Unhandled line:' + line);
                          }
                      }
                  }
              };
              const buildChildItems = () => {
                  // performance.mark("parseObjDataDone");
                  // performance.mark("buildObjTree");
                  for (const geomName in geomDatas) {
                      if (geomDatas[geomName].numVertices == 0)
                          continue;
                      buildChildItem(geomName, geomDatas[geomName]);
                  }
                  // Done.
                  this.emit('loaded');
                  this.getGeometryLibrary().emit('loaded');
                  this.emit('geomsLoaded');
                  resolve();
              };
              const buildChildItem = (geomName, geomData) => {
                  for (let i = 0; i < geomData.faceCounts.length; i++) {
                      if (geomData.faceCounts[i] == undefined) {
                          geomData.faceCounts[i] = 0;
                      }
                  }
                  const numVertices = geomData.numVertices;
                  const mesh = new Mesh();
                  mesh.name = geomName;
                  mesh.setFaceCounts(geomData.faceCounts);
                  mesh.setNumVertices(numVertices);
                  const positionsAttr = mesh.getVertexAttribute('positions');
                  const unitsConversion = this.unitsConversionParam.value;
                  for (const vsrcKey in geomData.verticesRemapping) {
                      const vsrc = Number.parseInt(vsrcKey);
                      const vtgt = geomData.verticesRemapping[vsrc];
                      positionsAttr.setValue(vtgt, new Vec3(vertices[vsrc][0] * unitsConversion, vertices[vsrc][1] * unitsConversion, vertices[vsrc][2] * unitsConversion));
                  }
                  let normalsAttr;
                  let texCoordsAttr;
                  if (geomData.normalIndices.length > 0) {
                      normalsAttr = new Vec3Attribute();
                      mesh.addVertexAttribute('normals', normalsAttr); // TODO: this method returns void
                  }
                  if (geomData.texCoordIndices.length > 0) {
                      texCoordsAttr = new Vec2Attribute();
                      mesh.addVertexAttribute('texCoords', texCoordsAttr);
                  }
                  const loadedFaces = Array(geomData.faceCounts.length).fill(0);
                  for (let i = 0; i < geomData.vertexIndices.length; i++) {
                      const v_poly = geomData.vertexIndices[i];
                      let faceId = 0;
                      for (let j = 0; j < v_poly.length - 3; ++j) {
                          if (geomData.faceCounts[j])
                              faceId += geomData.faceCounts[j];
                      }
                      faceId += loadedFaces[v_poly.length - 3];
                      loadedFaces[v_poly.length - 3]++;
                      mesh.setFaceVertexIndices(faceId, v_poly);
                      // Set the texCoords and normals...
                      if (normalsAttr) {
                          const vn_poly = geomData.normalIndices[i];
                          for (let j = 0; j < vn_poly.length; j++) {
                              const value = new Vec3(normals[vn_poly[j]][0], normals[vn_poly[j]][1], normals[vn_poly[j]][2]);
                              normalsAttr.setFaceVertexValue(faceId, j, value);
                          }
                      }
                      if (texCoordsAttr && geomData.texCoordIndices.length == geomData.vertexIndices.length) {
                          const vt_poly = geomData.texCoordIndices[i];
                          for (let j = 0; j < vt_poly.length; j++) {
                              const value = new Vec2(texCoords[vt_poly[j]][0], texCoords[vt_poly[j]][1]);
                              texCoordsAttr.setFaceVertexValue(faceId, j, value);
                          }
                      }
                  }
                  const geomItem = new GeomItem(geomName, mesh);
                  // Move the transform of the geom item to the center of the geom.
                  // This is so that transparent objects can render correctly, and the
                  // transform gizmo becomes centered on each geom(for testing)
                  const delta = mesh.getBoundingBox().center();
                  {
                      const offset = delta.negate();
                      const positions = mesh.getVertexAttribute('positions');
                      for (let i = 0; i < positions.getCount(); i++) {
                          positions.setValue(i, positions.getValue(i).add(offset));
                      }
                      mesh.setBoundingBoxDirty();
                  }
                  geomItem.localXfoParam.value = new Xfo(delta);
                  if (geomData.material != undefined && this.materialLibrary.hasMaterial(geomData.material)) {
                      geomItem.materialParam.value = this.materialLibrary.getMaterial(geomData.material);
                  }
                  else {
                      const defaultShader = this.defaultShaderParam.value;
                      const material = new Material(geomName + ' mat');
                      material.setShaderName(defaultShader != '' ? defaultShader : 'StandardSurfaceShader');
                      this.materialLibrary.addMaterial(material);
                      geomItem.materialParam.value = material;
                  }
                  this.addChild(geomItem, false);
              };
              const loadObjData = () => {
                  resourceLoader.incrementWorkload(2);
                  loadTextfile(url, (fileData) => {
                      resourceLoader.incrementWorkDone(1);
                      parseObjData(fileData).then(() => {
                          buildChildItems();
                          resourceLoader.incrementWorkDone(1);
                      });
                  }, (error) => {
                      this.emit('error', error);
                      reject(error);
                  });
              };
              loadObjData();
          });
      }
  }

  /**
   * The BaseTool provides an interface you can implement to define your own mouse, keyboard, and touch event handlers.
   *
   * A tool is a class that is delegated the handling of all user interaction events. The built-in {CameraManipulator}
   * class provides a default tool for moving the viewport camera.
   *
   * You can define your own custom tool, and replace the default CameraManipulator like so.
   * ```javascript
   *   const customManipulator = new MyCustomCameraManipulator()
   *   renderer.getViewport().setManipulator(customManipulator)
   * ```
   *
   * Each tool should provide handlers for the main types of events it will be responsible for handling.
   * These include mouse, keyboard, touch and VR events. Once a tool is installed on the viewport, the viewport
   * will start invoking the handler methods defined in the interface.
   * If the Tool handles an event, it should call stopPropagation on the event so the engine knows to stop the
   * propagation of the event to other classes.
   *
   * > Note: VR Events are ann emulation of mouse events, generated by the engine, allowing custom tools to be used to provide various VR interactions.
   *
   * **Events**
   * * **installChanged:** Triggered when the tool is installed or uninstalled.
   * * **activatedChanged:** Triggered when a tool is activated or deactivated.
   *
   * @extends ParameterOwner
   */
  class BaseTool extends ParameterOwner {
      __activated = false;
      /**
       * Creates an instance of BaseTool.
       */
      constructor() {
          super();
      }
      /**
       * Enables tools usage. This method is called by either the Viewport when a tool is removed, or the ToolManage if it is installed.
       */
      activateTool() {
          if (this.__activated)
              throw new Error('Tool already activate');
          this.__activated = true;
          this.emit('activatedChanged', { activated: this.__activated });
      }
      /**
       * Disables tool usage. This method is called by either the Viewport when a tool is removed, or the ToolManage if it is installed.
       */
      deactivateTool() {
          this.__activated = false;
          this.emit('activatedChanged', { activated: this.__activated });
      }
      // ///////////////////////////////////
      // Pointer events
      /**
       * Event fired when either the mouse button is pressed, or a touch start event occurs.
       *
       * @param event - The event param.
       */
      onPointerDown(event) {
          // console.warn('Implement me')
      }
      /**
       * Event fired when either the mouse cursor is moved, or a touch point moves.
       *
       * @param event - The event param.
       */
      onPointerMove(event) {
          // console.warn('Implement me')
      }
      /**
       * Event fired when either the mouse button is released, or a touch end event occurs.
       *
       * @param event - The event param.
       */
      onPointerUp(event) {
          // console.warn('Implement me')
      }
      /**
       * Event fired when a pointing device button is clicked.
       *
       * @param event - The event param.
       */
      onPointerClick(event) {
          // console.warn('Implement me')
      }
      /**
       * Event fired when a pointing device button is double clicked.
       *
       * @param event - The event param.
       */
      onPointerDoubleClick(event) {
          // console.warn('Implement me')
      }
      /**
       * Event fired when a pointing device button is held for a long time..
       *
       * @param event - The event param.
       */
      onPointerLongPress(event) {
          // console.warn('Implement me')
      }
      /**
       * Event fired when a mouse pointer enters the viewport
       *
       * @param event - The event param.
       */
      onPointerEnter(event) {
          // console.warn('Implement me')
      }
      /**
       * Event fired when a mouse pointer leaves the viewport
       *
       * @param event - The event param.
       */
      onPointerLeave(event) {
          // console.warn('Implement me')
      }
      /**
       * Event fired when the user rotates the pointing device wheel.
       *
       * @param event - The event param.
       */
      onWheel(event) {
          // console.warn('Implement me')
      }
      // ///////////////////////////////////
      // Keyboard events
      /**
       * Event fired when the user presses down a key on the keyboard.
       *
       * @param event - The event param.
       */
      onKeyDown(event) {
          // console.warn('Implement me')
      }
      /**
       * Event fired when the user releases a key on the keyboard.
       *
       * @param event - The event param.
       */
      onKeyUp(event) {
          // console.warn('Implement me')
      }
      // ///////////////////////////////////
      // Touch events
      /**
       * Event fired when one or more touch points have been disrupted in an implementation-specific manner.
       *
       * @param event - The event param.
       */
      onTouchCancel(event) {
          // console.warn('Implement me')
      }
  }

  /* eslint-disable require-jsdoc */
  const MANIPULATION_MODES = {
      pan: 0,
      dolly: 1,
      zoom: 2,
      look: 3,
      turntable: 4,
      tumbler: 5,
      trackball: 6,
  };
  /**
   * Class for defining and interaction model of the camera.
   *
   * The CameraManipulator supports a variety of manipulation modes, and hotkeys/modifier keys
   * that allow the user to rapidly switch between modes, such as 'turntable' and 'pan'.
   * A detailed explanation of various camera manipulation modes can be found
   * here: https://www.mattkeeter.com/projects/rotation/
   *
   * **MANIPULATION_MODES**
   * * **pan:** Translates the camera sideways according the the camera's current orientation. Activated by the right mouse button, or two fingered touches on mobile.
   * * **dolly:** Translates the camera forwards and backwards according the the camera's current orientation. Activated by holding the ctrl and alt keys while using the left mouse button, or the mouse wheel, or two fingered touches on mobile.
   * * **focussing:** Focusses the camera on a specific 3d point in the scene. Activated by double clicking, or double tapping on a geometry in the 3d view.
   * * **look:** Rotates the camera around its own position. Useful for simulating looking by turning ones head inside a scene. Activated by holding the ctrl key and right mouse button.
   * * **turntable:** Rotates the camera around the current camera target, using the turntable style manipulation described above. Activated by the left mouse button.
   * * **tumbler:** Rotates the camera around the current camera target, using the tumbler style manipulation described above. Activated by the left mouse button.
   * * **trackball:** Rotates the camera around the current camera target, using the trackball style manipulation described above. Activated by the left mouse button.
   *
   * The default manipulation mode, is the mode that is active with only the left mouse button. The default manipulation mode is currently 'turntable'.
   *
   * To Assign a different default manipulation mode, retrieve the manipulator from the viewport
   * and set the default mode.
   * ```
   * const cameraManipulator = renderer.getViewport().getManipulator()
   * cameraManipulator.setDefaultManipulationMode(CameraManipulator.MANIPULATION_MODES.trackball);
   * ```
   *
   * This class is the default manipulator, and can be replaced with custom manipulators.
   *
   * ```
   * const customManipulator = new CustomCameraManipulator()
   * renderer.getViewport().setManipulator(customManipulator);
   * ```
   *
   * The Camera manipulator can focus the view on a point in the view by various gestures.
   * A single click or touch tap can cause the view to be focussed or a double click or tap.
   * This behavior can be configured using the 2 values.
   * e.g. to disable all focus gestures, set both values to zero.
   * ```
   * // Make the aim focus occur after a single touch or click.
   * const cameraManipulator = renderer.getViewport().getManipulator()
   * cameraManipulator.aimFocusOnTouchTap = 1
   * cameraManipulator.aimFocusOnMouseClick = 1
   * ```
   *
   * **Parameters**
   * * **OrbitRate(`NumberParameter`):** The rate at which mouse or touch interactions are translated camera orientation changes.
   * * **DollySpeed(`NumberParameter`):** The rate at which the mouse button or touch interactions are translated camera dolly movement.
   * * **mouseWheelDollySpeed(`NumberParameter`):** The rate at which the mouse wheel interactions are translated camera dolly movement.
   *
   *   Note: this value defaults to different values for touch based interfaces to mouse based input.
   *   For mobile devices, the orbit rate defaults to 0.5, and for mouse based interaction, the value defaults to 1.
   *   A value of 1 means that the camera will rotate 180 degrees for a mouse interaction that spans from the left border of the viewport to the right border.
   *   Some applications might require lower, or higher default values
   *
   * To set different default values for mobile or desktop set a different value based on the SystemDesc.isMobileDevice flag.
   * ```
   * const cameraManipulator = renderer.getViewport().getManipulator()
   * cameraManipulator.getParameter('OrbitRate').setValue(SystemDesc.isMobileDevice ? 0.1 : 0.4)
   * ```
   *
   * **Events**
   * * **movementFinished:** Emitted when a camera movement is finished. E.g. when the user releases the mouse after a dolly, or after the focussing action has completed.
   * * **aimingFocus:** Emitted when a camera is being focussed on a target. E.g. when the user double clicks the mouse on a geometry in the view.
   *
   * @extends BaseTool
   */
  class CameraManipulator extends BaseTool {
      appData;
      orbitAroundCursor = false;
      zoomTowardGeomUnderCursor = false;
      aimFocusOnTouchTap = 2;
      aimFocusOnMouseClick = 2;
      enabledWASDWalkMode = false;
      defaultManipulationState = MANIPULATION_MODES.turntable;
      prevCursor;
      manipulationState;
      pointerDown = false;
      dragging = 0;
      keyboardMovement = false;
      keysPressed = [];
      velocity = new Vec3();
      prevVelocityIntegrationTime = -1;
      ongoingTouches = {};
      orbitTarget;
      prevMousePos;
      focusIntervalId;
      mouseWheelMovementDist = 0;
      mouseWheelZoomCount = 0;
      mouseWheelZoomId = -1;
      /**
       * @member orbitRateParam - The rate at which mouse or touch interactions are translated camera orientation changes.
       */
      orbitRateParam = new NumberParameter('OrbitRate', SystemDesc.isMobileDevice ? 0.5 : 1);
      /**
       * @member dollySpeedParam - The rate at which the mouse button or touch interactions are translated camera dolly movement.
       */
      dollySpeedParam = new NumberParameter('DollySpeed', 0.001);
      /**
       * @member mouseWheelDollySpeedParam - The rate at which the mouse wheel interactions are translated camera dolly movement.
       */
      mouseWheelDollySpeedParam = new NumberParameter('MouseWheelDollySpeed', 0.1);
      /**
       * @member walkSpeedParam - TODO
       */
      walkSpeedParam = new NumberParameter('WalkSpeed', 5); // Value is in meters/second
      /**
       * @member walkModeCollisionDetection - TODO
       */
      walkModeCollisionDetection = new BooleanParameter('WalkModeCollisionDetection', false);
      /**
       * Create a camera, mouse and keyboard
       * @param appData - The object containing the scene and the renderer.
       */
      constructor(appData) {
          super();
          this.appData = appData;
          this.defaultManipulationState = MANIPULATION_MODES.turntable;
          this.manipulationState = this.defaultManipulationState;
          this.addParameter(this.orbitRateParam);
          this.addParameter(this.dollySpeedParam);
          this.addParameter(this.mouseWheelDollySpeedParam);
          this.addParameter(this.walkSpeedParam);
          this.addParameter(this.walkModeCollisionDetection);
      }
      /**
       * Enables tools usage.
       */
      activateTool() {
          super.activateTool();
          if (this.appData && this.appData.renderer) {
              this.prevCursor = this.appData.renderer.getGLCanvas().style.cursor;
              this.appData.renderer.getGLCanvas().style.cursor = 'cursor';
          }
      }
      /**
       * Disables tool usage.
       */
      deactivateTool() {
          super.deactivateTool();
          if (this.appData && this.appData.renderer) {
              this.appData.renderer.getGLCanvas().style.cursor = this.prevCursor;
          }
      }
      /**
       * Sets default manipulation mode.
       * The value can be on of the keys in #CameraManipulator.MANIPULATION_MODES
       *
       * @param manipulationMode - The manipulation mode value.
       */
      setDefaultManipulationMode(manipulationMode) {
          if (typeof manipulationMode == 'string') {
              this.defaultManipulationState = MANIPULATION_MODES[manipulationMode];
          }
          else
              this.defaultManipulationState = manipulationMode;
          if (!Object.values(MANIPULATION_MODES).includes(this.defaultManipulationState)) {
              throw new Error('Invalid Camera Manipulation Mode. Must be one of ' + Object.keys(MANIPULATION_MODES));
          }
      }
      /**
       * The look method.
       * @param event - The event value.
       * @param dragVec - The drag vector value.
       */
      look(event, dragVec) {
          const { viewport } = event;
          const camera = viewport.getCamera();
          const orbitRate = this.orbitRateParam.value;
          const globalXfo = camera.globalXfoParam.value;
          // Orbit
          const orbit = new Quat();
          orbit.rotateZ((dragVec.x / viewport.getWidth()) * Math.PI * orbitRate);
          globalXfo.ori = orbit.multiply(globalXfo.ori);
          // Pitch
          const pitch = new Quat();
          pitch.rotateX((dragVec.y / viewport.getHeight()) * Math.PI * orbitRate);
          globalXfo.ori.multiplyInPlace(pitch);
          camera.globalXfoParam.value = globalXfo;
      }
      /**
       * Rotates viewport camera about the target.
       *
       * @param event - The event value.
       * @param dragVec - The drag vector value.
       */
      turntable(event, dragVec) {
          const { viewport } = event;
          const camera = viewport.getCamera();
          const orbitRate = this.orbitRateParam.value;
          const globalXfo = camera.globalXfoParam.value;
          const cameraTargetOffset = globalXfo.ori.inverse().rotateVec3(globalXfo.tr.subtract(this.orbitTarget));
          // Orbit
          const orbit = new Quat();
          orbit.rotateZ((dragVec.x / viewport.getWidth()) * 2 * Math.PI * -orbitRate);
          globalXfo.ori = orbit.multiply(globalXfo.ori);
          // Pitch
          const pitch = new Quat();
          pitch.rotateX((dragVec.y / viewport.getHeight()) * Math.PI * -orbitRate);
          globalXfo.ori.multiplyInPlace(pitch);
          globalXfo.tr = this.orbitTarget.add(globalXfo.ori.rotateVec3(cameraTargetOffset));
          camera.globalXfoParam.value = globalXfo;
      }
      /**
       * Rotates viewport camera about the target.
       *
       * @param event - The event value.
       * @param dragVec - The drag vector value.
       */
      tumbler(event, dragVec) {
          const { viewport } = event;
          const camera = viewport.getCamera();
          const orbitRate = this.orbitRateParam.value;
          const globalXfo = camera.globalXfoParam.value;
          const xVec = globalXfo.ori.getXaxis();
          const yVec = globalXfo.ori.getYaxis();
          const zVec = globalXfo.ori.getZaxis();
          const vec = xVec.scale(-dragVec.x).add(yVec.scale(dragVec.y));
          const rotateAxis = vec.cross(zVec);
          rotateAxis.normalizeInPlace();
          const dragVecLength = dragVec.length();
          const cameraTargetOffset = globalXfo.ori.inverse().rotateVec3(globalXfo.tr.subtract(this.orbitTarget));
          // Orbit
          const orbit = new Quat();
          orbit.setFromAxisAndAngle(rotateAxis, (dragVecLength / viewport.getWidth()) * Math.PI * -orbitRate);
          globalXfo.ori = orbit.multiply(globalXfo.ori);
          globalXfo.tr = this.orbitTarget.add(globalXfo.ori.rotateVec3(cameraTargetOffset));
          camera.globalXfoParam.value = globalXfo;
      }
      /**
       * Rotates viewport camera about the target.
       *
       * @param event - The event value.
       * @param dragVec - The drag vector value.
       */
      trackball(event, dragVec) {
          const { viewport } = event;
          const camera = viewport.getCamera();
          const orbitRate = this.orbitRateParam.value;
          const globalXfo = camera.globalXfoParam.value;
          const xVec = globalXfo.ori.getXaxis();
          const yVec = globalXfo.ori.getYaxis();
          const zVec = globalXfo.ori.getZaxis();
          const vec = xVec.scale(-dragVec.x).add(yVec.scale(dragVec.y));
          const rotateAxis = vec.cross(zVec);
          rotateAxis.normalizeInPlace();
          const dragVecLength = dragVec.length();
          const cameraTargetOffset = globalXfo.ori.inverse().rotateVec3(globalXfo.tr.subtract(this.orbitTarget));
          // Orbit
          const orbit = new Quat();
          orbit.setFromAxisAndAngle(rotateAxis, (dragVecLength / viewport.getWidth()) * Math.PI * -orbitRate);
          globalXfo.ori = orbit.multiply(globalXfo.ori);
          globalXfo.tr = this.orbitTarget.add(globalXfo.ori.rotateVec3(cameraTargetOffset));
          camera.globalXfoParam.value = globalXfo;
      }
      /**
       * Rotates the camera around its own `X`,`Y` axes.
       *
       * @param event - The event value.
       * @param dragVec - The drag vector value.
       */
      pan(event, dragVec) {
          const { viewport } = event;
          const camera = viewport.getCamera();
          const delta = new Xfo();
          const xAxis = new Vec3(1, 0, 0);
          const yAxis = new Vec3(0, 1, 0);
          if (camera.isOrthographic()) {
              const frustumHeight = camera.getFrustumHeight();
              const frustumWidth = frustumHeight * (viewport.getWidth() / viewport.getHeight());
              delta.tr = xAxis.scale(-(dragVec.x / viewport.getWidth()) * frustumWidth);
              delta.tr.addInPlace(yAxis.scale((dragVec.y / viewport.getHeight()) * frustumHeight));
          }
          else {
              const focalDistance = camera.getFocalDistance();
              const fovY = camera.getFov();
              const cameraPlaneHeight = 2.0 * focalDistance * Math.tan(0.5 * fovY);
              const cameraPlaneWidth = cameraPlaneHeight * (viewport.getWidth() / viewport.getHeight());
              delta.tr = xAxis.scale(-(dragVec.x / viewport.getWidth()) * cameraPlaneWidth);
              delta.tr.addInPlace(yAxis.scale((dragVec.y / viewport.getHeight()) * cameraPlaneHeight));
          }
          const cameraXfo = camera.globalXfoParam.value;
          camera.globalXfoParam.value = cameraXfo.multiply(delta);
      }
      /**
       * Dollying moves the camera forward at a constant speed, not changing the focal distance.
       * @param event - The event value.
       * @param dragVec - The drag vector value.
       */
      dolly(event, pointerPos, dragVec) {
          const viewport = event.viewport;
          const camera = viewport.getCamera();
          const focalDistance = camera.getFocalDistance();
          // As we click and drag away from the center of the screen, we move forward.
          // Like pullingoutelves into the screen farther.
          const screenCenter = new Vec2(viewport.getWidth() * 0.5, viewport.getHeight() * 0.5);
          const vecFromCenter = pointerPos.subtract(screenCenter).normalize();
          const dragDist = dragVec.dot(vecFromCenter);
          const applyMovement = () => {
              const dollyDist = dragDist * this.dollySpeedParam.value * focalDistance;
              const delta = new Xfo();
              delta.tr.set(0, 0, dollyDist);
              const globalXfo = camera.globalXfoParam.value;
              camera.globalXfoParam.value = globalXfo.multiply(delta);
          };
          const applyViewScale = () => {
              const dollyDist = dragDist * this.dollySpeedParam.value;
              const viewHeight = camera.getFrustumHeight();
              const zoomDist = viewHeight * dollyDist;
              camera.setFrustumHeight(viewHeight + zoomDist);
          };
          if (camera.isOrthographic()) {
              applyViewScale();
          }
          else {
              applyMovement();
          }
      }
      /**
       * Zooms the camera towards the target.
       * @param event - The event value.
       * @param dragVec - The drag vector value.
       */
      zoom(event, dragStartPos, dragVec) {
          const viewport = event.viewport;
          const camera = viewport.getCamera();
          const focalDistance = camera.getFocalDistance();
          // As we click and drag away from the center of the screen, we move forward.
          // Like pullingoutelves into the screen farther.
          const screenCenter = new Vec2((viewport.getWidth() * 0.5) / window.devicePixelRatio, (viewport.getHeight() * 0.5) / window.devicePixelRatio);
          const vecFromCenter = dragStartPos.subtract(screenCenter).normalize();
          const dragDist = dragVec.dot(vecFromCenter);
          const applyMovement = () => {
              const zoomDist = -dragDist * this.dollySpeedParam.value * focalDistance;
              const delta = new Xfo();
              delta.tr.set(0, 0, zoomDist);
              const globalXfo = camera.globalXfoParam.value;
              camera.setFocalDistance(focalDistance + zoomDist);
              camera.globalXfoParam.value = globalXfo.multiply(delta);
          };
          const applyViewScale = () => {
              const dollyDist = -dragDist * this.dollySpeedParam.value;
              const viewHeight = camera.getFrustumHeight();
              const zoomDist = viewHeight * dollyDist;
              camera.setFrustumHeight(viewHeight + zoomDist);
          };
          if (camera.isOrthographic()) {
              applyViewScale();
          }
          else {
              applyMovement();
          }
      }
      /**
       * The initDrag method.
       *
       * @private
       * @param event - The event value.
       */
      initDrag(event) {
          this.pointerDown = true;
          const viewport = event.viewport;
          const camera = viewport.getCamera();
          const xfo = camera.globalXfoParam.value;
          if (this.orbitAroundCursor) {
              if (event.intersectionData != undefined && this.orbitAroundCursor) {
                  this.orbitTarget = event.intersectionData.intersectionPos;
                  const vec = xfo.inverse().transformVec3(event.intersectionData.intersectionPos);
                  camera.setFocalDistance(-vec.z);
              }
              else {
                  if (event.pointerRay) {
                      this.orbitTarget = event.pointerRay.pointAtDist(camera.getFocalDistance());
                  }
                  else {
                      this.orbitTarget = xfo.tr.add(xfo.ori.getZaxis().scale(-camera.getFocalDistance()));
                  }
              }
          }
          else {
              this.orbitTarget = xfo.tr.add(xfo.ori.getZaxis().scale(-camera.getFocalDistance()));
          }
          this.dragging = 1;
      }
      /**
       * The initDrag method.
       *
       * @private
       * @param event - The event value.
       */
      endDrag(event) {
          if (event.getCapture() == this)
              event.releaseCapture();
          this.dragging = 0;
          this.pointerDown = false;
      }
      /**
       * The aimFocus method.
       *
       * @private
       * @param camera - The camera that we are aiming
       * @param target - The target to focus on.
       * @param distance - The distance from the target to get to.
       * @param duration - The duration in milliseconds to aim the focus.
       */
      aimFocus(camera, target, distance = -1, duration = 400) {
          if (this.focusIntervalId)
              clearInterval(this.focusIntervalId);
          const count = Math.round(duration / 20); // each step is 20ms
          const initalMode = this.defaultManipulationState;
          let i = 0;
          const applyMovement = () => {
              const prevGlobalXfo = camera.globalXfoParam.value;
              const initialDist = camera.getFocalDistance();
              const dir = target.subtract(prevGlobalXfo.tr);
              const currDist = dir.normalizeInPlace();
              const targetGlobalXfo = prevGlobalXfo.clone();
              if (initalMode == MANIPULATION_MODES.turntable || initalMode == MANIPULATION_MODES.look) {
                  // Orbit
                  {
                      const currDir = prevGlobalXfo.ori.getZaxis().clone();
                      currDir.z = 0;
                      const newDir = dir.negate();
                      newDir.z = 0;
                      const orbit = new Quat();
                      orbit.setFrom2Vectors(currDir, newDir);
                      targetGlobalXfo.ori = orbit.multiply(targetGlobalXfo.ori);
                  }
                  // Pitch
                  {
                      const xAxis = prevGlobalXfo.ori.getXaxis().clone();
                      const currDir = prevGlobalXfo.ori.getZaxis().clone();
                      const newDir = dir.negate();
                      newDir.subtractInPlace(xAxis.scale(newDir.dot(xAxis)));
                      newDir.normalizeInPlace();
                      const pitch = new Quat();
                      if (currDir.cross(newDir).dot(xAxis) > 0.0)
                          pitch.rotateX(currDir.angleTo(newDir));
                      else
                          pitch.rotateX(-currDir.angleTo(newDir));
                      targetGlobalXfo.ori = targetGlobalXfo.ori.multiply(pitch);
                  }
                  // Fix Roll
                  {
                      const currDir = targetGlobalXfo.ori.getXaxis().clone();
                      const newDir = currDir.clone();
                      newDir.z = 0;
                      newDir.normalizeInPlace();
                      const roll = new Quat();
                      roll.setFrom2Vectors(currDir, newDir);
                      targetGlobalXfo.ori = roll.multiply(targetGlobalXfo.ori);
                  }
              }
              else {
                  const currDir = prevGlobalXfo.ori.getZaxis().clone();
                  const newDir = dir.negate();
                  const orbit = new Quat();
                  orbit.setFrom2Vectors(currDir, newDir);
                  targetGlobalXfo.ori = orbit.multiply(targetGlobalXfo.ori);
              }
              // With each iteration we get closer to our goal
              // and on the final iteration we should aim perfectly at
              // the target.
              const t = Math.pow(i / count, 2);
              const globalXfo = prevGlobalXfo.clone();
              globalXfo.ori = prevGlobalXfo.ori.lerp(targetGlobalXfo.ori, t);
              if (distance > 0) {
                  const displacement = dir.scale(currDist - distance);
                  globalXfo.tr.addInPlace(displacement.scale(t));
              }
              camera.setFocalDistance(initialDist + (currDist - initialDist) * t);
              camera.globalXfoParam.value = globalXfo;
              i++;
              if (i <= count) {
                  // @ts-ignore
                  this.focusIntervalId = setTimeout(applyMovement, 20);
              }
              else {
                  this.focusIntervalId = undefined;
                  this.emit('movementFinished');
                  camera.emit('movementFinished');
              }
          };
          applyMovement();
      }
      /**
       * The orientPointOfView method.
       *
       * @private
       * @param camera - The camera that we are orienting
       * @param position - The target to focus on.
       * @param target - The target to focus on.
       * @param distance - The distance to the specified we want the user to be moved to
       * @param duration - The duration in milliseconds to aim the focus.
       */
      orientPointOfView(camera, position, target, distance = 0, duration = 400) {
          if (this.focusIntervalId)
              clearInterval(this.focusIntervalId);
          const count = Math.round(duration / 20); // each step is 20ms
          let i = 0;
          const applyMovement = () => {
              const initialGlobalXfo = camera.globalXfoParam.value;
              const initialTarget = camera.getTargetPosition();
              // With each iteration we get closer to our goal
              // and on the final iteration we should aim perfectly at
              // the target.
              const t = Math.pow(i / count, 2);
              // Sometimes we want to pull users to within some threshold of the specified position.
              const dirToPosition = position.subtract(initialGlobalXfo.tr);
              const currDistToPosition = dirToPosition.normalizeInPlace();
              const displacement = dirToPosition.scale(currDistToPosition - distance);
              const pos = initialGlobalXfo.tr.add(displacement.scale(t));
              const targetPos = initialTarget.lerp(target, t);
              camera.setPositionAndTarget(pos, targetPos);
              i++;
              if (i <= count) {
                  // @ts-ignore
                  this.focusIntervalId = setTimeout(applyMovement, 20);
              }
              else {
                  this.focusIntervalId = undefined;
                  this.emit('movementFinished');
                  camera.emit('movementFinished');
              }
          };
          applyMovement();
      }
      /**
       * Invoked when a user double presses a pointer over an element.
       *
       * @param event - The pointer event that occurs
       * @memberof CameraManipulator
       */
      onPointerDoubleClick(event) {
          const aimFocus = (pointerRay) => {
              const viewport = event.viewport;
              const camera = viewport.getCamera();
              const cameraGlobalXfo = camera.globalXfoParam.value;
              const aimTarget = cameraGlobalXfo.tr.add(pointerRay.dir.scale(event.intersectionData.dist));
              this.aimFocus(camera, aimTarget);
              // Note: Collab can use these mouseEvents to guide users attention.
              // @ts-ignore
              event.aimTarget = aimTarget;
              // @ts-ignore
              event.aimDistance = event.intersectionData.dist;
              this.emit('aimingFocus', event);
              camera.emit('aimingFocus', event);
              event.stopPropagation();
          };
          if (event.intersectionData && this.aimFocusOnMouseClick) {
              if (event.pointerType === POINTER_TYPES.mouse && this.aimFocusOnMouseClick == 2) {
                  const mouseEvent = event;
                  aimFocus(mouseEvent.pointerRay);
                  mouseEvent.preventDefault();
              }
              if (event.pointerType === POINTER_TYPES.touch && this.aimFocusOnTouchTap == 2) {
                  const pointerEvent = event;
                  aimFocus(pointerEvent.pointerRay);
              }
          }
      }
      /**
       * Event fired when either the mouse button is pressed, or a touch start event occurs.
       *
       * @param event - The mouse event that occurs.
       */
      onPointerDown(event) {
          if (event instanceof ZeaMouseEvent) {
              if (this.dragging == 1) {
                  this.endDrag(event);
              }
              this.initDrag(event);
              const mouseEvent = event;
              this.prevMousePos = mouseEvent.pointerPos;
              if (mouseEvent.button == 2) {
                  this.manipulationState = MANIPULATION_MODES.pan;
              }
              else if (mouseEvent.ctrlKey && mouseEvent.altKey) {
                  this.manipulationState = MANIPULATION_MODES.dolly;
              }
              else if (mouseEvent.ctrlKey || mouseEvent.button == 2) {
                  this.manipulationState = MANIPULATION_MODES.look;
              }
              else {
                  this.manipulationState = this.defaultManipulationState;
              }
              mouseEvent.preventDefault();
          }
          else if (event.pointerType === POINTER_TYPES.touch) {
              this._onTouchStart(event);
          }
      }
      /**
       * Event fired when either the mouse cursor is moved, or a touch point moves.
       *
       * @param event - The mouse event that occurs.
       */
      onPointerMove(event) {
          if (this.dragging != 0) {
              if (event instanceof ZeaMouseEvent) {
                  this._onMouseMove(event);
                  event.preventDefault();
              }
              if (event instanceof ZeaTouchEvent) {
                  this._onTouchMove(event);
              }
              this.dragging = 2;
              event.stopPropagation();
          }
      }
      /**
       * The event that occurs when the user moves the pointer across a screen.
       *
       * @param event -The event value
       */
      _onMouseMove(event) {
          if (!this.pointerDown)
              return;
          const pointerPos = event.pointerPos;
          const dragVec = pointerPos.subtract(this.prevMousePos);
          // Note: at mouse down, we selected the manipulation
          // mode to use for this interaction.
          switch (this.manipulationState) {
              case MANIPULATION_MODES.turntable:
                  this.turntable(event, dragVec);
                  break;
              case MANIPULATION_MODES.tumbler:
                  this.tumbler(event, dragVec);
                  break;
              case MANIPULATION_MODES.trackball:
                  this.trackball(event, dragVec);
                  break;
              case MANIPULATION_MODES.look:
                  this.look(event, dragVec);
                  break;
              case MANIPULATION_MODES.pan:
                  this.pan(event, pointerPos.subtract(this.prevMousePos));
                  break;
              case MANIPULATION_MODES.dolly:
                  this.dolly(event, pointerPos, dragVec);
                  break;
              case MANIPULATION_MODES.zoom:
                  this.zoom(event, pointerPos, dragVec);
                  break;
          }
          this.prevMousePos = pointerPos;
      }
      /**
       * The event that occurs when the user moves pointer across a touch screen.
       *
       * @param event - The touch event that occurs.
       * @private
       */
      _onTouchMove(event) {
          const touches = event.touches;
          if (touches.length == 1) {
              const touch = touches[0];
              const touchPos = touch.touchPos;
              const touchData = this.ongoingTouches[touch.identifier];
              if (!touchData)
                  return;
              const dragVec = touchPos.subtract(touchData.pos);
              switch (this.defaultManipulationState) {
                  case MANIPULATION_MODES.look:
                      // TODO: scale panning here.
                      dragVec.scaleInPlace(6.0);
                      this.look(event, dragVec);
                      break;
                  case MANIPULATION_MODES.turntable:
                      this.turntable(event, dragVec);
                      break;
                  case MANIPULATION_MODES.tumbler:
                      this.tumbler(event, dragVec);
                      break;
                  case MANIPULATION_MODES.trackball:
                      this.trackball(event, dragVec);
                      break;
                  case MANIPULATION_MODES.pan:
                      this.pan(event, dragVec);
                      break;
                  case MANIPULATION_MODES.dolly:
                      this.dolly(event, touchPos, dragVec);
                      break;
                  case MANIPULATION_MODES.zoom:
                      this.zoom(event, touchData.pos, dragVec);
                      break;
              }
              touchData.pos = touchPos;
          }
          else if (touches.length == 2) {
              const touch0 = touches[0];
              const touchData0 = this.ongoingTouches[touch0.identifier];
              const touch1 = touches[1];
              const touchData1 = this.ongoingTouches[touch1.identifier];
              if (!touchData0 || !touchData1)
                  return;
              const touch0Pos = touch0.touchPos;
              const touch1Pos = touch1.touchPos;
              const startSeparation = touchData1.pos.subtract(touchData0.pos).length();
              const dragSeparation = touch1Pos.subtract(touch0Pos).length();
              const separationDist = startSeparation - dragSeparation;
              const touch0Drag = touch0Pos.subtract(touchData0.pos);
              const touch1Drag = touch1Pos.subtract(touchData1.pos);
              const dragVec = touch0Drag.add(touch1Drag);
              // TODO: scale panning here.
              dragVec.scaleInPlace(0.5);
              // apply the vectors to calculate a pan and zoom
              const dragDist = separationDist * 0.002;
              const { viewport } = event;
              const camera = viewport.getCamera();
              const focalDistance = camera.getFocalDistance();
              const fovY = camera.getFov();
              const xAxis = new Vec3(1, 0, 0);
              const yAxis = new Vec3(0, 1, 0);
              const cameraPlaneHeight = 2.0 * focalDistance * Math.tan(0.5 * fovY);
              const cameraPlaneWidth = cameraPlaneHeight * (viewport.getWidth() / viewport.getHeight());
              const delta = new Xfo();
              delta.tr = xAxis.scale(-(dragVec.x / viewport.getWidth()) * cameraPlaneWidth);
              delta.tr.addInPlace(yAxis.scale((dragVec.y / viewport.getHeight()) * cameraPlaneHeight));
              const zoomDist = dragDist * focalDistance;
              camera.setFocalDistance(focalDistance + zoomDist);
              delta.tr.z += zoomDist;
              // Apply the roll
              switch (this.defaultManipulationState) {
                  case MANIPULATION_MODES.tumbler:
                  case MANIPULATION_MODES.trackball:
                      const vecPrev = touchData1.pos.subtract(touchData0.pos);
                      const vecNow = touch1Pos.subtract(touch0Pos);
                      let deltaAngle = vecPrev.normalize().angleTo(vecNow.normalize());
                      if (vecPrev.cross(vecNow) < 0.0) {
                          deltaAngle = -deltaAngle;
                      }
                      const roll = new Quat();
                      roll.rotateZ(deltaAngle);
                      delta.ori.multiplyInPlace(roll);
                      break;
              }
              const globalXfo = camera.globalXfoParam.value;
              camera.globalXfoParam.value = globalXfo.multiply(delta);
              touchData0.pos = touch0Pos;
              touchData1.pos = touch1Pos;
          }
      }
      /**
       * Event fired when either the mouse button is released, or a touch end event occurs.
       *
       * @param event - The mouse event that occurs.
       */
      onPointerUp(event) {
          if (this.dragging == 1) {
              // No dragging ocurred. Release the capture and let the event propagate like normal.
              this.endDrag(event);
              if (event.intersectionData) {
                  if ((event.pointerType === POINTER_TYPES.mouse && this.aimFocusOnMouseClick == 1) ||
                      (event.pointerType === POINTER_TYPES.touch && this.aimFocusOnTouchTap == 1)) {
                      const viewport = event.viewport;
                      const camera = viewport.getCamera();
                      const cameraGlobalXfo = camera.globalXfoParam.value;
                      const pointerRay = event.pointerType === POINTER_TYPES.mouse
                          ? event.pointerRay
                          : event.pointerRay;
                      const aimTarget = cameraGlobalXfo.tr.add(pointerRay.dir.scale(event.intersectionData.dist));
                      this.aimFocus(camera, aimTarget);
                      // Note: Collab can use these events to guide users attention.
                      // @ts-ignore
                      event.aimTarget = aimTarget;
                      // @ts-ignore
                      event.aimDistance = event.intersectionData.dist;
                      this.emit('aimingFocus', event);
                      camera.emit('aimingFocus', event);
                      // Note: for a single click (no-drag) we don't want to stop the propagation of the event.
                      event.stopPropagation();
                      if (event.pointerType === POINTER_TYPES.mouse)
                          event.preventDefault();
                  }
              }
          }
          else if (this.dragging == 2) {
              if (event.pointerType === POINTER_TYPES.mouse) {
                  this.endDrag(event);
                  this.emit('movementFinished');
                  const viewport = event.viewport;
                  viewport.getCamera().emit('movementFinished');
              }
              else if (event.pointerType === POINTER_TYPES.touch) {
                  const touchEvent = event;
                  const { changedTouches, touches } = touchEvent;
                  for (let i = 0; i < changedTouches.length; i++) {
                      this.__endTouch(changedTouches[i]);
                  }
                  if (Object.keys(this.ongoingTouches).length == 0) {
                      this.endDrag(event);
                  }
                  else if (!touches.length) {
                      this.endDrag(event);
                      this.ongoingTouches = {};
                  }
                  touchEvent.preventDefault();
              }
              event.stopPropagation();
          }
      }
      /**
       * Causes an event to occur when the mouse pointer is moved out of this viewport
       * @param event - The event that occurs.
       */
      onPointerLeave(event) {
          // If the pointer leaves the viewport, then we will no longer receive key up events,
          // so we must immediately disable movement here.
          if (this.keysPressed.length > 0) {
              this.keysPressed = [];
              this.velocity.set(0, 0, 0);
              this.keyboardMovement = false;
          }
      }
      /**
       * Invoked when the mouse wheel is rolled up or down over an element.
       *
       * @param event - The wheel event that occurs.
       */
      onWheel(event) {
          const viewport = event.viewport;
          const camera = viewport.getCamera();
          const mouseWheelDollySpeed = this.mouseWheelDollySpeedParam.value;
          const modulator = event.shiftKey ? 0.1 : 0.5;
          const xfo = camera.globalXfoParam.value;
          let dir;
          if (!camera.isOrthographic()) {
              if (this.zoomTowardGeomUnderCursor) {
                  if (event.intersectionData != undefined) {
                      dir = xfo.tr.subtract(event.intersectionData.intersectionPos);
                      dir.normalizeInPlace();
                      const viewVec = xfo.inverse().transformVec3(event.intersectionData.intersectionPos);
                      camera.setFocalDistance(-viewVec.z);
                  }
                  else {
                      const point = event.pointerRay.pointAtDist(camera.getFocalDistance());
                      dir = xfo.tr.subtract(point);
                      dir.normalizeInPlace();
                  }
              }
              else {
                  dir = camera.globalXfoParam.value.ori.getZaxis();
              }
          }
          // To normalize mouse wheel speed across vendors and OSs, it is recommended to simply convert scroll value to -1 or 1
          // See here: https://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers
          const steps = 6;
          const direction = event.deltaY < 0 ? -1 : 1;
          const applyMovement = () => {
              const focalDistance = camera.getFocalDistance();
              const zoomDist = focalDistance * this.mouseWheelMovementDist;
              xfo.tr.addInPlace(dir.scale(zoomDist));
              camera.setFocalDistance(focalDistance + zoomDist);
              camera.globalXfoParam.value = xfo;
              this.mouseWheelZoomCount++;
              if (this.mouseWheelZoomCount < steps) {
                  this.mouseWheelZoomId = window.setTimeout(applyMovement, 10);
              }
              else {
                  this.mouseWheelZoomId = -1;
                  this.emit('movementFinished');
                  camera.emit('movementFinished');
              }
          };
          const applyDolly = () => {
              const dollyDist = 50.0 * this.mouseWheelMovementDist;
              const delta = new Xfo();
              delta.tr.set(0, 0, dollyDist);
              xfo.tr.addInPlace(dir.scale(dollyDist));
              camera.globalXfoParam.value = xfo;
          };
          const applyViewScale = () => {
              const frustumHeight = camera.getFrustumHeight();
              const zoomDist = frustumHeight * this.mouseWheelMovementDist;
              camera.setFrustumHeight(frustumHeight + zoomDist);
              if (event.intersectionData && this.zoomTowardGeomUnderCursor) {
                  const dir = xfo.tr.subtract(event.intersectionData.intersectionPos);
                  const zAxis = xfo.ori.getZaxis();
                  dir.subtractInPlace(zAxis.scale(dir.dot(zAxis)));
                  xfo.tr.addInPlace(dir.scale(zoomDist / (frustumHeight + zoomDist)));
                  camera.globalXfoParam.value = xfo;
              }
              this.mouseWheelZoomCount++;
              if (this.mouseWheelZoomCount < steps) {
                  this.mouseWheelZoomId = window.setTimeout(applyViewScale, 10);
              }
              else {
                  this.mouseWheelZoomId = -1;
                  this.emit('movementFinished');
                  camera.emit('movementFinished');
              }
          };
          if (this.mouseWheelZoomId > 0) {
              // If a new wheel event arrives while the previous is still running, modify the distance
              // and reset.
              this.mouseWheelMovementDist += (direction * mouseWheelDollySpeed * modulator * 0.5) / steps;
              this.mouseWheelZoomCount = 0;
          }
          else {
              this.mouseWheelMovementDist = (direction * mouseWheelDollySpeed * modulator) / steps;
              this.mouseWheelZoomCount = 0;
              if (camera.isOrthographic()) {
                  applyViewScale();
              }
              else {
                  if (event.ctrlKey)
                      applyDolly();
                  else
                      applyMovement();
              }
          }
          event.preventDefault();
          event.stopPropagation();
      }
      /**
       * The integrateVelocityChange method.
       * @param event - The event value.
       * @private
       */
      integrateVelocityChange(event) {
          const { viewport } = event;
          const camera = viewport.getCamera();
          const time = performance.now();
          if (this.prevVelocityIntegrationTime > 0) {
              const timeDelta = (time - this.prevVelocityIntegrationTime) / 1000;
              const speed = this.walkSpeedParam.value;
              // movement.tr = this.velocity.normalize().scale(speed * timeDelta)
              if (speed > 0.0) {
                  // As we move over a terrain, it can be helpful to allow users to walk
                  // over surfaces without falling through them. This allows users to look
                  // down while walking forwards for example.
                  // Calculate where we might be soon
                  const movement = new Xfo();
                  movement.tr = this.velocity.normalize().scale(speed * timeDelta);
                  const cameraXfo = camera.globalXfoParam.value;
                  const newXfo = cameraXfo.multiply(movement);
                  const collisionDetection = this.walkModeCollisionDetection.value;
                  if (collisionDetection) {
                      // Raycast from 1.5 meter up
                      const headHeight = 1.5;
                      const dist = 1.5;
                      const area = 0.5;
                      const raycastXfo = new Xfo(newXfo.tr);
                      const ray = new Ray(newXfo.tr, new Vec3(0, 0, -1));
                      const results = viewport.getRenderer().raycastCluster(raycastXfo, ray, dist, area, PassType.OPAQUE);
                      if (results.length > 0) {
                          let avgDist = 0;
                          // eslint-disable-next-line guard-for-in
                          results.forEach((result) => {
                              avgDist += result.dist;
                          });
                          avgDist /= results.length;
                          // Snap the movement vector to make the user rest on the ground.
                          newXfo.tr = ray.start.add(ray.dir.scale(avgDist - headHeight));
                      }
                  }
                  camera.globalXfoParam.value = newXfo;
              }
          }
          this.prevVelocityIntegrationTime = time;
      }
      /**
       * Invoked when the user is pressing a key on the keyboard.
       *
       * @param event - The keyboard event that occurs.
       */
      onKeyDown(event) {
          if (!this.enabledWASDWalkMode)
              return;
          const key = event.key.toLowerCase();
          // Note: onKeyPressed is called initially only once, and then we
          // get a series of calls. Here we ignore subsequent events.
          if (this.keysPressed.includes(key))
              return;
          switch (key) {
              case 'w':
                  this.velocity.z -= 1.0;
                  break;
              case 's':
                  this.velocity.z += 1.0;
                  break;
              case 'a':
                  this.velocity.x -= 1.0;
                  break;
              case 'd':
                  this.velocity.x += 1.0;
                  break;
              default:
                  return;
          }
          event.stopPropagation();
          this.keysPressed.push(key);
          if (!this.keyboardMovement) {
              this.keyboardMovement = true;
              this.prevVelocityIntegrationTime = performance.now();
              const animationFrame = () => {
                  this.integrateVelocityChange(event);
                  if (this.keyboardMovement) {
                      window.requestAnimationFrame(animationFrame);
                  }
              };
              window.requestAnimationFrame(animationFrame);
          }
      }
      /**
       * Invoked when the user releases a key on the keyboard.
       *
       * @param event - The event that occurs.
       */
      onKeyUp(event) {
          const key = event.key.toLowerCase();
          if (!this.keysPressed.includes(key))
              return;
          switch (key) {
              case 'w':
                  this.velocity.z += 1.0;
                  break;
              case 's':
                  this.velocity.z -= 1.0;
                  break;
              case 'a':
                  this.velocity.x += 1.0;
                  break;
              case 'd':
                  this.velocity.x -= 1.0;
                  break;
              default:
                  return;
          }
          event.stopPropagation();
          const keyIndex = this.keysPressed.indexOf(key);
          this.keysPressed.splice(keyIndex, 1);
          if (this.keysPressed.length == 0)
              this.keyboardMovement = false;
      }
      // ///////////////////////////////////
      // Touch controls
      /**
       * The __startTouch method.
       * @param touch - The touch value.
       * @private
       */
      __startTouch(touch) {
          this.ongoingTouches[touch.identifier] = {
              identifier: touch.identifier,
              pos: touch.touchPos,
          };
      }
      /**
       * The __endTouch method.
       * @param touch - The touch value.
       * @private
       */
      __endTouch(touch) {
          delete this.ongoingTouches[touch.identifier];
      }
      // Touch events
      /**
       * Invoked when the user touches an element on a touch screen.
       * @private
       * @param event - The touch event that occurs.
       */
      _onTouchStart(event) {
          const touches = event.changedTouches;
          for (let i = 0; i < touches.length; i++) {
              this.__startTouch(touches[i]);
          }
          this.initDrag(event);
      }
      /**
       * Invoked when the user removes his/her finger from the touch pad.
       *
       * @param event - The touch event that occurs.
       */
      onTouchEnd(event) {
          event.preventDefault();
          event.stopPropagation();
          const touches = event.changedTouches;
          for (let i = 0; i < touches.length; i++) {
              this.__endTouch(touches[i]);
          }
          if (Object.keys(this.ongoingTouches).length == 0)
              this.endDrag(event);
      }
      /**
       * Invoked when the touch event gets interrupted.
       *
       * @param event - The touch event that occurs.
       */
      onTouchCancel(event) {
          event.preventDefault();
          const touches = event.touches;
          for (let i = 0; i < touches.length; i++) {
              this.__endTouch(touches[i]);
          }
          if (Object.keys(this.ongoingTouches).length == 0)
              this.endDrag(event);
      }
      /**
       * Returns a dictionary of support manipulation modes.
       *
       * @param event - The touch event that occurs.
       */
      static get MANIPULATION_MODES() {
          return MANIPULATION_MODES;
      }
  }

  exports.GeomType = void 0;
  (function (GeomType) {
      GeomType[GeomType["TRIANGLES"] = 0] = "TRIANGLES";
      GeomType[GeomType["LINES"] = 1] = "LINES";
      GeomType[GeomType["POINTS"] = 2] = "POINTS";
  })(exports.GeomType || (exports.GeomType = {}));

  const create3DContext = function (canvas, opt_attribs) {
      let context = null;
      if (opt_attribs.webglContextType != undefined) {
          try {
              context = canvas.getContext(opt_attribs.webglContextType, opt_attribs);
              context.name = opt_attribs.webglContextType;
          }
          catch (e) { }
      }
      else {
          const names = ['webgl2', 'webgl'];
          for (let i = 0; i < names.length; i++) {
              const name = names[i];
              try {
                  context = canvas.getContext(name, opt_attribs);
                  context.name = name;
              }
              catch (e) { }
              if (context) {
                  break;
              }
          }
      }
      if (!context) {
          throw new Error('WebGL not supported on your system');
      }
      // context.setupInstancedQuad = setupInstancedQuad;
      // context.bindInstancedQuad = bindInstancedQuad;
      context.sizeInBytes = function (type) {
          switch (type) {
              case this.BYTE:
              case this.UNSIGNED_BYTE:
                  return 1;
              case this.SHORT:
              case this.UNSIGNED_SHORT:
                  return 2;
              case this.INT:
              case this.UNSIGNED_INT:
              case this.FLOAT:
                  return 4;
              default:
                  throw new Error('unknown type');
          }
      };
      if (context.name == 'webgl2') {
          context.floatTexturesSupported = true;
          context.__ext_float_linear = context.getExtension('OES_texture_float_linear');
          context.__ext_texture_half_float_linear = context.getExtension('OES_texture_half_float_linear');
          // Needed for rendering to float textures in an Fbo
          context.__ext_color_buffer_float = context.getExtension('EXT_color_buffer_float');
          // Safari does not support uploading HALF_FLOAT data into the GPU.
      }
      else {
          context.__ext_float = context.getExtension('OES_texture_float');
          if (context.__ext_float) {
              context.floatTexturesSupported = true;
              context.__ext_float_linear = context.getExtension('OES_texture_float_linear');
          }
          else {
              console.warn('OES_texture_float is not available');
          }
          context.__ext_half_float = context.getExtension('OES_texture_half_float');
          if (context.__ext_half_float) {
              context.HALF_FLOAT = context.__ext_half_float.HALF_FLOAT_OES;
              context.floatTexturesSupported = true;
              context.__ext_texture_half_float_linear = context.getExtension('OES_texture_half_float_linear');
          }
          // Needed for rendering to flat textures in an Fbo
          context.__ext_color_buffer_float = context.getExtension('EXT_color_buffer_float');
          context.__ext_std_derivatives = context.getExtension('OES_standard_derivatives');
          // context.__ext_sRGB = context.getExtension("EXT_sRGB");
          // context.__ext_draw_buffers = context.getExtension("WEBGL_draw_buffers");
          context.__ext_Inst = context.getExtension('ANGLE_instanced_arrays');
          if (context.__ext_Inst) {
              context.vertexAttribDivisor = context.__ext_Inst.vertexAttribDivisorANGLE.bind(context.__ext_Inst);
              context.drawArraysInstanced = context.__ext_Inst.drawArraysInstancedANGLE.bind(context.__ext_Inst);
              context.drawElementsInstanced = context.__ext_Inst.drawElementsInstancedANGLE.bind(context.__ext_Inst);
          }
          {
              // Note: OES_vertex_array_object is now supported on Safari.
              context.__ext_VAO = context.getExtension('OES_vertex_array_object');
              if (context.__ext_VAO) {
                  context.createVertexArray = context.__ext_VAO.createVertexArrayOES.bind(context.__ext_VAO);
                  context.deleteVertexArray = context.__ext_VAO.deleteVertexArrayOES.bind(context.__ext_VAO);
                  context.bindVertexArray = context.__ext_VAO.bindVertexArrayOES.bind(context.__ext_VAO);
              }
          }
          context.__ext_element_index_uint = context.getExtension('OES_element_index_uint');
          context.__ext_WEBGL_depth_texture = context.getExtension('WEBGL_depth_texture'); // Or browser-appropriate prefix
          if (context.__ext_WEBGL_depth_texture) {
              context.UNSIGNED_INT_24_8 = context.__ext_WEBGL_depth_texture.UNSIGNED_INT_24_8_WEBGL;
          }
          context.DRAW_FRAMEBUFFER = context.FRAMEBUFFER;
      }
      context.__ext_frag_depth = context.getExtension('EXT_frag_depth');
      context.setupInstancedQuad = function () {
          // ////////////////////////////
          // Generate a buffer for drawing a full screen quad.
          const vertexIDs = new Float32Array([0.0, 1.0, 2.0, 3.0]);
          const indices = new Uint8Array([0, 1, 2, 2, 1, 3]);
          this.__quadVertexIdsBuffer = this.createBuffer();
          this.bindBuffer(this.ARRAY_BUFFER, this.__quadVertexIdsBuffer);
          this.bufferData(this.ARRAY_BUFFER, vertexIDs, this.STATIC_DRAW);
          this.__quadIndexBuffer = this.createBuffer();
          this.bindBuffer(this.ELEMENT_ARRAY_BUFFER, this.__quadIndexBuffer);
          this.bufferData(this.ELEMENT_ARRAY_BUFFER, indices, this.STATIC_DRAW);
          this.__quadattrbuffers = {
              vertexIDs: {
                  buffer: this.__quadVertexIdsBuffer,
                  dataType: context.FLOAT,
                  dimension: 1,
                  elementSize: 4,
                  count: vertexIDs.length,
                  shared: true /*This buffer is shared between geoms. do not destroy */,
              },
          };
      };
      context.drawQuad = function () {
          this.drawElements(this.TRIANGLES, 6, this.UNSIGNED_BYTE, 0);
      };
      return context;
  };

  const processTextureParams = function (gl, params) {
      if (!params.width || !params.height) {
          if (!params.width)
              throw new Error(`Invalid texture params. 'width' not provided`);
          if (!params.height)
              throw new Error(`Invalid texture params. 'height' not provided`);
      }
      const maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
      if (params.width <= 0 ||
          params.width > maxSize ||
          params.height <= 0 ||
          params.height > maxSize) {
          throw new Error('GLTextureParams: Invalid texture size. width:' +
              params.width +
              ' height:' +
              params.height +
              ' maxSize:' +
              maxSize);
      }
      const result = {
          width: params.width,
          height: params.height,
      };
      const getGLConst = (nameOrValue) => {
          return isNaN(nameOrValue) ? gl[nameOrValue] : nameOrValue;
      };
      const processParam = (name, defaultValue) => {
          if (name in params)
              result[name] = getGLConst(params[name]);
          else if (defaultValue)
              result[name] = getGLConst(defaultValue);
      };
      processParam('format');
      processParam('internalFormat', result.format);
      processParam('type', gl.UNSIGNED_BYTE);
      processParam('minFilter', params.filter ? params.filter : gl.LINEAR);
      processParam('magFilter', params.filter ? params.filter : gl.LINEAR);
      processParam('wrapS', params.wrapS ? params.wrapS : gl.CLAMP_TO_EDGE);
      processParam('wrapT', params.wrapT ? params.wrapT : gl.CLAMP_TO_EDGE);
      processParam('flipY', false);
      processParam('mipMapped', false);
      processParam('depthInternalFormat');
      processParam('depthFormat');
      processParam('depthType');
      if (params.createDepthTexture) {
          if (gl.name != 'webgl2' && !gl.__ext_WEBGL_depth_texture) {
              result['depthType'] = gl.UNSIGNED_SHORT;
          }
          else {
              if (gl.name == 'webgl2') {
                  // the proper texture format combination can be found here
                  // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
                  // https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/fbo_rtt_depth_texture.html
                  // gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT16, this.width, this.height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_SHORT, null);
                  result['depthFormat'] = gl.DEPTH_COMPONENT;
                  result['depthType'] = gl.UNSIGNED_INT;
              }
              else {
                  result['depthFormat'] = gl.DEPTH_COMPONENT;
                  result['depthType'] = gl.UNSIGNED_INT;
              }
          }
      }
      // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
      if (result.format == gl.FLOAT) {
          if (gl.name == 'webgl2') {
              if (result.filter == gl.LINEAR && !gl.__ext_float_linear) {
                  console.warn('Floating point texture filtering not supported on result device');
                  result.filter = gl.NEAREST;
              }
          }
          else {
              if (gl.__ext_float) {
                  if (result.filter == gl.LINEAR && !gl.__ext_float_linear) {
                      console.warn('Floating point texture filtering not supported on result device');
                      result.filter = gl.NEAREST;
                  }
              }
              else {
                  if (gl.__ext_half_float) {
                      result.format = gl.HALF_FLOAT;
                      if (result.filter == gl.LINEAR && !gl.__ext_texture_half_float_linear) {
                          console.warn('Half Float texture filtering not supported on result device');
                          result.filter = gl.NEAREST;
                      }
                  }
                  else {
                      throw new Error('OES_texture_half_float is not available');
                  }
              }
          }
      }
      else if (result.format == gl.HALF_FLOAT) {
          if (gl.name == 'webgl2') ;
          else {
              if (gl.__ext_half_float) {
                  if (result.filter == gl.LINEAR && !gl.__ext_texture_half_float_linear) {
                      console.warn('Half Float texture filtering not supported on result device');
                      result.filter = gl.NEAREST;
                  }
              }
              else
                  throw new Error('OES_texture_half_float is not available');
              if (result.channels == gl.RGB) {
                  throw new Error('OES_texture_half_float onlysupports RGBA textures');
              }
          }
      }
      else if (result.format == 'sRGB') {
          if (!gl.__ext_sRGB)
              throw new Error('EXT_sRGB is not available');
      }
      // ////////////////////////////////////////////////////
      // Format ... InternalFormat combos.
      // Setup the correct combos.
      // the proper texture format combination can be found here
      // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
      // Determine the internal format from mthe format and type.
      if (result.format != undefined && gl.name == 'webgl2' && result.internalFormat == result.format) {
          if (result.type == gl.FLOAT) {
              if (result.format == gl.RED) {
                  result.internalFormat = gl.R32F;
              }
              else if (result.format == gl.RG) {
                  result.internalFormat = gl.RG32F;
              }
              else if (result.format == gl.RGB) {
                  result.internalFormat = gl.RGB32F;
              }
              else if (result.format == gl.RGBA) {
                  result.internalFormat = gl.RGBA32F;
              }
          }
          else if (result.type == gl.HALF_FLOAT) {
              if (result.format == gl.RED) {
                  result.internalFormat = gl.R16F;
              }
              else if (result.format == gl.RGB) {
                  result.internalFormat = gl.RGB16F;
              }
              else if (result.format == gl.RGBA) {
                  result.internalFormat = gl.RGBA16F;
              }
          }
          else if (result.type == gl.UNSIGNED_BYTE) {
              if (result.format == gl.RED) {
                  result.internalFormat = gl.R8;
              }
              if (result.format == gl.RGB) {
                  result.internalFormat = gl.RGB8;
              }
              else if (result.format == gl.RGBA) {
                  result.internalFormat = gl.RGBA8;
              }
          }
      }
      if (result.depthFormat != undefined) {
          if (gl.name == 'webgl2') {
              if (result.depthType == gl.UNSIGNED_SHORT) {
                  result.depthInternalFormat = gl.DEPTH_COMPONENT16;
              }
              else if (result.depthType == gl.UNSIGNED_INT) {
                  result.depthInternalFormat = gl.DEPTH_COMPONENT24;
              }
          }
          else {
              result.depthInternalFormat = result.depthFormat;
          }
      }
      return result;
  };

  /**
   * Represents a texture that contains 2-dimensional images.
   * Images have width and height, but no depth.
   *
   * @extends RefCounted
   */
  class GLTexture2D extends RefCounted {
      __gl;
      ready;
      width;
      height;
      textureType;
      textureDesc;
      __loaded;
      __bound;
      __image = null;
      __internalFormat = 0;
      __type = 0;
      __format = 0;
      __wrapParam = 0;
      params = {};
      __minFilter = 0;
      __magFilter = 0;
      __wrapS = 0;
      __wrapT = 0;
      __flipY = false;
      __mipMapped = false;
      invert = false;
      alphaFromLuminance = false;
      gltex = null;
      __typeParam = '';
      __formatParam = '';
      /**
       * Create a GL texture 2D.
       *
       * @param gl - The gl value.
       * @param params - The params value.
       */
      constructor(gl, params) {
          super();
          this.__gl = gl;
          this.ready = false;
          this.width = 0;
          this.height = 0;
          this.textureType = 1; // Default 2d 24bit texture image texture. No alpha.
          this.textureDesc = [0, 0, 0, 0]; // To be populated by derived classes.
          this.__loaded = false;
          this.__bound = false;
          if (params != undefined) {
              if (params instanceof BaseImage) {
                  this.__image = params;
                  const imageUpdated = () => {
                      // this.bufferData(data);
                      const params = this.__image.getParams();
                      const width = params.width;
                      const height = params.height;
                      const data = params.data;
                      this.bufferData(data, width, height);
                  };
                  this.__image.on('updated', imageUpdated);
                  if (this.__image.isLoaded()) {
                      this.configure(this.__image.getParams());
                  }
                  else {
                      this.__image.on('loaded', () => {
                          this.configure(this.__image.getParams());
                      });
                  }
              }
              else {
                  this.configure(params);
              }
          }
      }
      /**
       * Returns the loaded status of the 2D Texture
       *
       * @return - The return value.
       */
      isLoaded() {
          return this.__loaded;
      }
      /**
       * Returns the `BaseImage` of the GL Texture
       *
       * @return - The return value.
       */
      getImage() {
          return this.__image;
      }
      /**
       * Returns the specified value of the color components in the texture.
       *
       * @return - The return value.
       */
      getInternalFormat() {
          return this.__internalFormat;
      }
      /**
       * Returns the value of the specified data type of the texel data.
       *
       * @return - The return value.
       */
      getType() {
          return this.__type;
      }
      /**
       * Returns the value of the specified texel data. It must be the same as the `internalFormat`
       *
       * @return - The return value.
       */
      getFormat() {
          return this.__format;
      }
      /**
       * Returns the value of the specified wrapping function for texture coordinate
       *
       * @return - The return value.
       */
      getWrap() {
          return this.__wrapParam;
      }
      /**
       * Returns the value of the specified binding point.
       *
       * @return - The return value.
       */
      getMipMapped() {
          return this.__mipMapped;
      }
      /**
       * Builds the GLTexture2D using the specified parameters object.
       * Parameters must have the `BaseImage` properties structure.
       *
       * @param params - The params value.
       *
       * @param emit - The emit value.
       */
      configure(params) {
          const gl = this.__gl;
          const p = processTextureParams(gl, params); // TODO: check method
          this.params = p;
          this.__format = p.format;
          this.__internalFormat = p.internalFormat;
          this.__type = p.type;
          this.__minFilter = p.minFilter;
          this.__magFilter = p.magFilter;
          this.__wrapS = p.wrapS;
          this.__wrapT = p.wrapT;
          this.__flipY = 'flipY' in params ? params.flipY : false;
          this.__mipMapped = 'mipMapped' in params ? params.mipMapped : false;
          this.invert = 'invert' in params ? params.invert : false;
          this.alphaFromLuminance = 'alphaFromLuminance' in params ? params.alphaFromLuminance : false;
          this.textureType = 1; // Default 2d 8 bit texture image texture.
          this.textureDesc[0] = this.width;
          this.textureDesc[1] = this.height;
          // Detect an 8 bit image with an alpha channel.
          if (this.textureType == 1 && this.__format == gl.RGBA) {
              this.textureType = 2; // 32bit BPP image.
          }
          if (this.gltex) {
              gl.deleteTexture(this.gltex);
          }
          this.gltex = gl.createTexture();
          this.updateGLTexParams();
          const width = p.width;
          const height = p.height;
          const data = params.data;
          if (data) {
              this.bufferData(data, width, height, false, false);
          }
          else {
              this.resize(width, height, false, false);
          }
          if (!this.__loaded) {
              this.emit('ready');
              this.__loaded = true;
          }
      }
      activateLastTextureUnit() {
          // Load the image into the GPU for rendering.
          // We often need to populate textures during rendering.
          // e.g. when lazily updating a texture containing geometry
          // buffers (FatPoints)
          // We don't want to bind over an existing texture, so we use the
          // last texture unit. (we bind starting from 0, and go up)
          const gl = this.__gl;
          const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
          gl.activeTexture(gl.TEXTURE0 + maxTextures - 1);
      }
      /**
       * The updateGLTexParams method.
       * @private
       */
      updateGLTexParams() {
          const gl = this.__gl;
          this.activateLastTextureUnit();
          gl.bindTexture(gl.TEXTURE_2D, this.gltex);
          // This parameter caused all images to be blank. Flipping in the pixel shader instead(by default)
          // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.__minFilter);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.__magFilter);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.__wrapS);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.__wrapT);
      }
      /**
       * Initializes and creates the buffer of the object's data store.
       *
       * @param data - The data value.
       * @param width - The width value.
       * @param height - The height value.
       * @param bind - The bind value.
       * @param emit - The emit value.
       */
      // TODO: type Image doesn't exist.
      bufferData(data, width = -1, height = -1, bind = true, emit = true) {
          const gl = this.__gl;
          if (data != undefined) {
              if (data instanceof WebGLTexture) {
                  this.gltex = data;
              }
              else if (data instanceof HTMLImageElement ||
                  data instanceof ImageData ||
                  data instanceof HTMLCanvasElement ||
                  data instanceof HTMLImageElement ||
                  data instanceof HTMLVideoElement) {
                  if (bind) {
                      this.activateLastTextureUnit();
                      gl.bindTexture(gl.TEXTURE_2D, this.gltex);
                  }
                  gl.texImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, this.__format, this.__type, data);
                  this.width = data.width;
                  this.height = data.height;
              }
              else {
                  // if wieght and height not specified, assume they stay the same.
                  if (width == -1) {
                      width = this.width;
                  }
                  if (height == -1) {
                      height = this.height;
                  }
                  // Note: data images must have an even size width/height to load correctly.
                  // this doesn't mean they must be pot textures...
                  const numPixels = width * height;
                  let numChannels;
                  switch (this.__format) {
                      case gl.RED:
                      case gl.RED_INTEGER:
                      case gl.ALPHA:
                      case gl.LUMINANCE:
                      case gl.LUMINANCE_ALPHA:
                          numChannels = 1;
                          break;
                      case gl.RG:
                          numChannels = 2;
                          // Note: when uploading UNSIGNED_BYTE  RG textures, I received the following error: ArrayBuffer not big enough for request
                          // This answer on stack overflow lead me to this fix.
                          // https://stackoverflow.com/questions/42789896/webgl-error-arraybuffer-not-big-enough-for-request-in-case-of-gl-luminance
                          // The same fix maybe need to be applied to single channel textures above, although I have not seen the error.
                          gl.pixelStorei(gl.UNPACK_ALIGNMENT, 2);
                          break;
                      case gl.RGB:
                          numChannels = 3;
                          break;
                      case gl.RGBA:
                          numChannels = 4;
                          break;
                      default:
                          console.warn('Reaching default case: numChannels:=1');
                          numChannels = 1;
                          break;
                  }
                  if (data.length != numPixels * numChannels) {
                      console.warn('Invalid data for Image width:' +
                          width +
                          ' height:' +
                          height +
                          ' format:' +
                          this.__formatParam +
                          ' type:' +
                          this.__typeParam +
                          ' Data Length:' +
                          data.length +
                          ' Expected:' +
                          numPixels * numChannels);
                  }
                  let uploadData = data;
                  if (this.__type == gl.HALF_FLOAT && data instanceof Float32Array) {
                      uploadData = MathFunctions.convertFloat32ArrayToUInt16Array(data);
                  }
                  if (bind) {
                      this.activateLastTextureUnit();
                      gl.bindTexture(gl.TEXTURE_2D, this.gltex);
                  }
                  if (gl.name == 'webgl2') {
                      gl.texImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, width, height, 0, this.__format, this.__type, uploadData, 0);
                  }
                  else {
                      gl.texImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, width, height, 0, this.__format, this.__type, uploadData);
                  }
                  // These values may not have changed....
                  this.width = width;
                  this.height = height;
              }
              if (this.__mipMapped) {
                  gl.generateMipmap(gl.TEXTURE_2D);
              }
          }
          else {
              if (bind) {
                  this.activateLastTextureUnit();
                  gl.bindTexture(gl.TEXTURE_2D, this.gltex);
              }
              gl.texImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, this.width, this.height, 0, this.__format, this.__type, null);
              // simply resize the buffer.
              this.width = width;
              this.height = height;
          }
          if (emit) {
              this.emit('updated');
          }
      }
      /**
       * Clears the buffers to preset values
       */
      clear() {
          const gl = this.__gl;
          const numPixels = this.width * this.height;
          let numChannels;
          switch (this.__format) {
              case gl.RED:
              case gl.RED_INTEGER:
              case gl.ALPHA:
              case gl.LUMINANCE:
              case gl.LUMINANCE_ALPHA:
                  numChannels = 1;
                  break;
              case gl.RG:
                  numChannels = 2;
                  break;
              case gl.RGB:
                  numChannels = 3;
                  break;
              case gl.RGBA:
                  numChannels = 4;
                  break;
              default:
                  throw new Error('Invalid Format');
          }
          let data;
          switch (this.__type) {
              case gl.UNSIGNED_BYTE:
                  data = new Uint8Array(numPixels * numChannels);
                  break;
              case gl.HALF_FLOAT:
                  data = new Uint16Array(numPixels * numChannels);
                  break;
              case gl.FLOAT:
                  data = new Float32Array(numPixels * numChannels);
                  break;
              default:
                  throw new Error('Invalid Type');
          }
          if (gl.name == 'webgl2') {
              gl.texImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, this.width, this.height, 0, this.__format, this.__type, data, 0);
          }
          else {
              gl.texImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, this.width, this.height, 0, this.__format, this.__type, data);
          }
      }
      /**
       * The resize method.
       * @param width - The width value.
       * @param height - The height value.
       * @param preserveData - The preserveData value.
       * @param emit - The emit value.
       */
      resize(width, height, preserveData = false, emit = true) {
          const gl = this.__gl;
          const sizeChanged = this.width != width || this.height != height;
          if (sizeChanged) {
              const maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
              if (width < 0 || width > maxSize || height < 0 || height > maxSize) {
                  throw new Error('gl-texture2d: Invalid texture size. width:' + width + ' height:' + height + ' maxSize:' + maxSize);
              }
              if (preserveData) {
                  const gltex = gl.createTexture();
                  this.activateLastTextureUnit();
                  gl.bindTexture(gl.TEXTURE_2D, gltex);
                  gl.texImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, width, height, 0, this.__format, this.__type, null);
                  const fbo = gl.createFramebuffer();
                  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
                  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.gltex, 0);
                  gl.copyTexImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, 0, 0, this.width, this.height, 0);
                  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
                  gl.deleteFramebuffer(fbo);
                  this.__gl.deleteTexture(this.gltex);
                  this.gltex = gltex;
                  this.updateGLTexParams();
              }
              else {
                  if (this.width > 0 && this.height > 0) {
                      this.__gl.deleteTexture(this.gltex);
                      this.gltex = gl.createTexture();
                      this.updateGLTexParams();
                  }
                  gl.bindTexture(gl.TEXTURE_2D, this.gltex);
                  gl.texImage2D(gl.TEXTURE_2D, 0, this.__internalFormat, width, height, 0, this.__format, this.__type, null);
              }
              this.width = width;
              this.height = height;
              if (emit) {
                  const event = new ResizedEvent(width, height);
                  this.emit('resized', event);
              }
          }
      }
      /**
       * Upload data for the image to the GPU.
       *
       * @param dataArray - The dataArray value.
       * @param width - The width value
       * @param height - The height value
       * @param offsetX - The offsetX value
       * @param offsetY - The offsetY value
       * @param bind - The bind value
       */
      populate(dataArray, width, height, offsetX = 0, offsetY = 0, bind = true) {
          const gl = this.__gl;
          if (bind) {
              this.activateLastTextureUnit();
              gl.bindTexture(gl.TEXTURE_2D, this.gltex);
          }
          gl.texSubImage2D(gl.TEXTURE_2D, 0, offsetX, offsetY, width, height, this.__format, this.__type, dataArray);
          if (bind)
              gl.bindTexture(gl.TEXTURE_2D, null);
      }
      /**
       * Returns the `width`(Index 0) and the `height`(Index 1) of the GL Texture.
       *
       * @return - The return value.
       */
      getSize() {
          return [this.width, this.height];
      }
      /**
       * Returns the value of the WebGLTexture value
       *
       * @return - The return value.
       */
      get glTex() {
          return this.gltex;
      }
      /**
       * Returns the value of the WebGLTexture value
       *
       * @return - The return value.
       */
      getTexHdl() {
          return this.gltex;
      }
      /**
       * The preBind method.
       * @param unif - The unif value.
       * @param unifs - The unifs value.
       * @return - The return value.
       */
      preBind(unif, unifs) {
          return {
              textureTypeUnif: unifs[unif.name + 'Type'],
              textureDescUnif: unifs[unif.name + 'Desc'],
          };
      }
      /**
       * Binds Texture to the ShaderUniform attribute.
       *
       * @param renderstate - The renderstate value.
       * @param unif - The unif value.
       * @param bindings - The bindings value.
       * @return - The return value.
       */
      bindToUniform(renderstate, unif, bindings) {
          if (!this.__loaded) {
              return false;
          }
          if (!this.gltex) {
              throw new Error('Unable to bind non-initialized or deleted texture.');
          }
          renderstate.bindTexture(unif, this.gltex);
          if (bindings) {
              const gl = this.__gl;
              if (bindings.textureTypeUnif) {
                  gl.uniform1i(bindings.textureTypeUnif.location, this.textureType);
              }
              if (bindings.textureDescUnif) {
                  gl.uniform4fv(bindings.textureDescUnif.location, this.textureDesc);
              }
          }
          return true;
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          super.destroy();
          this.__gl.deleteTexture(this.gltex);
          this.gltex = null;
      }
      /**
       * @private
       */
      static getCachedGLTexture2D(image) {
          return gltextureCache.get(image);
      }
      /**
       * @private
       */
      static setCachedGLTexture2D(image, gltexture) {
          gltextureCache.set(image, gltexture);
      }
  }
  const gltextureCache = new Map();

  /*
    regex variables
  */
  const WHITESPACE_RE = /\s+/;
  /** Class representing a shader library.
   * @private
   */
  class ShaderLibrary {
      __shaderModules;
      materialTemplates;
      /**
       * Create a shader library.
       */
      constructor() {
          this.__shaderModules = {};
          this.materialTemplates = {};
      }
      /**
       * The setShaderModule method. Shader must be set before parsing.
       * @param shaderName - The shader name.
       * @param shader - The unparsed shader GLSL.
       */
      setShaderModule(shaderName, shader) {
          if (!(shaderName in this.__shaderModules)) {
              this.__shaderModules[shaderName] = shader;
              return;
          }
          // note: this code does not update shader snippets, whatever is first, stays.
          // important for creating tests, since shaderLibrary is global.
      }
      /**
       * The getShaderModule method. Access specific uniforms, attributes of a particular module.
       * @param shaderName - The shader name.
       * @return - The return value.
       */
      getShaderModule(shaderName) {
          return this.__shaderModules[shaderName];
      }
      /**
       * The getShaderModuleNames method.
       * @return - The return value.
       */
      getShaderModuleNames() {
          const shaderNames = [];
          // eslint-disable-next-line guard-for-in
          for (const shaderName in this.__shaderModules)
              shaderNames.push(shaderName);
          return shaderNames;
      }
      /**
       * The parseAttr
       * @param parts - parts
       * @param instanced - instanced
       * @param result - result object to store parsed data
       */
      parseAttr(parts, instanced, result, line) {
          const name = parts[2].slice(0, parts[2].length - 1);
          const type = parts[1];
          const isInteger = type == 'int' || type == 'uint' || type == 'ivec2' || type == 'ivec3' || type == 'ivec4';
          result.attributes[name] = {
              glslType: type,
              instanced: instanced,
              integer: isInteger,
          };
          // console.log('attributes:' + name + ":" + parts[1]);
          if (parts[1] == 'color') {
              parts[1] = 'vec4';
              parts.join(' ');
          }
      }
      /**
       * The handleImport method -- takes the includeFile and if it exists, adds the parsed glsl, uniforms, and attributes to the result, recursively.
       * @param result - result object that stores the glsl, attribute, uniform
       * @param shaderName - shaderName
       * @param includeFile - file name of the shader snippet/module
       * @param includes - keep track of what was included
       * @param lineNumber - keep track of what line we're on
       */
      handleImport(result, shaderName, includeFile, includes, lineNumber) {
          if (includeFile in this.__shaderModules) {
              const includedGLSL = this.__shaderModules[includeFile]; // get glsl snippet code to add
              if (!includedGLSL)
                  throw Error('snippet not loaded or does not exists!');
              // recursively includes glsl snippets
              const reursiveResult = this.parseShaderHelper(shaderName, includedGLSL, includes, lineNumber);
              // adding code + snippet glsl, if not already added.
              includes.push(includeFile); // keep track of imports
              result.glsl = result.glsl + reursiveResult.glsl;
              result.numLines += reursiveResult.numLines;
              result.uniforms = {
                  ...result.uniforms,
                  ...reursiveResult.uniforms,
              };
              result.attributes = {
                  ...result.attributes,
                  ...reursiveResult.attributes,
              };
              // console.log('\n glsl snippet: ' + reursiveResult.glsl) // print out snippets
          }
          else {
              // throw new Error(shaderName + ': SNIPPET NOT FOUND: ' + includeFile)
              console.log('shaderName: ' + shaderName);
              console.log('SNIPPET NOT FOUND: ' + includeFile);
          }
      }
      /**
       * The parseShader method.
       * @param shaderName - The shader name.
       * @param glsl - The glsl param.
       * @return - returns the 'result' object
       */
      parseShader(shaderName, glsl) {
          return this.parseShaderHelper(shaderName, glsl, [], 0);
      }
      /**
       * The parseShader recursive helper method
       * @param shaderName - The shader name.
       * @param glsl - The glsl param.
       * @param includes - keep track of what was included
       * @param lineNumber - keep track of what line we're on
       * @return - The return value.
       */
      parseShaderHelper(shaderName, glsl, includes, lineNumber) {
          // console.log('parseShader:' + shaderName)
          const addLine = (result, line) => {
              result.glsl = result.glsl + line + '\n';
              result.numLines++;
          };
          includes.push(shaderName);
          // result that is returned
          const result = {
              glsl: '',
              numLines: 0,
              uniforms: {},
              attributes: {},
          };
          // go through each line of a GLSL file
          glsl = glsl.toString(); // TODO: remove ideally, this cast is here just to make jest pass
          const lines = glsl.split('\n'); // break up code by newlines
          for (let i = 0; i < lines.length; i++) {
              let line = lines[i];
              const trimmedLine = line.trim();
              // Get first token of a statement and switch
              const parts = trimmedLine.split(WHITESPACE_RE);
              const firstToken = parts[0];
              switch (firstToken) {
                  // TODO: deprecated - remove eventually
                  case '<%include':
                  case 'import': {
                      // get the contents between quotes and then if there are '/' get the filename
                      const includeFile = trimmedLine.split(/'|"|`/)[1].split('/').pop(); // can be undefined
                      if (!includes.includes(includeFile)) {
                          this.handleImport(result, shaderName, includeFile, includes, lineNumber);
                      }
                      break;
                  }
                  case 'attribute': {
                      this.parseAttr(parts, false, result, line);
                      addLine(result, line);
                      break;
                  }
                  case 'instancedattribute': {
                      this.parseAttr(parts, true, result, line);
                      parts[0] = 'attribute';
                      line = parts.join(' ');
                      addLine(result, line);
                      break;
                  }
                  case 'uniform': {
                      // When a precision qualifier exists in the uniform definition.
                      // e.g. uniform highp int instancesTextureSize;
                      let typeIndex = 1;
                      if (parts.length == 4)
                          typeIndex = 2;
                      const typeName = parts[typeIndex];
                      const name = parts[typeIndex + 1].slice(0, parts[typeIndex + 1].length - 1);
                      if (name.includes('[')) {
                          // Strip off the square brackets.
                          result.uniforms[name.substring(0, name.indexOf('['))] = {
                              glslType: typeName,
                          };
                      }
                      else {
                          result.uniforms[name] = {
                              glslType: typeName,
                          };
                      }
                      if (typeName == 'struct') {
                          console.log(parts);
                      }
                      if (parts[1] == 'color') {
                          parts[1] = 'vec4';
                          line = parts.join(' ');
                      }
                      addLine(result, line);
                      break;
                  }
                  // TODO: structs disabled in ts-migration
                  // case 'struct': {
                  //   let membersStr = ''
                  //   if (trimmedLine.includes('}')) {
                  //     membersStr = trimmedLine.substring(trimmedLine.indexOf('{') + 1, trimmedLine.indexOf('}') - 1)
                  //   } else {
                  //     i++
                  //     while (true) {
                  //       line += lines[i] + '\n'
                  //       membersStr += line.trim()
                  //       i++
                  //       if (membersStr.includes('}')) break
                  //     }
                  //   }
                  //   const structMembers = membersStr.substring(membersStr.indexOf('{') + 1, membersStr.indexOf('}') - 1)
                  //   const members = structMembers.split(';')
                  //   const structDesc = []
                  //   for (const member of members) {
                  //     if (member.length == 0) continue
                  //     const memberparts = member.trim().split(WHITESPACE_RE)
                  //     structDesc.push({
                  //       name: memberparts[1],
                  //       type: GlslTypes[memberparts[0]],
                  //     })
                  //   }
                  //   GlslTypes[parts[1]] = structDesc
                  //   addLine(result, line)
                  //   break
                  // }
                  default: {
                      // all other statements
                      addLine(result, line);
                      break;
                  }
              } // end of switch
          } // end of forloop
          // console.log('length of shader: ' + result.numLines)
          // console.log(result.glsl)
          return result;
      }
  }
  const shaderLibrary = new ShaderLibrary();

  class RenderState {
      gl;
      renderer;
      stack = [];
      top;
      glShader;
      shaderkey;
      directives = [];
      directivesHash;
      attrs;
      unifs;
      drawItemsTexture;
      shaderInstancedGeom;
      glGeom;
      boundVao;
      xrviewport;
      passIndex;
      pass;
      vrPresenting;
      supportsInstancing;
      viewport; // Viewport
      viewports;
      bindViewports;
      bindRendererUnifs;
      boundTextures;
      boundRendertarget;
      geometryMaskTextures;
      viewXfo;
      viewScale;
      region;
      depthRange;
      cameraMatrix;
      constructor(gl) {
          this.gl = gl;
      }
      pushGLStack(name) {
          this.top;
          this.top = { name, enabled: new Set(), disabled: new Set(), functions: {} };
          // Enable me to debug the rendering stack.
          // console.log('pushGLStack:', prevTop ? prevTop.name : '', ' > ', this.top.name)
          this.stack.push(this.top);
      }
      popGLStack() {
          const prevTop = this.stack.pop();
          this.top = this.stack[this.stack.length - 1];
          // Enable me to debug the rendering stack.
          // console.log('popGLStack:', prevTop.name, ' > ', this.top ? this.top.name : '')
          // As we pop the stack we must restore the GL state to what it was.
          if (this.stack.length > 0) {
              prevTop.enabled.forEach((prop) => {
                  let i;
                  for (i = this.stack.length - 1; i >= 0; i--) {
                      const stackItem = this.stack[i];
                      if (stackItem.enabled.has(prop)) {
                          break;
                      }
                      else if (stackItem.disabled.has(prop)) {
                          this.gl.disable(prop);
                          break;
                      }
                  }
                  if (i < 0) {
                      this.gl.disable(prop);
                  }
              });
              prevTop.disabled.forEach((prop) => {
                  let i;
                  for (i = this.stack.length - 1; i >= 0; i--) {
                      const stackItem = this.stack[i];
                      if (stackItem.disabled.has(prop)) {
                          break;
                      }
                      else if (stackItem.enabled.has(prop)) {
                          this.gl.enable(prop);
                          break;
                      }
                  }
                  if (i < 0) {
                      this.gl.enable(prop);
                  }
              });
          }
          //   for (let key in prevTop.enabled) {
          //   }
          //   for (let key in prevTop.disabled) {
          //     const prop = prevTop.enabled[key]
          //     if (stackItem.enabled[key] == prop) {
          //       break
          //     } else if (stackItem.disabled[key] == prop) {
          //       this.gl.enable(prop)
          //       break
          //     }
          //   }
          // }
          /*
            for (let key in prevTop.functions) {
              const args = prevTop[key]
              for (let i = this.stack.length - 1; i >= 0; i--) {
                const stackItem = this.stack[i]
                const prevArgs = stackItem.functions[key]
                if (prevArgs) {
                  if (prevArgs != args) {
                    if (Array.isArray(prevArgs)) {
                      this.gl[key](...prevArgs)
                    } else {
                      this.gl[key](prevArgs)
                    }
                  }
                  break
                }
              }
            }*/
          // }
      }
      glEnable(prop) {
          this.gl.enable(prop);
          this.top.enabled.add(prop);
      }
      glDisable(prop) {
          this.gl.disable(prop);
          this.top.disabled.add(prop);
      }
      bindTexture(unif, gltex) {
          const unit = this.boundTextures++;
          const gl = this.gl;
          gl.activeTexture(gl.TEXTURE0 + unit);
          gl.bindTexture(gl.TEXTURE_2D, gltex);
          gl.uniform1i(unif.location, unit);
      }
  }

  class HighlightRenderState extends RenderState {
  }

  class ColorRenderState extends RenderState {
      envMap;
      renderMode;
      outlineMethod;
      outlineThickness;
      outlineColor;
      hiddenLineColor;
      screenQuad;
      exposure; // must initialize these
      gamma;
      toHighlightRenderState() {
          const highlightRenderState = new HighlightRenderState(this.gl);
          highlightRenderState.boundRendertarget = this.boundRendertarget;
          highlightRenderState.viewXfo = this.viewXfo;
          highlightRenderState.viewScale = this.viewScale;
          highlightRenderState.region = this.region;
          highlightRenderState.cameraMatrix = this.cameraMatrix;
          highlightRenderState.viewport = this.viewport;
          highlightRenderState.vrPresenting = this.vrPresenting;
          highlightRenderState.bindViewports = this.bindViewports;
          highlightRenderState.bindRendererUnifs = this.bindRendererUnifs;
          return highlightRenderState;
      }
  }

  class GeomDataRenderState extends RenderState {
      geomDataFbo; // only used in geomdata buffer rendering
      floatGeomBuffer;
      occlusionCulling;
  }

  /* eslint-disable valid-jsdoc */
  // Every instance of every shader should have a unique id.
  // This is so that we can uniquely identify the bound shader during
  // rendering. Materials and geometries cache bindings to shaders.
  // And need the id to be unique. (Note: we used to use the constructor.name
  // which was only unique if the same shader was constructed once, and
  // never unique in release mode after the port to Rollup)
  let shaderInstanceId = 0;
  /** Class representing a GL shader.
   * @extends BaseItem
   * @private
   */
  class GLShader extends BaseItem {
      __gl;
      shaderStagesGLSL = {};
      shaderStages = {};
      shaderProgramHdls = {};
      /**
       * Create a GL shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl, name) {
          super(name);
          if (gl)
              this.__gl = gl;
          this.__id = shaderInstanceId++;
          // hack to enable Zea-UX to work untill its upgraded.
          //@ts-ignore
          this.__shaderStages = this.shaderStages;
      }
      /**
       * Sets the GL context to the shader.
       * > Note: normally the context should be passed to the constructor. This method us used when using the Registry to construct shaders.
       * @param gl - The webgl rendering context.
       */
      setGLContext(gl) {
          this.__gl = gl;
      }
      /**
       * Sets the GLSL code for a given shader stage.
       * @param stageName - The name of the stage. currently only 'VERTEX_SHADER' or 'FRAGMENT_SHADER' are supported.
       * @param glsl - The GLSL code for the shader stage.
       */
      setShaderStage(stageName, glsl) {
          this.shaderStagesGLSL[stageName] = glsl;
          this.clearProgramsCache();
      }
      /**
       * Gets the GLSL code for a given shader stage.
       * @param stageName - The name of the stage. currently only 'VERTEX_SHADER' or 'FRAGMENT_SHADER' are supported.
       * @return - The GLSL code for the shader stage.
       */
      getShaderStage(stageName) {
          return this.shaderStagesGLSL[stageName];
      }
      /**
       * Clears all cached shader compilations for this shader.
       */
      clearProgramsCache() {
          const gl = this.__gl;
          for (const shaderProgramkey in this.shaderProgramHdls) {
              const shaderCompilationResult = this.shaderProgramHdls[shaderProgramkey];
              for (const shaderKey in shaderCompilationResult.shaderHdls) {
                  gl.deleteShader(shaderCompilationResult.shaderHdls[shaderKey]);
              }
              gl.deleteProgram(shaderCompilationResult.shaderProgramHdl);
          }
      }
      /**
       * The isOpaque method.
       * @return - The return value.
       */
      static isOpaque() {
          return true;
      }
      /**
       * The isOverlay method.
       * @return - The return value.
       */
      static isOverlay() {
          return false;
      }
      // /////////////////////////////////
      // Compilation
      generateNumberedLines(lines, startOffset, endOffset, errorLines) {
          const numberedLinesWithErrors = [];
          for (const key in errorLines) {
              const lineNumber = Number.parseInt(key) - 1;
              for (let i = Math.max(0, lineNumber - startOffset); i < lineNumber; i++)
                  numberedLinesWithErrors.push((i + 1 + ' ').padStart(3) + '\x1B[34;107;2m' + lines[i] + '\x1B[m');
              numberedLinesWithErrors.push((lineNumber + 1 + '>').padStart(3) + '\x1B[41;93;4m' + lines[lineNumber] + '\x1B[m');
              for (let i = lineNumber + 1; i < Math.min(lines.length - 1, lineNumber + endOffset); i++)
                  numberedLinesWithErrors.push((i + 1 + ' ').padStart(3) + '\x1B[34;107;2m' + lines[i] + '\x1B[m');
              const errors = errorLines[key];
              for (const error of errors) {
                  numberedLinesWithErrors.push(error);
              }
          }
          return numberedLinesWithErrors;
      }
      /**
       * The compileShaderStage method.
       * @param glsl - The glsl value.
       * @param stageID - The stageID value.
       * @param name - The name value.
       * @param directives - The directives value.
       * @return - The return value.
       * @private
       */
      compileShaderStage(glsl, stageID, name, directives) {
          const gl = this.__gl;
          // console.log("compileShaderStage:" + this.name+"."+name + " glsl:\n" + glsl);
          if (directives) {
              const defines = directives.join('\n') + '\n';
              glsl = defines + glsl;
          }
          if (gl.name == 'webgl2') {
              glsl = StringFunctions.replaceAll(glsl, 'attribute', 'in');
              if (name == 'vertexShader')
                  glsl = StringFunctions.replaceAll(glsl, 'varying', 'out');
              else
                  glsl = StringFunctions.replaceAll(glsl, 'varying', 'in');
              glsl = StringFunctions.replaceAll(glsl, 'texture2D', 'texture');
              const prefix = '#version 300 es\n';
              glsl = prefix + glsl;
          }
          const shaderHdl = gl.createShader(stageID);
          if (!shaderHdl)
              throw Error('shaderHdl not defined');
          gl.shaderSource(shaderHdl, glsl);
          // Compile the shader program.
          gl.compileShader(shaderHdl);
          // See if it compiled successfully
          if (!gl.getShaderParameter(shaderHdl, gl.COMPILE_STATUS)) {
              console.log('Errors in :' + this.constructor.name + '.' + name);
              const errors = gl.getShaderInfoLog(shaderHdl).split('\n');
              const errorLines = {};
              for (let i = 0; i < errors.length; i++) {
                  const parts = errors[i].split(':');
                  if (parts.length >= 2) {
                      const lineNum = parseInt(parts[2]); // TODO check against ATI and intel cards
                      if (!isNaN(lineNum)) {
                          if (errorLines[lineNum])
                              errorLines[lineNum].push(errors[i]);
                          else
                              errorLines[lineNum] = [errors[i]];
                      }
                  }
              }
              const lines = glsl.split('\n');
              console.groupCollapsed('ShaderError-All');
              const allErrorLines = this.generateNumberedLines(lines, lines.length, lines.length, errorLines);
              allErrorLines.forEach((line) => console.info(line));
              console.groupEnd();
              console.group('ShaderError-Summary');
              const sumaryLinesWithErrors = this.generateNumberedLines(lines, 4, 5, errorLines);
              sumaryLinesWithErrors.forEach((line) => console.info(line));
              console.groupEnd();
              throw new Error('An error occurred compiling the shader \n=================\n' + this.constructor.name + '.' + name);
          }
          return shaderHdl;
      }
      /**
       * The createProgram method.
       * @param directives - The directives value.
       * @return - The program value.
       * @private
       */
      createProgram(directives) {
          const gl = this.__gl;
          const shaderProgramHdl = gl.createProgram();
          if (!shaderProgramHdl)
              throw Error('shaderProgramHdl not defined');
          const shaderHdls = {};
          {
              if (!this.shaderStages['VERTEX_SHADER']) {
                  // preprocess the GLSL, including all shader snippets
                  this.shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader('VERTEX_SHADER', this.shaderStagesGLSL['VERTEX_SHADER']);
              }
              const glsl = this.shaderStages['VERTEX_SHADER'].glsl;
              if (glsl != undefined) {
                  const vertexShader = this.compileShaderStage(glsl, gl.VERTEX_SHADER, 'vertexShader', directives);
                  if (!vertexShader) {
                      return;
                  }
                  gl.attachShader(shaderProgramHdl, vertexShader);
                  shaderHdls[gl.VERTEX_SHADER] = vertexShader;
              }
          }
          {
              if (!this.shaderStages['FRAGMENT_SHADER']) {
                  // preprocess the GLSL, including all shader snippets
                  this.shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader('FRAGMENT_SHADER', this.shaderStagesGLSL['FRAGMENT_SHADER']);
              }
              const glsl = this.shaderStages['FRAGMENT_SHADER'].glsl;
              if (glsl != undefined) {
                  const fragmentShader = this.compileShaderStage(glsl, gl.FRAGMENT_SHADER, 'fragmentShader', directives);
                  if (!fragmentShader) {
                      return;
                  }
                  gl.attachShader(shaderProgramHdl, fragmentShader);
                  shaderHdls[gl.FRAGMENT_SHADER] = fragmentShader;
              }
          }
          gl.linkProgram(shaderProgramHdl);
          if (!gl.getProgramParameter(shaderProgramHdl, gl.LINK_STATUS)) {
              const info = gl.getProgramInfoLog(shaderProgramHdl);
              if (!info)
                  throw Error('info not defined');
              if (info.includes('D3D shader compilation failed')) {
                  // Usefull for debugging very nasty compiler errors generated only in the ANGL layer.
                  const debugExt = gl.getExtension('WEBGL_debug_shaders');
                  if (debugExt) {
                      const hlsl = debugExt.getTranslatedShaderSource(shaderHdls[gl.VERTEX_SHADER]);
                      console.log(hlsl);
                  }
              }
              console.groupCollapsed('vertexShaderGLSL');
              console.log(this.shaderStages['VERTEX_SHADER'].glsl);
              console.groupEnd();
              console.groupCollapsed('fragmentShaderGLSL');
              console.log(this.shaderStages['FRAGMENT_SHADER'].glsl);
              console.groupEnd();
              throw new Error('Unable to link the shader program:' + this.constructor.name + '\n==================\n' + info);
          }
          const attributeAndUniformLocation = this.extractAttributeAndUniformLocations(shaderProgramHdl);
          return {
              shaderHdls,
              shaderProgramHdl,
              unifs: attributeAndUniformLocation.unifs,
              attrs: attributeAndUniformLocation.attrs,
          };
      }
      /**
       * The extractAttributeAndUniformLocations method.
       * @param shaderProgramHdl - The shaderProgramHdl value.
       * @param directives - GLSL shader directives
       * @return - The dictionary of attributes and uniform values
       * @private
       */
      extractAttributeAndUniformLocations(shaderProgramHdl) {
          const gl = this.__gl;
          const attrs = this.getAttributes();
          const result = {
              attrs: {},
              unifs: {},
          };
          for (const attrName in attrs) {
              const location = gl.getAttribLocation(shaderProgramHdl, attrName);
              if (location == undefined) {
                  console.warn('Shader attribute not found:' + attrName);
                  continue;
              }
              const attrDesc = attrs[attrName];
              result.attrs[attrName] = {
                  name: attrName,
                  location: location,
                  glslType: attrDesc.glslType,
                  instanced: attrDesc.instanced,
                  integer: attrDesc.integer,
              };
          }
          const unifs = this.getUniforms(); // TODO: refactor type in fn()
          for (let uniformName in unifs) {
              const unifParseResult = unifs[uniformName];
              // TODO: array uniform disabled during ts-migration
              // if (unifType instanceof Array) {
              //   for (const member of unifType) {
              //     const structMemberName = uniformName + '.' + member.name
              //     const location = gl.getUniformLocation(shaderProgramHdl, structMemberName)
              //     if (location == undefined) {
              //       // console.warn(this.constructor.name + " uniform found in shader code but not in compiled program:" + uniformName);
              //       continue
              //     }
              //     result.unifs[structMemberName] = {
              //       name: structMemberName,
              //       location: location,
              //       type: member.type,
              //     }
              //   }
              // }
              const location = gl.getUniformLocation(shaderProgramHdl, uniformName);
              if (location == undefined) {
                  // console.warn(this.constructor.name + " uniform found in shader code but not in compiled program:" + uniformName);
                  continue;
              }
              result.unifs[uniformName] = {
                  name: uniformName,
                  location: location,
                  glslType: unifParseResult.glslType,
              };
          }
          return result;
      }
      /**
       * The getAttributes method.
       * @return - The dictionary of attributes that this shader expects to be bound.
       */
      getAttributes() {
          const attributes = {};
          for (const stageName in this.shaderStages) {
              const shaderStageBlock = this.shaderStages[stageName];
              for (const attrName in shaderStageBlock['attributes'])
                  attributes[attrName] = shaderStageBlock['attributes'][attrName];
          }
          return attributes;
      }
      /**
       * The getUniforms method.
       * @return - The dictionary of uniforms that this shader expects to be bound.
       */
      getUniforms() {
          const uniforms = {};
          for (const stageName in this.shaderStages) {
              const shaderStageBlock = this.shaderStages[stageName];
              for (const unifName in shaderStageBlock['uniforms'])
                  uniforms[unifName] = shaderStageBlock['uniforms'][unifName];
          }
          return uniforms;
      }
      /**
       * Checks to see if the engine is compiled for the target specified by the key
       * @param key - The key value.
       * @return - The return value.
       */
      isCompiledForTarget(key) {
          // The provided key only needs to be unique within each shaders cachel
          const shaderkey = key + this.getId() + '';
          return this.shaderProgramHdls[shaderkey] != undefined;
      }
      /**
       * The compileForTarget method.
       * @param key - The key value.
       * @param directives - The directives value.
       * @return - The result of the shader compilation.
       */
      compileForTarget(key, directives) {
          // Each time a shader is compiled, we cache the result.
          // A drived shader should not share cache value with its base class,
          // so we add the id to the cache key.
          const shaderkey = key + this.getId() + '';
          let shaderCompilationResult = this.shaderProgramHdls[shaderkey];
          if (!shaderCompilationResult) {
              shaderCompilationResult = this.createProgram(directives || []);
              // Note: the id is always added to the key, so cache the key without the id
              // so if we check the key again, the id is simply re-added.
              // see: GLGeomItemSetMultiDrawCompoundGeom.drawGeomData
              // When the geomDataShader is re-bound, it uses a cached key.
              // > geomDataShader.bind(renderstate, geomDataShaderKey)
              if (shaderCompilationResult)
                  shaderCompilationResult.shaderkey = key;
              this.shaderProgramHdls[shaderkey] = shaderCompilationResult;
              return shaderCompilationResult;
          }
          return shaderCompilationResult;
      }
      /**
       * The bind method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param key - The key value.
       * @return - The return value.
       */
      bind(renderstate, key) {
          const gl = this.__gl;
          if (renderstate.glShader != this) {
              const shaderCompilationResult = this.compileForTarget(key, renderstate.directives);
              if (!shaderCompilationResult) {
                  // TODO: compileForTarget should return null or empty
                  console.warn(this.constructor.name + ' is not compiled for ' + key);
                  return false;
              }
              const shaderProgramHdl = shaderCompilationResult.shaderProgramHdl;
              gl.useProgram(shaderProgramHdl);
              renderstate.glShader = this;
              renderstate.shaderkey = shaderCompilationResult.shaderkey;
              renderstate.unifs = shaderCompilationResult.unifs;
              renderstate.attrs = shaderCompilationResult.attrs;
              renderstate.boundTextures = 0;
              // Make sure we clear the binding cached.
              renderstate.glGeom = undefined;
              // Once the shader has been bound, we allow the renderer to bind any
              // of its global uniform values. (e.g. env map values etc...)
              if (renderstate.bindRendererUnifs)
                  renderstate.bindRendererUnifs(shaderCompilationResult.unifs);
              if (renderstate.geometryMaskTextures && renderstate.unifs.frontDepthTexture) {
                  const { frontDepthTexture, backDepthTexture, viewportSize } = renderstate.unifs;
                  renderstate.bindTexture(frontDepthTexture, renderstate.geometryMaskTextures[0]);
                  renderstate.bindTexture(backDepthTexture, renderstate.geometryMaskTextures[1]);
                  gl.uniform2f(viewportSize.location, renderstate.region[2] - renderstate.region[0], renderstate.region[3] - renderstate.region[1]);
              }
              if (renderstate instanceof GeomDataRenderState) {
                  const { floatGeomBuffer, occlusionCulling } = renderstate.unifs;
                  if (floatGeomBuffer) {
                      gl.uniform1i(floatGeomBuffer.location, renderstate.floatGeomBuffer ? 1 : 0);
                  }
                  if (occlusionCulling) {
                      gl.uniform1i(occlusionCulling.location, renderstate.occlusionCulling);
                  }
              }
          }
          // By default shaders support instancing.
          // Derived Shaders may set this to false.
          renderstate.supportsInstancing = true;
          return true;
      }
      /**
       * The unbind method.
       * @param renderstate - The object tracking the current state of the renderer
       * @return - The return value.
       */
      unbind(renderstate) {
          renderstate.glShader = null;
          renderstate.shaderkey = '';
          renderstate.unifs = {};
          renderstate.attrs = {};
          return true;
      }
      // /////////////////////////////
      // Parameters
      /**
       * The getGeomDataShaderName method.
       * @return - an array of param declarations that the shader expects the material tp provide.
       */
      getGeomDataShaderName() {
          return '';
      }
      /**
       * The getSelectedShaderName method.
       */
      getSelectedShaderName() {
          return '';
      }
      /**
       * The supportsInstancing method.
       * @return - return false for shaders that cannot be rendered in instanced mode.
       */
      static supportsInstancing() {
          return true;
      }
      /**
       * The getPackedMaterialData method.
       * @param material - The material param.
       * @return - The return value.
       */
      static getPackedMaterialData(material) {
          const matData = new Float32Array(4);
          return matData;
      }
      /**
       * Each shader provides a template material that each material instance is
       * based on. The shader specifies the parameters needed by the shader, and
       * the material provides values to the shader during rendering.
       * @return - The template material value.
       */
      static getMaterialTemplate() {
          throw new Error('Shader does not provide a material template.');
      }
      // /////////////////////////////////
      // Destroy
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          const gl = this.__gl;
          // eslint-disable-next-line guard-for-in
          for (const key in this.shaderProgramHdls) {
              const shaderCompilationResult = this.shaderProgramHdls[key];
              gl.deleteProgram(shaderCompilationResult.shaderProgramHdl);
          }
          this.shaderProgramHdls = {};
      }
  }

  /**
   * This class abstracts the rendering of a collection of geometries to screen.
   */
  class GLFbo {
      colorTextureResizeEventId = -1;
      __gl;
      __colorTexture;
      __createDepthTexture;
      __clearColor;
      __depthTexture = null;
      __fbo = null;
      __prevBoundFbo = null;
      /**
       * Creates a GL Framebuffer Object
       *
       * @param gl - The Canvas 3D Context.
       * @param colorTexture - Represents 2D Texture in GL.
       * @param createDepthTexture - The createDepthTexture value.
       */
      constructor(gl, colorTexture, createDepthTexture = false) {
          if (SystemDesc.isIOSDevice &&
              gl.name == 'webgl' &&
              (colorTexture.getType() == gl.FLOAT || colorTexture.getType() == gl.HALF_FLOAT)) {
              // So iOS simply refuses to bind anything to a render target except a UNSIGNED_BYTE texture.
              // See the subtle error message here: "floating-point render targets not supported -- this is legal"
              // https://www.khronos.org/registry/webgl/conformance-suites/1.0.2/conformance/extensions/oes-texture-float.html
              console.error('IOS devices are unable to render to float textures.');
          }
          this.__gl = gl;
          this.__colorTexture = colorTexture;
          this.__createDepthTexture = createDepthTexture;
          this.__clearColor = new Color(0, 0, 0, 0);
          if (this.__colorTexture) {
              this.colorTextureResizeEventId = this.__colorTexture.on('resized', () => {
                  console.warn('This code path will be deprecated. Instead, resize the GLFbo and it will resize the texture.');
                  this.resize(this.__colorTexture.width, this.__colorTexture.height, false);
              });
          }
          this.setup();
      }
      /**
       * Sets FBO clear color using RGBA array structure.
       *
       * @param clearColor - The clearColor value.
       */
      setClearColor(clearColor) {
          this.__clearColor = clearColor;
      }
      /**
       * Returns the `width` of the GL Texture
       *
       * @return - The return value.
       */
      getWidth() {
          return this.__colorTexture.width;
      }
      /**
       * Returns the `height` of the GL Texture
       *
       * @return - The return value.
       */
      getHeight() {
          return this.__colorTexture.height;
      }
      /**
       * Returns the `width`(Index 0) and the `height`(Index 1) of the GL Texture.
       *
       * @return - The return value.
       */
      getSize() {
          return [this.__colorTexture.width, this.__colorTexture.height];
      }
      /**
       * Returns the ColorTexture of the Fbo
       *
       * @return - The return value.
       */
      getColorTexture() {
          return this.__colorTexture;
      }
      /**
       * Returns the value of the deptTexture property.
       *
       * @return - The return value.
       */
      getDepthTextureGL() {
          return this.__depthTexture;
      }
      /**
       * Returns the `width` of the GL Texture
       *
       * @return - width of GLTexture
       */
      get width() {
          return this.__colorTexture.width;
      }
      /**
       * Returns the `height` of the GL Texture
       *
       * @return - height of GLTexture
       */
      get height() {
          return this.__colorTexture.height;
      }
      /**
       * Returns the [width, height] of the GL Texture.
       *
       * @return - returns [width, height] of the __colorTexture
       */
      get size() {
          return [this.__colorTexture.width, this.__colorTexture.height];
      }
      /**
       * Returns the ColorTexture of the Fbo
       *
       * @returns {GLTexture2D} - returns this.__colorTexture
       */
      get colorTexture() {
          return this.__colorTexture;
      }
      /**
       * Sets ColorTexture of the Fbo.
       *
       * @param colorTexture - The colorTexture value.
       */
      setColorTexture(colorTexture) {
          const gl = this.__gl;
          this.__colorTexture = colorTexture;
          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.__colorTexture.glTex, 0);
      }
      /**
       * Returns the value of the depthTexture property.
       *
       * @return
       */
      get depthTextureGL() {
          return this.__depthTexture;
      }
      /**
       * The setup method.
       */
      setup() {
          const gl = this.__gl;
          this.__fbo = gl.createFramebuffer();
          if (gl.name == 'webgl2')
              gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.__fbo);
          else
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.__fbo);
          if (this.__colorTexture) {
              if (gl.name == 'webgl2')
                  gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.__colorTexture.glTex, 0);
              else
                  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.__colorTexture.glTex, 0);
          }
          // Create the depth texture
          if (this.__createDepthTexture) {
              this.createDepthTexture();
          }
          checkFramebuffer(gl, this.width, this.height);
          if (gl.name == 'webgl2')
              gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
          else
              gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      }
      createDepthTexture() {
          const gl = this.__gl;
          if (gl.name != 'webgl2' && !gl.__ext_WEBGL_depth_texture) {
              // Create the depth buffer
              const depthBuffer = gl.createRenderbuffer();
              gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);
              gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.width, this.height);
              gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);
          }
          else {
              gl.activeTexture(gl.TEXTURE0);
              this.__depthTexture = gl.createTexture();
              gl.bindTexture(gl.TEXTURE_2D, this.__depthTexture);
              // TODO: Copy params from the color image.
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
              if (gl.name == 'webgl2') {
                  // the proper texture format combination can be found here
                  // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
                  // https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/fbo_rtt_depth_texture.html
                  // gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT16, this.width, this.height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_SHORT, null);
                  gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT24, this.width, this.height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT, null);
                  gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this.__depthTexture, 0);
              }
              else {
                  gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT, this.width, this.height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT, null);
                  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this.__depthTexture, 0);
              }
          }
      }
      /**
       * Triggered Automatically when the texture resizes.
       *
       * @todo: Fbos should manage the textures assigned to them.
       * E.g. resizing and preserving data.
       */
      resize(width, height, resizeTexture = true) {
          const gl = this.__gl;
          gl.bindFramebuffer(gl.FRAMEBUFFER, null);
          gl.deleteFramebuffer(this.__fbo);
          if (resizeTexture) {
              this.__colorTexture.resize(width, height, false, false);
          }
          this.__fbo = gl.createFramebuffer();
          if (gl.name == 'webgl2')
              gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.__fbo);
          else
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.__fbo);
          // The color texture is destoryed and re-created when it is resized,
          // so we must re-bind it here.
          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.__colorTexture.glTex, 0);
          if (this.__depthTexture) {
              gl.deleteTexture(this.__depthTexture);
              this.createDepthTexture();
          }
          checkFramebuffer(gl, this.width, this.height);
          if (gl.name == 'webgl2')
              gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
          else
              gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      }
      /**
       * Binds the Fbo to the canvas context, meaning that all WRITE operations will affect the current Fbo.
       *
       * @param renderstate - The renderstate value.
       */
      bindForWriting(renderstate) {
          if (renderstate) {
              this.__prevBoundFbo = renderstate.boundRendertarget;
              renderstate.boundRendertarget = this.__fbo;
          }
          const gl = this.__gl;
          if (gl.name == 'webgl2')
              gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.__fbo);
          else
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.__fbo);
          gl.viewport(0, 0, this.width, this.height); // Match the viewport to the texture size
      }
      /**
       * Unbinds the Fbo to the canvas context for WRITE operations.
       *
       * @param renderstate - The renderstate value.
       */
      unbindForWriting(renderstate) {
          if (renderstate)
              renderstate.boundRendertarget = this.__prevBoundFbo;
          const gl = this.__gl;
          if (gl.name == 'webgl2')
              gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.__prevBoundFbo);
          else
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.__prevBoundFbo);
      }
      /**
       * Binds the Fbo to the canvas context, meaning that all WRITE operations will affect the current Fbo.
       *
       * @param renderstate - The renderstate value.
       */
      bind(renderstate) {
          this.bindForWriting(renderstate);
      }
      /**
       * Unbinds the Fbo to the canvas context for WRITE operations.
       *
       * @param renderstate - The renderstate value.
       */
      unbind(renderstate) {
          if (renderstate) {
              // For write operations
              this.unbindForWriting(renderstate);
          }
          else {
              const gl = this.__gl;
              gl.bindFramebuffer(gl.FRAMEBUFFER, null);
          }
      }
      /**
       * Binds the Fbo to the canvas context, meaning that all READ operations will affect the current Fbo.
       *
       * @param renderstate - The renderstate value.
       */
      bindForReading(renderstate) {
          const gl = this.__gl;
          if (gl.name == 'webgl2')
              gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this.__fbo);
          else
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.__fbo);
      }
      /**
       * Unbinds the Fbo to the canvas context for READ operations.
       *
       * @param renderstate - The renderstate value.
       */
      unbindForReading() {
          const gl = this.__gl;
          if (gl.name == 'webgl2')
              gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
          else
              gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      }
      /**
       * Enables all color components of the rendering context of the Fbo,
       * specifying the default color values when clearing color buffers and clears the buffers to preset values.
       */
      clear() {
          const gl = this.__gl;
          gl.colorMask(true, true, true, true);
          const col = this.__clearColor.asArray();
          gl.clearColor(col[0], col[1], col[2], col[3]);
          if (this.__createDepthTexture) {
              gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
          }
          else {
              gl.clear(gl.COLOR_BUFFER_BIT);
          }
      }
      /**
       * Runs [`bind`](#bind) then [`clear`](#clear) methods.
       * @param renderstate - The renderstate value.
       */
      bindAndClear(renderstate) {
          this.bind(renderstate);
          this.clear();
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          const gl = this.__gl;
          gl.bindFramebuffer(gl.FRAMEBUFFER, null);
          gl.deleteFramebuffer(this.__fbo);
          this.__fbo = null;
          this.__colorTexture.off('resized', this.colorTextureResizeEventId);
      }
  }
  function checkFramebuffer(gl, width, height) {
      let check;
      if (gl.name == 'webgl2')
          check = gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER);
      else
          check = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
      if (check !== gl.FRAMEBUFFER_COMPLETE) {
          gl.bindTexture(gl.TEXTURE_2D, null);
          if (gl.name == 'webgl2')
              gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
          else
              gl.bindFramebuffer(gl.FRAMEBUFFER, null);
          console.warn('Error creating Fbo width:', width, ', height:', height);
          switch (check) {
              case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                  throw new Error('The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.');
              case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                  throw new Error('There is no attachment.');
              case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                  throw new Error('Height and width of the attachment are not the same.');
              case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                  throw new Error('The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.');
              case 36061: // gl.GL_FRAMEBUFFER_UNSUPPORTED:
                  throw new Error('The framebuffer is unsupported');
              default:
                  throw new Error('Incomplete Frambuffer');
          }
      }
  }

  /** The GLRenderTarget is used to generate a WebGL Framebuffer and its associated textures.
   * It can be used to create a FrameBuffer, several color textures and an optional depth texture, all bound to the Framebuffer.
   *
   *
   * ```javascript
   *  const renderTarget = new GLRenderTarget(gl, {
   *    type: gl.FLOAT,
   *    format: gl.RGBA,
   *    minFilter: gl.NEAREST,
   *    magFilter: gl.NEAREST,
   *    width: 128,
   *    height: 64,
   *    depthType: gl.FLOAT,
   *    depthFormat: gl.DEPTH_COMPONENT,
   *    depthInternalFormat: gl.DEPTH_COMPONENT32F,
   *  })
   * ```
   */
  class GLRenderTarget extends EventEmitter {
      __gl;
      textureTargets;
      depthTexture;
      frameBuffer;
      textureDesc;
      params = {};
      type;
      format;
      internalFormat;
      minFilter;
      maxFilter;
      wrap;
      flipY = false;
      width = 0;
      height = 0;
      clearColor;
      colorMask;
      textureType;
      prevBoundFbo;
      /**
       * Create a GL render target.
       * @param gl - The webgl rendering context.
       * @param params - The params value.
       */
      constructor(gl, params) {
          super();
          this.__gl = gl;
          this.textureTargets = [];
          this.depthTexture = null;
          this.textureDesc = [0, 0, 0, 0];
          this.clearColor = new Color(0, 0, 0, 0);
          this.colorMask = [true, true, true, true];
          if (params) {
              this.configure(params);
          }
      }
      /**
       * The configure method.
       * @param params - The params param.
       */
      configure(params) {
          const gl = this.__gl;
          const p = processTextureParams(gl, params); // TODO: review
          this.textureTargets.forEach((colorTexture) => {
              gl.deleteTexture(colorTexture);
          });
          this.textureTargets = [];
          if (this.depthTexture) {
              gl.deleteTexture(this.depthTexture);
              this.depthTexture = null;
          }
          if (this.frameBuffer) {
              gl.deleteFramebuffer(this.frameBuffer);
          }
          this.params = p;
          this.type = p.type;
          this.format = p.format;
          this.internalFormat = p.internalFormat;
          this.minFilter = p.minFilter ? p.minFilter : p.filter;
          this.minFilter = p.magFilter ? p.magFilter : p.filter;
          this.wrap = p.wrap;
          this.flipY = p.flipY;
          this.width = p.width;
          this.height = p.height;
          this.textureType = 1; // Default 2d 8 bit texture image texture.
          this.textureDesc[0] = this.width;
          this.textureDesc[1] = this.height;
          // -- Initialize texture targets
          const numColorChannels = params.numColorChannels != undefined ? params.numColorChannels : p.format != undefined ? 1 : 0;
          for (let i = 0; i < numColorChannels; i++) {
              gl.activeTexture(gl.TEXTURE0 + 1);
              const colorTexture = gl.createTexture();
              gl.bindTexture(gl.TEXTURE_2D, colorTexture);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, p.wrapS);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, p.wrapT);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, p.minFilter);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, p.magFilter);
              gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, p.width, p.height, 0, this.format, this.type, null);
              this.textureTargets.push(colorTexture);
          }
          if (p.depthFormat) {
              if (gl.name == 'webgl' && !gl.__ext_WEBGL_depth_texture)
                  throw new Error('Depth textures not support on this device');
              // -- Initialize depth texture
              gl.activeTexture(gl.TEXTURE0);
              this.depthTexture = gl.createTexture();
              gl.bindTexture(gl.TEXTURE_2D, this.depthTexture);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, p.wrapS);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, p.wrapT);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, p.minFilter);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, p.magFilter);
              // the proper texture format combination can be found here
              // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
              gl.texImage2D(gl.TEXTURE_2D, 0, p.depthInternalFormat, p.width, p.height, 0, p.depthFormat, p.depthType, null);
          }
          // -- Initialize frame buffer
          this.frameBuffer = gl.createFramebuffer();
          this.bindForWriting();
          if (this.textureTargets.length > 0) {
              if (this.textureTargets.length > 1) {
                  if (gl.name == 'webgl' && !gl.drawBuffers) ;
              }
              const bufferIds = [];
              for (let i = 0; i < this.textureTargets.length; i++) {
                  gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, this.textureTargets[i], 0);
                  bufferIds.push(gl.COLOR_ATTACHMENT0 + i);
              }
              if (this.textureTargets.length > 1) {
                  gl.drawBuffers(bufferIds);
              }
          }
          if (this.depthTexture) {
              gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this.depthTexture, 0);
          }
          this.checkFramebuffer();
      }
      /**
       * The checkFramebuffer method.
       */
      checkFramebuffer() {
          this.bindForWriting(); // TODO
          const gl = this.__gl;
          const status = gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER);
          if (status != gl.FRAMEBUFFER_COMPLETE) {
              switch (status) {
                  case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                      throw new Error('The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.');
                  case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                      throw new Error('There is no attachment.');
                  case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                      throw new Error('Height and width of the attachment are not the same.');
                  case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                      throw new Error('The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.');
                  case 36061: // gl.GL_FRAMEBUFFER_UNSUPPORTED:
                      throw new Error('The framebuffer is unsupported');
                  default:
                      throw new Error('Incomplete Frambuffer');
              }
          }
          this.unbindForWriting();
      }
      /**
       * The bindForWriting method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param clear - The clear value.
       */
      bindForWriting(renderstate, clear = false) {
          if (renderstate) {
              this.prevBoundFbo = renderstate.boundRendertarget;
              renderstate.boundRendertarget = this.frameBuffer;
          }
          const gl = this.__gl;
          if (gl.name == 'webgl2')
              gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.frameBuffer);
          else
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);
          gl.viewport(0, 0, this.width, this.height); // Match the viewport to the texture size
          if (clear)
              this.clear();
      }
      /**
       * The unbindForWriting method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      unbindForWriting(renderstate) {
          if (renderstate)
              renderstate.boundRendertarget = this.prevBoundFbo;
          const gl = this.__gl;
          gl.bindFramebuffer(gl.name == 'webgl2' ? gl.DRAW_FRAMEBUFFER : gl.FRAMEBUFFER, this.prevBoundFbo);
          this.prevBoundFbo = null;
      }
      /**
       * The clear method.
       * @param clearDepth - The clearDepth value.
       */
      clear(clearDepth = true) {
          const gl = this.__gl;
          const colMask = this.colorMask;
          gl.colorMask(colMask[0], colMask[1], colMask[2], colMask[3]);
          const clearCol = this.clearColor.asArray();
          gl.clearColor(clearCol[0], clearCol[1], clearCol[2], clearCol[3]);
          let flags = 0;
          if (this.textureTargets.length > 0)
              flags |= gl.COLOR_BUFFER_BIT;
          if (this.depthTexture)
              flags |= gl.DEPTH_BUFFER_BIT;
          gl.clear(flags);
      }
      /**
       * Binds the render target in preparation for 'readPixels' calls to pull data back to main memory.
       */
      bindForReading() {
          const gl = this.__gl;
          if (gl.name == 'webgl2')
              gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this.frameBuffer);
          else
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);
      }
      /**
       * The unbindForReading method.
       */
      unbindForReading() {
          const gl = this.__gl;
          if (gl.name == 'webgl2')
              gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
          else
              gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      }
      /**
       * The bindColorTexture method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param channelId - The channelId value.
       * @return - The return value.
       */
      bindColorTexture(renderstate, unif, channelId = 0) {
          const gl = this.__gl;
          const unit = renderstate.boundTextures++;
          gl.uniform1i(unif.location, unit);
          gl.activeTexture(gl.TEXTURE0 + unit);
          gl.bindTexture(gl.TEXTURE_2D, this.textureTargets[channelId]);
          return true;
      }
      /**
       * The bindDepthTexture method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param unif - The WebGL uniform
       * @return - The return value.
       */
      bindDepthTexture(renderstate, unif) {
          const gl = this.__gl;
          const unit = renderstate.boundTextures++;
          gl.uniform1i(unif.location, unit);
          gl.activeTexture(gl.TEXTURE0 + unit);
          gl.bindTexture(gl.TEXTURE_2D, this.depthTexture);
          return true;
      }
      /**
       * The unbind method.
       */
      unbind(renderstate) {
          this.unbindForWriting(renderstate);
      }
      /**
       * The resize method.
       * @param width - The width value.
       * @param height - The height value.
       * @param preserveData - The preserveData value.
       */
      resize(width, height, preserveData = false) {
          const gl = this.__gl;
          const sizeChanged = this.width != width || this.height != height;
          if (sizeChanged) {
              const maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
              if (width < 0 || width > maxSize || height < 0 || height > maxSize) {
                  throw new Error(`GLRenderTarget: Invalid texture size. width: ${width} height: ${height} maxSize: ${maxSize}`);
              }
              if (preserveData) {
                  this.bindForReading();
              }
              const p = this.params;
              for (let i = 0; i < this.textureTargets.length; i++) {
                  const colorTexture = gl.createTexture();
                  gl.bindTexture(gl.TEXTURE_2D, colorTexture);
                  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, p.wrapS);
                  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, p.wrapT);
                  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, p.minFilter);
                  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, p.magFilter);
                  gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, width, height, 0, this.format, this.type, null);
                  if (preserveData) {
                      // see: http://jsfiddle.net/greggman/rs21sr46
                      gl.copyTexImage2D(gl.TEXTURE_2D, 0, this.internalFormat, 0, 0, Math.min(width, this.width), Math.min(height, this.height), 0);
                  }
                  gl.deleteTexture(this.textureTargets[i]);
                  this.textureTargets[i] = colorTexture;
              }
              if (p.depthFormat) {
                  if (gl.name == 'webgl' && !gl.__ext_WEBGL_depth_texture)
                      throw new Error('Depth textures not support on this device');
                  // -- Initialize depth texture
                  gl.activeTexture(gl.TEXTURE0);
                  const depthTexture = gl.createTexture();
                  gl.bindTexture(gl.TEXTURE_2D, depthTexture);
                  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, p.wrapS);
                  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, p.wrapT);
                  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, p.minFilter);
                  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, p.magFilter);
                  // the proper texture format combination can be found here
                  // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
                  gl.texImage2D(gl.TEXTURE_2D, 0, p.depthInternalFormat, width, height, 0, p.depthFormat, p.depthType, null);
                  if (preserveData) {
                      // see: http://jsfiddle.net/greggman/rs21sr46
                      gl.copyTexImage2D(gl.TEXTURE_2D, 0, this.internalFormat, 0, 0, Math.min(width, this.width), Math.min(height, this.height), 0);
                  }
                  gl.deleteTexture(this.depthTexture);
                  this.depthTexture = depthTexture;
              }
              if (preserveData) {
                  this.unbindForReading();
              }
              this.width = width;
              this.height = height;
              // -- Initialize frame buffer
              if (this.frameBuffer) {
                  // Note: avoid re-using the framebuffer.
                  // see here: https://gamedev.stackexchange.com/questions/91991/resizing-a-framebuffer-object-ie-its-attachments-on-screen-resize
                  gl.deleteFramebuffer(this.frameBuffer);
              }
              this.frameBuffer = gl.createFramebuffer();
              this.bindForWriting();
              if (this.textureTargets.length > 0) {
                  if (this.textureTargets.length > 1) {
                      if (gl.name == 'webgl' && !gl.drawBuffers) ;
                  }
                  const bufferIds = [];
                  for (let i = 0; i < this.textureTargets.length; i++) {
                      gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, this.textureTargets[i], 0);
                      bufferIds.push(gl.COLOR_ATTACHMENT0 + i);
                  }
                  if (this.textureTargets.length > 1) {
                      gl.drawBuffers(bufferIds);
                  }
              }
              if (this.depthTexture) {
                  gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this.depthTexture, 0);
              }
              this.checkFramebuffer();
          }
      }
      /**
       * The bindToUniform method.
       * @param renderstate - The renderstate param.
       * @param unif - The WebGL uniform
       * @param bindings - The bindings param.
       * @return - The return value.
       */
      bindToUniform(renderstate, unif, bindings) {
          // if (!this.__loaded) {
          //   return false
          // }
          // if (!this.gltex) {
          //   throw new Error('Unable to bind non-initialized or deleted texture.')
          // }
          const unit = renderstate.boundTextures++;
          const texId = this.__gl.TEXTURE0 + unit;
          const gl = this.__gl;
          gl.activeTexture(texId);
          gl.bindTexture(gl.TEXTURE_2D, this.textureTargets[0]);
          gl.uniform1i(unif.location, unit);
          if (bindings) {
              if (bindings.textureTypeUnif) {
                  gl.uniform1i(bindings.textureTypeUnif.location, this.textureType);
              }
              if (bindings.textureDescUnif) {
                  this.__gl.uniform4fv(bindings.textureDescUnif.location, this.textureDesc);
              }
          }
          return true;
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          const gl = this.__gl;
          this.textureTargets.forEach((colorTexture) => {
              gl.deleteTexture(colorTexture);
          });
          this.textureTargets = [];
          if (this.depthTexture) {
              gl.deleteTexture(this.depthTexture);
              this.depthTexture = null;
          }
          if (this.frameBuffer) {
              gl.deleteFramebuffer(this.frameBuffer);
          }
      }
  }

  var computeViewNormal = "#define GLSLIFY 1\n  \n#ifdef ENABLE_ES3\nvec3 computeViewNormal(vec3 viewPos) {\n  vec3 fdx = dFdx(viewPos);\n  vec3 fdy = dFdy(viewPos);\n  return normalize(cross(fdx, fdy));\n}\n#else \nvec3 computeViewNormal(vec3 viewPos) {\n  return vec3(0.0, 0.0, 0.0);\n}\n#endif\n"; // eslint-disable-line

  var calcFatLinesViewPos = "#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nvec3 calcFatLinesViewPos(int vertexID, mat4 modelViewMatrix, inout vec3 viewNormal, inout vec2 texCoord, inout vec3 pos) {\n\n  int seqentialIndex_0 = int(mod(segmentIndices.x, 2.));\n  int seqentialIndex_1 = int(mod(segmentIndices.y, 2.));\n  int index_0 = int(segmentIndices.x) / 2;\n  int index_1 = int(segmentIndices.y) / 2;\n\n  vec3 viewPos;\n  vec4 data_0 = fetchTexel(positionsTexture, positionsTextureSize, index_0);\n  vec4 data_1 = fetchTexel(positionsTexture, positionsTextureSize, index_1);\n\n  // During XR sessions, there is a scaling applied to the view matrix\n  // which causes a distortion to the line width. We extract that scale here\n  // and use to correct the distortion.\n  // See also: FatPointsShader\n  vec3 viewZ = modelViewMatrix[2].xyz;\n  float viewScale = length(viewZ);\n\n  vec4 pos_0 = modelViewMatrix * vec4(data_0.xyz, 1.0);\n  vec4 pos_1 = modelViewMatrix * vec4(data_1.xyz, 1.0);\n  // Note: multiply the per-vertex line thickness with the line thickness uniform value;\n  float lineThickness_0 = LineThickness * data_0.w * viewScale;\n  float lineThickness_1 = LineThickness * data_1.w * viewScale;\n\n  if (vertexID < 2) {\n    pos = data_0.xyz;\n    viewPos = pos_0.xyz;\n  }\n  else {\n    pos = data_1.xyz;\n    viewPos = pos_1.xyz;\n  }\n  if (pos_1 != pos_0) {\n    vec3 segmentDir = normalize(pos_1.xyz - pos_0.xyz);\n    vec3 viewVector = normalize(viewPos);\n\n    if (vertexID < 2) {\n      vec3 segmentStartDir = segmentDir;\n      if (seqentialIndex_0 != 0) {\n        //if index_0 == 0, get the last index in the line as previous\n        int index_prev = (index_0 > 0) ? (index_0-1) : (positionsTextureSize-1);\n        vec4 data_prev = fetchTexel(positionsTexture, positionsTextureSize, index_prev);\n        vec4 pos_prev = modelViewMatrix * vec4(data_prev.xyz, 1.0);\n        segmentStartDir = normalize(segmentDir + normalize(pos_0.xyz - pos_prev.xyz));\n        // segmentStartDir = segmentDir;\n      }\n      // vec3 startBiTangent = normalize(cross(segmentStartDir, viewVector));\n      // viewNormal = normalize(cross(segmentStartDir, startBiTangent));\n      vec3 startBiTangent = normalize(vec3(-segmentStartDir.y, segmentStartDir.x, 0.0));\n      viewNormal = normalize(-viewVector);\n      // Move the endpoints to overlap a bit more.\n      //viewPos -= vec3(segmentStartDir * lineThickness_0 * 0.25);\n      if (mod(vertexIDs, 2.0) == 0.0) {\n        viewPos += vec3(startBiTangent * lineThickness_0);\n        texCoord.x = 1.0;\n      }\n      else {\n        viewPos -= vec3(startBiTangent * lineThickness_0);\n        texCoord.x = 0.0;\n      }\n      texCoord.y = 0.0;\n    }\n    else {\n      vec3 segmentEndDir = segmentDir;\n      if (seqentialIndex_1 != 0) {\n        //if index_1 == numPoints-1, get the first index in the line as next\n        int index_next = (index_1 < (positionsTextureSize-1)) ? (index_1+1) : 0;\n        vec4 data_next = fetchTexel(positionsTexture, positionsTextureSize, index_next);\n        vec4 pos_next = modelViewMatrix * vec4(data_next.xyz, 1.0);\n        segmentEndDir = normalize(segmentDir + normalize(pos_next.xyz - pos_1.xyz));\n        // segmentEndDir = segmentDir;\n      }\n      // vec3 endBiTangent = normalize(cross(segmentEndDir, viewVector));\n      // viewNormal = normalize(cross(segmentEndDir, endBiTangent));\n      vec3 endBiTangent = normalize(vec3(-segmentEndDir.y, segmentEndDir.x, 0.0));\n      viewNormal = normalize(-viewVector);\n      // Move the endpoints to overlap a bit more.\n      //viewPos += vec3(segmentEndDir * lineThickness_1 * 0.25);\n      if (mod(vertexIDs, 2.0) == 0.0) {\n        viewPos += vec3(endBiTangent * lineThickness_1);\n        texCoord.x = 1.0;\n      }\n      else {\n        viewPos -= vec3(endBiTangent * lineThickness_1);\n        texCoord.x = 0.0;\n      }\n      texCoord.y = 1.0;\n    }\n\n    // Move the line towards the viewer by the line thickness.\n    // this is to avoid depth issues when lines are rendered over meshes. \n    viewPos.z += (lineThickness_0 + lineThickness_1) * 0.5;\n  }\n\n  return viewPos;\n}\n\n"; // eslint-disable-line

  var constants = "#define GLSLIFY 1\n#define PI 3.141592653589793\n#define TwoPI (2.0 * PI)\n#define HalfPI (0.5 * PI)\n\n"; // eslint-disable-line

  var convolveHelpers = "#define GLSLIFY 1\n\n#ifdef ENVMAP_CUBE\n\nuniform samplerCube envMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return texture(envMap, dir);\n}\n\n#else \n\nuniform sampler2D   envMap;\n\nimport 'envmap-octahedral.glsl'\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = dirToSphOctUv(dir);\n  vec4 texel = texture2D(envMap, vec2(uv.x, 1.0 - uv.y));\n  return vec4(texel.rgb/texel.a, 1.0); // TODO: Check this line. Do we need it?\n}\n\n#endif \n\nvec3 cubeFaceUvToDir(float u, float v, int faceId) {\n\n  // normalize into [-1, 1] range\n  float n_u = 2.0 * u - 1.0;\n  float n_v = 2.0 * v - 1.0;\n\n  vec3 dir;\n  switch (faceId)\n  {\n  case 0: //TEXTURE_CUBE_MAP_POSITIVE_X:\n    dir.x = 1.0f;\n    dir.y = n_v;\n    dir.z = -n_u;\n    break;\n  case 1: //TEXTURE_CUBE_MAP_NEGATIVE_X:\n    dir.x = -1.0f;\n    dir.y = n_v;\n    dir.z = n_u;\n    break;\n  case 3: //TEXTURE_CUBE_MAP_POSITIVE_Y:\n    dir.x = n_u;\n    dir.y = 1.0f;\n    dir.z = -n_v;\n    break;\n  case 2: //TEXTURE_CUBE_MAP_NEGATIVE_Y:\n    dir.x = n_u;\n    dir.y = -1.0f;\n    dir.z = n_v;\n    break;\n  case 4: //TEXTURE_CUBE_MAP_POSITIVE_Z:\n    dir.x = n_u;\n    dir.y = n_v;\n    dir.z = 1.0f;\n    break;\n  case 5: //TEXTURE_CUBE_MAP_NEGATIVE_Z:\n    dir.x = -n_u;\n    dir.y = n_v;\n    dir.z = -1.0f;\n    break;\n  }\n  return normalize(dir);\n}\n\n"; // eslint-disable-line

  var cutaways = "#define GLSLIFY 1\nuniform color cutColor;\n\n#ifdef ENABLE_FLOAT_TEXTURES\n  vec4 getCutaway(int id) {\n    return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n  }\n\n#else\n\n  uniform vec4 cutawayData;\n\n  vec4 getCutaway(int id) {\n    return cutawayData;\n  }\n\n#endif\n\n#define RAY_EPS 0.0000001\nstruct Ray {\n  vec3 start;\n  vec3 dir;\n};\n\nfloat intersectRayPlane(Ray ray, Ray plane) {\n  vec3 w = ray.start - plane.start;\n  float D = dot(plane.dir, ray.dir);\n  float N = dot(-plane.dir, w);\n\n  if (abs(D) < RAY_EPS) {\n    // segment is parallel to plane\n    if (N == 0.0)\n      return -1.0; // segment lies in plane\n    else\n      return -1.0; // no intersection\n  }\n  // they are not parallel\n  // compute intersect param\n  float sI = N / D;\n  if (sI < -RAY_EPS) {\n    return -1.0; // no intersection\n  }\n  return sI;\n}\n\nbool cutaway(vec3 worldPos, vec3 planeNormal, float planeDist) {\n\n  vec3 planePos = planeNormal * planeDist;\n  vec3 planeDir = worldPos + planePos;\n  float planeOffset = dot(planeDir, planeNormal);\n  if (planeOffset > 0.0) {\n    return true;\n  }\n  return false;\n}\n"; // eslint-disable-line

  var debugColors = "#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\n\nvec3 getDebugColor(float id) {\n  int sel = int(round(mod(round(id), 16.0)));\n  \n  if (sel==0)\n    return vec3(0.0, 1.0, 1.0);\n  else if (sel==1)\n    return vec3(0.0, 1.0, 0.0);\n  else if (sel==2)\n    return vec3(1.0, 0.0, 1.0);\n  else if (sel==3)\n    return vec3(0.75, 0.75, 0.0);\n  else if (sel==4)\n    return vec3(0.0, 0.75, 0.75);\n  else if (sel==5)\n    return vec3(0.75, 0.0, 0.75);\n  else if (sel==6)\n    return vec3(0.45, 0.95, 0.0);\n  else if (sel==7)\n    return vec3(0.0, 0.45, 0.95);\n  else if (sel==8)\n    return vec3(0.95, 0.0, 0.45);\n  else if (sel==9)\n    return vec3(0.95, 0.45, 0.0);\n  else if (sel==10)\n    return vec3(0.0, 0.95, 0.45);\n  else if (sel==11)\n    return vec3(0.45, 0.0, 0.95);\n  else if (sel==12)\n    return vec3(0.45, 0.45, 0.95);\n  else if (sel==13)\n    return vec3(0.0, 0.0, 0.45);\n  else if (sel==14)\n    return vec3(0.0, 0.45, 0.45);\n  else if (sel==15)\n    return vec3(0.45, 0.0, 0.45);\n  else return vec3(0.2, 0.2, 0.2);\n}\n\n"; // eslint-disable-line

  var geomItemId = "#define GLSLIFY 1\n\n#ifdef ENABLE_MULTI_DRAW\n\n// On some mobile GPUs the sampler2D defaults to lowp, which implies a maximum\n// resolution of 255. This caused rendering artifacts on larger scenes on mobile\n// devices.\nuniform highp sampler2D drawIdsTexture;\n\n#ifdef EMULATE_MULTI_DRAW\nuniform int drawId;\n#endif // EMULATE_MULTI_DRAW\n\nint getGeomItemId() {\n#ifndef EMULATE_MULTI_DRAW\n  int drawId = gl_DrawID;\n#endif // EMULATE_MULTI_DRAW\n\n  ivec2 texSize = textureSize(drawIdsTexture, 0);\n  ivec2 texelCoords = ivec2(drawId % texSize.x, drawId / texSize.x);\n  return int(texelFetch(drawIdsTexture, texelCoords, 0).r + 0.5);\n}\n\nvec4 getDrawItemIds() {\n#ifndef EMULATE_MULTI_DRAW\n  int drawId = gl_DrawID;\n#endif // EMULATE_MULTI_DRAW\n\n  ivec2 texSize = textureSize(drawIdsTexture, 0);\n  ivec2 texelCoords = ivec2(drawId % texSize.x, drawId / texSize.x);\n  vec4 color = texelFetch(drawIdsTexture, texelCoords, 0);\n  // Note: A 0 value in the texture means no sub-geom index is being rendered.\n  // subtract off 1 to get the true sub-geom index.\n  return vec4(color.r, color.g - 1.0, color.b, color.a);\n}\n\n#else // ENABLE_MULTI_DRAW\n\nuniform int geomItemId;\n\nattribute float instancedIds;    // instanced attribute..\nuniform int instancedDraw;\n\nint getGeomItemId() {\n  if (instancedDraw == 0) {\n    return geomItemId;\n  }\n  else {\n    return int(instancedIds);\n  }\n}\n\nvec4 getDrawItemIds() {\n  if (instancedDraw == 0) {\n    return vec4(float(geomItemId), 0.0, -1.0, -1.0);\n  }\n  else {\n    return vec4(float(instancedIds), 0.0, -1.0, -1.0);\n  }\n}\n\n#endif // ENABLE_MULTI_DRAW\n\n// For backwards compatibility with older plugins (UX.HandleShader)\nint getDrawItemId() {\n  return getGeomItemId();\n}\n"; // eslint-disable-line

  var geomItemFlags = "#define GLSLIFY 1\nconst int GEOMITEM_FLAG_CUTAWAY = 2; // 1<<1;\nconst int GEOMITEM_INVISIBLE_IN_GEOMDATA = 4; // 1<<2;\nconst int GEOMITEM_TRANSPARENT = 8; // 1<<3;\nconst int GEOMITEM_PLACEHOLDER = 16; // 1<<4;\nconst int GEOMITEM_MASK = 32; // 1<<5;\n"; // eslint-disable-line

  var geomType = "#define GLSLIFY 1\n\nconst int TRIANGLES = 0;\nconst int LINES = 1;\nconst int POINTS = 2;"; // eslint-disable-line

  var geometryMask = "#define GLSLIFY 1\nuniform sampler2D frontDepthTexture;\nuniform sampler2D backDepthTexture;\n\nuniform vec2 depthRange;\nuniform vec2 viewportSize;\n\nbool testGeometryMask(vec3 viewPos) {\n  float depth = gl_FragCoord.z;\n  vec2 texCoord = gl_FragCoord.xy / viewportSize;\n  float front = texture2D(frontDepthTexture, texCoord).r;\n  float back = texture2D(backDepthTexture, texCoord).r;\n\n  return depth < front || depth > back;\n}\n"; // eslint-disable-line

  var drawItemTexture = "#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\n\n// The texture populated by the GLGeomItemLibrary\nuniform sampler2D instancesTexture;\nuniform highp int instancesTextureSize;\n\n// See also: src\\Renderer\\GLSLConstants.js\nconst int pixelsPerItem = 8;\n\nvec4 getInstanceData(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 0);\n}\n\n"; // eslint-disable-line

  var envmapDualfisheye = "#define GLSLIFY 1\n\nvec2 dualfisheyeUVsFromDir(vec3 dir) {\n  vec2 result;\n  float angle = 0.465;\n  if (dir.x < 0.0) {\n    result = vec2(((dir.z * -angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);\n  }\n  else {\n    result = vec2( 0.5 + ((dir.z * angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);\n  }\n  return result;\n}\n\n"; // eslint-disable-line

  var envmapEquirect = "#define GLSLIFY 1 \nimport 'constants.glsl'\n\nvec2 latLongUVsFromDir(vec3 dir) {\n  // Math function taken from...\n  // http://gl.ict.usc.edu/Data/HighResProbes/\n  // Note: Scaling from u=[0,2], v=[0,1] to u=[0,1], v=[0,1]\n  float phi = acos(dir.z);\n  float theta = atan(dir.x, dir.y);\n  return vec2((1.0 + theta / PI) / 2.0, phi / PI);\n}\n\n// Note: when u == 0.5 z = 1.0\nvec3 dirFromLatLongUVs(float u, float v) {\n  // http://gl.ict.usc.edu/Data/HighResProbes/\n  float theta = PI*((u * 2.0) - 1.0);\n  float phi = PI*v;\n  return vec3(sin(phi)*sin(theta), sin(phi)*cos(theta), cos(phi));\n}\n\nvec3 dirFromPolar(vec2 polar) {\n  float u = polar.x / (PI * 2.0);\n  float v = polar.y / PI;\n  return dirFromLatLongUVs(u, v);\n}\n\n"; // eslint-disable-line

  var envmapOctahedral = "#define GLSLIFY 1\nimport 'constants.glsl'\nimport 'GLSLUtils.glsl'\n#define sectorize(value) step(0.0, (value))*2.0-1.0\n#define sum(value) dot(clamp((value), 1.0, 1.0), (value))\n\nvec2 dirToSphOctUv(vec3 normal) {\n  normal = normalize(normal);\n  vec3 aNorm = abs(normal);\n  vec3 sNorm = sectorize(normal);\n  \n  vec2 dir = aNorm.xy;\n  float orient = atan(dir.x, max(dir.y,0.0000000000000001))/HalfPI;\n\n  dir = vec2(aNorm.z, length(aNorm.xy));\n  float pitch = atan(dir.y, dir.x)/HalfPI;\n\n  vec2 uv = vec2(sNorm.x*orient, sNorm.y*(1.0-orient))*pitch;\n\n  if (normal.z < 0.0) {\n    uv = sNorm.xy - abs(uv.ts)*sNorm.xy;\n  }\n  vec2 res = uv*0.5+0.5;\n  // Flip-v\n  // return res;\n  return vec2(res.x, 1.0 - res.y);\n}\n\nvec3 sphOctUvToDir(vec2 uv) {\n  uv = uv*2.0-1.0;\n  // Flip-v\n  uv.y = -uv.y;\n  vec2 suv = sectorize(uv);\n  float sabsuv = sum(abs(uv));\n  float pitch = sabsuv*HalfPI;\n\n  if (pitch <= 0.0) {\n    return vec3(0.0, 0.0, 1.0);\n  }\n  if (abs(pitch - PI) < 0.000001) {\n    return vec3(0.0, 0.0, -1.0);\n  }\n  if (sabsuv > 1.0) {\n    uv = (1.0-abs(uv.ts))*suv;\n  }\n\n  float orient = (abs(uv.s)/sabsuv)*HalfPI;\n  float sOrient = sin(orient);\n  float cOrient = cos(orient);\n  float sPitch = sin(pitch);\n  float cPitch = cos(pitch);\n\n  return vec3(\n    sOrient*suv.s*sPitch,\n    cOrient*suv.t*sPitch,\n    cPitch\n  );\n}\n\n"; // eslint-disable-line

  var GLSLBits = "#define GLSLIFY 1\n    \n/////////////////////////////////////////////////////////////////\n// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js\nfloat shift_right(float v, float amt) {\n  v = floor(v) + 0.5;\n  return floor(v / exp2(amt));\n}\nfloat shift_left(float v, float amt) {\n  return floor(v * exp2(amt) + 0.5);\n}\n\nfloat mask_last(float v, float bits) {\n  return mod(v, shift_left(1.0, bits));\n}\nfloat extract_bits(float num, float from, float to) {\n  from = floor(from + 0.5);\n  to = floor(to + 0.5);\n  return mask_last(shift_right(num, from), to - from);\n}\n\n/////////////////////////////////////////////////////////////////\n// https://stackoverflow.com/questions/18453302/how-do-you-pack-one-32bit-int-into-4-8bit-ints-in-glsl-webgl\n\nconst vec4 bitEnc = vec4(1.,255.,65025.,16581375.);\nconst vec4 bitDec = 1./bitEnc;\nvec4 EncodeFloatRGBA (float v) {\n  vec4 enc = bitEnc * v;\n  enc = fract(enc);\n  enc -= enc.yzww * vec2(1./255., 0.).xxxy;\n  return enc;\n}\nfloat DecodeFloatRGBA (vec4 v) {\n  return dot(v, bitDec);\n}\n\n/////////////////////////////////////////////////////////////////\n// https://gist.github.com/Flexi23/1713774\n// \nvec2 encode16BitFloatInto2xUInt8(float v) {\n  vec2 c = vec2(0.);\n\n  int signum = (v >= 0.) ? 128 : 0;\n  v = abs(v);\n  int exponent = 15;\n  float limit = 1024.; // considering the bias from 2^-5 to 2^10 (==1024)\n  for(int exp = 15; exp > 0; exp--) {\n    if ( v < limit) {\n      limit /= 2.;\n      exponent--;\n    }\n  }\n\n  float rest;\n  if (exponent == 0) {\n    rest = v / limit / 2.;      // \"subnormalize\" implicite preceding 0. \n  } \n  else {\n    rest = (v - limit)/limit;   // normalize accordingly to implicite preceding 1.\n  }\n\n  int mantissa = int(rest * 2048.);   // 2048 = 2^11 for the (split) 11 bit mantissa\n  int msb = mantissa / 256;           // the most significant 3 bits go into the lower part of the first byte\n  int lsb = mantissa - msb * 256;     // there go the other 8 bit of the lower significance\n\n  c.x = float(signum + exponent * 8 + msb) / 255.;    // color normalization for texture2D\n  c.y = float(lsb) / 255.;\n\n  if (v >= 2048.) {\n    c.y = 1.;\n  }\n\n  return c;\n}\n\nfloat decode16BitFloatFrom2xUInt8(vec2 c) {\n  float v = 0.;\n\n  int ix = int(c.x*255.); // 1st byte: 1 bit signum, 4 bits exponent, 3 bits mantissa (MSB)\n  int iy = int(c.y*255.); // 2nd byte: 8 bit mantissa (LSB)\n\n  int s = (c.x >= 0.5) ? 1 : -1;\n  ix = (s > 0) ? ix - 128 : ix;   // remove the signum bit from exponent\n  int iexp = ix / 8;              // cut off the last 3 bits of the mantissa to select the 4 exponent bits\n  int msb = ix - iexp * 8;        // subtract the exponent bits to select the 3 most significant bits of the mantissa\n\n  int norm = (iexp == 0) ? 0 : 2048;          // distinguish between normalized and subnormalized numbers\n  int mantissa = norm + msb * 256 + iy;       // implicite preceding 1 or 0 added here\n  norm = (iexp == 0) ? 1 : 0;                 // normalization toggle\n  float exponent = pow( 2., float(iexp + norm) - 16.); // -5 for the the exponent bias from 2^-5 to 2^10 plus another -11 for the normalized 12 bit mantissa \n  v = float( s * mantissa ) * exponent;\n\n  return v;\n}\n\n// TODO : Encoding Float32 to 4x UInt8\n// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js\n// http://ultraist.hatenablog.com/entry/20110608/1307539319\n\n"; // eslint-disable-line

  var GLSLUtils = "#define GLSLIFY 1\n\nint ftoi(float val) {\n  return int(floor(val + 0.5));\n}\nivec2 ftoi(vec2 v2) {\n  return ivec2(ftoi(v2.x), ftoi(v2.y));\n}\nivec3 ftoi(vec3 v4) {\n  return ivec3(ftoi(v4.x), ftoi(v4.y), ftoi(v4.z));\n}\nivec4 ftoi(vec4 v4) {\n  return ivec4(ftoi(v4.x), ftoi(v4.y), ftoi(v4.z), ftoi(v4.w));\n}\n\n#ifdef ENABLE_ES3\n\nint imod(int x, int y) {\n  return x % y;\n}\n\nvoid setFlag(inout int flags, int flag) {\n  flags |= flag;\n}\n\nvoid clearFlag(inout int flags, int flag) {\n  flags &= ~flag;\n}\n\nbool testFlag(int flags, int flag) {\n  return (flags & flag) != 0;\n}\n\n// private function: Mangle me...\nivec2 _pixelIndexToUV(int index, int textureWidth) {\n  return ivec2(index % textureWidth, index / textureWidth);\n}\n\nvec4 fetchTexel(sampler2D texture, int textureWidth, int index) {\n  return texelFetch(texture, _pixelIndexToUV(index, textureWidth), 0);\n}\n\nvec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {\n  return texelFetch(texture, texCoord, 0);\n}\n\nvec4 fetchTexel(sampler2D texture, ivec2 textureSize, int index) {\n    return texelFetch(texture, _pixelIndexToUV(index, textureSize.x), 0);\n}\n\n#else\n\n// TODO: integrate: https://gist.github.com/mattatz/70b96f8c57d4ba1ad2cd\n\nint max(int a, int b) {\n  return a > b ? a : b;\n}\nint min(int a, int b) {\n  return a < b ? a : b;\n}\n\nfloat round(float val) {\n  return floor(val + 0.4);\n}\n\nint imod(int x, int y) {\n  return x-y*(x/y);\n}\n\nvoid setFlag(inout int flags, int flag) {\n  flags += flag;\n}\nvoid clearFlag(inout int flags, int flag) {\n  flags -= flag;\n}\n\nbool testFlag(int flags, int flag) {\n  return imod(flags / flag, 2) != 0;\n}\n\n// private function: Mangle me...\nvec2 _pixelIndexToUV(int index, int textureSize) {\n  float flTexSize = float(textureSize);\n  float x = (float(imod(index, textureSize))+0.5)/flTexSize;\n  float y = (floor(float(index / textureSize))+0.5)/flTexSize;\n  return vec2(x, y);\n}\n\nvec4 fetchTexel(sampler2D texture, int textureSize, int index) {\n  vec2 texCoord = _pixelIndexToUV(index, textureSize);\n  return texture2D(texture, texCoord);\n}\n\nvec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {\n  vec2 ftextureSize = vec2(textureSize);\n  return texture2D(texture, (vec2(texCoord) + 0.5) / ftextureSize);\n}\n\n#endif // ENABLE_ES3\n\nint uvToPixelIndex(vec2 uv, int textureSize) {\n  return int(uv.x * float(textureSize)) + (int(floor(uv.y * float(textureSize))) * textureSize);\n}\n\n"; // eslint-disable-line

  var Hammersley = "#define GLSLIFY 1\nfloat RadicalInverse_VdC(uint bits) \n{\n  bits = (bits << 16u) | (bits >> 16u);\n  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n  return float(bits) * 2.3283064365386963e-10; // / 0x100000000\n}\n// ----------------------------------------------------------------------------\nvec2 Hammersley(uint i, uint N)\n{\n  return vec2(float(i)/float(N), RadicalInverse_VdC(i));\n} \n"; // eslint-disable-line

  var ImportanceSampleGGX = "#define GLSLIFY 1\nimport 'constants.glsl'\n\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)\n{\n  float a = roughness*roughness;\n\n  float phi = 2.0 * PI * Xi.x;\n  float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\n  float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\n\n  // from spherical coordinates to cartesian coordinates\n  vec3 H = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);\n\n  // from tangent-space vector to world-space sample vector\n  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n  vec3 tangent   = normalize(cross(up, N));\n  vec3 bitangent = cross(N, tangent);\n\n  vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n  return normalize(sampleVec);\n} \n"; // eslint-disable-line

  var materialparams = "#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nimport 'gamma.glsl'\n\n \nuniform sampler2D materialsTexture;\nuniform highp ivec2 materialsTextureSize;\n\nvec4 getMaterialValue(vec2 materialCoords, int valueIndex) {\n  int index = ftoi(materialCoords.x) + valueIndex;\n  ivec2 texelCoords = ivec2(imod(index, materialsTextureSize.x), index / materialsTextureSize.x);\n  \n  return fetchTexel(materialsTexture, materialsTextureSize, texelCoords);\n}\n\n////////////////////////\n// Material Param Helpers.\n\nvoid getTextureColorValue(inout vec4 value, sampler2D tex, int texType, vec2 texCoord) {\n  if (texType == 1 || texType == 2) {\n    // Note: we assume textures are always in gamma space, and must be converted\n    // to linear. I cann't find evidence that 8-bit textures can be in linear space.\n    // TODO: Use SRGB textures.\n    value = toLinear(texture2D(tex, texCoord));\n  }\n  else if (texType == 3) {\n    // Float HDR Texture. We assume these textures are in linear space.\n    value = texture2D(tex, texCoord);\n  }\n}\n\nvec4 getColorParamValue(in vec4 value, sampler2D tex, int texType, vec2 texCoord) {\n  // for backwards compatiblity with zea-ux shader\n  vec4 tmp = value;\n  getTextureColorValue(tmp, tex, texType, texCoord);\n  return tmp;\n}\n\nfloat luminanceFromRGB(vec3 rgb) {\n  return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;\n}\n\nvoid getTextureLuminanceValue(inout float value, sampler2D tex, int texType, vec2 texCoord) {\n  if (texType != 0)\n    value = luminanceFromRGB(texture2D(tex, texCoord).rgb);\n}\n\nfloat getLuminanceParamValue(in float value, sampler2D tex, int texType, vec2 texCoord) {\n  // for backwards compatiblity with zea-ux shader\n  float tmp = value;\n  getTextureLuminanceValue(tmp, tex, texType, texCoord);\n  // for backwards compatiblity with zea-ux shader\n  return tmp;\n}\n\n"; // eslint-disable-line

  var modelMatrix = "#define GLSLIFY 1\n#ifdef ENABLE_FLOAT_TEXTURES\nimport 'GLSLUtils.glsl'\nimport 'transpose.glsl'\nmat4 getMatrix(sampler2D texture, int textureSize, int index) {\n  // Unpack 3 x 4 matrix columns into a 4 x 4 matrix.\n  vec4 col0 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 1);\n  vec4 col1 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 2);\n  vec4 col2 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 3);\n  mat4 result = transpose(mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0)));\n  return result;\n}\n\nmat4 getModelMatrix(int id) {\n  return getMatrix(instancesTexture, instancesTextureSize, id);\n}\n\n#else\n\nuniform mat4 modelMatrix;\n\nmat4 getModelMatrix(int id) {\n  return modelMatrix;\n}\n\n#endif\n\n"; // eslint-disable-line

  var PBRSurfaceRadiance = "#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nconst int ENVMAP_FLAG_HEADLIGHT =  1; // 1<<0;\n\nstruct MaterialParams {\n  vec3 baseColor;\n  float ambientOcclusion;\n  float metallic;\n  float roughness;\n  float reflectance;\n  float opacity;\n  float emission;\n};\n\n#ifndef ENABLE_PBR\n\nvec4 pbrSurfaceRadiance(in MaterialParams material, vec3 normal, in vec3 viewVector) {\n  vec3 irradiance = vec3(dot(normal, viewVector));\n  float ao = material.ambientOcclusion; \n  return vec4(material.baseColor * ao * irradiance + (material.emission * material.baseColor), material.opacity);\n\n  // return vec4(material.baseColor * ao * irradiance , material.opacity);\n}\n\n#else\n\nuniform int envMapFlags;\nuniform samplerCube irradianceMap;\nuniform samplerCube prefilterMap;\nuniform sampler2D brdfLUT;\n\nvec3 sampleIrradiance(vec3 dir) {\n  return texture(irradianceMap, dir).rgb;\n}\n\nvec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {\n  return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);\n}\n\nfloat luminance(vec3 color) {\n  return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n}\n\nvec4 pbrSurfaceRadiance(in MaterialParams material, vec3 normal, in vec3 viewVector) {\n  if (envMapFlags == -1) {\n    vec3 irradiance = vec3(dot(normal, viewVector));\n    float ao = material.ambientOcclusion; \n    return vec4(material.baseColor * ao * irradiance + (material.emission * material.baseColor), material.opacity);\n  }\n\n  vec3 N = normal;\n  vec3 V = viewVector;\n  vec3 R = reflect(-V, N);\n  float roughness = material.roughness * material.roughness;\n  vec3 diffuseColor = (1.0 - material.metallic) * material.baseColor;\n\n  // Note: The specular reflectance of metallic surfaces is chromatic\n  // https://google.github.io/filament/Filament.html#listing_fnormal\n  vec3 F0 = 0.16 * material.reflectance * material.reflectance * (1.0 - material.metallic) + material.baseColor * material.metallic;\n\n  float NdotV = dot(N, V);\n\n  vec3 F = fresnelSchlickRoughness(max(NdotV, 0.0), F0, roughness);\n\n  vec3 kS = F;\n  vec3 kD = 1.0 - kS;\n  kD *= 1.0 - material.metallic;\n  float ao = material.ambientOcclusion; \n  \n  vec3 irradiance;\n  vec3 irradianceSampleDir = normal;\n  \n  bool headLightMode = testFlag(envMapFlags, ENVMAP_FLAG_HEADLIGHT);\n  if (headLightMode) {\n    irradianceSampleDir = viewVector;\n  }\n  irradiance = sampleIrradiance(irradianceSampleDir);\n  // vec3 irradiance = shGetIrradianceAt(shCoefficients, N);\n  vec3 diffuse    = irradiance * diffuseColor;\n  \n  const float MAX_REFLECTION_LOD = 4.0;\n  vec3 prefilteredColor = textureLod(prefilterMap, R,  roughness * MAX_REFLECTION_LOD).rgb;   \n  vec2 envBRDF  = texture(brdfLUT, vec2(max(NdotV, 0.0), roughness)).rg;\n  vec3 specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);\n  \n  vec3 radiance = (kD * diffuse + specular) * ao;\n  \n  // Now handle semi-transparent objects. We need to be able to linearly interpolate\n  // opacity to make objects disappear, so we need a continuous change.\n  float opacity = material.opacity;\n  vec4 transparent = vec4((radiance * opacity) + specular, opacity + luminance(specular) + luminance(F));\n  vec4 result = mix(transparent, vec4(radiance, 1.0), opacity);\n\n  // Add emission on as the final component.\n  // Note: emission allows a material to blend off its specular component, \n  // which can also be used to make an object completely disappear if also transparent.\n  return mix(result, vec4(material.baseColor, opacity), material.emission);\n}\n\n#endif // ENABLE_PBR\n"; // eslint-disable-line

  var SHCoeffs = "#define GLSLIFY 1\nuniform vec3 shCoeffs[9];\n\nvec3 sampleSHCoeffs(vec3 dir) {\n  // dir is assumed to have unit length\n  float x = dir.x, y = dir.y, z = dir.z;\n  // band 0\n  vec3 result = shCoeffs[ 0 ] * 0.886227;\n  // band 1\n  result += shCoeffs[ 1 ] * 2.0 * 0.511664 * y;\n  result += shCoeffs[ 2 ] * 2.0 * 0.511664 * z;\n  result += shCoeffs[ 3 ] * 2.0 * 0.511664 * x;\n  // band 2\n  result += shCoeffs[ 4 ] * 2.0 * 0.429043 * x * y;\n  result += shCoeffs[ 5 ] * 2.0 * 0.429043 * y * z;\n  result += shCoeffs[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n  result += shCoeffs[ 7 ] * 2.0 * 0.429043 * x * z;\n  result += shCoeffs[ 8 ] * 0.429043 * ( x * x - y * y );\n  return result;\n}\n"; // eslint-disable-line

  var gamma = "#define GLSLIFY 1\nconst float gamma_const = 2.2;\n\nfloat toLinear(float v) {\n  return pow(v, gamma_const);\n}\n\nvec2 toLinear(vec2 v) {\n  return pow(v, vec2(gamma_const));\n}\n\nvec3 toLinear(vec3 v) {\n  return pow(v, vec3(gamma_const));\n}\n\nvec4 toLinear(vec4 v) {\n  return vec4(toLinear(v.rgb), v.a);\n}\n\nfloat toGamma(float v) {\n  return pow(v, 1.0 / gamma_const);\n}\n\nvec2 toGamma(vec2 v) {\n  return pow(v, vec2(1.0 / gamma_const));\n}\n\nvec3 toGamma(vec3 v) {\n  return pow(v, vec3(1.0 / gamma_const));\n}\n\nvec4 toGamma(vec4 v) {\n  return vec4(toGamma(v.rgb), v.a);\n}\n\nfloat toGamma(float v, float gamma) {\n  return pow(v, 1.0 / gamma);\n}\n\nvec2 toGamma(vec2 v, float gamma) {\n  return pow(v, vec2(1.0 / gamma));\n}\n\nvec3 toGamma(vec3 v, float gamma) {\n  return pow(v, vec3(1.0 / gamma));\n}\n\nvec4 toGamma(vec4 v, float gamma) {\n  return vec4(toGamma(v.rgb, gamma), v.a);\n}\n\n"; // eslint-disable-line

  var inverse = "#define GLSLIFY 1\n\n#ifndef ENABLE_ES3\n\nfloat inverse(float m) {\n  return 1.0 / m;\n}\n\nmat2 inverse(mat2 m) {\n  return mat2(m[1][1],-m[0][1],\n             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);\n}\n\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\n#endif\n\n"; // eslint-disable-line

  var transpose = "#define GLSLIFY 1\n\n#ifndef ENABLE_ES3\n\nfloat transpose(float m) {\n  return m;\n}\n\nmat2 transpose(mat2 m) {\n  return mat2(m[0][0], m[1][0],\n              m[0][1], m[1][1]);\n}\n\nmat3 transpose(mat3 m) {\n  return mat3(m[0][0], m[1][0], m[2][0],\n              m[0][1], m[1][1], m[2][1],\n              m[0][2], m[1][2], m[2][2]);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\n              m[0][1], m[1][1], m[2][1], m[3][1],\n              m[0][2], m[1][2], m[2][2], m[3][2],\n              m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\n#endif\n\n"; // eslint-disable-line

  var quadVertexFromID = "#define GLSLIFY 1\nattribute float vertexIDs;\n\nvec2 getQuadVertexPositionFromID() {\n  int vertexID = int(vertexIDs);\n  if (vertexID == 0)\n    return vec2(-0.5, -0.5);\n  else if (vertexID == 1)\n    return vec2(0.5, -0.5);\n  else if (vertexID == 2)\n    return vec2(-0.5, 0.5);\n  else if (vertexID == 3)\n    return vec2(0.5, 0.5);\n  return vec2(0,0);\n}\n"; // eslint-disable-line

  var unpackHDR = "#define GLSLIFY 1\n\nvec3 decodeHDR(const in vec3 ldrPixel, const in float cdmAlpha) {\n  float avg = (cdmAlpha * 16.0 - 8.0);\n  float scl = 1.0;\n  vec3 color;\n  color.x = (tan((ldrPixel.x-0.5)*1.5)/scl)+avg;\n  color.y = (tan((ldrPixel.y-0.5)*1.5)/scl)+avg;\n  color.z = (tan((ldrPixel.z-0.5)*1.5)/scl)+avg;\n\n  // convert from logarithmic curve to linear curve.\n  // subtract the epsilon that was added during encoding.\n  const float eps = 0.001;\n  color.x = pow(10.0, color.x) - eps;\n  color.y = pow(10.0, color.y) - eps;\n  color.z = pow(10.0, color.z) - eps;\n  return color;\n}\n\nvec3 decodeHDR(sampler2D ldrSampler, sampler2D cdmSampler, vec2 texCoord) {\n#ifdef ENABLE_ES3\n  float cdm = texture2D(cdmSampler, texCoord).r;\n#else\n  float cdm = texture2D(cdmSampler, texCoord).a;\n#endif\n  return decodeHDR(texture2D(ldrSampler, texCoord).rgb, cdm);\n}\n\n"; // eslint-disable-line

  var surfaceGeomData = "#define GLSLIFY 1\n\n  uniform int floatGeomBuffer; // Remove once we update UX. \n  uniform int passId;\n  uniform int occlusionCulling;\n\n  import 'geomItemFlags.glsl'\n  import 'GLSLBits.glsl'\n  \n  vec4 setFragColor_geomData(vec3 v_viewPos, float geomItemId, float elemItemId, int isOrthographic, int flags){\n    vec4 fragColor;\n\n    float viewDist;\n    if (isOrthographic > 0) {\n      viewDist = abs(v_viewPos.z);\n    } else {\n      viewDist = length(v_viewPos);\n    }\n    \n    fragColor.r = float(passId); \n    fragColor.g = float(geomItemId);\n    fragColor.b = elemItemId;\n    fragColor.a = viewDist;\n  \n\n#ifdef ENABLE_ES3\n    if (occlusionCulling != 0) {\n      // Calculate a simple stochastic transparency to reduce the cost of the reduction shader.\n      // We only need one pixel to be visible to consider the geometry visible, so here we \n      // keep only one in 7x7 (49) pixels. This signficatly reduces the cost of reducing the scene\n      // to the reduction data buffer.\n      // Note: this is not a stochastic transparency, as we are simply setting black pixels to \n      // reduce the number of reduction points for this geometry. The black pixels (not discarded)\n      // still occlude other geometries, but during reduction count to nothing.\n      int x = int(gl_FragCoord.x * 1000.0);\n      int y = int(gl_FragCoord.y * 1000.0);\n      if (x % 7 != 0 || y % 7 != 0) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n      };\n    }\n#endif // ENABLE_ES3\n\n    return fragColor;\n  }\n\n  vec4 setFragColor_geomData(vec3 v_viewPos, int floatGeomBuffer, int passId, float geomItemId, int isOrthographic){\n    return setFragColor_geomData(v_viewPos, geomItemId, 0.0, isOrthographic, 0);\n  }\n  vec4 setFragColor_geomData(vec3 v_viewPos, int floatGeomBuffer, int passId, float geomItemId, float elemItemId, int isOrthographic){\n    return setFragColor_geomData(v_viewPos, geomItemId, elemItemId, isOrthographic, 0);\n  }"; // eslint-disable-line

  var surfaceHighlight = "#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\n\nvec4 getHighlightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\n}\n\nvec4 setFragColor_highlight(float v_geomItemId){\n  vec4 fragColor; \n  int geomItemId = int(v_geomItemId + 0.5);\n  fragColor = getHighlightColor(geomItemId);\n  return fragColor;\n}\n"; // eslint-disable-line

  var imageAtlas = "#define GLSLIFY 1\n// Note: On mobile, I can't seem to pass around a stuct containing sampler2D.\n// I have to unpack the struct and pass its members. :(\n// struct ImageAtlas {\n//     sampler2D layout;\n//     sampler2D image;\n//     vec4 desc;\n// };\n\nimport 'GLSLUtils.glsl'\n\nvec4 getSubImageLayout(int index, in sampler2D atlasLayout, in vec4 atlasDesc){\n    return fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n}\nvec2 calcSubImageTexCoords(vec2 texCoord, int index, in sampler2D atlasLayout, in vec4 atlasDesc){\n    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n    // The following line is a hack to fix artifacts in our PBR lighting\n    // We were seeing loads of lighting garbage on some sufaces that were orthogonal\n    // to the world. The UV coordinates would have been landing right on the edges\n    // of our subimages and were often sampling outside the image. This couuld\n    // have been because of filtering, or an error in the uv coords. \n    texCoord = clamp(texCoord, vec2(0.01, 0.01), vec2(0.99, 0.99));\n    vec2 subimageTexel = texCoord * layoutData.zw;\n    // subimageTexel = clamp(subimageTexel, vec2(0.0, 0.0), vec2(1.0, 1.0));\n    return subimageTexel + layoutData.xy;\n}\nvec4 sampleSubImage(vec2 texCoord, int index, in sampler2D atlasLayout, in sampler2D atlasImage, in vec4 atlasDesc){\n    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n    vec2 atlasCoords = calcSubImageTexCoords(texCoord, index, atlasLayout, atlasDesc);\n    return texture2D(atlasImage, atlasCoords);\n}"; // eslint-disable-line

  // @ts-nocheck
  shaderLibrary.setShaderModule('imageAtlas.glsl', imageAtlas);
  shaderLibrary.setShaderModule('surfaceGeomData.glsl', surfaceGeomData);
  shaderLibrary.setShaderModule('surfaceHighlight.glsl', surfaceHighlight);
  shaderLibrary.setShaderModule('computeViewNormal.glsl', computeViewNormal);
  shaderLibrary.setShaderModule('calcFatLinesViewPos.glsl', calcFatLinesViewPos);
  shaderLibrary.setShaderModule('constants.glsl', constants);
  shaderLibrary.setShaderModule('convolve-helpers.glsl', convolveHelpers);
  shaderLibrary.setShaderModule('cutaways.glsl', cutaways);
  shaderLibrary.setShaderModule('debugColors.glsl', debugColors);
  shaderLibrary.setShaderModule('drawItemId.glsl', geomItemId); // Needed for backwards compatiblity with older versions of ux.
  shaderLibrary.setShaderModule('geomItemId.glsl', geomItemId);
  shaderLibrary.setShaderModule('geomItemFlags.glsl', geomItemFlags);
  shaderLibrary.setShaderModule('geomType.glsl', geomType);
  shaderLibrary.setShaderModule('geometryMask.glsl', geometryMask);
  shaderLibrary.setShaderModule('drawItemTexture.glsl', drawItemTexture);
  shaderLibrary.setShaderModule('envmap-dualfisheye.glsl', envmapDualfisheye);
  shaderLibrary.setShaderModule('envmap-equirect.glsl', envmapEquirect);
  shaderLibrary.setShaderModule('envmap-octahedral.glsl', envmapOctahedral);
  shaderLibrary.setShaderModule('GLSLBits.glsl', GLSLBits);
  shaderLibrary.setShaderModule('GLSLUtils.glsl', GLSLUtils);
  shaderLibrary.setShaderModule('Hammersley.glsl', Hammersley);
  shaderLibrary.setShaderModule('ImportanceSampleGGX.glsl', ImportanceSampleGGX);
  shaderLibrary.setShaderModule('materialparams.glsl', materialparams);
  shaderLibrary.setShaderModule('modelMatrix.glsl', modelMatrix);
  shaderLibrary.setShaderModule('PBRSurfaceRadiance.glsl', PBRSurfaceRadiance);
  shaderLibrary.setShaderModule('SHCoeffs.glsl', SHCoeffs);
  shaderLibrary.setShaderModule('gamma.glsl', gamma);
  shaderLibrary.setShaderModule('inverse.glsl', inverse);
  shaderLibrary.setShaderModule('transpose.glsl', transpose);
  shaderLibrary.setShaderModule('quadVertexFromID.glsl', quadVertexFromID);
  shaderLibrary.setShaderModule('unpackHDR.glsl', unpackHDR);

  var frag$j = " \nprecision highp float;\n#define GLSLIFY 1\n\nvarying vec2 v_texCoord;\nuniform sampler2D ldrSampler;\nuniform sampler2D cdmSampler;\nuniform vec4 srcRegion; // pos, and size of the source region\n\nimport 'unpackHDR.glsl'\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 srcUv = srcRegion.xy + (v_texCoord * srcRegion.zw);\n\n  fragColor = vec4(decodeHDR(ldrSampler, cdmSampler, srcUv), 1.0);\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n\n"; // eslint-disable-line

  var vert$k = "\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"; // eslint-disable-line

  /* eslint-disable require-jsdoc */
  /** Shader for unpacking HDR images using Boost HDR algorithm.
   * @extends GLShader
   * @private
   */
  class UnpackHDRShader extends GLShader {
      /**
       * Create a GL shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'UnpackHDRShader');
          this.setShaderStage('VERTEX_SHADER', vert$k);
          this.setShaderStage('FRAGMENT_SHADER', frag$j);
      }
  }

  /* eslint-disable guard-for-in */
  /**
   * Returns a descriptor for the provided geom attribute.
   * Used to generate WebGLBuffers from the data provided by the geometry.
   * @private
   * @param gl - The webgl context
   * @param attrDataType - The geometry attribute value.
   *
   * @return
   */
  const genDataTypeDesc = (gl, name) => {
      let dimension;
      let elementSize;
      let dataType;
      switch (name) {
          case 'UInt8':
              dimension = 1;
              elementSize = 4;
              dataType = gl.UNSIGNED_BYTE;
              break;
          case 'SInt8':
              dimension = 1;
              elementSize = 1;
              dataType = gl.BYTE;
              break;
          case 'UInt16':
              dimension = 1;
              elementSize = 2;
              dataType = gl.UNSIGNED_SHORT;
              break;
          case 'SInt16':
              dimension = 1;
              elementSize = 2;
              dataType = gl.SHORT;
              break;
          case 'UInt32':
              dimension = 1;
              elementSize = 4;
              dataType = gl.UNSIGNED_INT;
              break;
          case 'SInt32':
              dimension = 1;
              elementSize = 4;
              dataType = gl.INT;
              break;
          case 'Float32':
              dimension = 1;
              elementSize = 4;
              dataType = gl.FLOAT;
              break;
          case 'Vec2f8':
              dimension = 2;
              elementSize = 1;
              dataType = gl.BYTE;
              break;
          case 'Vec2f16':
              dimension = 2;
              elementSize = 2;
              dataType = gl.HALF_FLOAT;
              break;
          case 'Vec2':
              dimension = 2;
              elementSize = 4;
              dataType = gl.FLOAT;
              break;
          case 'Vec3f8':
              dimension = 3;
              elementSize = 1;
              dataType = gl.BYTE;
              break;
          case 'Vec3f16':
              dimension = 3;
              elementSize = 2;
              dataType = gl.HALF_FLOAT;
              break;
          case 'Vec3':
              dimension = 3;
              elementSize = 4;
              dataType = gl.FLOAT;
              break;
          case 'Vec4':
          case 'Color':
              dimension = 4;
              elementSize = 4;
              dataType = gl.FLOAT;
              break;
          case 'Vec4f8':
              dimension = 4;
              elementSize = 1;
              dataType = gl.BYTE;
              break;
          case 'Vec4f16':
              dimension = 4;
              elementSize = 2;
              dataType = gl.HALF_FLOAT;
              break;
          case 'RGBA':
              dimension = 4;
              elementSize = 1;
              dataType = gl.UNSIGNED_BYTE;
              break;
          default:
              throw 'Unhandled Type:' + name;
      }
      return {
          name,
          dimension,
          elementSize,
          dataType,
      };
  };
  class IGeomShaderBinding {
  }
  /** Class representing a geom shader binding.
   * @private
   */
  class GeomShaderBinding extends IGeomShaderBinding {
      gl;
      shaderAttrs;
      glattrbuffers;
      indexBuffer;
      /**
       * Create a geom shader binding.
       * @param gl - The webgl rendering context.
       * @param shaderAttrs - The shader attributes.
       * @param geomAttrBuffers - The geomAttrBuffers value.
       * @param indexBuffer - The index buffer.
       */
      constructor(gl, shaderAttrs, geomAttrBuffers, indexBuffer) {
          super();
          this.gl = gl;
          this.shaderAttrs = shaderAttrs;
          this.glattrbuffers = geomAttrBuffers;
          this.indexBuffer = indexBuffer;
      }
      /**
       * The bind method.
       * @param renderstate - The render state.
       * @return - The return value.
       */
      bind(renderstate) {
          const gl = this.gl;
          for (const attrName in this.shaderAttrs) {
              if (attrName == 'instancedIds')
                  continue;
              const shaderAttrDesc = this.shaderAttrs[attrName];
              const location = shaderAttrDesc.location;
              if (location == -1)
                  continue;
              const geomAttrBuffer = this.glattrbuffers[attrName];
              if (!geomAttrBuffer) {
                  gl.disableVertexAttribArray(location);
                  continue;
              }
              const dimension = geomAttrBuffer.dimension;
              const dataType = geomAttrBuffer.dataType;
              const normalized = geomAttrBuffer.normalized;
              const isInteger = shaderAttrDesc.integer;
              const stride = dimension * geomAttrBuffer.elementSize;
              const offset = geomAttrBuffer.offset != undefined ? geomAttrBuffer.offset * dimension * geomAttrBuffer.elementSize : 0;
              const instanced = shaderAttrDesc.instanced;
              gl.enableVertexAttribArray(location);
              gl.bindBuffer(gl.ARRAY_BUFFER, geomAttrBuffer.buffer);
              if (isInteger) {
                  gl.vertexAttribIPointer(location, dimension, dataType, stride, offset);
              }
              else {
                  gl.vertexAttribPointer(location, dimension, dataType, normalized, stride, offset);
              }
              if (instanced == true) {
                  gl.vertexAttribDivisor(location, 1); // This makes it instanced
              }
              else {
                  gl.vertexAttribDivisor(location, 0); // This makes it not-instanced
              }
              // console.log("Binding :" + attrName + " to attr:" + location + " count:" + geomAttrBuffer.count + " dimension:" + dimension  + " stride:" + stride  + " offset:" + offset + " normalized:" + normalized + " instanced:" + instanced);
          }
          if (this.indexBuffer)
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
          return true;
      }
      /**
       * The unbind method.
       */
      unbind(renderstate) {
          const gl = this.gl;
          for (const attrName in this.shaderAttrs) {
              const shaderAttrDesc = this.shaderAttrs[attrName];
              const location = shaderAttrDesc.location;
              if (location == -1) {
                  gl.enableVertexAttribArray(location);
              }
              if (shaderAttrDesc.instanced) {
                  gl.vertexAttribDivisor(location, 0); // This makes it not-instanced
              }
              // console.log("Binding :" + attrName + " to attr:" + location + " count:" + geomAttrBuffer.count + " dimension:" + dimension  + " stride:" + stride  + " offset:" + offset + " normalized:" + normalized + " instanced:" + instanced);
          }
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() { }
  }
  /** Class representing vertex array objects (VAO) geom shader binding.
   * @private
   */
  class VAOGeomShaderBinding extends IGeomShaderBinding {
      vao;
      gl;
      indexBuffer;
      /**
       * Create VAO geom shader binding.
       * @param gl - The webgl rendering context.
       * @param shaderAttrs - The shaderAttrs value.
       * @param geomAttrBuffers - The geomAttrBuffers value.
       * @param indexBuffer - The indexBuffer value.
       */
      constructor(gl, shaderAttrs, geomAttrBuffers, indexBuffer) {
          super();
          this.gl = gl;
          this.vao = gl.createVertexArray();
          gl.bindVertexArray(this.vao);
          for (const attrName in shaderAttrs) {
              if (attrName == 'instancedIds')
                  continue;
              const shaderAttrDesc = shaderAttrs[attrName];
              const location = shaderAttrDesc.location;
              if (location == -1)
                  continue;
              let geomAttrBuffer = geomAttrBuffers[attrName];
              let offset = 0;
              if (!geomAttrBuffer) {
                  if (attrName.endsWith('Next')) {
                      geomAttrBuffer = geomAttrBuffers[attrName.substring(0, attrName.length - 4)];
                      offset = 1 * geomAttrBuffer.dimension * geomAttrBuffer.elementSize;
                  }
                  if (!geomAttrBuffer) {
                      // console.warn("geomAttrBuffer missing:" + attrName + " location:" + location);
                      gl.disableVertexAttribArray(location);
                      continue;
                  }
              }
              const dimension = geomAttrBuffer.dimension;
              const dataType = geomAttrBuffer.dataType;
              const stride = geomAttrBuffer.dimension * geomAttrBuffer.elementSize;
              const isInteger = shaderAttrDesc.integer;
              const instanced = shaderAttrDesc.instanced;
              gl.enableVertexAttribArray(location);
              gl.bindBuffer(gl.ARRAY_BUFFER, geomAttrBuffer.buffer);
              if (isInteger) {
                  gl.vertexAttribIPointer(location, dimension, dataType, stride, offset);
              }
              else {
                  const normalized = geomAttrBuffer.normalized == true;
                  gl.vertexAttribPointer(location, dimension, dataType, normalized, stride, offset);
              }
              if (gl.vertexAttribDivisor) {
                  if (instanced == true) {
                      gl.vertexAttribDivisor(location, 1); // This makes it instanced
                  }
                  else {
                      gl.vertexAttribDivisor(location, 0); // This makes it not-instanced
                  }
              }
              // console.log("Binding :" + attrName + " to attr:" + location + " count:" + geomAttrBuffer.count + " dimension:" + dimension  + " stride:" + stride  + " offset:" + offset + " normalized:" + normalized + " instanced:" + instanced);
          }
          this.indexBuffer = indexBuffer;
          if (this.indexBuffer)
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
      }
      /**
       * The bind method.
       * @param renderstate - The render state.
       * @return - The return value.
       */
      bind(renderstate) {
          const gl = this.gl;
          gl.bindVertexArray(this.vao);
          if (this.indexBuffer)
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
          return true;
      }
      /**
       * The unbind method.
       */
      unbind(renderstate) {
          const gl = this.gl;
          gl.bindVertexArray(null);
          if (this.indexBuffer)
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          const gl = this.gl;
          // Ensure we detach the index buffer before deleting the VAO.
          if (this.indexBuffer) {
              gl.bindVertexArray(this.vao);
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
          }
          gl.deleteVertexArray(this.vao);
      }
  }
  function generateShaderGeomBinding(gl, shaderAttrs, geomAttrBuffers, indexBuffer) {
      if (gl.createVertexArray == null) {
          return new GeomShaderBinding(gl, shaderAttrs, geomAttrBuffers, indexBuffer);
      }
      else {
          return new VAOGeomShaderBinding(gl, shaderAttrs, geomAttrBuffers, indexBuffer);
      }
  }

  /** Class representing a GL high dynamic range (HDR) image.
   * @extends GLTexture2D
   * @private
   */
  class GLHDRImage extends GLTexture2D {
      //  protected __gl: WebGL12RenderingContext
      listenerIDs = {};
      hdrImage;
      fbo = null;
      srcLDRTex = null;
      srcCDMTex = null;
      unpackHDRShader = null;
      shaderBinding = null;
      /**
       * Create a GL HDR image.
       * @param gl - The webgl rendering context.
       * @param hdrImage - The HDR image.
       */
      constructor(gl, hdrImage) {
          super(gl);
          this.hdrImage = hdrImage;
          const loadImage = () => {
              this.__unpackHDRImage(this.hdrImage.getParams());
          };
          this.listenerIDs['updated'] = this.hdrImage.on('updated', loadImage);
          if (this.hdrImage.isLoaded()) {
              loadImage();
          }
          else {
              this.listenerIDs['loaded'] = this.hdrImage.on('loaded', loadImage);
          }
      }
      /**
       * Returns the `BaseImage` of the GL Texture
       *
       * @return - The return value.
       */
      getImage() {
          return this.hdrImage;
      }
      /**
       * The __unpackHDRImage method.
       * @param hdrImageParams - The HDR image parameters.
       * @private
       */
      __unpackHDRImage(hdrImageParams) {
          const gl = this.__gl;
          const ldr = hdrImageParams.data.ldr;
          const cdm = hdrImageParams.data.cdm;
          if (!this.fbo) {
              // Note: iOS devices create FLOAT Fbox.
              // If we want better quality, we could unpack the texture in JavaScript.
              this.configure({
                  format: 'RGBA',
                  type: 'FLOAT',
                  width: ldr.width,
                  height: ldr.height,
                  filter: 'LINEAR',
                  wrap: 'CLAMP_TO_EDGE',
              });
              this.fbo = new GLFbo(this.__gl, this);
              this.fbo.setClearColor(new Color(0, 0, 0, 0));
              this.srcLDRTex = new GLTexture2D(this.__gl, {
                  format: 'RGB',
                  type: 'UNSIGNED_BYTE',
                  width: ldr.width,
                  height: ldr.height,
                  filter: 'NEAREST',
                  mipMapped: false,
                  wrap: 'CLAMP_TO_EDGE',
                  data: ldr,
              });
              this.srcCDMTex = new GLTexture2D(this.__gl, {
                  format: gl.name == 'webgl2' ? 'RED' : 'ALPHA',
                  type: 'UNSIGNED_BYTE',
                  width: ldr.width /* 8*/,
                  height: ldr.height /* 8*/,
                  filter: 'NEAREST',
                  mipMapped: false,
                  wrap: 'CLAMP_TO_EDGE',
                  data: cdm,
              });
              this.unpackHDRShader = new UnpackHDRShader(this.__gl);
              const shaderComp = this.unpackHDRShader.compileForTarget('GLHDRImage', ['#define ENABLE_ES3']);
              this.shaderBinding = generateShaderGeomBinding(this.__gl, shaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);
          }
          else {
              this.srcLDRTex.bufferData(ldr);
              this.srcCDMTex.bufferData(cdm);
          }
          this.fbo.bindAndClear();
          const renderstate = new RenderState(gl);
          this.unpackHDRShader.bind(renderstate, 'GLHDRImage');
          this.shaderBinding.bind(renderstate);
          const unifs = renderstate.unifs;
          this.srcLDRTex.bindToUniform(renderstate, unifs.ldrSampler);
          this.srcCDMTex.bindToUniform(renderstate, unifs.cdmSampler);
          gl.uniform4fv(unifs.srcRegion.location, [0, 0, 1, 1]);
          gl.drawQuad();
          // // Debug a block of pixels.
          // console.log(this.hdrImage.getName());
          // gl.finish();
          // let numPixels = 4;
          // let pixels = new Float32Array(4 * numPixels);
          // gl.readPixels(ldr.width / 4, ldr.height/4, numPixels, 1, gl.RGBA, gl.FLOAT, pixels);
          // console.log(pixels);
          // gl.bindFramebuffer(gl.FRAMEBUFFER, null);
          this.fbo.unbind();
          // if (!this.hdrImage.isStream()) {
          //     this.fbo.destroy();
          //     this.srcLDRTex.destroy();
          //     this.srcCDMTex.destroy();
          //     this.fbo = null;
          //     this.srcLDRTex = null;
          //     this.srcCDMTex = null;
          // }
          this.emit('updated');
      }
      /**
       * The bindToUniform method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param unif - The WebGL uniform
       * @param bindings - The bindings value.
       * @return - The return value.
       */
      bindToUniform(renderstate, unif, bindings) {
          return super.bindToUniform(renderstate, unif, bindings);
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          super.destroy();
          if (this.fbo) {
              this.fbo.destroy();
              this.srcLDRTex.destroy();
              this.srcCDMTex.destroy();
          }
          if (this.unpackHDRShader)
              this.unpackHDRShader.destroy();
          if (this.shaderBinding)
              this.shaderBinding.destroy();
          if ('loaded' in this.listenerIDs)
              this.hdrImage.off('loaded', this.listenerIDs['loaded']);
          this.hdrImage.off('updated', this.listenerIDs['updated']);
      }
  }

  /** Class representing a GL geom.
   * @private
   */
  class GLGeom extends RefCounted {
      __gl;
      geom;
      numVertices = -1;
      glattrbuffers = {};
      shaderBindings = {};
      buffersDirty = true;
      genBufferOpts = {};
      indexBuffer = null;
      /**
       * Create a GL geom.
       * @param gl - The webgl rendering context.
       * @param geom - A geometry object
       */
      constructor(gl, geom) {
          super();
          this.__gl = gl;
          this.geom = geom;
          const geomDataChanged = (opts) => {
              this.dirtyBuffers(opts);
          };
          this.geom.on('geomDataChanged', geomDataChanged);
          const geomDataTopologyChanged = (opts) => {
              this.clearBuffers();
              this.dirtyBuffers(opts);
          };
          this.geom.on('geomDataTopologyChanged', geomDataTopologyChanged);
      }
      /**
       * Returns the owned Geometry object
       * @return - The geometry object.
       */
      getGeom() {
          return this.geom;
      }
      // /////////////////////////////////////
      // Buffers
      /**
       * The dirtyBuffers method.
       * @param opts - options passed when geomDataChanged is emitted. (Currently ony used by the FreehandLines tool)
       */
      dirtyBuffers(opts) {
          this.genBufferOpts = opts;
          this.buffersDirty = true;
          this.emit('updated');
      }
      /**
       * The genBuffers method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      genBuffers(renderstate) {
          const gl = this.__gl;
          const geomBuffers = this.geom.genBuffers();
          // eslint-disable-next-line guard-for-in
          for (const attrName in geomBuffers.attrBuffers) {
              if (!renderstate.attrs[attrName])
                  continue;
              if (this.glattrbuffers[attrName] && this.glattrbuffers[attrName].buffer) {
                  gl.deleteBuffer(this.glattrbuffers[attrName].buffer);
              }
              const attrData = geomBuffers.attrBuffers[attrName];
              const attrDesc = genDataTypeDesc(gl, attrData.dataType);
              const attrBuffer = gl.createBuffer();
              gl.bindBuffer(gl.ARRAY_BUFFER, attrBuffer);
              gl.bufferData(gl.ARRAY_BUFFER, attrData.values, gl.STATIC_DRAW);
              this.glattrbuffers[attrName] = {
                  dataType: attrDesc.dataType,
                  name: attrName,
                  dimension: attrData.dimension,
                  elementSize: attrDesc.elementSize,
                  normalized: false,
                  shared: false,
                  numValues: attrData.count,
                  buffer: attrBuffer,
              };
          }
          this.numVertices = this.geom.getNumVertices();
          this.buffersDirty = false;
      }
      /**
       * The updateBuffers method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      updateBuffers(renderstate) {
          if (this.numVertices != this.geom.getNumVertices()) {
              this.genBuffers(renderstate);
              return;
          }
          const gl = this.__gl;
          const geomBuffers = this.geom.genBuffers({ includeIndices: false });
          // eslint-disable-next-line guard-for-in
          for (const attrName in geomBuffers.attrBuffers) {
              const attrData = geomBuffers.attrBuffers[attrName];
              const glattr = this.glattrbuffers[attrName];
              gl.bindBuffer(gl.ARRAY_BUFFER, glattr.buffer);
              gl.bufferData(gl.ARRAY_BUFFER, attrData.values, gl.STATIC_DRAW);
          }
          this.buffersDirty = false;
      }
      // /////////////////////////////////////
      // Binding
      /**
       * The bind method.
       * @param renderstate - The object tracking the current state of the renderer
       * @return - returns false if the binding failed.
       */
      bind(renderstate) {
          if (this.__destroyed)
              throw new Error('Error binding a destroyed geom');
          if (this.buffersDirty)
              this.updateBuffers(renderstate);
          let shaderBinding = this.shaderBindings[renderstate.shaderkey];
          if (!shaderBinding) {
              const gl = this.__gl;
              shaderBinding = generateShaderGeomBinding(gl, renderstate.attrs, this.glattrbuffers, this.indexBuffer);
              this.shaderBindings[renderstate.shaderkey] = shaderBinding;
          }
          shaderBinding.bind(renderstate);
      }
      /**
       * The unbind method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      unbind(renderstate) {
          // Unbinding a geom is important as it puts back some important
          // GL state. (vertexAttribDivisor)
          const shaderBinding = this.shaderBindings[renderstate.shaderkey];
          if (shaderBinding) {
              shaderBinding.unbind(renderstate);
          }
      }
      // /////////////////////////////////////
      // Drawing
      // Draw an item to screen.
      /**
       * The draw method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          throw new Error('Not implemented. Implement this method in a derived class.');
      }
      /**
       * The drawInstanced method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param instanceCount - The instanceCount param.
       */
      drawInstanced(renderstate, instanceCount) {
          throw new Error('Not implemented. Implement this method in a derived class.');
      }
      /**
       * The bindAndDraw method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      bindAndDraw(renderstate) {
          this.bind(renderstate);
          this.draw(renderstate);
      }
      /**
       * The clearBuffers method.
       */
      clearBuffers() {
          const gl = this.__gl;
          // eslint-disable-next-line guard-for-in
          for (const attrName in this.glattrbuffers) {
              const glbuffer = this.glattrbuffers[attrName];
              if (glbuffer.shared)
                  continue; /* This buffer is shared between geoms. do not destroy */
              gl.deleteBuffer(glbuffer.buffer);
          }
          this.glattrbuffers = {};
          // eslint-disable-next-line guard-for-in
          for (const shaderkey in this.shaderBindings) {
              const shaderBinding = this.shaderBindings[shaderkey];
              shaderBinding.destroy();
          }
          this.shaderBindings = {};
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          this.clearBuffers();
          super.destroy();
      }
  }

  /** Class representing a GL mesh.
   * @extends GLGeom
   * @private
   */
  class GLMesh extends GLGeom {
      numTriIndices = 0;
      indexDataType = 0;
      numTriangles = 0;
      /**
       * Create a GL mesh.
       * @param gl - The webgl rendering context.
       * @param mesh - The mesh value.
       */
      constructor(gl, mesh) {
          super(gl, mesh);
      }
      // /////////////////////////////////////
      // Buffers
      /**
       * The genBuffers method.
       */
      genBuffers(renderstate) {
          super.genBuffers(renderstate);
          const gl = this.__gl;
          const geomBuffers = this.geom.genBuffers();
          const indices = geomBuffers.indices;
          if (indices instanceof Uint8Array)
              this.indexDataType = this.__gl.UNSIGNED_BYTE;
          if (indices instanceof Uint16Array)
              this.indexDataType = this.__gl.UNSIGNED_SHORT;
          if (indices instanceof Uint32Array)
              this.indexDataType = this.__gl.UNSIGNED_INT;
          if (this.indexBuffer) {
              gl.deleteBuffer(this.indexBuffer);
          }
          this.indexBuffer = gl.createBuffer();
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
          gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, geomBuffers.indices, gl.STATIC_DRAW);
          this.numTriIndices = geomBuffers.indices.length;
          this.numTriangles = indices.length / 3;
          if (this.glattrbuffers.textureCoords) {
              this.glattrbuffers.texCoords = this.glattrbuffers.textureCoords;
              delete this.glattrbuffers.textureCoords;
          }
      }
      /**
       * The clearBuffers method.
       */
      clearBuffers() {
          const gl = this.__gl;
          gl.deleteBuffer(this.indexBuffer);
          this.indexBuffer = null;
          super.clearBuffers();
      }
      // /////////////////////////////////////
      // Binding
      /**
       * The bind method.
       * @param renderstate - The object tracking the current state of the renderer
       * @return - returns false if the binding failed.
       */
      bind(renderstate) {
          super.bind(renderstate);
          const { geomType } = renderstate.unifs;
          if (geomType)
              this.__gl.uniform1i(geomType.location, 0 /*GeomType.TRIANGLES*/);
      }
      // ////////////////////////////////
      // Regular Drawing.
      /**
       * Draw an item to screen.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          this.__gl.drawElements(this.__gl.TRIANGLES, this.numTriIndices, this.indexDataType, 0);
      }
      /**
       * The drawInstanced method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param instanceCount - The instanceCount value.
       */
      drawInstanced(renderstate, instanceCount) {
          const gl = this.__gl;
          gl.drawElementsInstanced(this.__gl.TRIANGLES, this.numTriIndices, this.indexDataType, 0, instanceCount);
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          super.destroy();
          const gl = this.__gl;
          gl.deleteBuffer(this.indexBuffer);
          this.indexBuffer = null;
      }
  }

  const FRAMEBUFFER = {
      MSAA_RENDERBUFFER: 0,
      COLORBUFFER: 1,
      DEPTHBUFFER: 2,
  };
  /**
   * Class representing a GL base viewport.
   * @extends ParameterOwner
   * @private
   */
  class GLBaseViewport extends ParameterOwner {
      __gl;
      renderer;
      __renderer;
      __fbo = null;
      quad;
      offscreenBuffer = null;
      depthTexture = null;
      highlightedGeomsBufferFbo;
      __backgroundTexture = null;
      __backgroundGLTexture = null;
      offscreenBufferFbo = null;
      width = 0;
      height = 0;
      __canvasWidth = 0;
      __canvasHeight = 0;
      fb = null;
      colorRenderbuffer;
      depthBuffer = null;
      EXT_frag_depth = null;
      manipulator;
      depthRange = [0, 0];
      region = [0, 0, 0, 0];
      /**
       * @member backgroundColorParam - Changes background color of the scene
       */
      backgroundColorParam = new ColorParameter('BackgroundColor', new Color('#eeeeee')); // owned by viewport
      // The time between clicks for a double click to be registered.
      clickTime = 200;
      doubleClickTime = 200;
      // The duration for the pointer to be held to emit a long press event.
      longPressTime = 1000;
      // The maximum movingment of the pointer to still be considered a 'click'
      pointerClickTolerance = 5;
      longPressId;
      /**
       * Create a GL base viewport.
       * @param renderer - The renderer value.
       */
      constructor(renderer) {
          super();
          this.renderer = renderer;
          this.__renderer = renderer;
          const gl = this.__renderer.gl;
          this.__gl = gl;
          this.quad = new GLMesh(gl, new Plane(1, 1));
          // //////////////////////////////////
          // Setup Offscreen Render Targets
          // Note: On low end devices, such as Oculus, blitting the multi-sampled depth buffer is throwing errors,
          // and so we are simply disabling silhouettes on all low end devices now.
          this.highlightedGeomsBufferFbo = new GLRenderTarget(gl, {
              type: gl.UNSIGNED_BYTE,
              format: gl.RGBA,
              filter: gl.NEAREST,
              width: 4,
              height: 4,
              createDepthTexture: true,
          });
          this.highlightedGeomsBufferFbo.clearColor = new Color(0, 0, 0, 0);
          // //////////////////////////////////
          // Setup Camera Manipulator
          const processBGValue = () => {
              const value = this.backgroundColorParam.value;
              if (value instanceof BaseImage) {
                  if (value instanceof HDRImage) {
                      this.__backgroundTexture = value;
                      this.__backgroundGLTexture = new GLHDRImage(gl, value);
                  }
                  else {
                      this.__backgroundTexture = value;
                      this.__backgroundGLTexture = new GLTexture2D(gl, value);
                  }
              }
              else if (value instanceof Color) {
                  if (this.__backgroundGLTexture) {
                      this.__backgroundGLTexture.destroy();
                      this.__backgroundGLTexture = null;
                      this.__backgroundTexture = null;
                  }
                  if (this.offscreenBufferFbo) {
                      this.offscreenBufferFbo.clearColor = value;
                  }
              }
              else {
                  console.warn('Invalid background:' + value);
              }
              this.emit('updated');
          };
          processBGValue();
          this.backgroundColorParam.on('valueChanged', processBGValue);
      }
      /**
       * Returns the renderer this viewport is bound to.
       */
      getRenderer() {
          return this.renderer;
      }
      /**
       * The getWidth method.
       * @return - The return value.
       */
      getWidth() {
          return this.width;
      }
      /**
       * The getHeight method.
       * @return - The return value.
       */
      getHeight() {
          return this.height;
      }
      /**
       * The resize method.
       * @param canvasWidth - The canvasWidth value.
       * @param canvasHeight - The canvasHeight value.
       */
      resize(canvasWidth, canvasHeight) {
          if (this.__canvasWidth == canvasWidth && this.__canvasHeight == canvasHeight)
              return;
          this.__canvasWidth = canvasWidth;
          this.__canvasHeight = canvasHeight;
          this.width = canvasWidth;
          this.height = canvasHeight;
          this.region = [0, 0, this.width, this.height];
          this.resizeRenderTargets(canvasWidth, canvasHeight);
          const event = new ResizedEvent(this.width, this.height);
          this.emit('resized', event);
      }
      /**
       * Resize any offscreen render targets.
       * > Note: Values ,ay not be the entire canvas with if multiple viewports exists.
       * @param width - The width used by this viewport.
       * @param height - The height  used by this viewport.
       */
      resizeRenderTargets(width, height) {
          if (this.highlightedGeomsBufferFbo) {
              this.highlightedGeomsBufferFbo.resize(width, height);
          }
          const gl = this.__renderer.gl;
          if (this.renderer.outlineThickness > 0 && this.renderer.outlineMethod == 'image') {
              const disableOnSafari = SystemDesc.browserName == 'Safari';
              // Note: On low end devices, such as Oculus, blitting the multi-sampled depth buffer is throwing errors,
              // and so we are simply disabling silhouettes on all low end devices now.
              if (disableOnSafari || gl.name == 'webgl') {
                  console.warn('Disabling outlines on Safari due to a regression in WebKit', SystemDesc);
                  return;
              }
              if (this.fb) {
                  gl.deleteFramebuffer(this.fb[FRAMEBUFFER.MSAA_RENDERBUFFER]);
                  gl.deleteFramebuffer(this.fb[FRAMEBUFFER.COLORBUFFER]);
                  gl.deleteFramebuffer(this.fb[FRAMEBUFFER.DEPTHBUFFER]);
                  if (this.colorRenderbuffer)
                      gl.deleteRenderbuffer(this.colorRenderbuffer);
                  if (this.depthBuffer)
                      gl.deleteRenderbuffer(this.depthBuffer);
              }
              // //////////////////////////////////
              // Setup Offscreen Render Targets
              // Note: On low end devices, such as Oculus, blitting the multi-sampled depth buffer is throwing errors,
              // and so we are simply disabling silhouettes on all low end devices now.
              if (!this.offscreenBuffer || !this.depthTexture) {
                  this.offscreenBuffer = new GLTexture2D(gl, {
                      type: 'UNSIGNED_BYTE',
                      format: 'RGBA',
                      filter: 'LINEAR',
                      width: 4,
                      height: 4,
                  });
                  this.depthTexture = new GLTexture2D(gl, {
                      type: gl.UNSIGNED_INT_24_8,
                      format: gl.DEPTH_STENCIL,
                      internalFormat: gl.name == 'webgl' ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT,
                      filter: gl.NEAREST,
                      wrap: gl.CLAMP_TO_EDGE,
                      width: 4,
                      height: 4,
                  });
              }
              else {
                  this.offscreenBuffer.resize(width, height);
                  this.depthTexture.resize(width, height);
              }
              // Create and bind the framebuffer
              this.fb = [];
              this.fb[FRAMEBUFFER.MSAA_RENDERBUFFER] = gl.createFramebuffer();
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb[FRAMEBUFFER.MSAA_RENDERBUFFER]);
              this.colorRenderbuffer = gl.createRenderbuffer();
              // Create the color buffer
              gl.bindRenderbuffer(gl.RENDERBUFFER, this.colorRenderbuffer);
              // iOS devices have trouble with Multisample render buffers
              if (this.renderer.multiSampledScreenBuffer)
                  gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8, width, height);
              else
                  gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, gl.RGBA8, width, height);
              gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, this.colorRenderbuffer);
              this.depthBuffer = gl.createRenderbuffer();
              gl.bindRenderbuffer(gl.RENDERBUFFER, this.depthBuffer);
              if (this.renderer.multiSampledScreenBuffer)
                  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH24_STENCIL8, width, height);
              else
                  gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, gl.DEPTH24_STENCIL8, width, height);
              gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.depthBuffer);
              // //////////////////////////////////
              // COLORBUFFER
              this.fb[FRAMEBUFFER.COLORBUFFER] = gl.createFramebuffer();
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb[FRAMEBUFFER.COLORBUFFER]);
              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.offscreenBuffer.glTex, 0);
              gl.bindFramebuffer(gl.FRAMEBUFFER, null);
              // //////////////////////////////////
              // DEPTHBUFFER
              // Create the depth texture that will be bitted to.
              this.fb[FRAMEBUFFER.DEPTHBUFFER] = gl.createFramebuffer();
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb[FRAMEBUFFER.DEPTHBUFFER]);
              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this.depthTexture.glTex, 0);
              gl.bindFramebuffer(gl.FRAMEBUFFER, null);
              const check = gl.checkFramebufferStatus(gl.name == 'webgl' ? gl.DRAW_FRAMEBUFFER : gl.FRAMEBUFFER);
              if (check !== gl.FRAMEBUFFER_COMPLETE) {
                  switch (check) {
                      case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                          throw new Error('The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.');
                      case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                          throw new Error('There is no attachment.');
                      case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                          throw new Error('Height and width of the attachment are not the same.');
                      case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                          throw new Error('The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.');
                      case 36061: // gl.GL_FRAMEBUFFER_UNSUPPORTED:
                          throw new Error('The framebuffer is unsupported');
                      default:
                          throw new Error('Incomplete Frambuffer');
                  }
              }
          }
      }
      /**
       * The draw method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          const gl = this.__renderer.gl;
          renderstate.pushGLStack('GLBaseViewport.draw');
          const prevRendertarget = renderstate.boundRendertarget;
          if (this.renderer.outlineThickness > 0 && this.renderer.outlineMethod == 'image') {
              const disableOnSafari = SystemDesc.browserName == 'Safari';
              if (disableOnSafari || gl.name == 'webgl') {
                  console.warn('Disabling outlines on Safari due to a regression in WebKit', SystemDesc);
              }
              else {
                  if (!this.fb)
                      this.resizeRenderTargets(this.width, this.height);
                  const frameBuffer = this.fb[FRAMEBUFFER.MSAA_RENDERBUFFER];
                  gl.bindFramebuffer(gl.name == 'webgl' ? gl.DRAW_FRAMEBUFFER : gl.FRAMEBUFFER, frameBuffer);
                  renderstate.boundRendertarget = frameBuffer;
              }
          }
          else {
              // Make sure the default fbo is bound
              // Note: boundRendertarget will be set during a WebXR session
              // Note: Sometimes an Fbo is left bound
              // from another op(like resizing, populating etc..)
              // We need to unbind here to ensure rendering is to the
              // right target.
              if (!renderstate.boundRendertarget)
                  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
          }
          renderstate.glEnable(gl.DEPTH_TEST);
          this.__renderer.drawScene(renderstate);
          const highlightRenderState = renderstate.toHighlightRenderState();
          this.drawHighlights(highlightRenderState);
          if (highlightRenderState.stack.length != 0) {
              console.warn(' corrupt highlightRenderState.stack.length:', highlightRenderState.stack.length);
          }
          // //////////////////////////////////
          // Post processing.
          if (this.fb) {
              // "blit" the scene into the color buffer
              gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this.fb[FRAMEBUFFER.MSAA_RENDERBUFFER]);
              gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.fb[FRAMEBUFFER.COLORBUFFER]);
              gl.clearBufferfv(gl.COLOR, 0, [0.0, 0.0, 0.0, 0.0]);
              gl.blitFramebuffer(0, 0, this.width, this.height, 0, 0, this.width, this.height, gl.COLOR_BUFFER_BIT, gl.LINEAR);
              gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, prevRendertarget);
              renderstate.boundRendertarget = prevRendertarget;
              gl.viewport(this.region[0], this.region[1], this.region[2], this.region[3]);
              gl.disable(gl.DEPTH_TEST);
              const screenQuad = this.__renderer.screenQuad;
              screenQuad.bindShader(renderstate);
              screenQuad.draw(renderstate, this.offscreenBuffer);
              gl.enable(gl.DEPTH_TEST);
          }
          renderstate.popGLStack();
          this.renderer.emit('redrawOccurred');
      }
      /**
       * Draws the Silhouettes around geometries.
       * @param renderstate - The object tracking the current state of the renderer
       * @private
       */
      drawSilhouettes(renderstate) {
          renderstate.pushGLStack('GLBaseViewport.drawSilhouettes');
          // We cannot render silhouettes in iOS because EXT_frag_depth is not supported
          // and without it, we cannot draw lines over the top of geometries.
          // Note: On low end devices, such as Oculus, blitting the multi-sampled depth buffer is throwing errors,
          // and so we are simply disabling silhouettes on all low end devices now.
          const gl = this.__renderer.gl;
          gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this.fb[FRAMEBUFFER.MSAA_RENDERBUFFER]);
          gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.fb[FRAMEBUFFER.DEPTHBUFFER]);
          gl.clearBufferfv(gl.COLOR, 0, [1, 1, 1, 1]);
          gl.blitFramebuffer(0, 0, this.width, this.height, 0, 0, this.width, this.height, gl.DEPTH_BUFFER_BIT, gl.NEAREST);
          // Rebind the MSAA RenderBuffer.
          gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.fb[FRAMEBUFFER.MSAA_RENDERBUFFER]);
          renderstate.boundRendertarget = this.fb[FRAMEBUFFER.MSAA_RENDERBUFFER];
          gl.viewport(this.region[0], this.region[1], this.region[2], this.region[3]);
          // ////////////////////////////////////
          //
          renderstate.glEnable(gl.BLEND);
          renderstate.glDisable(gl.DEPTH_TEST);
          gl.blendEquation(gl.FUNC_ADD);
          gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ZERO, gl.ONE);
          gl.depthMask(false);
          this.renderer.silhouetteShader.bind(renderstate);
          const unifs = renderstate.unifs;
          this.depthTexture.bindToUniform(renderstate, unifs.depthTexture);
          gl.uniform2f(unifs.screenSize.location, this.width, this.height);
          gl.uniform1f(unifs.outlineThickness.location, this.renderer.outlineThickness * window.devicePixelRatio);
          const oc = this.renderer.outlineColor.asArray();
          gl.uniform4f(unifs.outlineColor.location, oc[0], oc[1], oc[2], oc[3]);
          gl.uniform1f(unifs.outlineSensitivity.location, this.renderer.outlineSensitivity);
          gl.uniform1f(unifs.outlineDepthBias.location, this.renderer.outlineDepthBias);
          gl.uniform2f(unifs.depthRange.location, this.depthRange[0], this.depthRange[1]);
          this.quad.bindAndDraw(renderstate);
          gl.depthMask(true);
          renderstate.popGLStack();
      }
      /**
       * Draws the highlights around geometries.
       * @param renderstate - The object tracking the current state of the renderer
       * @private
       */
      drawHighlights(renderstate) {
          if (this.highlightedGeomsBufferFbo) {
              const gl = this.__renderer.gl;
              renderstate.pushGLStack('GLBaseViewport.drawHighlights');
              this.highlightedGeomsBufferFbo.bindForWriting(renderstate, true);
              // Highlighted geoms should always be rendered 2-sided
              renderstate.glEnable(gl.CULL_FACE);
              renderstate.glEnable(gl.DEPTH_TEST);
              renderstate.glDisable(gl.BLEND);
              gl.depthFunc(gl.LESS);
              gl.depthMask(true);
              renderstate.glShader = null; // clear any bound shaders.
              this.__renderer.drawHighlightedGeoms(renderstate);
              // Unbind and restore the bound fbo
              this.highlightedGeomsBufferFbo.unbindForWriting(renderstate);
              // Now render the outlines to the entire screen.
              gl.viewport(this.region[0], this.region[1], this.region[2], this.region[3]);
              {
                  renderstate.pushGLStack('GLBaseViewport.drawHighlights.highlightsShader');
                  this.renderer.highlightsShader.bind(renderstate);
                  renderstate.glEnable(gl.BLEND);
                  gl.blendEquation(gl.FUNC_ADD);
                  gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);
                  const unifs = renderstate.unifs;
                  gl.uniform1f(unifs.outlineThickness.location, this.renderer.highlightOutlineThickness);
                  this.highlightedGeomsBufferFbo.bindColorTexture(renderstate, unifs.highlightDataTexture);
                  this.quad.bindAndDraw(renderstate);
                  renderstate.popGLStack();
              }
              renderstate.popGLStack();
          }
      }
      // ///////////////////////////
      // Events
      /**
       * The getManipulator method.
       * @return - The return value.
       */
      getManipulator() {
          return this.manipulator;
      }
      /**
       * Sets the tool that will receive mouse, touch and keyboard events from the viewport.
       * @param tool - The manipulator value.
       */
      setManipulator(tool) {
          if (this.manipulator != tool) {
              if (this.manipulator && this.manipulator.deactivateTool) {
                  this.manipulator.deactivateTool();
              }
              this.manipulator = tool;
              if (this.manipulator.activateTool) {
                  this.manipulator.activateTool();
              }
          }
      }
      /**
       * Handler of the `pointerdown` event fired when the pointer device is initially pressed.
       *
       * @param event - The DOM event produced by a pointer
       */
      onPointerDown(event) {
          console.warn('@GLBaseViewport#onPointerDown - Implement me!');
      }
      /**
       * Handler of the `pointerup` event fired when the pointer device is finally released.
       *
       * @param event - The DOM event produced by a pointer
       */
      onPointerUp(event) {
          console.warn('@GLBaseViewport#onPointerUp - Implement me!');
      }
      /**
       * Handler of the `pointermove` event fired when the pointer device changes coordinates, and the pointer has not been cancelled
       *
       * @param event - The DOM event produced by a pointer
       */
      onPointerMove(event) {
          console.warn('@GLBaseViewport#onPointerMove - Implement me!');
      }
      /**
       * Invoked when the mouse pointer is moved into this viewport.
       *
       * @param event - The DOM event produced by a pointer
       */
      onPointerEnter(event) {
          console.warn('@GLBaseViewport#onPointerEnter - Implement me!');
      }
      /**
       * Invoked when the mouse pointer is moved out of this viewport.
       *
       * @param event - The DOM event produced by a pointer
       */
      onPointerLeave(event) {
          console.warn('@GLBaseViewport#onPointerLeave - Implement me!');
      }
      /**
       * Invoked when the mouse pointer is moved out of an element.
       * @param event - The event that occurs.
       */
      onMouseLeave(event) { }
      /**
       * Invoked when the user is pressing a key on the keyboard.
       * @param event - The event that occurs.
       */
      onKeyDown(event) { }
      /**
       * Causes an event to occur  when the user releases a key on the keyboard.
       * @param event - The event that occurs.
       */
      onKeyUp(event) { }
  }

  /* eslint-disable guard-for-in */
  /**
   * Class representing a GL viewport.
   *
   * **Events**
   * * **resized:** Emitted when the GLViewport resizes
   * * **updated:** Emitted when the GLViewport needs updating. The Renderer will trigger a redraw when this occurs.
   * * **viewChanged:** Emitted when the view changes. Usually caused by the camera moving.
   * * **pointerDoubleClick:** Emitted when the user double clicks with the mouse, or double taps in the viewport.
   * * **pointerDown:** Emitted when the user presses a pointer
   * * **pointerUp:** Emitted when the user releases a pointer
   * * **pointerOverGeom:** Emitted when the pointer is moved over a geometry
   * * **pointerLeaveGeom:** Emitted when the pointer is moved off a geometry
   * * **pointerMove:** Emitted when the pointer is moved
   * * **pointerEnter:** Emitted when the pointer is moved into thg viewport
   * * **pointerLeave:** Emitted when the mouse leaves the viewport.
   * * **pointerClick:** Emitted when a pointer is clicked on an item.
   * * **pointerLongPress:** Emitted when a pointer is clicked and held on an item for a long time.
   * * **keyDown:** Emitted when the user presses a key on the keyboard
   * * **keyUp:** Emitted when the user releases a key on the keyboard
   * * **touchCancel:** Emitted when the user cancels a touch interaction
   *
   * @extends GLBaseViewport
   */
  class GLViewport extends GLBaseViewport {
      debugGeomDataBuffer = false;
      debugOcclusionBuffer = false;
      debugReductionBuffer = false;
      debugHighlightedGeomsBuffer = false;
      // To enable picking small items, we enable searching an area around the click point
      // for the closest item. Reduce the size of this value if
      mousePointerSearchArea = 5;
      // To enable picking small items, we enable searching an area around the touch point
      // for the closest item. This value approximates the size of the touch area.
      // The picking system will return the closest item to the camera within this search area.
      // To enable precise surface placement, this value should be reduced to a value such as 1.
      touchPointerSearchArea = 45;
      projectionMatrix;
      viewportFrustum;
      camera;
      bottomLeftCoords = new Vec2(0, 0);
      topRightCoords = new Vec2(1, 1);
      posX = 0;
      posY = 0;
      pointerDownTime = [];
      pointerDownButton = -1;
      pointerDownPos = new Vec2(-1, -1);
      prevClickTime;
      prevClickPos = new Vec2(-1, -1);
      prevClickButton = -1;
      geomDataBufferSizeFactor = window.devicePixelRatio;
      geomDataRenderTarget;
      geomDataBufferRendered = false;
      geomDataBufferInvalid = true;
      cameraXfo = new Xfo();
      cameraMat = new Mat4();
      viewMatrix = new Mat4();
      screenPos = null;
      intersectionData;
      pointerOverItem;
      /**
       * Create a GL viewport.
       * @param renderer - The renderer value.
       * @param name - The name value.
       * @param width - The width of the viewport
       * @param height - The height of the viewport
       */
      constructor(renderer, name, width, height) {
          super(renderer);
          this.name = name;
          this.projectionMatrix = new Mat4();
          this.viewportFrustum = new Vec4();
          // Layout coords, x:[0..1], y:[0..1]
          this.bottomLeftCoords = new Vec2(0, 0);
          this.topRightCoords = new Vec2(1, 1);
          this.prevClickTime = 0;
          // //////////////////////////////////
          // Setup GeomData Fbo
          if (SystemDesc.isMobileDevice) {
              this.geomDataBufferSizeFactor = 8;
          }
          const gl = this.__renderer.gl;
          this.geomDataRenderTarget = new GLRenderTarget(gl, {
              type: renderer.floatGeomBuffer ? gl.FLOAT : gl.UNSIGNED_BYTE,
              format: gl.RGBA,
              filter: gl.NEAREST,
              width: width <= 1 ? 1 : Math.floor(width / this.geomDataBufferSizeFactor),
              height: height <= 1 ? 1 : Math.floor(height / this.geomDataBufferSizeFactor),
              createDepthTexture: true,
          });
          this.geomDataRenderTarget.clearColor = new Color(0, 0, 0, 0);
          // //////////////////////////////////
          // Setup Camera Manipulator
          // Each user has a separate camera, and so the default
          //  camera cannot be part of the scene.
          this.camera = new Camera('DefaultCamera');
          this.setCamera(this.camera);
          this.setManipulator(new CameraManipulator({ renderer }));
          this.resize(width, height);
      }
      /**
       * The getBl method.
       * @return - The return value.
       */
      getBl() {
          return this.bottomLeftCoords;
      }
      /**
       * The setBl method.
       * @param bl - The bl value.
       */
      setBl(bl) {
          this.bottomLeftCoords = bl;
          this.#updateLayout();
      }
      /**
       * The getTr method.
       * @return - The return value.
       */
      getTr() {
          return this.topRightCoords;
      }
      /**
       * The setTr method.
       * @param tr - The tr value.
       */
      setTr(tr) {
          this.topRightCoords = tr;
          this.#updateLayout();
      }
      /**
       * The getPosX method.
       * @return - The return value.
       */
      getPosX() {
          return this.posX;
      }
      /**
       * The getPosY method.
       * @return - The return value.
       */
      getPosY() {
          return this.posY;
      }
      /**
       * Dynamically resizes viewport.
       *
       * @param canvasWidth - The canvasWidth value.
       * @param canvasHeight - The canvasHeight value.
       */
      resize(canvasWidth, canvasHeight) {
          this.__canvasWidth = canvasWidth;
          this.__canvasHeight = canvasHeight;
          this.#updateLayout();
      }
      #updateLayout() {
          this.posX = Math.round(this.__canvasWidth * this.bottomLeftCoords.x);
          this.posY = Math.round(this.__canvasWidth * this.bottomLeftCoords.y);
          this.width = Math.round(this.__canvasWidth * this.topRightCoords.x - this.__canvasWidth * this.bottomLeftCoords.x);
          this.height = Math.round(this.__canvasHeight * this.topRightCoords.y - this.__canvasHeight * this.bottomLeftCoords.y);
          this.region = [this.posX, this.posY, this.width, this.height];
          if (this.camera)
              this.updateProjectionMatrix();
          this.resizeRenderTargets(this.width, this.height);
          const event = new ResizedEvent(this.width, this.height);
          this.emit('resized', event);
      }
      /**
       * Resize any offscreen render targets.
       * > Note: Values ,ay not be the entire canvas with if multiple viewports exists.
       * @param width - The width used by this viewport.
       * @param height - The height  used by this viewport.
       */
      resizeRenderTargets(width, height) {
          super.resizeRenderTargets(width, height);
          if (this.geomDataRenderTarget) {
              this.geomDataRenderTarget.resize(Math.floor(this.width / this.geomDataBufferSizeFactor), Math.floor(this.height / this.geomDataBufferSizeFactor));
              this.invalidateGeomDataBuffer();
          }
      }
      /**
       * Returns current camera object
       *
       * @return - The return value.
       */
      getCamera() {
          return this.camera;
      }
      /**
       * Sets current camera object
       *
       * @param camera - The camera value.
       */
      setCamera(camera) {
          this.camera = camera;
          this.depthRange = [this.camera.getNear(), this.camera.getFar()];
          const globalXfoParam = camera.globalXfoParam;
          const getCameraParams = () => {
              this.cameraXfo = globalXfoParam.value;
              this.cameraMat = this.cameraXfo.toMat4();
              this.viewMatrix = this.cameraMat.inverse();
          };
          getCameraParams();
          globalXfoParam.on('valueChanged', () => {
              getCameraParams();
              this.emit('updated');
              this.invalidateGeomDataBuffer();
              const event = new ViewChangedEvent('CameraAndPointer', this.cameraXfo);
              this.emit('viewChanged', event);
          });
          this.camera.on('projectionParamChanged', () => {
              this.updateProjectionMatrix();
              this.depthRange = [this.camera.getNear(), this.camera.getFar()];
              this.emit('updated');
          });
          this.updateProjectionMatrix();
      }
      // eslint-disable-next-line require-jsdoc
      updateProjectionMatrix() {
          const aspect = this.width / this.height;
          this.camera.updateProjectionMatrix(this.projectionMatrix, aspect);
          const flocalDist = this.camera.getFocalDistance();
          const fovY = this.camera.getFov();
          const isOrthographic = this.camera.isOrthographicParam.value;
          const frustumHPersp = Math.tan(fovY / 2.0) * flocalDist * 2.0;
          const frustumWPersp = frustumHPersp * aspect;
          const frustumHOrtho = this.camera.getFrustumHeight();
          const frustumWOrtho = frustumHPersp * aspect;
          this.viewportFrustum.set(MathFunctions.lerp(frustumWPersp, frustumWOrtho, isOrthographic), MathFunctions.lerp(frustumHPersp, frustumHOrtho, isOrthographic), flocalDist, fovY);
      }
      /**
       * The getProjectionMatrix method.
       * @return - The return projection matrix for the viewport.
       */
      getProjectionMatrix() {
          return this.projectionMatrix;
      }
      /**
       * The getProjectionMatrix method.
       * @return - The return projection matrix for the viewport.
       */
      getViewMatrix() {
          return this.viewMatrix;
      }
      /**
       * Calculates a new camera position that frames all the items passed in `treeItems` array, moving
       * the camera to a point where we can see all of them.
       * > See Camera.frameView
       * @param treeItems - The array of TreeItem.
       * @param duration - The duration of time to apply the frame. A value of 0 specifies an instantaneous movement of the camera.
       * @param frameBorder - The variable to use to provide an empty space around the border for geometries.
       */
      frameView(treeItems, duration = 0, frameBorder = 0.1) {
          if (this.width > 0 && this.height > 0) {
              this.camera.frameView(this, treeItems, duration, frameBorder);
          }
          else {
              // Sometimes thew renderer is not yet setup, so here we
              // wait till the window is resized and try again.
              this.once('resized', () => this.frameView(treeItems, duration, frameBorder));
          }
      }
      /**
       * Compute the screen space position of an item from a world space coordinate.
       * @param screenPos - The screen position.
       * @return - The return value.
       */
      calcScreenPosFromWorldPos(worldPos) {
          const viewProjMatrix = this.projectionMatrix.multiply(this.viewMatrix);
          const projSpacePos = viewProjMatrix.transformVec4(new Vec4(worldPos.x, worldPos.y, worldPos.z, 1));
          // perspective divide
          projSpacePos.x /= projSpacePos.w;
          projSpacePos.y /= projSpacePos.w;
          return new Vec2((projSpacePos.x * 0.5 + 0.5) * this.width, (projSpacePos.y * -0.5 + 0.5) * this.height);
      }
      /**
       * Compute a ray into the scene based on a mouse coordinate.
       * @param screenPos - The screen position.
       * @return - The return value.
       */
      calcRayFromScreenPos(screenPos) {
          // Convert the raster coordinates to screen space ([0,{w|h}] -> [-1,1]
          // - Note: The raster vertical is inverted wrt OGL screenspace Y
          const x_pixelPos = screenPos.x * window.devicePixelRatio;
          const y_pixelPos = screenPos.y * window.devicePixelRatio;
          const top_y = this.__canvasHeight * (1.0 - this.topRightCoords.y);
          // sx /sy range from -1 ... +1
          const sx = ((x_pixelPos - this.posX) / this.width) * 2.0 - 1.0;
          const sy = ((y_pixelPos - top_y) / this.height) * 2.0 - 1.0;
          // Transform the origin from camera local to world space
          const cameraMat = this.cameraMat;
          const projInv = this.projectionMatrix.inverse();
          if (projInv == null) {
              // Sometimes this happens, not sure why...
              console.warn(`Unable to generate Ray from screen pos:${screenPos.toString()} in region ${this.region}`);
              return new Ray();
          }
          let rayStart;
          let rayDirection;
          if (this.camera.isOrthographic()) {
              // Orthographic projections.
              const cameraSpaceOffset = projInv.transformVec3(new Vec3(sx, -sy, -1.0));
              cameraSpaceOffset.z = 0;
              rayStart = cameraMat.transformVec3(cameraSpaceOffset);
              rayDirection = new Vec3(0.0, 0.0, -1.0);
          }
          else {
              rayStart = cameraMat.translation;
              // Get the projected window coordinate on the near plane
              // See http://www.songho.ca/opengl/gl_projectionmatrix.html
              // for details.
              rayDirection = projInv.transformVec3(new Vec3(sx, -sy, -1.0));
          }
          // And from projection space to camera local.
          // - We nuke the translation part since we're transforming a vector.
          rayDirection = cameraMat.rotateVec3(rayDirection).normalize();
          return new Ray(rayStart, rayDirection);
      }
      // //////////////////////////
      // GeomData
      /**
       * Renders the scene geometry to the viewport's geom data buffer
       * in preparation for mouse picking.
       */
      renderGeomDataFbo() {
          if (this.geomDataRenderTarget) {
              const geomDataRenderstate = new GeomDataRenderState(this.renderer.__gl);
              geomDataRenderstate.pushGLStack('GLViewport.renderGeomDataFbo');
              this.bindGLViewport(geomDataRenderstate);
              // Note: GLLinesPass binds a new Fbo, but shares this ones depth buffer.
              geomDataRenderstate.geomDataFbo = this.geomDataRenderTarget;
              this.geomDataRenderTarget.bindForWriting(geomDataRenderstate, true);
              this.__renderer.drawSceneGeomData(geomDataRenderstate);
              this.geomDataRenderTarget.unbindForWriting();
              geomDataRenderstate.popGLStack();
              this.geomDataBufferInvalid = false;
          }
      }
      /**
       * The invalidateGeomDataBuffer method.
       */
      invalidateGeomDataBuffer() {
          this.geomDataBufferInvalid = true;
      }
      /**
       * The getGeomDataAtPos method.
       * @param screenPos - The screen position.
       * @param pointerRay - The pointerRay value.
       * @return - The return value.
       */
      getGeomDataAtPos(screenPos, pointerRay, searchArea = 5) {
          if (this.geomDataRenderTarget) {
              if (this.geomDataBufferInvalid) {
                  this.renderGeomDataFbo();
                  this.screenPos = null;
              }
              // Cache the intersection tests result so subsequent queries will return the same value.
              // Note: every new mouse event will generate a new pointerPos value, so the cache
              // is only valid for a given event propagation, and for that exact pointerPos value.
              if (screenPos === this.screenPos) {
                  return this.intersectionData;
              }
              this.screenPos = screenPos;
              this.intersectionData = null;
              const gl = this.__renderer.gl;
              gl.finish();
              this.geomDataRenderTarget.bindForReading();
              // const logGeomData = ()=>{
              //     console.log("logGeomData :[" + this.geomDataRenderTarget.width +","+ this.geomDataRenderTarget.height + "]")
              //     const pixels = new Float32Array(this.geomDataRenderTarget.width * 4);
              //     for(let i=0; i<this.geomDataRenderTarget.height; i++){
              //       gl.readPixels(0, i, this.geomDataRenderTarget.width, 1, gl.RGBA, gl.FLOAT, pixels);
              //         for(let j=0; j<this.geomDataRenderTarget.width; j++){
              //             const geomData = pixels.subarray(j*4, (j+1)*4);
              //             if (geomData[0] != 0 || geomData[1] != 0){
              //                 console.log(j, i)
              //                 break; // Only log the left border pixels.
              //             }
              //         }
              //       // console.log(pixels);
              //     }
              // }
              // logGeomData();
              // console.log("getGeomDataAtPos:", screenPos.toString(), screenPos.x,this.width)
              const x_pixelPos = screenPos.x * window.devicePixelRatio;
              const y_pixelPos = screenPos.y * window.devicePixelRatio;
              const numPixels = searchArea * searchArea;
              const bufferWidth = this.geomDataRenderTarget.width;
              const bufferHeight = this.geomDataRenderTarget.height;
              const x = Math.floor(x_pixelPos * (bufferWidth / this.width)) - searchArea * 0.5;
              const y = Math.floor(bufferHeight - y_pixelPos * (bufferHeight / this.height) - 1) - searchArea * 0.5;
              const overlayPassClass = Registry.getClassDefinition('GLOverlayPass');
              const overlayPassIndex = this.__renderer.findPassIndex(overlayPassClass);
              let passId;
              let geomData;
              if (this.__renderer.floatGeomBuffer) {
                  // Allocate a 5x5 pixel block and read from the GeomData buffer.
                  const geomDatas = new Float32Array(4 * numPixels);
                  gl.readPixels(x, y, searchArea, searchArea, gl.RGBA, gl.FLOAT, geomDatas);
                  // ////////////////////////////////////
                  // scan to find the closest geom
                  let closest = Number.MAX_VALUE;
                  let closestId = -1;
                  const checkPixel = (id) => {
                      // We look for pixels rendered from the overlay pass, as that contains
                      // handles and other UI elements the user need to be able to click on.
                      // Mask the pass id to be only the first 6 bits of the integer.
                      const passId = Math.round(geomDatas[id * 4 + 0]) & (64 - 1);
                      if (passId == overlayPassIndex) {
                          closest = 0;
                          closestId = id;
                          return true;
                      }
                      // find the closest pixel in the block to the user.
                      const dist = geomDatas[id * 4 + 3];
                      if (dist > 0 && dist < closest) {
                          closest = dist;
                          closestId = id;
                      }
                      return false;
                  };
                  for (let i = 0; i < numPixels; i++) {
                      if (checkPixel(i))
                          break;
                  }
                  if (closestId == -1)
                      return;
                  geomData = geomDatas.slice(closestId * 4, (closestId + 1) * 4);
                  // Mask the pass id to be only the first 6 bits of the integer.
                  passId = Math.round(geomData[0]) & (64 - 1);
              }
              else {
                  const geomDatas = new Uint8Array(4 * numPixels);
                  gl.readPixels(x, bufferHeight - y - 1, searchArea, searchArea, gl.RGBA, gl.UNSIGNED_BYTE, geomDatas);
                  // ////////////////////////////////////
                  // scan to find the closest geom
                  let closest = Number.MAX_VALUE;
                  let closestId = -1;
                  const checkPixel = (id) => {
                      if (geomDatas[id * 4] == 0 && geomDatas[id * 4 + 1] == 0)
                          return;
                      const distVals = geomDatas.slice(closestId * 4 + 2, closestId * 4 + 3);
                      const dist = MathFunctions.decode16BitFloatFrom2xUInt8(distVals);
                      if (dist > 0 && dist < closest) {
                          closest = dist;
                          closestId = id;
                      }
                  };
                  for (let i = 0; i < numPixels; i++) {
                      checkPixel(i);
                  }
                  if (closestId == -1)
                      return;
                  geomData = new Uint8Array(4);
                  passId = Math.floor(geomData[1] / 32);
              }
              this.geomDataRenderTarget.unbindForReading();
              const pass = this.__renderer.getPass(passId);
              if (!pass) {
                  console.warn('Geom data buffer returns invalid pass id:', passId);
                  return null;
              }
              const geomItemAndDist = pass.getGeomItemAndDist(geomData);
              if (geomItemAndDist) {
                  if (!geomItemAndDist.geomItem.isSelectable())
                      return null;
                  if (!pointerRay)
                      pointerRay = this.calcRayFromScreenPos(screenPos);
                  const intersectionPos = pointerRay.start.add(pointerRay.dir.scale(geomItemAndDist.dist));
                  this.intersectionData = new IntersectionData(screenPos, pointerRay, intersectionPos, geomData, geomItemAndDist);
              }
              return this.intersectionData;
          }
          return null;
      }
      /**
       * this method returns an object containing an array of geomitems, and an array of count values in
       * the form of a histogram. The results are sorted by count, so the first items are the most visible,
       * down to the least visible.
       * @param tl - The top left value of the rectangle.
       * @param br - The bottom right corner of the rectangle.
       * @return - The return value.
       */
      getGeomVisiblity(tl, br) {
          if (this.geomDataRenderTarget) {
              if (this.geomDataBufferInvalid) {
                  this.renderGeomDataFbo();
                  this.screenPos = null;
              }
              const gl = this.__renderer.gl;
              gl.finish();
              // Allocate a pixel block.
              const bufferWidth = this.geomDataRenderTarget.width;
              const bufferHeight = this.geomDataRenderTarget.height;
              const widthFactor = bufferWidth / this.width;
              const heightFactor = bufferHeight / this.height;
              const tlX = Math.round(tl.x * widthFactor);
              const tlY = Math.round(tl.y * heightFactor);
              const brX = Math.round(br.x * widthFactor);
              const brY = Math.round(br.y * heightFactor);
              const rectBottom = Math.round(bufferHeight - brY);
              const rectLeft = Math.round(tlX);
              const rectWidth = Math.round(brX - tlX);
              const rectHeight = Math.round(brY - tlY);
              const numPixels = rectWidth * rectHeight;
              this.geomDataRenderTarget.bindForReading();
              let geomDatas;
              if (this.__renderer.floatGeomBuffer) {
                  geomDatas = new Float32Array(4 * numPixels);
                  gl.readPixels(rectLeft, rectBottom, rectWidth, rectHeight, gl.RGBA, gl.FLOAT, geomDatas);
              }
              else {
                  geomDatas = new Uint8Array(4 * numPixels);
                  gl.readPixels(rectLeft, rectBottom, rectWidth, rectHeight, gl.RGBA, gl.UNSIGNED_BYTE, geomDatas);
              }
              this.geomDataRenderTarget.unbindForReading();
              const geomItems = [];
              const histogram = [];
              const keys = new Map();
              for (let i = 0; i < numPixels; i++) {
                  let passId;
                  const geomData = geomDatas.subarray(i * 4, (i + 1) * 4);
                  if (this.__renderer.floatGeomBuffer) {
                      if (geomData[3] == 0)
                          continue;
                      passId = Math.round(geomData[0]);
                  }
                  else {
                      if (geomData[0] == 0 && geomData[1] == 0)
                          continue;
                      passId = Math.floor(geomData[1] / 64);
                  }
                  const key = geomData[0] + '-' + geomData[1];
                  const index = keys.get(key);
                  if (index != undefined) {
                      histogram[index]++;
                      continue;
                  }
                  const geomItemAndDist = this.__renderer.getPass(passId)?.getGeomItemAndDist(geomData);
                  if (geomItemAndDist) {
                      keys.set(key, histogram.length);
                      histogram.push(1);
                      geomItems.push(geomItemAndDist.geomItem);
                  }
              }
              const indexArray = [];
              for (let i = 0; i < histogram.length; i++) {
                  indexArray[i] = i;
              }
              indexArray.sort((a, b) => {
                  return histogram[a] > histogram[b] ? -1 : 1;
              });
              return {
                  geomItems: indexArray.map((index) => geomItems[index]),
                  histogram: indexArray.map((index) => histogram[index]),
              };
          }
          return null;
      }
      /**
       * getGeomItemsInRect
       * Gathers all the geoms renders in a given rectangle of the viewport.
       * @param tl - The top left value of the rectangle.
       * @param br - The bottom right corner of the rectangle.
       * @return - The return value.
       */
      getGeomItemsInRect(tl, br) {
          const geomsInView = this.getGeomVisiblity(tl, br);
          const set = new Set();
          geomsInView.geomItems.forEach((geomItem) => {
              set.add(geomItem);
          });
          return set;
      }
      // ///////////////////////////
      // Events
      /**
       * Calculates the event coordinates relative to the viewport.
       * There could be multiple viewports connected to the current renderer.
       *
       * @param rendererX - The rendererX value
       * @param rendererY - The rendererY value
       * @return - Returns a new Vec2.
       * @private
       */
      __getPointerPos(rendererX, rendererY) {
          return new Vec2(rendererX - this.getPosX(), rendererY - this.getPosY());
      }
      /**
       * Prepares pointer event by adding properties of the engine to it.
       *
       * @param event - The event that occurs in the canvas
       * @private
       */
      prepareUIEvent(event) {
          event.viewport = this;
      }
      /**
       * Handler of the `pointerdown` event fired when the pointer device is initially pressed.
       *
       * @param event - The DOM event produced by a pointer
       */
      onPointerDown(event) {
          this.prepareUIEvent(event);
          if (event instanceof ZeaMouseEvent) {
              event.pointerPos = this.__getPointerPos(event.rendererX, event.rendererY);
              event.pointerRay = this.calcRayFromScreenPos(event.pointerPos);
              event.intersectionData = this.getGeomDataAtPos(event.pointerPos, event.pointerRay, this.mousePointerSearchArea);
              // Cache Pointer Down for PointerClick
              this.pointerDownButton = event.button;
              this.pointerDownPos = event.pointerPos;
              this.pointerDownTime[event.button] = Date.now();
          }
          else if (event instanceof ZeaTouchEvent) {
              if (event.touches.length == 1) {
                  const touch = event.touches[0];
                  event.pointerPos = this.__getPointerPos(touch.rendererX, touch.rendererY);
                  event.pointerRay = this.calcRayFromScreenPos(event.pointerPos);
                  event.intersectionData = this.getGeomDataAtPos(event.pointerPos, event.pointerRay, this.touchPointerSearchArea);
                  // Cache Pointer Down for PointerClick
                  this.pointerDownButton = 0;
                  this.pointerDownPos = event.pointerPos;
                  this.pointerDownTime[0] = Date.now();
              }
          }
          if (event.propagating && event.getCapture()) {
              // events are now always sent to the capture item first,
              // but can continue propagating to other items if no call
              // to event.stopPropagation() was made.
              event.getCapture().onPointerDown(event);
          }
          if (event.propagating && event.intersectionData != undefined) {
              event.intersectionData.geomItem.onPointerDown(event);
          }
          if (event.propagating) {
              this.emit('pointerDown', event);
          }
          if (event.propagating && this.manipulator) {
              this.manipulator.onPointerDown(event);
          }
          // //////////////////////////////////
          // Start the long press timer
          if (this.longPressId != undefined)
              clearTimeout(this.longPressId);
          if (event instanceof ZeaMouseEvent || (event instanceof ZeaTouchEvent && event.changedTouches.length == 1)) {
              this.longPressId = setTimeout(() => {
                  this.longPressId = undefined;
                  event.propagating = true;
                  if (event.intersectionData && event.intersectionData.geomItem) {
                      event.intersectionData.geomItem.onPointerLongPress(event);
                  }
                  this.emit('pointerLongPress', event);
                  if (event.propagating && this.manipulator) {
                      this.manipulator.onPointerLongPress(event);
                  }
              }, this.longPressTime);
          }
      }
      /**
       * Causes an event to occur when a user releases a mouse button over a element.
       *
       * @param event - The event that occurs.
       */
      onPointerUp(event) {
          this.prepareUIEvent(event);
          if (event.pointerType === POINTER_TYPES.mouse) {
              const mouseEvent = event;
              mouseEvent.pointerPos = this.__getPointerPos(mouseEvent.rendererX, mouseEvent.rendererY);
              mouseEvent.pointerRay = this.calcRayFromScreenPos(mouseEvent.pointerPos);
              mouseEvent.intersectionData = this.getGeomDataAtPos(mouseEvent.pointerPos, mouseEvent.pointerRay, this.mousePointerSearchArea);
          }
          else if (event.pointerType === POINTER_TYPES.touch) {
              const touchEvent = event;
              if (touchEvent.changedTouches.length == 1) {
                  const touch = touchEvent.changedTouches[0];
                  touchEvent.pointerPos = this.__getPointerPos(touch.rendererX, touch.rendererY);
                  touchEvent.pointerRay = this.calcRayFromScreenPos(touchEvent.pointerPos);
                  touchEvent.intersectionData = this.getGeomDataAtPos(touchEvent.pointerPos, touchEvent.pointerRay, this.touchPointerSearchArea);
              }
          }
          // ///////////////////////////////////////
          // Clear Long Press
          if (this.longPressId != undefined)
              clearTimeout(this.longPressId);
          if (event.getCapture()) {
              // events are now always sent to the capture item first,
              // but can continue propagating to other items if no call
              // to event.stopPropagation() was made.
              event.getCapture().onPointerUp(event);
          }
          if (event.propagating && event.intersectionData != undefined) {
              event.intersectionData.geomItem.onPointerUp(event);
          }
          if (event.propagating) {
              this.emit('pointerUp', event);
          }
          if (event.propagating && this.manipulator) {
              this.manipulator.onPointerUp(event);
          }
          // //////////////////////////////////////
          // Detect a Pointer Click
          // Generate a pointer click if we detect a pointerDown and a pointerUp in the
          // same location.
          const button = event instanceof ZeaMouseEvent ? event.button : 0;
          const pointerUpTime = Date.now();
          if ((event instanceof ZeaMouseEvent || (event instanceof ZeaTouchEvent && event.changedTouches.length == 1)) &&
              pointerUpTime - this.pointerDownTime[button] < this.clickTime &&
              event.pointerPos.distanceTo(this.pointerDownPos) < this.pointerClickTolerance &&
              this.pointerDownButton == button) {
              const clickTime = pointerUpTime;
              event.propagating = true;
              // Emit a double click if this is a second click.
              if (button == this.prevClickButton && clickTime - this.prevClickTime < this.doubleClickTime) {
                  if (event.intersectionData && event.intersectionData.geomItem) {
                      event.intersectionData.geomItem.onPointerDoubleClick(event);
                  }
                  if (event.propagating && event.propagating) {
                      this.emit('pointerDoubleClick', event);
                  }
                  if (event.propagating && this.manipulator) {
                      this.manipulator.onPointerDoubleClick(event);
                  }
              }
              else {
                  this.prevClickButton = button;
                  this.prevClickPos = event.pointerPos;
                  this.prevClickTime = clickTime;
                  if (event.intersectionData && event.intersectionData.geomItem) {
                      event.intersectionData.geomItem.onPointerClick(event);
                  }
                  if (event.propagating) {
                      this.emit('pointerClick', event);
                  }
                  if (event.propagating && this.manipulator) {
                      this.manipulator.onPointerClick(event);
                  }
              }
          }
          // //////////////////////////////////////
      }
      /**
       * Causes an event to occur when the pointer device is moving.
       *
       * @param event - The event that occurs.
       */
      onPointerMove(event) {
          this.prepareUIEvent(event);
          if (event.pointerType === POINTER_TYPES.mouse) {
              const mouseEvent = event;
              const pointerPos = this.__getPointerPos(mouseEvent.rendererX, mouseEvent.rendererY);
              mouseEvent.pointerPos = pointerPos;
              mouseEvent.pointerRay = this.calcRayFromScreenPos(pointerPos);
          }
          else if (event.pointerType === POINTER_TYPES.touch) {
              const touchEvent = event;
              for (let index = 0; index < touchEvent.touches.length; index++) {
                  const touch = touchEvent.touches[index];
                  touch.touchPos = this.__getPointerPos(touch.rendererX, touch.rendererY);
                  touch.touchRay = this.calcRayFromScreenPos(touch.touchPos);
              }
              touchEvent.pointerPos = touchEvent.touches[0].touchPos;
              touchEvent.pointerRay = touchEvent.touches[0].touchRay;
          }
          // Clear the long press timer if the pointer moves too far.
          if (this.longPressId != undefined &&
              event.pointerPos.distanceTo(this.pointerDownPos) > this.pointerClickTolerance) {
              clearTimeout(this.longPressId);
              this.longPressId = undefined;
          }
          // Note: the Captured item might be a tool, which might not need to have
          // the geom under the pointer. e.g. the CameraManipulator during a drag.
          if (event.getCapture()) {
              // events are now always sent to the capture item first,
              // but can continue propagating to other items if no call
              // to event.stopPropagation() was made.
              event.getCapture().onPointerMove(event);
          }
          event.intersectionData = this.getGeomDataAtPos(event.pointerPos, event.pointerRay, this.mousePointerSearchArea);
          if (event.propagating && event.intersectionData) {
              if (event.intersectionData.geomItem != this.pointerOverItem) {
                  if (this.pointerOverItem) {
                      event.leftGeometry = this.pointerOverItem;
                      this.pointerOverItem.onPointerLeave(event);
                      if (event.propagating) {
                          this.emit('pointerLeaveGeom', event);
                      }
                  }
                  event.propagating = true;
                  this.pointerOverItem = event.intersectionData.geomItem;
                  this.pointerOverItem.onPointerEnter(event);
                  if (event.propagating) {
                      this.emit('pointerOverGeom', event);
                  }
              }
              event.propagating = true;
              event.intersectionData.geomItem.onPointerMove(event);
          }
          else if (event.propagating && this.pointerOverItem) {
              event.leftGeometry = this.pointerOverItem;
              this.pointerOverItem.onPointerLeave(event);
              this.pointerOverItem = null;
              this.emit('pointerLeaveGeom', event);
          }
          if (event.propagating) {
              this.emit('pointerMove', event);
          }
          if (event.propagating && this.manipulator) {
              this.manipulator.onPointerMove(event);
          }
      }
      /**
       * Causes an event to occur when the mouse pointer is moved into this viewport
       * @param event - The event that occurs.
       */
      onPointerEnter(event) {
          this.prepareUIEvent(event);
          this.emit('pointerEnter', event);
          if (event.propagating && this.manipulator && this.manipulator.onPointerEnter) {
              this.manipulator.onPointerEnter(event);
          }
      }
      /**
       * Causes an event to occur when the mouse pointer is moved out of this viewport
       * @param event - The event that occurs.
       */
      onPointerLeave(event) {
          this.prepareUIEvent(event);
          this.emit('pointerLeave', event);
          if (!event.propagating)
              return;
          if (this.manipulator && this.manipulator.onPointerLeave) {
              this.manipulator.onPointerLeave(event);
              if (!event.propagating)
                  return;
          }
      }
      /**
       * Causes an event to occur when the user is pressing a key on the keyboard.
       * @param event - The event that occurs.
       */
      onKeyDown(event) {
          this.prepareUIEvent(event);
          if (this.manipulator) {
              this.manipulator.onKeyDown(event);
              if (!event.propagating)
                  return;
          }
          this.emit('keyDown', event);
      }
      /**
       * Causes an event to occur  when the user releases a key on the keyboard.
       * @param event - The event that occurs.
       */
      onKeyUp(event) {
          this.prepareUIEvent(event);
          if (this.manipulator) {
              this.manipulator.onKeyUp(event);
              if (!event.propagating)
                  return;
          }
          this.emit('keyUp', event);
      }
      /**
       * Causes an event to occur when the mouse wheel is rolled up or down over an element.
       * @param event - The event that occurs.
       */
      onWheel(event) {
          this.prepareUIEvent(event);
          event.pointerPos = this.__getPointerPos(event.rendererX, event.rendererY);
          event.pointerRay = this.calcRayFromScreenPos(event.pointerPos);
          event.intersectionData = this.getGeomDataAtPos(event.pointerPos, event.pointerRay, this.mousePointerSearchArea);
          if (event.intersectionData != undefined) {
              event.intersectionData.geomItem.onWheel(event);
              if (!event.propagating)
                  return;
          }
          if (this.manipulator) {
              this.manipulator.onWheel(event);
              return;
          }
          this.emit('mouseWheel', event);
      }
      // Touch events
      /**
       * Causes an event to occur when the touch event gets interrupted.
       * @param event - The event that occurs.
       */
      onTouchCancel(event) {
          this.prepareUIEvent(event);
          if (event.getCapture()) {
              // events are now always sent to the capture item first,
              // but can continue propagating to other items if no call
              // to event.stopPropagation() was made.
              event.getCapture().onTouchCancel(event);
              if (!event.propagating)
                  return;
          }
          if (this.manipulator) {
              this.manipulator.onTouchCancel(event);
              if (!event.propagating)
                  return;
          }
          this.emit('touchCancel', event);
      }
      // //////////////////////////
      // Rendering
      /**
       * The bindGLViewport method.
       * @param renderstate - The object tracking the current state of the renderer
       * @private
       */
      bindGLViewport(renderstate) {
          // console.log(this.viewMatrix.toString())
          renderstate.viewXfo = this.cameraXfo;
          renderstate.viewScale = 1.0;
          renderstate.region = this.region;
          renderstate.depthRange = this.depthRange;
          renderstate.cameraMatrix = this.cameraMat;
          renderstate.viewport = this;
          const gl = this.__renderer.gl;
          renderstate.bindRendererUnifs = (unifs) => {
              const { cameraMatrix, viewMatrix, projectionMatrix, eye, isOrthographic, viewportFrustum } = unifs;
              if (cameraMatrix) {
                  gl.uniformMatrix4fv(cameraMatrix.location, false, renderstate.cameraMatrix.asArray());
              }
              if (viewMatrix) {
                  gl.uniformMatrix4fv(viewMatrix.location, false, this.viewMatrix.asArray());
              }
              if (projectionMatrix) {
                  gl.uniformMatrix4fv(projectionMatrix.location, false, this.projectionMatrix.asArray());
              }
              if (eye) {
                  // for monocular rendering, we just render viewport 0
                  gl.uniform1i(eye.location, 0);
              }
              if (isOrthographic) {
                  // Left or right eye, when rendering stereo VR.
                  gl.uniform1i(isOrthographic.location, this.camera.isOrthographic() ? 1 : 0);
              }
              if (viewportFrustum && this.viewportFrustum) {
                  // Left or right eye, when rendering stereo VR.
                  gl.uniform4f(viewportFrustum.location, this.viewportFrustum.x, this.viewportFrustum.y, this.viewportFrustum.z, this.viewportFrustum.w);
              }
          };
          renderstate.bindViewports = (unifs, draw) => draw();
      }
      /**
       * The draw method.
       */
      draw(renderstate) {
          // Turn this on to debug the geom data buffer.
          if (this.debugGeomDataBuffer) {
              this.renderGeomDataFbo();
              const gl = this.__renderer.gl;
              gl.viewport(this.region[0], this.region[1], this.region[2], this.region[3]);
              const bg = this.backgroundColorParam.value.asArray();
              gl.clearColor(bg[0], bg[1], bg[2], bg[3]);
              // Note: renderGeomDataFbo would have bound other shaders.
              // and the renderstate used above is no longer valid. Reset.
              const renderstate = new ColorRenderState(this.__renderer.gl);
              const screenQuad = this.__renderer.screenQuad;
              screenQuad.bindShader(renderstate);
              screenQuad.draw(renderstate, this.geomDataRenderTarget.textureTargets[0]);
              return;
          }
          const gl = this.__renderer.gl;
          this.bindGLViewport(renderstate);
          renderstate.pushGLStack('GLViewport.draw');
          renderstate.glDisable(gl.BLEND);
          renderstate.glEnable(gl.DEPTH_TEST);
          renderstate.glEnable(gl.CULL_FACE);
          gl.viewport(this.region[0], this.region[1], this.region[2], this.region[3]);
          const bg = this.backgroundColorParam.value.asArray();
          gl.clearColor(bg[0], bg[1], bg[2], bg[3]);
          gl.colorMask(true, true, true, true);
          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
          super.draw(renderstate);
          renderstate.popGLStack();
          // Rendering of the GeomData buffer should always occur after a regular draw,
          // as Shaders, Materials and Geometries should be bound first duriing
          // a regular draw.
          if (this.geomDataBufferInvalid && !this.geomDataBufferRendered) {
              // Initialize the GeomData buffer by renderring it once.
              this.renderGeomDataFbo();
              this.geomDataBufferRendered = true;
          }
          if (this.debugHighlightedGeomsBuffer) {
              // Note: renderGeomDataFbo would have bound other shaders.
              // and the renderstate used above is no blonger valid. Reset.
              const renderstate = new ColorRenderState(this.__renderer.gl);
              const screenQuad = this.__renderer.screenQuad;
              screenQuad.bindShader(renderstate);
              screenQuad.draw(renderstate, this.highlightedGeomsBufferFbo.textureTargets[0]);
          }
          if (this.debugOcclusionBuffer) {
              renderstate.pushGLStack('debugOcclusionBuffer');
              // @ts-ignore
              const occlusionDataBuffer = this.__renderer.glGeomItemLibrary.occlusionDataBuffer;
              const gl = this.__renderer.gl;
              renderstate.glEnable(gl.BLEND);
              renderstate.glDisable(gl.DEPTH_TEST);
              gl.blendEquation(gl.FUNC_ADD);
              gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);
              const screenQuad = this.__renderer.screenQuad;
              screenQuad.bindShader(renderstate);
              screenQuad.draw(renderstate, occlusionDataBuffer.textureTargets[0]);
              renderstate.popGLStack();
          }
          if (this.debugReductionBuffer) {
              // @ts-ignore
              const reductionDataBuffer = this.__renderer.glGeomItemLibrary.reductionDataBuffer;
              const screenQuad = this.__renderer.screenQuad;
              screenQuad.bindShader(renderstate);
              const imageInif = renderstate.unifs.image;
              reductionDataBuffer.bindColorTexture(renderstate, imageInif);
              const gl = this.__renderer.gl;
              gl.uniform1i(renderstate.unifs.isTextured.location, 1);
              gl.enable(gl.BLEND);
              gl.blendEquation(gl.FUNC_ADD);
              gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);
              screenQuad.draw(renderstate, null);
              gl.disable(gl.BLEND);
          }
      }
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */
  var now = function() {
    return root.Date.now();
  };

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /** Built-in value references. */
  var Symbol$1 = root.Symbol;

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto$1.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$1.toString;

  /** Built-in value references. */
  var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag$1),
        tag = value[symToStringTag$1];

    try {
      value[symToStringTag$1] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString$1.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }
    return result;
  }

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag && symToStringTag in Object(value))
      ? getRawTag(value)
      : objectToString(value);
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  /** `Object#toString` result references. */
  var symbolTag = '[object Symbol]';

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return typeof value == 'symbol' ||
      (isObjectLike(value) && baseGetTag(value) == symbolTag);
  }

  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject(other) ? (other + '') : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return (isBinary || reIsOctal.test(value))
      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
      : (reIsBadHex.test(value) ? NAN : +value);
  }

  /** Error message constants. */
  var FUNC_ERROR_TEXT$1 = 'Expected a function';

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max,
      nativeMin = Math.min;

  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */
  function debounce(func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$1);
    }
    wait = toNumber(wait) || 0;
    if (isObject(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function invokeFunc(time) {
      var args = lastArgs,
          thisArg = lastThis;

      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }

    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time;
      // Start the timer for the trailing edge.
      timerId = setTimeout(timerExpired, wait);
      // Invoke the leading edge.
      return leading ? invokeFunc(time) : result;
    }

    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime,
          timeWaiting = wait - timeSinceLastCall;

      return maxing
        ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
        : timeWaiting;
    }

    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime;

      // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.
      return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
        (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    }

    function timerExpired() {
      var time = now();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      // Restart the timer.
      timerId = setTimeout(timerExpired, remainingWait(time));
    }

    function trailingEdge(time) {
      timerId = undefined;

      // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = undefined;
      return result;
    }

    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }

    function flush() {
      return timerId === undefined ? result : trailingEdge(now());
    }

    function debounced() {
      var time = now(),
          isInvoking = shouldInvoke(time);

      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;

      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          // Handle invocations in a tight loop.
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  /** Error message constants. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * Creates a throttled function that only invokes `func` at most once per
   * every `wait` milliseconds. The throttled function comes with a `cancel`
   * method to cancel delayed `func` invocations and a `flush` method to
   * immediately invoke them. Provide `options` to indicate whether `func`
   * should be invoked on the leading and/or trailing edge of the `wait`
   * timeout. The `func` is invoked with the last arguments provided to the
   * throttled function. Subsequent calls to the throttled function return the
   * result of the last `func` invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the throttled function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.throttle` and `_.debounce`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to throttle.
   * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=true]
   *  Specify invoking on the leading edge of the timeout.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new throttled function.
   * @example
   *
   * // Avoid excessively updating the position while scrolling.
   * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
   *
   * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
   * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
   * jQuery(element).on('click', throttled);
   *
   * // Cancel the trailing throttled invocation.
   * jQuery(window).on('popstate', throttled.cancel);
   */
  function throttle(func, wait, options) {
    var leading = true,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    if (isObject(options)) {
      leading = 'leading' in options ? !!options.leading : leading;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    return debounce(func, wait, {
      'leading': leading,
      'maxWait': wait,
      'trailing': trailing
    });
  }

  var frag$i = "\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D image;\nuniform vec4 color;\nuniform int isTextured;\n\nvarying vec2 v_texCoord;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  if (isTextured != 0)\n    fragColor = texture2D(image, v_texCoord);\n  else \n    fragColor = color;\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n"; // eslint-disable-line

  var vert$j = "\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform vec2 pos;\nuniform vec2 size;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * abs(size) * 2.0), 0.0, 1.0);\n  if (size.x < 0.0)\n    v_texCoord.x = 1.0 - v_texCoord.x;\n  if (size.y < 0.0)\n    v_texCoord.y = 1.0 - v_texCoord.y;\n}\n"; // eslint-disable-line

  /* eslint-disable require-jsdoc */
  class ScreenQuadShader extends GLShader {
      /**
       * Create a GL shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'ScreenQuadShader');
          this.setShaderStage('VERTEX_SHADER', vert$j);
          this.setShaderStage('FRAGMENT_SHADER', frag$i);
      }
  }

  /** Class representing a GL screen quad.
   * @private
   */
  class GLScreenQuad {
      __gl;
      __pos;
      __size;
      flipY;
      __glshader;
      __quadBinding; // GeomShaderBinding | VAOGeomShaderBinding
      ready;
      /**
       * Create a GL screen quad.
       * @param gl - The webgl rendering context.
       * @param directives - GLSL shader directives
       */
      constructor(gl, directives) {
          this.__gl = gl;
          this.__pos = [0.0, 0.0];
          this.__size = [1.0, 1.0];
          this.flipY = true;
          this.__glshader = new ScreenQuadShader(gl);
          if (!gl.__quadVertexIdsBuffer)
              gl.setupInstancedQuad();
          const shaderComp = this.__glshader.compileForTarget('GLScreenQuad', directives);
          this.__quadBinding = generateShaderGeomBinding(this.__gl, shaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);
          this.ready = true;
      }
      /**
       * The bind method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param textureOrColor - The texture or color value.
       * @param pos - The pos value.
       * @param size - The size value.
       */
      bind(renderstate, textureOrColor, pos, size) {
          const unifs = renderstate.unifs;
          const gl = this.__gl;
          if (textureOrColor instanceof GLTexture2D) {
              gl.uniform1i(unifs.isTextured.location, 1);
              textureOrColor.bindToUniform(renderstate, renderstate.unifs.image);
          }
          else if (textureOrColor instanceof WebGLTexture) {
              gl.uniform1i(unifs.isTextured.location, 1);
              const unit = renderstate.boundTextures++;
              gl.activeTexture(gl.TEXTURE0 + unit);
              gl.bindTexture(gl.TEXTURE_2D, textureOrColor);
              gl.uniform1i(unifs.image.location, unit);
          }
          else if (textureOrColor && textureOrColor instanceof Color) {
              gl.uniform1i(unifs.isTextured.location, 0);
              gl.uniform4fv(unifs.color.location, textureOrColor.asArray());
          }
          {
              const unif = unifs.pos;
              if (unif) {
                  let list = pos ? (pos instanceof Vec2 ? pos.asArray() : pos) : this.__pos;
                  gl.uniform2fv(unif.location, list);
              }
          }
          {
              const unif = unifs.size;
              if (unif) {
                  let list = size ? (size instanceof Vec2 ? size.asArray() : size) : this.__size;
                  gl.uniform2fv(unif.location, list);
              }
          }
          this.__quadBinding.bind(renderstate);
      }
      /**
       * The bindShader method.
       * @param renderstate - The object tracking the current state of the renderer
       * @return - The return value.
       */
      bindShader(renderstate) {
          return this.__glshader.bind(renderstate, 'GLScreenQuad');
      }
      /**
       * The draw method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param textureOrColor - The texture or color value.
       * @param pos - The pos value.
       * @param size - The size value.
       */
      draw(renderstate, textureOrColor, pos, size) {
          this.bind(renderstate, textureOrColor, pos, size);
          const gl = this.__gl;
          gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);
      }
  }

  class ParamUniformBinding extends BaseClass {
      unif;
      dirty = false;
      constructor(unif) {
          super();
          this.unif = unif;
      }
      /**
       * The unbind method.
       */
      bind(renderstate) { }
      /**
       * The unbind method.
       */
      unbind(renderstate) { }
      /**
       * The destroy method.
       */
      destroy() { }
  }
  class Sampler2DBinding extends ParamUniformBinding {
      boundImage;
      textureType;
      textureTypeUnif;
      dirty = false;
      param;
      texBinding;
      gltexture = null;
      constructor(gl, glMaterial, param, textureUnif, unifs) {
          super(textureUnif);
          const name = param.getName();
          this.param = param;
          // this.textureUnif = textureUnif
          this.textureTypeUnif = unifs[name + 'Type'];
          const genGLTex = (image) => {
              let gltexture = GLTexture2D.getCachedGLTexture2D(image);
              const textureType = 1;
              if (!gltexture) {
                  if (image.type === 'HDR') {
                      gltexture = new GLHDRImage(gl, image);
                  }
                  else {
                      gltexture = new GLTexture2D(gl, image);
                  }
                  GLTexture2D.setCachedGLTexture2D(image, gltexture);
              }
              this.texBinding = gltexture.preBind(this.unif, unifs);
              gltexture.on('updated', () => {
                  glMaterial.emit('updated');
              });
              this.gltexture = gltexture;
              this.gltexture.addRef(this);
              this.textureType = textureType;
              glMaterial.emit('updated');
          };
          let imageLoadedId;
          const connectImage = (image) => {
              if (!image.isLoaded()) {
                  imageLoadedId = image.on('loaded', () => {
                      genGLTex(this.boundImage);
                  });
              }
              else {
                  genGLTex(image);
              }
              this.boundImage = image;
          };
          const disconnectImage = () => {
              const gltexture = GLTexture2D.getCachedGLTexture2D(this.boundImage);
              gltexture.removeRef(this);
              this.texBinding = null;
              this.gltexture = null;
              this.textureType = -1;
              if (imageLoadedId) {
                  this.boundImage.off('loaded', imageLoadedId);
              }
              this.boundImage = null;
              imageLoadedId = null;
              glMaterial.emit('updated');
          };
          if (param.getImage())
              connectImage(param.getImage());
          param.on('textureConnected', () => {
              connectImage(param.getImage());
          });
          param.on('textureDisconnected', () => {
              disconnectImage();
          });
          this.dirty = true;
          param.on('valueChanged', () => {
              this.dirty = true;
              glMaterial.emit('updated');
          });
      }
      /**
       * The unbind method.
       */
      bind(renderstate) {
          if (this.gltexture)
              this.gltexture.bindToUniform(renderstate, this.unif, this.texBinding);
      }
  }
  /** Class representing simple uniform binding.
   * @private
   */
  class SimpleUniformBinding extends ParamUniformBinding {
      param;
      textureUnif;
      textureTypeUnif;
      texBinding;
      gltexture = null;
      textureType = -1;
      val;
      uniform1i;
      uniformXX;
      update;
      /**
       * Create simple uniform binding.
       * @param gl - The webgl rendering context.
       * @param glMaterial - The glMaterial value.
       * @param param - The param value.
       * @param unif - The WebGL uniform
       * @param unifs - The dictionary of WebGL uniforms.
       */
      constructor(gl, glMaterial, param, unif, unifs) {
          super(unif);
          const name = param.getName();
          this.param = param;
          this.unif = unif;
          this.textureUnif = unifs[name + 'Tex'];
          this.textureTypeUnif = unifs[name + 'TexType'];
          this.uniform1i = gl.uniform1i.bind(gl);
          switch (this.unif.glslType) {
              case 'bool':
                  // gl.uniform1ui(unif.location, value);// WebGL 2
                  this.uniformXX = gl.uniform1i.bind(gl);
                  break;
              case 'uint':
                  if (gl.name == 'webgl2')
                      this.uniformXX = gl.uniform1ui.bind(gl);
                  else
                      this.uniformXX = gl.uniform1i.bind(gl);
                  break;
              case 'int':
                  this.uniformXX = gl.uniform1i.bind(gl);
                  break;
              case 'float':
                  this.uniformXX = gl.uniform1f.bind(gl);
                  break;
          }
          this.bind = this.bindValue;
          const genGLTex = (image) => {
              let gltexture = GLTexture2D.getCachedGLTexture2D(image);
              const textureType = 1;
              if (!gltexture) {
                  if (image.type === 'HDR') {
                      gltexture = new GLHDRImage(gl, image);
                  }
                  else {
                      gltexture = new GLTexture2D(gl, image);
                  }
                  GLTexture2D.setCachedGLTexture2D(image, gltexture);
              }
              this.texBinding = gltexture.preBind(this.textureUnif, unifs);
              gltexture.on('updated', () => {
                  glMaterial.emit('updated');
              });
              this.gltexture = gltexture;
              this.gltexture.addRef(this);
              this.textureType = textureType;
              this.bind = this.bindTexture;
              glMaterial.emit('updated');
          };
          let boundImage;
          let imageLoadedId;
          this.update = () => {
              try {
                  // Sometimes the value of a color param is an image.
                  if (boundImage) {
                  }
                  else {
                      if (typeof param.value == 'boolean') {
                          this.val = param.value ? 1 : 0;
                      }
                      else
                          this.val = param.value;
                  }
              }
              catch (e) { }
              glMaterial.emit('updated');
          };
          /**
           * The update method.
           */
          if (this.textureUnif && param instanceof MaterialFloatParam) {
              const connectImage = (image) => {
                  if (!image.isLoaded()) {
                      imageLoadedId = image.on('loaded', () => {
                          genGLTex(boundImage);
                      });
                  }
                  else {
                      genGLTex(image);
                  }
                  boundImage = image;
              };
              const disconnectImage = () => {
                  const gltexture = GLTexture2D.getCachedGLTexture2D(boundImage);
                  gltexture.removeRef(this);
                  this.texBinding = null;
                  this.gltexture = null;
                  this.textureType = -1;
                  this.bind = this.bindValue;
                  if (imageLoadedId) {
                      boundImage.off('loaded', imageLoadedId);
                  }
                  boundImage = null;
                  imageLoadedId = null;
                  glMaterial.emit('updated');
              };
              if (param.getImage())
                  connectImage(param.getImage());
              param.on('textureConnected', () => {
                  connectImage(param.getImage());
              });
              param.on('textureDisconnected', () => {
                  disconnectImage();
              });
          }
          this.dirty = true;
          param.on('valueChanged', () => {
              this.dirty = true;
              glMaterial.emit('updated');
          });
      }
      /**
       * The bindValue method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      bindValue(renderstate) {
          if (this.dirty) {
              this.update();
              this.dirty = false;
          }
          if (this.unif)
              this.uniformXX(this.unif.location, this.val);
          if (this.textureTypeUnif)
              this.uniform1i(this.textureTypeUnif.location, 0);
      }
      /**
       * The bindTexture method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      bindTexture(renderstate) {
          if (this.dirty) {
              this.update();
              this.dirty = false;
          }
          this.gltexture.bindToUniform(renderstate, this.textureUnif, this.texBinding);
      }
  }
  /** Class representing complex uniform binding.
   * @private
   */
  class ComplexUniformBinding extends ParamUniformBinding {
      param;
      values;
      uniformXX;
      /**
       * Create complex uniform binding.
       * @param gl - The webgl rendering context.
       * @param glMaterial - The glMaterial value.
       * @param param - The param value.
       * @param unif - The WebGL uniform
       */
      constructor(gl, glMaterial, param, unif) {
          super(unif);
          this.param = param;
          switch (this.unif.glslType) {
              case 'vec2':
                  this.uniformXX = gl.uniform2fv.bind(gl);
                  break;
              case 'vec3':
                  this.uniformXX = gl.uniform3fv.bind(gl);
                  break;
              case 'vec4':
                  this.uniformXX = gl.uniform4fv.bind(gl);
                  break;
          }
          this.dirty = true;
          param.on('valueChanged', () => {
              this.dirty = true;
              glMaterial.emit('updated');
          });
      }
      /**
       * The bind method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      bind(renderstate) {
          if (this.dirty) {
              this.values = this.param.value.asArray();
              this.dirty = false;
          }
          this.uniformXX(this.unif.location, this.values);
      }
      /**
       * The unbind method.
       */
      unbind() { }
      /**
       * The destroy method.
       */
      destroy() { }
  }
  /** Class representing material uniform binding.
   * @private
   */
  class MatrixUniformBinding extends ParamUniformBinding {
      param;
      uniformMatrixXXX;
      values = [];
      /**
       * Create material uniform binding.
       * @param gl - The webgl rendering context.
       * @param glMaterial - The glMaterial value.
       * @param param - The param value.
       * @param unif - The WebGL uniform
       */
      constructor(gl, glMaterial, param, unif) {
          super(unif);
          this.param = param;
          switch (this.unif.glslType) {
              case 'mat3':
                  this.uniformMatrixXXX = gl.uniformMatrix3fv.bind(gl);
                  break;
              case 'mat4':
                  this.uniformMatrixXXX = gl.uniformMatrix4fv.bind(gl);
                  break;
          }
          this.dirty = true;
          param.on('valueChanged', () => {
              this.dirty = true;
              glMaterial.emit('updated');
          });
      }
      /**
       * The bind method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      bind(renderstate) {
          if (this.dirty) {
              this.values = this.param.value.asArray();
              this.dirty = false;
          }
          this.uniformMatrixXXX(this.unif.location, false, this.values);
      }
      /**
       * The unbind method.
       */
      unbind() { }
      /**
       * The destroy method.
       */
      destroy() { }
  }
  /** Class representing color uniform binding.
   * @private
   */
  class ColorUniformBinding extends ParamUniformBinding {
      param;
      textureUnif;
      textureTypeUnif;
      values = [];
      gltexture;
      textureType;
      texBinding;
      uniform1i;
      uniform4fv;
      update;
      /**
       * Create color uniform binding.
       * @param gl - The webgl rendering context.
       * @param glMaterial - The glMaterial value.
       * @param param - The param value.
       * @param unif - The WebGL uniform
       * @param unifs - The dictionary of WebGL uniforms.
       */
      constructor(gl, glMaterial, param, unif, unifs) {
          super(unif);
          const name = param.getName();
          this.param = param;
          this.textureUnif = unifs[name + 'Tex'];
          this.textureTypeUnif = unifs[name + 'TexType'];
          this.values = [0, 0, 0, 0];
          this.bind = this.bindValue;
          let boundImage;
          let imageLoadedId;
          this.update = () => {
              try {
                  // Sometimes the value of a color param is an image.
                  if (boundImage) {
                  }
                  else if (this.unif) {
                      if (param instanceof MaterialColorParam && param.colorSpace == exports.ColorSpace.Gamma) {
                          this.values = param.value.toLinear().asArray();
                      }
                      else {
                          this.values = param.value.asArray();
                      }
                  }
              }
              catch (e) { }
              glMaterial.emit('updated');
          };
          /**
           * The update method.
           */
          if (this.textureUnif && param instanceof MaterialColorParam) {
              const genGLTex = (image) => {
                  boundImage = image;
                  let gltexture = GLTexture2D.getCachedGLTexture2D(image);
                  const textureType = 1;
                  if (!gltexture) {
                      if (image.type === 'FLOAT') {
                          gltexture = new GLHDRImage(gl, image);
                      }
                      else {
                          gltexture = new GLTexture2D(gl, image);
                      }
                      GLTexture2D.setCachedGLTexture2D(image, gltexture);
                  }
                  this.texBinding = gltexture.preBind(this.textureUnif, unifs);
                  gltexture.on('updated', () => {
                      glMaterial.emit('updated');
                  });
                  this.gltexture = gltexture;
                  this.gltexture.addRef(this);
                  this.textureType = textureType;
                  this.bind = this.bindTexture;
                  glMaterial.emit('updated');
              };
              const connectImage = (image) => {
                  if (!image.isLoaded()) {
                      imageLoadedId = image.once('loaded', () => {
                          genGLTex(image);
                      });
                  }
                  else {
                      genGLTex(image);
                  }
              };
              const disconnectImage = () => {
                  this.gltexture.removeRef(this);
                  this.gltexture = null;
                  this.texBinding = null;
                  this.textureType = null;
                  if (imageLoadedId) {
                      boundImage.off('loaded', imageLoadedId);
                  }
                  this.bind = this.bindValue;
                  boundImage = null;
                  imageLoadedId = null;
                  glMaterial.emit('updated');
              };
              if (param.getImage())
                  connectImage(param.getImage());
              param.on('textureConnected', () => {
                  connectImage(param.getImage());
              });
              param.on('textureDisconnected', () => {
                  disconnectImage();
              });
          }
          this.dirty = true;
          param.on('valueChanged', () => {
              this.dirty = true;
          });
          this.uniform1i = gl.uniform1i.bind(gl);
          this.uniform4fv = gl.uniform4fv.bind(gl);
      }
      /**
       * The bindValue method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      bindValue(renderstate) {
          if (!this.unif)
              return; // Note: Normals parms have no unif and can only be bound to a texture.
          if (this.dirty) {
              this.update();
              this.dirty = false;
          }
          if (this.unif)
              this.uniform4fv(this.unif.location, this.values);
          if (this.textureTypeUnif)
              this.uniform1i(this.textureTypeUnif.location, 0);
      }
      /**
       * The bindTexture method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      bindTexture(renderstate) {
          if (this.dirty) {
              this.update();
              this.dirty = false;
          }
          this.gltexture.bindToUniform(renderstate, this.textureUnif, this.texBinding);
      }
  }
  /** Class representing material shader binding.
   * @private
   */
  class MaterialShaderBinding {
      uniformBindings = [];
      /**
       * Create material shader binding.
       * @param gl - The webgl rendering context.
       * @param glMaterial - The glMaterial value.
       * @param unifs - The dictionary of WebGL uniforms.
       * @param warnMissingUnifs - The warnMissingUnifs value.
       */
      constructor(gl, glMaterial, unifs, warnMissingUnifs) {
          const bindParam = (param) => {
              const name = param.getName();
              const unif = unifs[name];
              if (unif) {
                  // Note:
                  switch (unif.glslType) {
                      case 'bool':
                      case 'uint':
                      case 'int':
                      case 'float':
                          this.uniformBindings.push(new SimpleUniformBinding(gl, glMaterial, param, unif, unifs));
                          break;
                      case 'vec2':
                      case 'vec3':
                      case 'vec4':
                          this.uniformBindings.push(new ComplexUniformBinding(gl, glMaterial, param, unif));
                          break;
                      case 'color':
                          this.uniformBindings.push(new ColorUniformBinding(gl, glMaterial, param, unif, unifs));
                          break;
                      case 'mat4':
                          this.uniformBindings.push(new MatrixUniformBinding(gl, glMaterial, param, unif));
                          break;
                      default:
                          console.warn('Param :' + name + ' has unhandled data type:' + unif.glslType);
                          return;
                  }
              }
              else {
                  const textureUnif = unifs[name + 'Tex'];
                  if (textureUnif &&
                      textureUnif.glslType == 'sampler2D' &&
                      (param instanceof MaterialColorParam || param instanceof MaterialFloatParam) &&
                      param.getImage()) {
                      if (textureUnif && textureUnif.glslType == 'sampler2D') {
                          this.uniformBindings.push(new Sampler2DBinding(gl, glMaterial, param, textureUnif, unifs));
                      }
                  }
              }
          };
          const params = glMaterial.material.getParameters();
          for (const param of params) {
              bindParam(param);
          }
      }
      /**
       * The bind method.
       * @param renderstate - The object tracking the current state of the renderer
       * @return - The return value.
       */
      bind(renderstate) {
          for (const uniformBinding of this.uniformBindings) {
              uniformBinding.bind(renderstate);
          }
          return true;
      }
      /**
       * The unbind method.
       */
      unbind(renderstate) {
          for (const uniformBinding of this.uniformBindings) {
              uniformBinding.unbind(renderstate);
          }
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          for (const uniformBinding of this.uniformBindings) {
              uniformBinding.destroy();
          }
      }
  }

  /** Class representing a GL material.
   * @extends EventEmitter
   * @private
   */
  class GLMaterial extends EventEmitter {
      gl;
      material;
      glShader;
      shaderBindings;
      boundTexturesBeforeMaterial;
      /**
       * Create a GL material.
       * @param gl - The webgl rendering context.
       * @param material - The material value.
       * @param glShader - The glShader value.
       */
      constructor(gl, material, glShader) {
          super();
          this.gl = gl;
          this.material = material;
          this.glShader = glShader;
          this.shaderBindings = {};
          material.on('parameterValueChanged', () => this.emit('updated'));
      }
      /**
       * The bind method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param warnMissingUnifs - The renderstate value.
       */
      bind(renderstate, warnMissingUnifs) {
          this.boundTexturesBeforeMaterial = renderstate.boundTextures;
          let shaderBinding = this.shaderBindings[renderstate.shaderkey];
          if (!shaderBinding) {
              const gl = this.gl;
              shaderBinding = new MaterialShaderBinding(gl, this, renderstate.unifs, warnMissingUnifs);
              this.shaderBindings[renderstate.shaderkey] = shaderBinding;
          }
          shaderBinding.bind(renderstate);
      }
      /**
       * The unbind method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      unbind(renderstate) {
          // Enable texture units to be re-used by resetting the count back
          // to what it was.
          // Note: we don't need to unbind each texture, as re-binding a new material
          // will overwrite the bindings made by this material.
          renderstate.boundTextures = this.boundTexturesBeforeMaterial;
      }
  }

  /** Class representing a GL CAD material library.
   * @ignore
   */
  class GLMaterialLibrary extends EventEmitter {
      renderer;
      materials = [];
      materialBindings = new Map();
      freeIndices = [];
      dirtyIndices = new Set();
      materialsAllocator = new Allocator1D();
      materialsTexture;
      /**
       * Create a GL CAD material library.
       * @param renderer - The renderer object
       */
      constructor(renderer) {
          super();
          this.renderer = renderer;
          this.materialsAllocator.on('dataReallocated', (event) => {
              // during allocation, a defragment might occur, which means
              // we need to re-upload some of our data.
              const id = event.id;
              this.dirtyIndices.add(id);
          });
      }
      /**
       * The addMaterial method.
       * @param material - The material object.
       * @return - The index of GLMaterial
       */
      addMaterial(material) {
          const binding = this.materialBindings.get(material);
          if (binding != undefined) {
              // Increment the ref count for the Material
              binding.refCount++;
              return binding.index;
          }
          const index = this.freeIndices.length > 0 ? this.freeIndices.pop() : this.materials.length;
          this.materials[index] = material;
          const listenerIDs = {};
          const matData = material.getShaderClass().getPackedMaterialData(material);
          this.materialsAllocator.allocate(index, matData.length / 4);
          const parameterValueChanged = () => {
              this.dirtyIndices.add(index);
              this.emit('updated');
          };
          listenerIDs['parameterValueChanged'] = material.on('parameterValueChanged', parameterValueChanged);
          this.materialBindings.set(material, { index, refCount: 1, listenerIDs });
          this.dirtyIndices.add(index);
          return index;
      }
      /**
       * Given a material, generates a GLMaterial that manages the GPU state for the material.
       * @param material - The material value.
       * @return - The constructed GLMaterial.
       */
      getGLMaterial(material) {
          this.addMaterial(material);
          const binding = this.materialBindings.get(material);
          if (binding.glMaterial)
              return binding.glMaterial;
          const glShader = this.renderer.getOrCreateShader(material.getShaderName());
          const gl = this.renderer.gl;
          const glMaterial = new GLMaterial(gl, material, glShader);
          binding.listenerIDs['updated'] = glMaterial.on('updated', () => {
              this.renderer.requestRedraw();
          });
          binding.glMaterial = glMaterial;
          return glMaterial;
      }
      getMaterialAllocation(material) {
          const binding = this.materialBindings.get(material);
          if (binding != undefined) {
              return this.materialsAllocator.getAllocation(binding.index);
          }
          return undefined;
      }
      /**
       * The removeMaterial method.
       * @param material - The material object.
       */
      removeMaterial(material) {
          const binding = this.materialBindings.get(material);
          binding.refCount--;
          // If there are still refs to this geom. (GeomItems that use it)
          // then we keep it in the renderer.
          if (binding.refCount > 0) {
              return;
          }
          this.freeIndices.push(binding.index);
          this.materialsAllocator.deallocate(binding.index);
          this.materials[binding.index] = null;
          this.materialBindings.delete(material);
          if (binding.listenerIDs['updated'] && binding.glMaterial) {
              binding.glMaterial.off('updated', binding.listenerIDs['updated']);
          }
          if (binding.listenerIDs['parameterValueChanged']) {
              material.off('parameterValueChanged', binding.listenerIDs['parameterValueChanged']);
          }
          if (this.dirtyIndices.has(binding.index)) {
              this.dirtyIndices.delete(binding.index);
          }
      }
      /**
       * The uploadMaterials method.
       * @param renderstate - The render state for the current draw traversal
       */
      uploadMaterials(renderstate) {
          const gl = this.renderer.__gl;
          const materialsTextureSize = MathFunctions.nextPow2(Math.ceil(Math.sqrt(this.materialsAllocator.reservedSpace)));
          const unit = renderstate.boundTextures++;
          gl.activeTexture(gl.TEXTURE0 + unit);
          if (!this.materialsTexture) {
              this.materialsTexture = new GLTexture2D(this.renderer.__gl, {
                  format: 'RGBA',
                  type: 'FLOAT',
                  width: materialsTextureSize,
                  height: materialsTextureSize,
                  filter: 'NEAREST',
                  wrap: 'CLAMP_TO_EDGE',
                  mipMapped: false,
              });
              this.materialsTexture.clear();
          }
          else if (this.materialsTexture.width < materialsTextureSize) {
              this.materialsTexture.resize(materialsTextureSize, materialsTextureSize);
              for (let i = 0; i < this.materials.length; i++) {
                  if (this.materialsAllocator.getAllocation(i)) {
                      this.dirtyIndices.add(i);
                  }
              }
          }
          const tex = this.materialsTexture;
          const texWidth = this.materialsTexture.width;
          gl.bindTexture(gl.TEXTURE_2D, tex.glTex);
          this.dirtyIndices.forEach((index) => {
              const allocation = this.materialsAllocator.getAllocation(index);
              const material = this.materials[index];
              const matData = material.getShaderClass().getPackedMaterialData(material);
              const level = 0;
              const xoffset = allocation.start % texWidth;
              const height = 1;
              const rows = Math.ceil((xoffset + allocation.size) / texWidth);
              let consumed = 0;
              let remaining = allocation.size;
              let rowStart = xoffset;
              for (let i = 0; i < rows; i++) {
                  let width;
                  if (rowStart + remaining > texWidth) {
                      width = texWidth - rowStart;
                      rowStart = 0;
                  }
                  else {
                      width = remaining;
                  }
                  const x = (allocation.start + consumed) % texWidth;
                  const y = Math.floor((allocation.start + consumed) / texWidth);
                  const data = matData.subarray(consumed * 4, (consumed + width) * 4);
                  gl.texSubImage2D(gl.TEXTURE_2D, level, x, y, width, height, tex.getFormat(), tex.getType(), data);
                  consumed += width;
                  remaining -= width;
              }
          });
          this.dirtyIndices = new Set();
          gl.bindTexture(gl.TEXTURE_2D, null);
          renderstate.boundTextures--;
      }
      /**
       * Updates the GPU state if any update is needed.
       * @param renderstate - The object tracking the current state of the renderer
       */
      update(renderstate) {
          if (this.dirtyIndices.size > 0)
              this.uploadMaterials(renderstate);
      }
      /**
       * The bind method.
       * @param renderstate - The renderstate param.
       * @return - The return value.
       */
      bind(renderstate) {
          if (this.dirtyIndices.size > 0)
              this.uploadMaterials(renderstate);
          if (!this.materialsTexture)
              return false;
          const { materialsTexture, materialsTextureSize } = renderstate.unifs;
          if (materialsTexture) {
              this.materialsTexture.bindToUniform(renderstate, materialsTexture);
              if (materialsTextureSize) {
                  const gl = this.renderer.gl;
                  gl.uniform2i(materialsTextureSize.location, this.materialsTexture.width, this.materialsTexture.height);
              }
          }
          return true;
      }
  }

  /** Class representing GL points.
   * @extends GLGeom
   * @private
   */
  class GLPoints extends GLGeom {
      /**
       * Create a GL point.
       * @param gl - The webgl rendering context.
       * @param points - The points value.
       */
      constructor(gl, points) {
          super(gl, points);
      }
      /**
       * The draw method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          const gl = this.__gl;
          // Support drawing custom geometry per point.
          // e.g. the arrow shader.
          if (renderstate.shaderInstancedGeom) {
              gl.drawElementsInstanced(gl.TRIANGLES, renderstate.shaderInstancedGeom.numTriIndices, renderstate.shaderInstancedGeom.indexDataType, 0, this.numVertices);
          }
          else {
              gl.drawArrays(gl.POINTS, 0, this.numVertices);
          }
      }
      /**
       * The drawInstanced method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param instanceCount - The instanceCount value.
       */
      drawInstanced(renderstate, instanceCount) {
          const gl = this.__gl;
          gl.drawArraysInstanced(this.__gl.POINTS, 0, this.numVertices, instanceCount);
      }
  }

  const convertValue = (srcData, index) => {
      if (srcData instanceof Int16Array || srcData instanceof Uint16Array) {
          return MathFunctions.decode16BitFloat(srcData[index]);
      }
      else if (srcData instanceof Int16Array || srcData instanceof Uint16Array) {
          return MathFunctions.decode16BitFloat(srcData[index]);
      }
      return srcData[index];
  };
  const convertBuffer = (gl, attrData, attrDesc) => {
      const srcData = attrData.values;
      const tgtLength = attrData.count * attrDesc.dimension;
      // console.log('convertBuffer:', attrDesc.name, srcData)
      switch (attrDesc.dataType) {
          case gl.BYTE:
              if (srcData instanceof Int8Array)
                  return srcData;
              const tgt = new Int8Array(tgtLength);
              if (srcData instanceof Float32Array) {
                  srcData.forEach((value, i) => {
                      const tgtIdx = (i % attrData.dimension) + Math.floor(i / attrData.dimension) * attrDesc.dimension;
                      tgt[tgtIdx] = MathFunctions.remap(value, -1, 1, -127, 127);
                  });
              }
              return tgt;
          case gl.UNSIGNED_BYTE: {
              if (srcData instanceof Uint8Array)
                  return srcData;
              const tgt = new Uint8Array(tgtLength);
              if (srcData instanceof Float32Array) {
                  srcData.forEach((value, i) => {
                      const tgtIdx = (i % attrData.dimension) + Math.floor(i / attrData.dimension) * attrDesc.dimension;
                      tgt[tgtIdx] = MathFunctions.remap(value, 0, 1, 0, 255);
                  });
              }
              return tgt;
          }
          case gl.UNSIGNED_SHORT: {
              if (srcData instanceof Uint16Array)
                  return srcData;
              const tgt = new Uint16Array(tgtLength);
              for (let i = 0; i < attrData.count; i++) {
                  tgt.set(srcData.subarray(i * attrData.dimension, (i + 1) * attrData.dimension), i * attrDesc.dimension);
              }
              return tgt;
          }
          case gl.SHORT: {
              if (srcData instanceof Int16Array)
                  return srcData;
              const tgt = new Int16Array(tgtLength);
              for (let i = 0; i < attrData.count; i++) {
                  tgt.set(srcData.subarray(i * attrData.dimension, (i + 1) * attrData.dimension), i * attrDesc.dimension);
              }
              return tgt;
          }
          case gl.HALF_FLOAT: {
              if (srcData instanceof Uint16Array)
                  return srcData;
              if (srcData instanceof Float32Array) {
                  return MathFunctions.convertFloat32ArrayToUInt16Array(srcData);
              }
              throw 'Unable to convert from src data array';
          }
          case gl.FLOAT: {
              if (srcData instanceof Float32Array)
                  return srcData;
              const tgt = new Float32Array(tgtLength);
              if (srcData instanceof Uint16Array) {
                  for (let i = 0; i < srcData.length; i++) {
                      tgt[i] = MathFunctions.decode16BitFloat(srcData[i]);
                  }
              }
              return tgt;
          }
          default:
              throw `Unhandled attribute type: ${attrDesc.dataType} for ${srcData.constructor.name}`;
      }
  };

  /** Class representing GL lines.
   * @extends GLGeom
   * @private
   */
  class GLLines extends GLGeom {
      numSegIndices = -1;
      fatBuffersNeedUpload = true;
      numFatVertices = -1;
      fatBuffers = null;
      indexDataType = 0;
      /**
       * Create a GL line.
       * @param gl - The webgl rendering context.
       * @param lines - The geom value.
       */
      constructor(gl, lines) {
          super(gl, lines);
      }
      /**
       * The dirtyBuffers method.
       * @param opts - options passed when geomDataChanged is emitted. (Currently ony used by the FreehandLines tool)
       */
      dirtyBuffers(opts) {
          super.dirtyBuffers(opts);
          this.fatBuffersNeedUpload = true;
          this.emit('updated');
      }
      /**
       * The clearBuffers method.
       */
      clearBuffers() {
          const gl = this.__gl;
          gl.deleteBuffer(this.indexBuffer);
          this.indexBuffer = null;
          if (this.fatBuffers && this.fatBuffers.positionsTexture) {
              if (this.fatBuffers.positionsTexture) {
                  this.fatBuffers.positionsTexture.destroy();
                  this.fatBuffers.positionsTexture = null;
              }
              const segmentIndices = this.fatBuffers.glattrbuffers.segmentIndices;
              if (segmentIndices.buffer) {
                  gl.deleteBuffer(segmentIndices.buffer);
                  this.fatBuffers.glattrbuffers.segmentIndices = null;
              }
          }
          super.clearBuffers();
      }
      /**
       * The genFatBuffers method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      genFatBuffers(renderstate) {
          // if (!(this.geom instanceof Lines)
          const gl = this.__gl;
          const geomBuffers = this.geom.genBuffers();
          const indices = geomBuffers.indices;
          const numVertsChanged = geomBuffers.numVertices != this.numFatVertices;
          if (!gl.__quadVertexIdsBuffer) {
              gl.setupInstancedQuad();
          }
          if (!this.fatBuffers) {
              this.fatBuffers = { drawCount: 0, positionsTexture: null, glattrbuffers: {} };
              this.fatBuffers.glattrbuffers.vertexIDs = gl.__quadattrbuffers.vertexIDs;
          }
          const unit = renderstate.boundTextures++;
          gl.activeTexture(this.__gl.TEXTURE0 + unit);
          this.fatBuffers.drawCount = indices.length / 2;
          const positions = geomBuffers.attrBuffers.positions;
          const lineThicknessAttr = geomBuffers.attrBuffers.lineThickness;
          const stride = 4; // The number of floats per draw item.
          const dataArray = new Float32Array(positions.count * stride);
          for (let i = 0; i < positions.count; i++) {
              dataArray[i * stride + 0] = convertValue(positions.values, i * 3 + 0);
              dataArray[i * stride + 1] = convertValue(positions.values, i * 3 + 1);
              dataArray[i * stride + 2] = convertValue(positions.values, i * 3 + 2);
              // The thickness of the line.
              if (lineThicknessAttr)
                  dataArray[i * stride + 3] = convertValue(lineThicknessAttr.values, i);
              else
                  dataArray[i * stride + 3] = 1.0;
          }
          if (numVertsChanged && this.fatBuffers.positionsTexture) {
              this.fatBuffers.positionsTexture.destroy();
              this.fatBuffers.positionsTexture = null;
          }
          if (!this.fatBuffers.positionsTexture) {
              this.fatBuffers.positionsTexture = new GLTexture2D(this.__gl, {
                  format: 'RGBA',
                  type: 'FLOAT',
                  width: positions.count,
                  /* each pixel has 4 floats*/
                  height: 1,
                  filter: 'NEAREST',
                  wrap: 'CLAMP_TO_EDGE',
                  data: dataArray,
                  mipMapped: false,
              });
          }
          else {
              this.fatBuffers.positionsTexture.bufferData(dataArray, positions.count, 1);
          }
          const makeIndices = () => {
              const indexArray = new Float32Array(indices.length);
              for (let i = 0; i < indices.length; i++) {
                  let seqentialIndex;
                  if (i % 2 == 0) {
                      seqentialIndex = i > 0 ? indices[i] == indices[i - 1] : indices[i] == indices[indices.length - 1];
                  }
                  else {
                      seqentialIndex = i < indices.length - 1 ? indices[i] == indices[i + 1] : indices[i] == indices[0];
                  }
                  // encode the flag into the indices values.
                  // this flag is decoded in GLSL.
                  indexArray[i] = (seqentialIndex ? 1 : 0) + indices[i] * 2;
              }
              return indexArray;
          };
          if (!this.fatBuffers.glattrbuffers.segmentIndices) {
              const indexBuffer = gl.createBuffer();
              gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);
              gl.bufferData(gl.ARRAY_BUFFER, makeIndices(), gl.STATIC_DRAW);
              this.fatBuffers.glattrbuffers.segmentIndices = {
                  dataType: gl.FLOAT,
                  name: 'segmentIndices',
                  dimension: 2,
                  elementSize: 4,
                  normalized: false,
                  shared: false,
                  numValues: indices.length,
                  buffer: indexBuffer,
              };
          }
          else {
              if (!this.genBufferOpts || (this.genBufferOpts && this.genBufferOpts.topologyChanged)) {
                  gl.bindBuffer(gl.ARRAY_BUFFER, this.fatBuffers.glattrbuffers.segmentIndices.buffer);
                  gl.bufferData(gl.ARRAY_BUFFER, makeIndices(), gl.STATIC_DRAW);
              }
          }
          gl.bindTexture(gl.TEXTURE_2D, null);
          renderstate.boundTextures--;
          this.numSegIndices = indices.length;
          this.numFatVertices = geomBuffers.numVertices;
          this.fatBuffersNeedUpload = false;
      }
      /**
       * The genBuffers method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      genBuffers(renderstate) {
          super.genBuffers(renderstate);
          const gl = this.__gl;
          const geomBuffers = this.geom.genBuffers();
          const indices = geomBuffers.indices;
          // Note: the topology can change without the number of vertices changing
          // and vice versa.
          if (this.numSegIndices != indices.length) {
              gl.deleteBuffer(this.indexBuffer);
              this.indexBuffer = gl.createBuffer();
          }
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
          gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
          this.numSegIndices = indices.length;
          this.numVertices = geomBuffers.numVertices;
          if (indices instanceof Uint8Array)
              this.indexDataType = this.__gl.UNSIGNED_BYTE;
          if (indices instanceof Uint16Array)
              this.indexDataType = this.__gl.UNSIGNED_SHORT;
          if (indices instanceof Uint32Array)
              this.indexDataType = this.__gl.UNSIGNED_INT;
      }
      /**
       * The bind method.
       * @param renderstate - The object tracking the current state of the renderer
       * @return - The return value.
       */
      bind(renderstate) {
          const gl = this.__gl;
          const unifs = renderstate.unifs;
          const { LineThickness, geomType } = renderstate.unifs;
          if (geomType)
              this.__gl.uniform1i(geomType.location, 1 /*GeomType.LINES*/);
          if (LineThickness && gl.floatTexturesSupported) {
              if (this.fatBuffersNeedUpload)
                  this.genFatBuffers(renderstate); // (renderstate, true)
              const fatBuffers = this.fatBuffers;
              let shaderBinding = this.shaderBindings[renderstate.shaderkey];
              if (!shaderBinding) {
                  shaderBinding = generateShaderGeomBinding(this.__gl, renderstate.attrs, fatBuffers.glattrbuffers, gl.__quadIndexBuffer);
                  this.shaderBindings[renderstate.shaderkey] = shaderBinding;
              }
              shaderBinding.bind(renderstate);
              if (unifs.positionsTexture) {
                  fatBuffers.positionsTexture.bindToUniform(renderstate, unifs.positionsTexture);
                  gl.uniform1i(unifs.positionsTextureSize.location, fatBuffers.positionsTexture.width);
              }
              return true;
          }
          else {
              super.bind(renderstate);
              return true;
          }
      }
      // ////////////////////////////////
      // Drawing Lines Points.
      /**
       * The drawPoints method.
       */
      drawPoints() {
          this.__gl.drawArrays(this.__gl.POINTS, 0, this.geom.getNumVertices());
      }
      // ////////////////////////////////
      // Regular Drawing.
      /**
       * The draw method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          const gl = this.__gl;
          if (renderstate.unifs.LineThickness && gl.floatTexturesSupported) {
              gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, this.fatBuffers.drawCount);
              // Note: We don't have a solution for drawing fat lines to the geom data buffer.
          }
          else {
              gl.drawElements(this.__gl.LINES, this.numSegIndices, this.indexDataType, 0);
          }
      }
      /**
       * The drawInstanced method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param instanceCount - The instanceCount value.
       */
      drawInstanced(renderstate, instanceCount) {
          const gl = this.__gl;
          const { occluded } = renderstate.unifs;
          if (occluded) {
              gl.uniform1i(occluded.location, 0);
          }
          gl.drawElementsInstanced(this.__gl.LINES, this.numSegIndices, this.indexDataType, 0, instanceCount);
          if (occluded) {
              gl.uniform1i(occluded.location, 1);
              gl.depthFunc(gl.GREATER);
              gl.drawElementsInstanced(this.__gl.LINES, this.numSegIndices, this.indexDataType, 0, instanceCount);
              gl.depthFunc(gl.LEQUAL);
          }
      }
  }

  /** Class representing a GL mesh.
   * @extends GLGeom
   * @private
   */
  class GLCompoundGeom extends GLGeom {
      indexDataType = 0;
      drawCounts = {};
      /**
       * Create a GL mesh.
       * @param gl - The webgl rendering context.
       * @param compoundGeom - The CompoundGeom value.
       */
      constructor(gl, compoundGeom) {
          //@ts-ignore.
          super(gl, compoundGeom);
      }
      // /////////////////////////////////////
      // Buffers
      /**
       * The genBuffers method.
       */
      genBuffers(renderstate) {
          super.genBuffers(renderstate);
          const gl = this.__gl;
          const geomBuffers = this.geom.genBuffers();
          const indices = geomBuffers.indices;
          let elementSize = 0;
          if (indices instanceof Uint8Array) {
              this.indexDataType = this.__gl.UNSIGNED_BYTE;
              elementSize = 1;
          }
          else if (indices instanceof Uint16Array) {
              this.indexDataType = this.__gl.UNSIGNED_SHORT;
              elementSize = 2;
          }
          else if (indices instanceof Uint32Array) {
              this.indexDataType = this.__gl.UNSIGNED_INT;
              elementSize = 4;
          }
          this.numVertices = this.geom.getNumVertices();
          if (this.indexBuffer) {
              gl.deleteBuffer(this.indexBuffer);
          }
          this.indexBuffer = gl.createBuffer();
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
          gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, geomBuffers.indices, gl.STATIC_DRAW);
          this.updateDrawIds(renderstate, geomBuffers, elementSize);
          this.buffersDirty = false;
      }
      updateDrawIds(renderstate, geomBuffers, elementSize) {
          const materials = geomBuffers.materials;
          const getMaterialAddr = (materialId) => {
              const material = materials[materialId];
              const materialAddr = renderstate.renderer.glMaterialLibrary.getMaterialAllocation(material);
              return materialAddr.start;
          };
          {
              if (geomBuffers.materialSubGeoms && false) {
                  for (let key in geomBuffers.materialSubGeoms) {
                      if (geomBuffers.materialSubGeoms[key].length > 0) {
                          const subGeoms = geomBuffers.materialSubGeoms[key];
                          const drawSubGeom = {
                              geomType: exports.GeomType[key],
                              offsets: new Int32Array(subGeoms.length),
                              counts: new Int32Array(subGeoms.length),
                              materialIds: new Uint8Array(subGeoms.length),
                          };
                          for (let i = 0; i < subGeoms.length; i++) {
                              drawSubGeom.offsets[i] = subGeoms[i].offset * elementSize;
                              drawSubGeom.counts[i] = subGeoms[i].count;
                              drawSubGeom.materialIds[i] = getMaterialAddr(subGeoms[i].materialId);
                          }
                          this.drawCounts[key] = drawSubGeom;
                      }
                  }
              }
              else {
                  for (let key in geomBuffers.counts) {
                      if (geomBuffers.counts[key] > 0) {
                          const drawSubGeom = {
                              geomType: exports.GeomType[key],
                              offsets: new Int32Array([geomBuffers.offsets[key] * elementSize]),
                              counts: new Int32Array([geomBuffers.counts[key]]),
                              materialIds: new Uint8Array(geomBuffers.counts.length),
                          };
                          this.drawCounts[key] = drawSubGeom;
                      }
                  }
              }
          }
      }
      /**
       * The updateBuffers method.
       * @param opts - The options object.
       */
      updateBuffers(renderstate) {
          this.__gl;
          if (this.numVertices != this.geom.getNumVertices()) {
              this.genBuffers(renderstate);
              return;
          }
          super.updateBuffers(renderstate);
          let elementSize = 0;
          if (this.indexDataType == this.__gl.UNSIGNED_BYTE)
              elementSize = 1;
          if (this.indexDataType == this.__gl.UNSIGNED_SHORT)
              elementSize = 2;
          if (this.indexDataType == this.__gl.UNSIGNED_INT)
              elementSize = 4;
          const geomBuffers = this.geom.genBuffers({ includeIndices: false });
          this.updateDrawIds(renderstate, geomBuffers, elementSize);
      }
      /**
       * The clearBuffers method.
       */
      clearBuffers() {
          const gl = this.__gl;
          gl.deleteBuffer(this.indexBuffer);
          this.indexBuffer = null;
          super.clearBuffers();
      }
      // ////////////////////////////////
      // Regular Drawing.
      /**
       * Draw an item to screen.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          this.drawInstanced(renderstate, 1);
      }
      /**
       * The drawInstanced method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param instanceCount - The instanceCount value.
       */
      drawInstanced(renderstate, instanceCount) {
          renderstate.pushGLStack('GLCompoundGeom.drawInstanced');
          const blendPointsAndLines = true;
          const gl = this.__gl;
          const { drawIds, geomType, outlineThickness, viewportSize, occluded } = renderstate.unifs;
          const depthFuncValue = gl.getParameter(gl.DEPTH_FUNC);
          let renderModeValue = null;
          let drawingOutlines = false;
          let drawingHiddenLines = false;
          if (renderstate instanceof ColorRenderState) {
              renderModeValue = renderstate.renderMode;
              const drawEdges = renderModeValue != 'flat-noedges' && renderModeValue != 'shaded-noedges' && renderModeValue != 'pbr-noedges';
              drawingOutlines =
                  outlineThickness &&
                      viewportSize &&
                      renderstate.outlineMethod == 'geometry' &&
                      renderstate.outlineThickness > 0 &&
                      drawEdges;
              // Note: multiple different rendermodes could potentially draw hidden line.
              drawingHiddenLines = renderModeValue == 'hiddenline' && occluded != null;
          }
          if (this.drawCounts['TRIANGLES']) {
              if (geomType)
                  gl.uniform1i(geomType.location, exports.GeomType.TRIANGLES);
              if (renderModeValue == 'hiddenline') {
                  // don't render surfaces
                  gl.colorMask(false, false, false, false);
              }
              // Always zero this value before drawing the faces, else the shader could think its drawing the outline.
              if (outlineThickness) {
                  gl.uniform1f(outlineThickness.location, 0);
              }
              const draw = this.drawCounts['TRIANGLES'];
              const instCounts = draw.counts.map(() => instanceCount);
              if (!gl.multiDrawElementsInstanced) {
                  for (let i = 0; i < draw.counts.length; i++) {
                      if (drawIds) {
                          gl.uniform2i(drawIds.location, i, draw.materialIds[i]);
                      }
                      this.__gl.drawElementsInstanced(gl.TRIANGLES, draw.counts[i], this.indexDataType, draw.offsets[i], instanceCount);
                  }
              }
              else {
                  gl.multiDrawElementsInstanced(gl.TRIANGLES, draw.counts, 0, this.indexDataType, draw.offsets, 0, instCounts, 0, draw.counts.length);
              }
              if (drawingOutlines) {
                  // Only draw font faces. BEcause all faces are drawn, it can make a mess to see the back faces through the front faces.
                  // e.g. we might see the triangles on the other side of a sphere rendered over the top of triangles on the near side.
                  renderstate.pushGLStack('GLCompoundGeom.drawingOutlines');
                  renderstate.glEnable(gl.CULL_FACE);
                  gl.cullFace(gl.FRONT);
                  // @ts-ignore
                  gl.uniform1f(outlineThickness.location, renderstate.outlineThickness * window.devicePixelRatio);
                  gl.uniform2f(viewportSize.location, renderstate.region[2] - renderstate.region[0], renderstate.region[3] - renderstate.region[1]);
                  if (renderModeValue == 'hiddenline') {
                      // start rendering surfaces again
                      gl.colorMask(true, true, true, true);
                  }
                  if (!gl.multiDrawElementsInstanced) {
                      for (let i = 0; i < draw.counts.length; i++) {
                          if (drawIds) {
                              gl.uniform2i(drawIds.location, i, draw.materialIds[i]);
                          }
                          this.__gl.drawElementsInstanced(gl.TRIANGLES, draw.counts[i], this.indexDataType, draw.offsets[i], instanceCount);
                      }
                  }
                  else {
                      gl.multiDrawElementsInstanced(gl.TRIANGLES, draw.counts, 0, this.indexDataType, draw.offsets, 0, instCounts, 0, draw.counts.length);
                  }
                  renderstate.popGLStack();
                  gl.cullFace(gl.BACK);
              }
          }
          if (renderstate instanceof ColorRenderState && blendPointsAndLines) {
              renderstate.glEnable(gl.BLEND);
              gl.blendEquation(gl.FUNC_ADD);
              gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);
          }
          if (this.drawCounts['LINES']) {
              if (geomType)
                  gl.uniform1i(geomType.location, exports.GeomType.LINES);
              const draw = this.drawCounts['LINES'];
              const instCounts = draw.counts.map(() => instanceCount);
              if (!gl.multiDrawElementsInstanced) {
                  for (let i = 0; i < draw.counts.length; i++) {
                      if (drawIds) {
                          gl.uniform2i(drawIds.location, i, draw.materialIds[i]);
                      }
                      gl.drawElementsInstanced(gl.LINES, draw.counts[i], this.indexDataType, draw.offsets[i], instanceCount);
                  }
              }
              else {
                  gl.multiDrawElementsInstanced(gl.LINES, draw.counts, 0, this.indexDataType, draw.offsets, 0, instCounts, 0, draw.counts.length);
              }
              if (drawingHiddenLines) {
                  const { hiddenLineColor } = renderstate.unifs;
                  gl.uniform1i(occluded.location, 1);
                  // @ts-ignore
                  gl.uniform4fv(hiddenLineColor.location, renderstate.hiddenLineColor.asArray());
                  gl.depthFunc(gl.GREATER);
                  gl.depthMask(false);
                  if (!gl.multiDrawElementsInstanced) {
                      for (let i = 0; i < draw.counts.length; i++) {
                          if (drawIds) {
                              gl.uniform2i(drawIds.location, i, draw.materialIds[i]);
                          }
                          gl.drawElementsInstanced(gl.LINES, draw.counts[i], this.indexDataType, draw.offsets[i], instanceCount);
                      }
                  }
                  else {
                      gl.multiDrawElementsInstanced(gl.LINES, draw.counts, 0, this.indexDataType, draw.offsets, 0, instCounts, 0, draw.counts.length);
                  }
                  // Restore defaults.
                  gl.depthFunc(depthFuncValue);
                  gl.depthMask(true);
                  gl.uniform1i(occluded.location, 0);
              }
          }
          if (this.drawCounts['POINTS']) {
              if (geomType)
                  gl.uniform1i(geomType.location, exports.GeomType.POINTS);
              const draw = this.drawCounts['POINTS'];
              const instCounts = draw.counts.map(() => instanceCount);
              {
                  gl.multiDrawElementsInstanced(gl.POINTS, draw.counts, 0, this.indexDataType, draw.offsets, 0, instCounts, 0, draw.counts.length);
              }
              if (drawingHiddenLines) {
                  const { hiddenLineColor } = renderstate.unifs;
                  gl.uniform1i(occluded.location, 1);
                  // @ts-ignore
                  gl.uniform4fv(hiddenLineColor.location, renderstate.hiddenLineColor.asArray());
                  gl.depthFunc(gl.GREATER);
                  gl.depthMask(false);
                  gl.multiDrawElementsInstanced(gl.POINTS, draw.counts, 0, this.indexDataType, draw.offsets, 0, instCounts, 0, draw.counts.length);
                  gl.depthFunc(depthFuncValue);
                  gl.depthMask(true);
                  gl.uniform1i(occluded.location, 0);
              }
          }
          renderstate.popGLStack();
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          super.destroy();
          const gl = this.__gl;
          gl.deleteBuffer(this.indexBuffer);
          this.indexBuffer = null;
          // if (this.__wireframesVao)
          //     gl.deleteVertexArray(this.__wireframesVao);
          // if (this.__hardEdgesVao)
          //     gl.deleteVertexArray(this.__hardEdgesVao);
      }
  }

  var vert$i = "\n\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform vec2 pos;\nuniform vec2 size;\nuniform vec2 srctextureDim;\nconst int border = 2;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * size * 2.0), 0.0, 1.0);\n\n  vec2 borderVec2 = vec2(float(border), float(border));\n  v_texCoord *= (srctextureDim + (borderVec2 * 2.0)) / srctextureDim;\n  v_texCoord -= borderVec2 / srctextureDim;\n}\n\n"; // eslint-disable-line

  var frag$h = "\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D srctexture;\nuniform vec2 srctextureDim;\nuniform bool alphaFromLuminance;\nuniform bool invert;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n\nfloat luminanceFromRGB(vec3 rgb) {\n  return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n  vec2 pixelCoord = v_texCoord*srctextureDim;\n  vec2 uv = v_texCoord;\n\n  // Wrap X coords\n  if (pixelCoord.x < 0.0) {\n    uv.x += 1.0/srctextureDim.x;\n    uv.y = 1.0 - uv.y;\n  }\n  else if (pixelCoord.x > srctextureDim.x) {\n    uv.x -= 1.0/srctextureDim.x;\n    uv.y = 1.0 - uv.y;\n  }\n\n  // Wrap Y coords\n  if (pixelCoord.y < 0.0) {\n    uv.y += 1.0/srctextureDim.y;\n    uv.x = 1.0 - uv.x;\n  }\n  else if (pixelCoord.y > srctextureDim.y) {\n    uv.y -= 1.0/srctextureDim.y;\n    uv.x = 1.0 - uv.x;\n  }\n\n  vec4 texel = texture2D(srctexture, uv);\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  // TODO: check why we pre-multiply alphas here.\n  // fragColor = vec4(texel.rgb/texel.a, texel.a);\n\n  if (alphaFromLuminance) {\n    fragColor = vec4(texel.rgb, luminanceFromRGB(texel.rgb));\n  }\n  else {\n    fragColor = texel;\n  }\n  \n  if (invert) {\n    fragColor = vec4(1.0) - fragColor;\n  }\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n\n"; // eslint-disable-line

  /* eslint-disable require-jsdoc */
  // eslint-disable-next-line require-jsdoc
  class AtlasLayoutShader extends GLShader {
      /**
       * Create an atlas layout shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'AtlasLayoutShader');
          this.setShaderStage('VERTEX_SHADER', vert$i);
          this.setShaderStage('FRAGMENT_SHADER', frag$h);
      }
  }

  /**
   * An Image Atlas lays out multiple smaller images within a larger image atlas, and tracks their positions.
   * @private
   */
  class GLImageAtlas extends GLRenderTarget {
      // protected __gl: WebGL12RenderingContext
      name;
      formatParam;
      typeParam;
      // clearColor: Color
      subImages; // GLTexture2D
      layoutNeedsRegeneration;
      asyncCount = 0;
      loaded = false;
      ready = false;
      layout = [];
      atlasLayoutTexture;
      layoutVec4s = [];
      atlasLayoutShaderBinding = null;
      atlasLayoutShader = null;
      /**
       * Create an image atlas..
       * @param gl - The webgl rendering context.
       * @param name - The name value.
       * @param format - The format value.
       * @param type - The type value.
       */
      constructor(gl, name, format = 'RGBA', type = 'FLOAT') {
          super(gl);
          this.name = name;
          this.formatParam = format;
          this.typeParam = type;
          this.clearColor = new Color(0, 0, 0, 0);
          this.subImages = [];
          this.layoutNeedsRegeneration = false;
          this.asyncCount = 0;
          this.loaded = false;
      }
      // eslint-disable-next-line require-jsdoc
      incAsyncCount(count = 1) {
          this.asyncCount += count;
          this.ready = false;
      }
      // eslint-disable-next-line require-jsdoc
      decAsyncCount() {
          if (this.asyncCount > 0) {
              this.asyncCount--;
              if (this.asyncCount == 0) {
                  this.loaded = true;
                  this.emit('loaded');
              }
          }
      }
      /**
       * The isLoaded method.
       * @return - The return value.
       */
      isLoaded() {
          return this.asyncCount == 0;
      }
      /**
       * The addSubImage method.
       * @param subImage - The subImage value.
       * @return - The return value.
       */
      // TODO: WebGLTexture is not handled here
      addSubImage(subImage) {
          if (subImage instanceof BaseImage) {
              const gltexture = new GLTexture2D(this.__gl, subImage);
              if (!subImage.isLoaded()) {
                  this.incAsyncCount();
                  subImage.on('loaded', () => {
                      this.decAsyncCount();
                  });
              }
              subImage.setMetadata('ImageAtlas_gltex', gltexture);
              gltexture.addRef(this);
              const updated = () => {
                  // TODO: Check to see if the new dimensions
                  // do not match the previous. If not, then we
                  // need to relayout. wE could also avlid a complete
                  // relaout by reremoving and re-adding this image.
                  this.layoutNeedsRegeneration = true;
                  this.renderAtlas();
              };
              subImage.on('updated', updated);
              this.subImages.push(gltexture);
          }
          else {
              const subImage_casted = subImage;
              subImage_casted.addRef(this); // subImage is a GLTexture2D
              this.subImages.push(subImage_casted);
          }
          this.layoutNeedsRegeneration = true;
          return this.subImages.length - 1;
      }
      /**
       * The removeSubImage method.
       * @param subImage - The subImage value.
       */
      removeSubImage(subImage) {
          let index;
          if (subImage instanceof BaseImage) {
              const gltext = subImage.getMetadata('ImageAtlas_gltex'); // TODO: refactor
              index = this.subImages.indexOf(gltext);
              subImage.deleteMetadata('ImageAtlas_gltex');
          }
          else {
              index = this.subImages.indexOf(subImage);
          }
          const gltexture = this.subImages[index];
          gltexture.removeRef(this);
          this.subImages.splice(index, 1);
          this.layoutNeedsRegeneration = true;
      }
      /**
       * The getSubImage method.
       * @param index - The index value.
       * @return - The image value.
       */
      getSubImage(index) {
          return this.subImages[index];
      }
      /**
       * The numSubImages method.
       * @return - The return value.
       */
      numSubImages() {
          if (this.layout)
              return this.layout.length;
          return this.subImages.length;
      }
      /**
       * The generateAtlasLayout method.
       */
      generateAtlasLayout(minTileSize) {
          if (this.subImages.length == 0) {
              this.layoutNeedsRegeneration = false;
              return;
          }
          const border = 2;
          // We must lay out the sub images in order of size.
          // else the paker might have trouble.
          const blocks = [];
          this.subImages.forEach((subImage, index) => {
              blocks.push({
                  w: subImage.width + border * 2,
                  h: subImage.height + border * 2,
                  area: subImage.width * subImage.height,
                  index,
              });
          });
          blocks.sort((a, b) => (a.area > b.area ? -1 : a.area < b.area ? 1 : 0));
          const packer = new GrowingPacker();
          packer.fit(blocks);
          this.layout = [];
          blocks.forEach((block, index) => {
              // const subImage = this.subImages[block.index]
              if (block.fit) {
                  this.layout[block.index] = {
                      pos: new Vec2(block.fit.x + border, block.fit.y + border),
                      size: new Vec2(block.w, block.h),
                  };
              }
              else {
                  console.warn('Unable to fit image');
              }
          });
          const width = packer.root.w;
          const height = packer.root.h;
          // console.log(this.name + " Atlas Texture size:" + width.toFixed() + ", " + height.toFixed());
          // Note: only RGBA Float textures can be rendered to on Firefox.(Not RGB)
          this.configure({
              width,
              height,
              format: this.typeParam == 'FLOAT' && this.formatParam == 'RGB' ? 'RGBA' : this.formatParam,
              type: this.typeParam,
              filter: 'LINEAR',
          });
          const gl = this.__gl;
          if (!gl.__quadVertexIdsBuffer)
              gl.setupInstancedQuad();
          if (!this.atlasLayoutShader) {
              this.atlasLayoutShader = new AtlasLayoutShader(this.__gl);
              const directives = [];
              if (gl.name == 'webgl2')
                  directives.push('#define ENABLE_ES3');
              const shaderComp = this.atlasLayoutShader.compileForTarget('GLImageAtlas', directives);
              this.atlasLayoutShaderBinding = generateShaderGeomBinding(this.__gl, shaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);
          }
          const pixelsPerItem = 1;
          let size = Math.round(Math.sqrt(this.layout.length * pixelsPerItem) + 0.5);
          // Only support power 2 textures. Else we get strange corruption on some GPUs
          // in some scenes.
          size = MathFunctions.nextPow2(size);
          // Size should be a multiple of pixelsPerItem, so each geom item is always contiguous
          // in memory. (makes updating a lot easier. See __updateItemInstanceData below)
          if (size % pixelsPerItem != 0)
              size += pixelsPerItem - (size % pixelsPerItem);
          if (!gl.floatTexturesSupported) {
              this.layoutVec4s = [];
              this.layout.forEach((layoutItem, index) => {
                  this.layoutVec4s[index] = [
                      layoutItem.pos.x / width,
                      layoutItem.pos.y / height,
                      layoutItem.size.x / width,
                      layoutItem.size.y / height,
                  ];
              });
          }
          else {
              const dataArray = new Float32Array(size * size * 4); /* each pixel has 4 floats*/
              for (let i = 0; i < this.layout.length; i++) {
                  const layoutItem = this.layout[i];
                  const array = dataArray.subarray(i * 4, (i + 1) * 4);
                  array[0] = layoutItem.pos.x / width;
                  array[1] = layoutItem.pos.y / height;
                  array[2] = layoutItem.size.x / width;
                  array[3] = layoutItem.size.y / height;
              }
              if (!this.atlasLayoutTexture || this.atlasLayoutTexture.width != size || this.atlasLayoutTexture.height != size) {
                  if (this.atlasLayoutTexture)
                      this.atlasLayoutTexture.destroy();
                  this.atlasLayoutTexture = new GLTexture2D(gl, {
                      format: 'RGBA',
                      type: 'FLOAT',
                      filter: 'NEAREST',
                      wrap: 'CLAMP_TO_EDGE',
                      mipMapped: false,
                      width: size,
                      height: size,
                      data: dataArray,
                  });
              }
              else {
                  this.atlasLayoutTexture.bufferData(dataArray, size, size);
              }
          }
          this.textureDesc[0] = this.width;
          this.textureDesc[1] = this.height;
          this.textureDesc[2] = this.atlasLayoutTexture.width;
          // this.textureDesc[3] // flags
          this.layoutNeedsRegeneration = false;
      }
      /**
       * The getLayoutData method.
       * @param index - The index value.
       * @return - The return value.
       */
      getLayoutData(index) {
          return this.layoutVec4s[index];
      }
      /**
       * The renderAtlas method.
       * @param cleanup - The cleanup value.
       * @param off - The off value.
       */
      renderAtlas(cleanup = false, off = 0) {
          if (this.subImages.length == 0) {
              return;
          }
          if (this.layoutNeedsRegeneration) {
              this.generateAtlasLayout();
          }
          const gl = this.__gl;
          const renderstate = new RenderState(gl);
          this.bindForWriting(renderstate, true);
          this.atlasLayoutShader.bind(renderstate, 'GLImageAtlas');
          this.atlasLayoutShaderBinding.bind(renderstate);
          const scl = new Vec2(1.0 / this.width, 1.0 / this.height);
          const unifs = renderstate.unifs;
          for (let j = off; j < this.subImages.length; j++) {
              const glimage = this.subImages[j];
              const layoutItem = this.layout[j];
              // Some images may not have fully loaded yet, so skip those.
              if (!glimage.bindToUniform(renderstate, unifs.srctexture))
                  continue;
              gl.uniform2fv(unifs.pos.location, layoutItem.pos.multiply(scl).asArray());
              gl.uniform2fv(unifs.size.location, layoutItem.size.multiply(scl).asArray());
              gl.uniform2f(unifs.srctextureDim.location, glimage.width, glimage.height);
              gl.uniform1i(unifs.alphaFromLuminance.location, glimage.alphaFromLuminance ? 1 : 0);
              gl.uniform1i(unifs.invert.location, glimage.invert ? 1 : 0);
              gl.drawQuad();
              // After rendering the texture, we can reuse the texture unit.
              renderstate.boundTextures--;
          }
          if (cleanup) {
              this.cleanup();
          }
          this.unbind(renderstate);
          // this.__fbo.unbind()
          this.emit('updated');
      }
      /**
       * The isReady method.
       * @return - The return value.
       */
      isReady() {
          return this.atlasLayoutTexture != undefined;
      }
      /**
       * The bindToUniform method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param unif - The WebGL uniform
       * @return - The return value.
       */
      bindToUniform(renderstate, unif) {
          super.bindToUniform(renderstate, unif);
          const unifs = renderstate.unifs;
          if (this.atlasLayoutTexture) {
              const atlasLayoutUnif = unifs[unif.name + '_layout'];
              if (atlasLayoutUnif)
                  this.atlasLayoutTexture.bindToUniform(renderstate, atlasLayoutUnif);
              const atlasDescUnif = unifs[unif.name + '_desc'];
              if (atlasDescUnif) {
                  this.__gl.uniform4fv(atlasDescUnif.location, this.textureDesc);
              }
          }
          else {
              const atlasDescUnif = unifs[unif.name + '_desc'];
              if (atlasDescUnif)
                  this.__gl.uniform4f(atlasDescUnif.location, 0, 0, 0, 0);
          }
          return true;
      }
      /**
       * The cleanup method.
       */
      cleanup() {
          for (const glimage of this.subImages) {
              glimage.removeRef(this);
          }
          this.subImages = [];
          this.destroy();
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          this.cleanup();
          super.destroy();
      }
  }

  /** Class representing GL points.
   * @extends GLGeom
   * @private
   */
  class GLFatPoints extends GLPoints {
      indexArray = new Int32Array(0);
      distances = new Float32Array(0);
      pointsAttributesTexture = null;
      texelsPerPoint = 1;
      prevSortCameraPos = new Vec3();
      threshold = 0;
      atlas = null;
      spriteCoords = null;
      /**
       * Create a GL point.
       * @param gl - The webgl rendering context.
       * @param points - The points value.
       */
      constructor(gl, points) {
          super(gl, points);
      }
      /**
       * The genBuffers method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      genBuffers(renderstate) {
          const gl = this.__gl;
          const points = this.geom;
          const geomBuffers = this.geom.genBuffers();
          this.numVertices = this.geom.getNumVertices();
          this.texelsPerPoint = 1;
          const positions = geomBuffers.attrBuffers.positions;
          const colors = geomBuffers.attrBuffers.colors;
          const sizes = geomBuffers.attrBuffers.sizes;
          if (colors) {
              this.texelsPerPoint = 2;
          }
          const spriteIndices = geomBuffers.attrBuffers.spriteIndices;
          const sprites = points.getParameter('Sprites');
          if (spriteIndices && sprites && sprites.value.length > 0) {
              this.texelsPerPoint = 3;
              this.atlas = new GLImageAtlas(gl, 'Sprites', 'RGBA', 'UNSIGNED_BYTE');
              this.atlas.clearColor = new Color(1, 1, 1, 0);
              const emitUpdated = (event) => this.emit('updated', event);
              this.atlas.on('loaded', emitUpdated);
              this.atlas.on('updated', emitUpdated);
              const images = sprites.value;
              images.forEach((image) => this.atlas.addSubImage(image));
              if (this.atlas.isLoaded()) {
                  this.atlas.renderAtlas();
              }
              else {
                  // Note: Maybe the atlas is already up to date. It should
                  // maintain its own coherencey by listening to the sub images.
                  this.atlas.on('loaded', () => {
                      this.atlas.renderAtlas();
                  });
              }
          }
          const size = MathFunctions.nextPow2(Math.round(Math.sqrt(this.numVertices) + 0.5));
          const data = new Float32Array(size * this.texelsPerPoint * size * 4);
          const stride = this.texelsPerPoint * 4;
          for (let i = 0; i < positions.count; i++) {
              data[i * stride + 0] = convertValue(positions.values, i * 3 + 0);
              data[i * stride + 1] = convertValue(positions.values, i * 3 + 1);
              data[i * stride + 2] = convertValue(positions.values, i * 3 + 2);
              if (sizes)
                  data[i * stride + 3] = sizes.values[i];
              else
                  data[i * stride + 3] = 1.0;
              if (colors) {
                  data.set(colors.values.subarray(i * 4, (i + 1) * 4), i * stride + 4);
              }
              if (spriteIndices) {
                  data[i * stride + 8] = spriteIndices.values[i];
              }
          }
          const width = size * this.texelsPerPoint;
          const height = size;
          this.pointsAttributesTexture = new GLTexture2D(gl, {
              format: gl.RGBA,
              type: gl.FLOAT,
              width,
              height,
              data,
              filter: gl.NEAREST,
              wrap: gl.CLAMP_TO_EDGE,
              mipMapped: false,
          });
          this.numVertices = geomBuffers.numVertices;
          this.buffersDirty = false;
      }
      /**
       * The updateBuffers method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      updateBuffers(renderstate) {
          if (this.numVertices != this.geom.getNumVertices()) {
              this.genBuffers(renderstate);
              return;
          }
          const geomBuffers = this.geom.genBuffers();
          const positions = geomBuffers.attrBuffers.positions;
          const sizes = geomBuffers.attrBuffers.sizes;
          const colors = geomBuffers.attrBuffers.colors;
          const spriteIndices = geomBuffers.attrBuffers.spriteIndices;
          // Only support power 2 textures. Else we get strange corruption on some GPUs
          // in some scenes.
          const size = MathFunctions.nextPow2(Math.round(Math.sqrt(geomBuffers.numVertices) + 0.5));
          const data = new Float32Array(size * this.texelsPerPoint * size * 4);
          const stride = this.texelsPerPoint * 4;
          for (let i = 0; i < positions.count; i++) {
              data[i * stride + 0] = convertValue(positions.values, i * 3 + 0);
              data[i * stride + 1] = convertValue(positions.values, i * 3 + 1);
              data[i * stride + 2] = convertValue(positions.values, i * 3 + 2);
              if (sizes)
                  data[i * stride + 3] = sizes.values[i];
              else
                  data[i * stride + 3] = 1.0;
              if (colors) {
                  data.set(colors.values.subarray(i * 4, (i + 1) * 4), i * stride + 4);
              }
              if (spriteIndices) {
                  data[i * stride + 8] = spriteIndices.values[i];
              }
          }
          const width = size * this.texelsPerPoint;
          const height = size;
          this.pointsAttributesTexture.populate(data, width, height);
          // Cache the size so we know later if it changed (see below)
          this.numVertices = geomBuffers.numVertices;
          this.buffersDirty = false;
      }
      /**
       * The sort method.
       * @param cameraPos - The cameraPos value.
       */
      sort(cameraPos) {
          const geomBuffers = this.geom.genBuffers();
          const positions = geomBuffers.attrBuffers.positions;
          this.distances = new Float32Array(positions.count);
          let bufferSizeChanged = false;
          if (this.indexArray.length != this.distances.length) {
              this.indexArray = new Int32Array(this.distances.length);
              bufferSizeChanged = true;
          }
          for (let i = 0; i < positions.count; i++) {
              const pos = new Vec3(positions.values[i * 3], positions.values[i * 3 + 1], positions.values[i * 3 + 2]);
              this.distances[i] = pos.distanceTo(cameraPos);
              this.indexArray[i] = i;
          }
          this.indexArray.sort((a, b) => {
              return this.distances[a] > this.distances[b] ? -1 : 1;
          });
          const gl = this.__gl;
          if (!this.glattrbuffers.drawIndices) {
              this.glattrbuffers.drawIndices = {
                  name: 'drawIndices',
                  dimension: 1,
                  elementSize: 4,
                  buffer: gl.createBuffer(),
                  dataType: gl.INT,
                  normalized: false,
                  shared: false,
                  numValues: positions.count,
              };
          }
          else if (bufferSizeChanged) {
              if (this.glattrbuffers.drawIndices.buffer)
                  gl.deleteBuffer(this.glattrbuffers.drawIndices.buffer);
              this.glattrbuffers.drawIndices.buffer = gl.createBuffer();
          }
          gl.bindBuffer(gl.ARRAY_BUFFER, this.glattrbuffers.drawIndices.buffer);
          gl.bufferData(gl.ARRAY_BUFFER, this.indexArray, gl.STATIC_DRAW);
          this.threshold = 0.0;
      }
      /**
       * The bind method.
       * @param renderstate - The object tracking the current state of the renderer
       * @return - The return value.
       */
      bind(renderstate) {
          if (this.buffersDirty)
              this.updateBuffers(renderstate);
          if (renderstate.attrs.drawIndices) {
              const cameraPos = renderstate.viewXfo.tr;
              const dist = cameraPos.distanceTo(this.prevSortCameraPos);
              // Avoid sorting if the camera did not move more than 3 meters.
              if (dist > this.threshold) {
                  this.sort(cameraPos);
                  this.prevSortCameraPos = cameraPos.clone();
                  if (this.distances.length > 1) {
                      const idx0 = this.indexArray[this.indexArray.length - 1];
                      const dist0 = this.distances[idx0];
                      this.threshold = dist0 * 0.25;
                  }
                  else {
                      this.threshold = 9999;
                  }
              }
          }
          let shaderBinding = this.shaderBindings[renderstate.shaderkey];
          if (!shaderBinding) {
              // Merge the points attrs with the quad attrs.
              const attrbuffers = Object.assign(this.glattrbuffers, renderstate.shaderInstancedGeom.attrBuffers);
              shaderBinding = generateShaderGeomBinding(this.__gl, renderstate.attrs, attrbuffers, renderstate.shaderInstancedGeom.indexBuffer);
              this.shaderBindings[renderstate.shaderkey] = shaderBinding;
          }
          shaderBinding.bind(renderstate);
          const { pointsAttributes, texelsPerPoint, atlasSprites } = renderstate.unifs;
          if (pointsAttributes) {
              this.pointsAttributesTexture.bindToUniform(renderstate, pointsAttributes);
              this.__gl.uniform1i(texelsPerPoint.location, this.texelsPerPoint);
          }
          const { geomType } = renderstate.unifs;
          if (geomType)
              this.__gl.uniform1i(geomType.location, 2 /*GeomType.POINTS*/);
          if (atlasSprites && this.atlas) {
              this.atlas.bindToUniform(renderstate, atlasSprites);
          }
          return true;
      }
      /**
       * The draw method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          const gl = this.__gl;
          if (renderstate.shaderInstancedGeom) {
              gl.drawElementsInstanced(gl.TRIANGLES, renderstate.shaderInstancedGeom.numTriIndices, renderstate.shaderInstancedGeom.indexDataType, 0, this.numVertices);
          }
          else {
              gl.drawArrays(gl.POINTS, 0, this.numVertices);
          }
      }
  }

  /* eslint-disable guard-for-in */
  const resizeIntArray = (intArray, newSize) => {
      const newArray = new Int32Array(newSize);
      newArray.set(intArray);
      return newArray;
  };
  /** Class representing a GL geom.
   * @private
   */
  class GLGeomLibrary extends EventEmitter {
      renderer;
      __gl;
      freeGeomIndices = [];
      geoms = [];
      geomRefCounts = [];
      geomsDict = new Map();
      glGeomsDict = new Map();
      geomBuffersTmp = []; // for each geom, these are the buffer
      shaderAttrSpec = {};
      glattrbuffers = {};
      shaderBindings = {};
      attributesBufferNeedsRealloc = false;
      attributesBufferNeedsAlloc = [];
      attributesAllocator = new Allocator1D();
      dirtyGeomIndices = new Set();
      geomVertexOffsets = new Int32Array(1);
      geomVertexCounts = new Int32Array(1);
      numIndices = 0;
      indicesBufferNeedsRealloc = false;
      indicesAllocator = new Allocator1D();
      indicesCounts = new Int32Array(1);
      indicesOffsets = new Int32Array(1);
      indexBuffer = null;
      freeDataAfterUpload = false;
      __destroyed = false;
      geomEventHandlerIds = [];
      /**
       * Create a GLGeomLibrary.
       * @param renderer - The renderer object
       */
      constructor(renderer) {
          super();
          this.renderer = renderer;
          this.__gl = renderer.gl;
          // If the allocator ever resizes, then we need to re-upload everything.
          this.attributesAllocator.on('resized', () => {
              this.attributesBufferNeedsRealloc = true;
          });
          this.attributesAllocator.on('dataReallocated', (event) => {
              // during allocation, a defragment might occur, which means
              // we need to re-upload some of our data.
              const id = event.id;
              const allocation = event.allocation;
              this.dirtyGeomIndices.add(id);
              this.geomVertexOffsets[id] = allocation.start;
              this.geomVertexCounts[id] = allocation.size;
          });
          this.freeGeomIndices.push(0);
          // //////////////////////////////////////
          // Indices
          this.indicesAllocator.on('resized', () => {
              // 540M indices == 2Gb of indices, which is the maximum allows by WebGL.
              // This is because WebGL may accept JS arrays which can contain floating point indices.
              // After we have allocated More than 256 Mb of indices, we then force allocations to be limited
              // to the exact allocated space.
              if (Math.log2(this.indicesAllocator.reservedSpace) >= 29) {
                  if (Math.log2(this.indicesAllocator.allocatedSpace) >= 29) {
                      throw 'Indices buffer too big. WebGL cannot allocate index buffers more than 2Gb';
                  }
                  // console.log("this.indicesAllocator. capped to':", this.indicesAllocator.allocatedSpace + 1)
                  this.indicesAllocator.reservedSpace = (1 << 29) - 1;
              }
              this.indicesBufferNeedsRealloc = true;
          });
          this.indicesAllocator.on('dataReallocated', (event) => {
              // during allocation, a defragment might occur, which means
              // we need to re-upload some of our data.
              const id = event.id;
              this.dirtyGeomIndices.add(id);
          });
          // Allocate enough space for 1M verts to begin with. This avoids lots of small
          // copies when loading small files.
          const size = 2 << 19;
          this.reserveSpace(size, size * 2);
          // this.shaderAttrSpec['positions'] = genDataTypeDesc(this.__gl, 'Vec4f16')
          // this.shaderAttrSpec['normals'] = genDataTypeDesc(this.__gl, 'Vec4f8')
      }
      reserveSpace(attributeCount, vertexCount) {
          this.attributesAllocator.reservedSpace = attributeCount;
          this.indicesAllocator.reservedSpace = vertexCount;
          this.attributesBufferNeedsRealloc = true;
          this.indicesBufferNeedsRealloc = true;
      }
      /**
       * Given a BaseGeom, constructs the GLGeom that manages the state of the geometry in the GPU.
       * @param geom - The geom value.
       * @return - The return value.
       */
      constructGLGeom(geom) {
          let glgeom = this.glGeomsDict.get(geom);
          if (glgeom != undefined) {
              // Increment the ref count for the GLGeom
              // glgeom.addRef(this)
              return glgeom;
          }
          const gl = this.__gl;
          if (geom instanceof Mesh || geom instanceof MeshProxy) {
              glgeom = new GLMesh(gl, geom);
          }
          else if (geom instanceof Lines || geom instanceof LinesProxy) {
              glgeom = new GLLines(gl, geom);
          }
          else if (geom instanceof FatPoints) {
              glgeom = new GLFatPoints(gl, geom);
          }
          else if (geom instanceof Points || geom instanceof PointsProxy) {
              glgeom = new GLPoints(gl, geom);
          }
          else if (geom instanceof CompoundGeom) {
              glgeom = new GLCompoundGeom(gl, geom);
          }
          else {
              throw new Error('Unsupported geom type:' + geom.constructor.name);
          }
          this.glGeomsDict.set(geom, glgeom);
          glgeom.on('updated', () => {
              this.renderer.requestRedraw();
          });
          glgeom.addRef(this);
          return glgeom;
      }
      /**
       * Adds a geom to the GLGeomLibrary.
       *
       * @param geom - The geom to be managed by this GLGeomLibrary.
       * @return - The index of the geom in the GLGeomLibrary
       */
      addGeom(geom) {
          let index = this.geomsDict.get(geom);
          if (index != undefined) {
              // Increment the ref count for the GLGeom
              this.geomRefCounts[index]++;
              return index;
          }
          if (this.freeGeomIndices.length == 0) {
              const prevSize = this.geomVertexCounts.length;
              const newSize = prevSize * 2;
              this.geomVertexCounts = resizeIntArray(this.geomVertexCounts, newSize);
              this.geomVertexOffsets = resizeIntArray(this.geomVertexOffsets, newSize);
              this.indicesCounts = resizeIntArray(this.indicesCounts, newSize);
              this.indicesOffsets = resizeIntArray(this.indicesOffsets, newSize);
              for (let i = newSize - 1; i >= prevSize; i--) {
                  this.freeGeomIndices.push(i);
              }
          }
          index = this.freeGeomIndices.pop();
          this.geoms[index] = geom;
          this.geomRefCounts[index] = 1;
          this.geomsDict.set(geom, index);
          this.dirtyGeomIndices.add(index);
          this.geomVertexCounts[index] = 0;
          this.geomVertexOffsets[index] = 0;
          this.indicesCounts[index] = 0;
          this.indicesOffsets[index] = 0;
          const geomDataChanged = () => {
              this.dirtyGeomIndices.add(index);
              this.emit('updated');
          };
          const geomDataTopologyChanged = () => {
              this.dirtyGeomIndices.add(index);
              this.emit('updated');
          };
          const eventHandlerIds = {};
          eventHandlerIds.geomDataChanged = geom.on('geomDataChanged', geomDataChanged);
          eventHandlerIds.geomDataTopologyChanged = geom.on('geomDataTopologyChanged', geomDataTopologyChanged);
          if (geom instanceof CompoundGeom) {
              const glMaterialLibrary = this.renderer.glMaterialLibrary;
              geom.materials.forEach((material) => {
                  glMaterialLibrary.addMaterial(material);
              });
              eventHandlerIds.materialsChanged = geom.on('materialsChanged', () => {
                  geom.materials.forEach((material) => {
                      glMaterialLibrary.addMaterial(material);
                  });
                  this.emit('geomDataChanged', new IndexEvent(index));
                  this.emit('updated');
              });
          }
          this.geomEventHandlerIds[index] = eventHandlerIds;
          return index;
      }
      /**
       * Removes a Geom managed by this GLGeomLibrary.
       * @param geom - The geom to remove
       */
      removeGeom(geom) {
          const index = this.geomsDict.get(geom);
          if (index == undefined)
              throw new Error('geom does not exist in the GLGeomLibrary');
          this.geomRefCounts[index]--;
          // If there are still refs to this geom. (GeomItems that use it)
          // then we keep it in the renderer.
          if (this.geomRefCounts[index] > 0) {
              return;
          }
          // If the geom was never drawn, and we are already removing it, there may be no allocation.
          if (this.attributesAllocator.getAllocation(index)) {
              this.attributesAllocator.deallocate(index);
          }
          if (this.indicesAllocator.getAllocation(index)) {
              this.indicesAllocator.deallocate(index);
          }
          if (this.dirtyGeomIndices.has(index)) {
              this.dirtyGeomIndices.delete(index);
          }
          this.geomVertexCounts[index] = 0;
          this.geomVertexOffsets[index] = 0;
          this.geoms[index] = null;
          this.freeGeomIndices.push(index);
          this.geomsDict.delete(geom);
          delete this.geomBuffersTmp[index];
          this.indicesCounts[index] = 0;
          this.indicesOffsets[index] = 0;
          const eventHandlerIds = this.geomEventHandlerIds[index];
          geom.off('geomDataChanged', eventHandlerIds.geomDataChanged);
          geom.off('geomDataTopologyChanged', eventHandlerIds.geomDataTopologyChanged);
          if (geom instanceof CompoundGeom) {
              geom.off('materialsChanged', eventHandlerIds.materialsChanged);
          }
      }
      /**
       * Returns a Geom managed by this GLGeomLibrary.
       * @param index - The index of the geom to retrieve
       * @return - The return value.
       */
      getGeom(index) {
          return this.geoms[index];
      }
      /**
       * Returns a Geom managed by this GLGeomLibrary.
       * @param index - The index of the geom to retrieve
       * @return - The return value.
       */
      getGeomOffsetAndCount(index) {
          return [this.indicesOffsets[index], this.indicesCounts[index]];
      }
      /**
       * Returns a Geom managed by this GLGeomLibrary.
       * @param {number} index - The index of the geom to retrieve
       * @return {array} - The return value.
       */
      getGeomBuffers(index) {
          return this.geomBuffersTmp[index];
      }
      // /////////////////////////////////////
      // Buffers
      /**
       * Allocates space for the geomBuffers for the specified geometry
       * @param index - The index of the geom to upload
       */
      allocateBuffers(index) {
          const geom = this.geoms[index];
          if (!geom)
              return;
          const geomBuffers = geom.genBuffers();
          const numVerts = geomBuffers.numRenderVerts ? geomBuffers.numRenderVerts : geomBuffers.numVertices;
          if (this.geomVertexCounts[index] != numVerts) {
              if (numVerts == 0) {
                  this.attributesAllocator.deallocate(index);
                  this.geomVertexOffsets[index] = 0;
                  this.geomVertexCounts[index] = 0;
              }
              else {
                  const allocation = this.attributesAllocator.allocate(index, numVerts);
                  this.geomVertexOffsets[index] = allocation.start;
                  this.geomVertexCounts[index] = allocation.size;
              }
          }
          // eslint-disable-next-line guard-for-in
          for (const attrName in geomBuffers.attrBuffers) {
              // Removing these because multi-draw doesn't support textures anyway
              // so no need to upload texture coordinates.
              if (attrName == 'textureCoords' || attrName == 'texCoords')
                  continue;
              if (!this.shaderAttrSpec[attrName]) {
                  const attrData = geomBuffers.attrBuffers[attrName];
                  this.shaderAttrSpec[attrName] = genDataTypeDesc(this.__gl, attrData.dataType);
                  this.shaderAttrSpec[attrName].normalized = attrData.normalized;
                  this.attributesBufferNeedsAlloc.push(attrName);
              }
          }
          // //////////////////////////////////////
          // Indices
          if (geomBuffers.indices) {
              const numIndices = geomBuffers.indices.length;
              if (this.indicesCounts[index] != numIndices) {
                  if (numIndices == 0) {
                      this.indicesAllocator.deallocate(index);
                      this.indicesOffsets[index] = 0;
                      this.indicesCounts[index] = 0;
                  }
                  else {
                      const allocation = this.indicesAllocator.allocate(index, numIndices);
                      const elementSize = 4; //  Uint32Array for UNSIGNED_INT
                      this.indicesOffsets[index] = allocation.start * elementSize; // offset is in bytes
                      this.indicesCounts[index] = allocation.size;
                  }
              }
          }
          else {
              // Note: for non-indexed data, like Points, we provide
              // the vertex data as offset and count in the method
              // getGeomOffsetAndCount.
              this.indicesOffsets[index] = this.geomVertexOffsets[index];
              this.indicesCounts[index] = this.geomVertexCounts[index];
          }
          this.geomBuffersTmp[index] = geomBuffers;
      }
      /**
       * Generates the GPU buffers required to store all the geometries
       */
      genAttributesBuffers() {
          // eslint-disable-next-line guard-for-in
          for (const attrName in this.shaderAttrSpec) {
              this.genAttributesBuffer(attrName);
          }
          // Clear this list if it had anything in it.
          this.attributesBufferNeedsAlloc = [];
      }
      /**
       * Generates a single GPU buffer
       */
      genAttributesBuffer(attrName) {
          // Removing these because multi-draw doesn't support textures anyway
          // so no need to upload texture coordinates.
          if (attrName == 'textureCoords' || attrName == 'texCoords')
              return;
          const reservedSpace = this.attributesAllocator.reservedSpace;
          const gl = this.__gl;
          {
              const attrSpec = this.shaderAttrSpec[attrName];
              const numValues = reservedSpace * attrSpec.dimension;
              const attrBuffer = gl.createBuffer();
              gl.bindBuffer(gl.ARRAY_BUFFER, attrBuffer);
              const sizeInBytes = numValues * attrSpec.elementSize;
              gl.bufferData(gl.ARRAY_BUFFER, sizeInBytes, gl.STATIC_DRAW);
              if (this.glattrbuffers[attrName] && this.glattrbuffers[attrName].buffer) {
                  gl.bindBuffer(gl.COPY_WRITE_BUFFER, attrBuffer);
                  gl.bindBuffer(gl.COPY_READ_BUFFER, this.glattrbuffers[attrName].buffer);
                  gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 0, this.glattrbuffers[attrName].numValues * attrSpec.elementSize);
                  gl.deleteBuffer(this.glattrbuffers[attrName].buffer);
              }
              this.glattrbuffers[attrName] = {
                  name: attrName,
                  elementSize: attrSpec.elementSize,
                  buffer: attrBuffer,
                  dataType: attrSpec.dataType,
                  normalized: attrSpec.normalized,
                  numValues: numValues,
                  dimension: attrSpec.dimension,
                  shared: false,
              };
          }
      }
      genIndicesBuffers() {
          // //////////////////////////////////////
          // Indices
          const reservedSpace = this.indicesAllocator.reservedSpace;
          if (this.numIndices != reservedSpace) {
              const gl = this.__gl;
              const indexBuffer = gl.createBuffer();
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
              const elementSize = 4; //  Uint32Array for UNSIGNED_INT
              const sizeInBytes = reservedSpace * elementSize;
              gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, sizeInBytes, gl.STATIC_DRAW);
              if (this.indexBuffer) {
                  gl.bindBuffer(gl.COPY_WRITE_BUFFER, indexBuffer);
                  gl.bindBuffer(gl.COPY_READ_BUFFER, this.indexBuffer);
                  gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 0, this.numIndices * elementSize);
                  gl.deleteBuffer(this.indexBuffer);
              }
              this.indexBuffer = indexBuffer;
              this.numIndices = reservedSpace;
          }
      }
      /**
       * The uploadBuffers method.
       * @param index - The index of the geom to upload
       */
      uploadBuffers(index) {
          const gl = this.__gl;
          // Note: when we allocate the buffers, we may resize the buffer, which
          // means we need to re-upload geoms that were not changed.
          let geomBuffers = this.geomBuffersTmp[index];
          if (!geomBuffers) {
              const geom = this.geoms[index];
              if (!geom)
                  return;
              geomBuffers = geom.genBuffers();
              this.geomBuffersTmp[index] = geomBuffers;
          }
          const count = this.geomVertexCounts[index];
          const numVerts = geomBuffers.numRenderVerts ? geomBuffers.numRenderVerts : geomBuffers.numVertices;
          if (count != numVerts) {
              throw new Error('Invalid allocation for this geom');
          }
          if (numVerts == 0) {
              const event = new IndexEvent(index);
              this.emit('geomDataChanged', event);
              return;
          }
          // eslint-disable-next-line guard-for-in
          for (const attrName in geomBuffers.attrBuffers) {
              const attrSpec = this.shaderAttrSpec[attrName];
              const attrData = geomBuffers.attrBuffers[attrName];
              const glattrbuffer = this.glattrbuffers[attrName];
              // Some geoms might not have all the attributes.
              // and some geoms have more attributes than others.
              if (!attrData || !glattrbuffer)
                  continue;
              gl.bindBuffer(gl.ARRAY_BUFFER, glattrbuffer.buffer);
              const elementSize = attrSpec.elementSize;
              const offsetInBytes = this.geomVertexOffsets[index] * elementSize * attrSpec.dimension;
              const values = convertBuffer(gl, attrData, attrSpec);
              gl.bufferSubData(gl.ARRAY_BUFFER, offsetInBytes, values);
          }
          gl.bindBuffer(gl.ARRAY_BUFFER, null);
          // //////////////////////////////////////
          // Indices
          // Note: we sometimes see geometries with zero vertices/indices which means
          // no allocation has yet been made. We can safely skip these.
          if (geomBuffers.indices && geomBuffers.indices.length > 0) {
              const indices = geomBuffers.indices;
              const allocation = this.indicesAllocator.getAllocation(index);
              if (allocation.size != indices.length) {
                  throw new Error('Invalid allocation for this geom');
              }
              const attributesAllocation = this.attributesAllocator.getAllocation(index);
              // The indices need to be offset so they they index the new attributes array.
              const offsettedIndices = new Uint32Array(allocation.size);
              for (let i = 0; i < indices.length; i++) {
                  offsettedIndices[i] = geomBuffers.indices[i] + attributesAllocation.start;
              }
              const gl = this.__gl;
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
              const elementSize = 4; //  Uint32Array
              const offsetInBytes = allocation.start * elementSize;
              gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, offsetInBytes, offsettedIndices);
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
          }
          if (this.freeDataAfterUpload) {
              const geom = this.geoms[index];
              geom.freeBuffers();
          }
          this.emit('geomDataChanged', new IndexEvent(index));
      }
      /**
       * Cleans the state of this GeomSet during rendering.
       */
      cleanGeomBuffers() {
          // First we allocate all memory needed to clean the GeomSet,
          // and then we start uploading all the data.
          this.dirtyGeomIndices.forEach((index) => {
              this.allocateBuffers(index);
          });
          if (this.attributesBufferNeedsRealloc || this.indicesBufferNeedsRealloc) {
              // If the geom buffers are re-allocated, we need to regenerate
              // all the shader bindings.
              this.resetBindings();
              if (this.attributesBufferNeedsRealloc) {
                  this.genAttributesBuffers();
                  this.attributesBufferNeedsRealloc = false;
              }
              if (this.indicesBufferNeedsRealloc) {
                  this.genIndicesBuffers();
                  this.indicesBufferNeedsRealloc = false;
              }
              // console.log('GLGeomLibrary MemoryAllocation:', this.calcMemoryAllocation())
          }
          else if (this.attributesBufferNeedsAlloc.length > 0) {
              // Sometimes new attributes are added after the main attributes.
              // e.g. Normals could be computed.
              // We now need to generate those missing buffers.
              this.attributesBufferNeedsAlloc.forEach((attrName) => {
                  this.genAttributesBuffer(attrName);
              });
              this.attributesBufferNeedsAlloc = [];
          }
          this.dirtyGeomIndices.forEach((index) => {
              this.uploadBuffers(index);
          });
          this.dirtyGeomIndices = new Set();
      }
      calcMemoryAllocation() {
          const summary = { attrs: {}, indices: {} };
          const MB = 1 << 20;
          for (const attrName in this.shaderAttrSpec) {
              const attrSpec = this.shaderAttrSpec[attrName];
              const reservedSpace = this.attributesAllocator.reservedSpace;
              const allocatedSpace = this.attributesAllocator.allocatedSpace;
              const numValues = reservedSpace * attrSpec.dimension;
              const sizeInBytes = numValues * attrSpec.elementSize;
              summary.attrs[attrName] = {
                  count: allocatedSpace,
                  MB: sizeInBytes / MB,
              };
          }
          const reservedSpace = this.indicesAllocator.reservedSpace;
          const allocatedSpace = this.indicesAllocator.allocatedSpace;
          const elementSize = 4; //  Uint32Array for UNSIGNED_INT
          const sizeInBytes = reservedSpace * elementSize;
          summary.indices = {
              count: allocatedSpace,
              MB: sizeInBytes / MB,
          };
          return summary;
      }
      // /////////////////////////////////////
      // Binding
      resetBindings() {
          for (const shaderkey in this.shaderBindings) {
              const shaderBinding = this.shaderBindings[shaderkey];
              shaderBinding.destroy();
          }
          this.shaderBindings = {};
      }
      /**
       * The bind method.
       * @param renderstate - The renderstate value.
       * @return - Returns true if binding was successful
       */
      bind(renderstate) {
          if (this.dirtyGeomIndices.size > 0) {
              this.cleanGeomBuffers();
          }
          const shaderkey = renderstate.glShader.getId() + renderstate.shaderkey;
          let shaderBinding = this.shaderBindings[shaderkey];
          if (!shaderBinding) {
              const gl = this.__gl;
              shaderBinding = generateShaderGeomBinding(gl, renderstate.attrs, this.glattrbuffers, this.indexBuffer);
              this.shaderBindings[shaderkey] = shaderBinding;
              if (SystemDesc.browserName == 'Safari' && SystemDesc.fullVersion == '15.4') {
                  // Hack to force the primitive restart index cache to be dirty...
                  // https://bugs.webkit.org/show_bug.cgi?id=239015
                  // - First draw updates the indexType to be correct (invalid enum -> draw buffer element type)
                  const gl = this.__gl;
                  gl.drawElements(gl.POINTS, 1, gl.UNSIGNED_INT, 0);
                  gl.drawElements(gl.LINES, 2, gl.UNSIGNED_INT, 0);
                  gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_INT, 0);
                  // - dummy subbuffer update marks the cache dirty
                  // bufferSubData an array of size 1 at the end of the current allocation.
                  const dummyIndices = new Uint32Array(1);
                  const elementSize = 4; //  Uint32Array
                  const offsetInBytes = this.indicesAllocator.allocatedSpace * elementSize;
                  gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, offsetInBytes, dummyIndices);
              }
          }
          else {
              shaderBinding.bind(renderstate);
          }
          return true;
      }
      /**
       * The unbind method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      unbind(renderstate) {
          // Unbinding a geom is important as it puts back some important
          // GL state. (vertexAttribDivisor)
          const shaderkey = renderstate.glShader.getId() + renderstate.shaderkey;
          const shaderBinding = this.shaderBindings[shaderkey];
          if (shaderBinding) {
              shaderBinding.unbind(renderstate);
          }
      }
      // /////////////////////////////////////
      // Drawing
      /**
       * The clearBuffers method.
       */
      clearBuffers() {
          const gl = this.__gl;
          // eslint-disable-next-line guard-for-in
          for (const attrName in this.glattrbuffers) {
              const glbuffer = this.glattrbuffers[attrName];
              if (glbuffer.shared)
                  continue; /* This buffer is shared between geoms. do not destroy */
              gl.deleteBuffer(glbuffer.buffer);
          }
          this.glattrbuffers = {};
          if (this.indexBuffer) {
              gl.deleteBuffer(this.indexBuffer);
              this.indexBuffer = null;
          }
          // eslint-disable-next-line guard-for-in
          this.resetBindings();
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          // this.geoms.forEach((geom) => this.removeGeom(geom))
          this.clearBuffers();
          this.__destroyed = true;
          //  Note: PoTree listens to this event. If moved up into RefCounted, make sure it is still emitted.
          this.emit('destructing');
      }
  }

  const GLGeomItemChangeType = {
      GEOMITEM_CHANGED: 0,
      GEOM_CHANGED: 1,
      VISIBILITY_CHANGED: 2,
      HIGHLIGHT_CHANGED: 3,
  };
  const GLGeomItemFlags = {
      GEOMITEM_FLAG_CUTAWAY: 2,
      GEOMITEM_INVISIBLE_IN_GEOMDATA: 4,
      GEOMITEM_TRANSPARENT: 8, // 1<<3;
  };
  /** This class is responsible for managing a GeomItem within the renderer.
   * @private
   * @extends EventEmitter
   */
  class GLGeomItem extends EventEmitter {
      listenerIDs = {};
      // //referenced by other classes
      GLGeomItemSet;
      GLShaderGeomSets;
      gl;
      geomItem;
      geomItemId;
      geomId;
      materialId;
      supportInstancing;
      visible;
      shattered = false;
      culled = false;
      geomMatrixDirty = false;
      modelMatrixArray;
      geomData = [];
      highlightSubIndex = -1;
      /**
       * Create a GL geom item.
       * @param gl - The gl value.
       * @param geomItem - The geomItem value.
       * @param geomItemId - The geomItemId value.
       * @param geomId - The geomId value.
       * @param materialId - The materialId value.
       * @param supportInstancing - a boolean to disable instancing support on some mobile platforms
       */
      constructor(gl, geomItem, geomItemId, geomId, materialId, supportInstancing = false) {
          super();
          this.gl = gl;
          this.geomItem = geomItem;
          this.geomItemId = geomItemId;
          this.geomId = geomId;
          this.materialId = materialId;
          this.supportInstancing = supportInstancing;
          this.visible = this.geomItem.isVisible();
          this.listenerIDs['visibilityChanged'] = this.geomItem.on('visibilityChanged', (event) => {
              const wasVisible = !this.culled && this.visible;
              this.visible = event.visible;
              const isVisible = !this.culled && this.visible;
              if (wasVisible != isVisible) {
                  this.emit('visibilityChanged', new VisibilityChangedEvent(isVisible));
              }
          });
          if (geomItem instanceof CADBody)
              this.shattered = geomItem.shattered;
          this.listenerIDs['shatterStateChanged'] = this.geomItem.on('shatterStateChanged', (event) => {
              this.shattered = event.state;
              this.emit('shatterStateChanged', event);
          });
          if (!this.supportInstancing) {
              const highlightChanged = (event) => {
                  if (event.name) {
                      const highlightName = event.name;
                      const subGeomIndexIndex = highlightName.indexOf(':');
                      let subGeomIndices = [];
                      if (subGeomIndexIndex != -1) {
                          subGeomIndices = highlightName
                              .substring(subGeomIndexIndex + 1)
                              .split(',')
                              .map((v) => Number.parseInt(v));
                          this.highlightSubIndex = subGeomIndices[0];
                      }
                  }
                  else {
                      this.highlightSubIndex = -1;
                  }
              };
              this.listenerIDs['highlightChanged'] = this.geomItem.on('highlightChanged', highlightChanged);
          }
      }
      /**
       * The isVisible method.
       * @return - The return value.
       */
      isVisible() {
          return !this.culled && this.visible;
      }
      /**
       * Sets the additional culled value which controls visiblity
       * @param culled - True if culled, else false.
       */
      setCulled(culled) {
          const wasVisible = !this.culled && this.visible;
          this.culled = culled;
          const isVisible = !this.culled && this.visible;
          if (wasVisible != isVisible) {
              this.emit('visibilityChanged', new VisibilityChangedEvent(isVisible));
          }
      }
      /**
       * The bind method.
       * @param renderstate - The object tracking the current state of the renderer
       * @return - The return value.
       */
      bind(renderstate) {
          const gl = this.gl;
          const { highlightSubIndex, geomItemId } = renderstate.unifs;
          if (highlightSubIndex) {
              gl.uniform1i(highlightSubIndex.location, this.highlightSubIndex);
          }
          if (geomItemId) {
              gl.uniform1i(geomItemId.location, this.geomItemId);
          }
          return true;
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          this.geomItem.off('visibilityChanged', this.listenerIDs['visibilityChanged']);
          if (!this.supportInstancing) {
              this.geomItem.off('highlightChanged', this.listenerIDs['highlightChanged']);
          }
      }
  }

  // eslint-disable-next-line require-jsdoc
  class ReductionShader extends GLShader {
      /**
       * Create an atlas layout shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'ReductionShader');
          this.setShaderStage('VERTEX_SHADER', `

precision highp float;

uniform int reductionTextureWidth;
uniform sampler2D geomDataTexture;

ivec2 texelCoordFromVertexId(){
  ivec2 texSize = textureSize(geomDataTexture, 0);
  return ivec2(
    gl_VertexID % texSize.x, 
    gl_VertexID / texSize.x
    );
}

vec2 pointPositionFromGeomItemId(int geomItemId){
  vec2 result = vec2(
    (float(geomItemId % reductionTextureWidth) + 0.5) / float(reductionTextureWidth), 
    (float(geomItemId / reductionTextureWidth) + 0.5) / float(reductionTextureWidth)
    );
  return vec2(-1.0, -1.0) + (result * 2.0);
}

void main()
{
  // Get the texel coordinate in the source geomdata buffer.
  // there is one point for every pixel in the geomdata texture.
  ivec2 texelCoord = texelCoordFromVertexId();
  int geomItemId = int(texelFetch(geomDataTexture, texelCoord, 0).g + 0.5);

  if (geomItemId > 0) {
    vec2 position = pointPositionFromGeomItemId(geomItemId);
    gl_Position = vec4(position, 0.0, 1.0);
    gl_PointSize = 1.0;
  } else {
    // Move it off screen
    gl_Position = vec4(-2.0, -2.0, 0.0, 1.0);
    gl_PointSize = 0.0;
  }
}

`);
          this.setShaderStage('FRAGMENT_SHADER', `
precision highp float;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  fragColor = vec4(1.0, 1.0, 1.0, 1.0);

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}

`);
      }
  }

  var frag$g = "\nprecision highp float;\n#define GLSLIFY 1\n\n/* VS Outputs */\nvarying vec4 v_color;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int drawItemId = int(v_color.g);\n  fragColor = v_color;\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n"; // eslint-disable-line

  var vert$h = "\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec4 positions;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 cameraMatrix;\n\nuniform highp int occlusionCulling;\nuniform sampler2D reductionDataTexture;\n\nimport 'transpose.glsl'\nimport 'GLSLUtils.glsl'\nimport 'stack-gl/transpose.glsl'\nimport 'stack-gl/inverse.glsl'\nimport 'geomItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\nconst int GEOMITEM_INVISIBLE_IN_GEOMDATA = 2; // 1<<1;\n\n/* VS Outputs */\nvarying vec4 v_color;\n\nvoid main(void) {\n\n  int drawItemId = getGeomItemId();\n  vec4 geomItemData  = getInstanceData(drawItemId);\n  int flags = int(geomItemData.r + 0.5);\n\n  if (occlusionCulling != 0) {\n    // Check if in the reduction texture, this item is already flagged as visible.\n    // Note: we only draw bboxes for those that have been flagged as invisible, but might\n    // be just off screen, or onscreen, but were culled in the previous update.\n    int isVisible = int(fetchTexel(reductionDataTexture, textureSize(reductionDataTexture, 0), drawItemId).r);\n    if (isVisible > 0) {\n      return;\n    }\n  }\n\n  vec4 bboxMin = fetchTexel(instancesTexture, instancesTextureSize, (drawItemId * pixelsPerItem) + 6);\n  vec4 bboxMax = fetchTexel(instancesTexture, instancesTextureSize, (drawItemId * pixelsPerItem) + 7);\n  mat4 viewProjectionMatrix = projectionMatrix * viewMatrix;\n\n  if (occlusionCulling != 0) {\n    // TODO: The bounding box stochastic\n    v_color = vec4(0.0, float(drawItemId), 0.0, 1.0);\n  } else {\n    v_color = fetchTexel(instancesTexture, instancesTextureSize, (drawItemId * pixelsPerItem) + 4);\n  }\n\n  vec4 pos = positions;\n  if (pos.x < 0.0) pos.x = bboxMin.x;\n  else if (pos.x > 0.0) pos.x = bboxMax.x;\n  if (pos.y < 0.0) pos.y = bboxMin.y;\n  else if (pos.y > 0.0) pos.y = bboxMax.y;\n  if (pos.z < 0.0) pos.z = bboxMin.z;\n  else if (pos.z > 0.0) pos.z = bboxMax.z;\n\n  gl_Position = viewProjectionMatrix * pos;\n}\n"; // eslint-disable-line

  /* eslint-disable require-jsdoc */
  class BoundingBoxShader extends GLShader {
      /**
       * Create a GL shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'BoundingBoxShader');
          this.setShaderStage('VERTEX_SHADER', vert$h);
          this.setShaderStage('FRAGMENT_SHADER', frag$g);
      }
  }

  var WorkerFactory = createBase64WorkerFactory('', null, false);
  /* eslint-enable */

  // See also: src\Renderer\Shaders\GLSL\drawItemId.glsl
  // const int pixelsPerItem = 8;
  const pixelsPerItem$1 = 8;

  // https://forum.babylonjs.com/t/speeding-up-readpixels/12739
  function clientWaitAsync(gl, sync, flags, interval_ms) {
      return new Promise((resolve, reject) => {
          function test() {
              const res = gl.clientWaitSync(sync, flags, 0);
              if (res == gl.WAIT_FAILED) {
                  reject();
                  return;
              }
              if (res == gl.TIMEOUT_EXPIRED) {
                  setTimeout(test, interval_ms);
                  return;
              }
              resolve();
          }
          test();
      });
  }
  async function getBufferSubDataAsync(gl, target, buffer, srcByteOffset, dstBuffer, 
  /* optional */ dstOffset = 0, 
  /* optional */ length = 0) {
      const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
      gl.flush();
      await clientWaitAsync(gl, sync, 0, 10);
      gl.deleteSync(sync);
      gl.bindBuffer(target, buffer);
      gl.getBufferSubData(target, srcByteOffset, dstBuffer, dstOffset, length);
      gl.bindBuffer(target, null);
      return dstBuffer;
  }
  async function readPixelsAsync(gl, x, y, w, h, format, type, dest) {
      const buf = gl.createBuffer();
      gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);
      gl.bufferData(gl.PIXEL_PACK_BUFFER, dest.byteLength, gl.STREAM_READ);
      gl.readPixels(x, y, w, h, format, type, 0);
      gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);
      await getBufferSubDataAsync(gl, gl.PIXEL_PACK_BUFFER, buf, 0, dest);
      gl.deleteBuffer(buf);
      return dest;
  }

  /**
   * @private
   * @extends {ProceduralMesh}
   */
  class BBoxOcclusionLinesCuboid extends Lines {
      constructor() {
          super();
          this.setNumVertices(8);
          const positions = this.getVertexAttribute('positions');
          positions.setValue(0, new Vec3(0.5, -0.5, 0.5));
          positions.setValue(1, new Vec3(0.5, 0.5, 0.5));
          positions.setValue(2, new Vec3(-0.5, 0.5, 0.5));
          positions.setValue(3, new Vec3(-0.5, -0.5, 0.5));
          positions.setValue(4, new Vec3(0.5, -0.5, -0.5));
          positions.setValue(5, new Vec3(0.5, 0.5, -0.5));
          positions.setValue(6, new Vec3(-0.5, 0.5, -0.5));
          positions.setValue(7, new Vec3(-0.5, -0.5, -0.5));
          //
          //      7*----------*6
          //     /   \  /   / |
          //  4*----------*5  |
          //   | \     /  |   |
          //   |   \ /    |   |
          //   |   / \3   |  /2
          //   | /     \  |/
          //  0*----------*1
          //
          this.setNumSegments(34);
          this.setSegmentVertexIndices(0, 0, 1);
          this.setSegmentVertexIndices(1, 0, 2);
          this.setSegmentVertexIndices(2, 0, 3);
          this.setSegmentVertexIndices(3, 0, 4);
          this.setSegmentVertexIndices(4, 0, 5);
          this.setSegmentVertexIndices(5, 0, 6);
          this.setSegmentVertexIndices(6, 0, 7);
          this.setSegmentVertexIndices(7, 1, 0);
          this.setSegmentVertexIndices(8, 1, 2);
          this.setSegmentVertexIndices(9, 1, 3);
          this.setSegmentVertexIndices(10, 1, 4);
          this.setSegmentVertexIndices(11, 1, 5);
          this.setSegmentVertexIndices(12, 1, 6);
          this.setSegmentVertexIndices(13, 1, 7);
          this.setSegmentVertexIndices(14, 2, 0);
          this.setSegmentVertexIndices(15, 2, 1);
          this.setSegmentVertexIndices(16, 2, 3);
          this.setSegmentVertexIndices(17, 2, 4);
          this.setSegmentVertexIndices(18, 2, 5);
          this.setSegmentVertexIndices(19, 2, 6);
          this.setSegmentVertexIndices(20, 2, 7);
          this.setSegmentVertexIndices(21, 3, 1);
          this.setSegmentVertexIndices(22, 3, 2);
          this.setSegmentVertexIndices(23, 3, 0);
          this.setSegmentVertexIndices(24, 3, 4);
          this.setSegmentVertexIndices(25, 3, 5);
          this.setSegmentVertexIndices(26, 3, 6);
          this.setSegmentVertexIndices(27, 3, 7);
          this.setSegmentVertexIndices(28, 4, 5);
          this.setSegmentVertexIndices(29, 4, 6);
          this.setSegmentVertexIndices(30, 4, 7);
          this.setSegmentVertexIndices(31, 5, 6);
          this.setSegmentVertexIndices(32, 5, 7);
          this.setSegmentVertexIndices(33, 6, 7);
      }
  }

  /** This base class supports various XR experiences via spcialized clases such as VRViewport and XRViewport.
   * @extends GLBaseViewport
   */
  class XRViewport extends GLBaseViewport {
      projectionMatricesUpdated;
      tick;
      stageTreeItem;
      stageScale;
      viewXfo = new Xfo();
      stageXfo = new Xfo();
      invStageXfo = new Xfo();
      invStageMatrix = new Mat4();
      region = [];
      session = null;
      refSpace;
      projectionMatrices = [];
      viewMatrices = [];
      cameraMatrices = [];
      sessionMode = 'immersive-vr';
      controllersMap = {};
      controllers = [];
      controllerPointerDownTime = [];
      /**
       * Create a VR viewport.
       * @param renderer - The renderer value.
       */
      constructor(renderer, sessionMode) {
          super(renderer);
          this.clickTime = 300;
          this.doubleClickTime = 300;
          this.sessionMode = sessionMode;
          // ////////////////////////////////////////////
          // Tree
          this.stageTreeItem = new TreeItem('VRStage');
          this.stageTreeItem.setVisible(false);
          this.__renderer.addTreeItem(this.stageTreeItem);
          // ////////////////////////////////////////////
          // Xfos
          const xfo = new Xfo();
          // Convert Y-Up to Z-Up.
          xfo.ori.setFromAxisAndAngle(new Vec3(1, 0, 0), Math.PI * 0.5);
          this.setXfo(xfo); // Reset the stage Xfo.
      }
      getRenderer() {
          return this.renderer;
      }
      /**
       * The getTreeItem method.
       * @return - The return value.
       */
      getTreeItem() {
          return this.stageTreeItem;
      }
      /**
       * The getXfo method.
       * @return - The return value.
       */
      getXfo() {
          return this.stageXfo;
      }
      /**
       * Sets the stage Xfo, which is the Xfo that transforms the user into the world.
       * The local displacement of the user within their volume is applied on top of this Xfo.
       * @param xfo - The xfo value.
       */
      setXfo(xfo) {
          this.stageXfo = xfo;
          this.stageTreeItem.globalXfoParam.value = xfo;
          this.invStageXfo = xfo.inverse();
          this.invStageMatrix = this.invStageXfo.toMat4();
          this.stageScale = xfo.sc.x;
      }
      /**
       * The getControllers method.
       * @return - The return value.
       */
      getControllers() {
          return this.controllers;
      }
      // //////////////////////////
      // Presenting
      /**
       * The isPresenting method.
       * @return - The return value.
       */
      isPresenting() {
          return this.session != null;
      }
      /**
       * Lanuches the session loop
       */
      startSession() {
          const onAnimationFrame = (t, frame) => {
              if (this.session) {
                  this.session.requestAnimationFrame(onAnimationFrame);
                  this.drawXRFrame(frame);
              }
          };
          this.session.requestAnimationFrame(onAnimationFrame);
      }
      /**
       * The stopPresenting method.
       */
      stopPresenting() {
          if (!this.session)
              return;
          this.session.end();
      }
      /**
       * The togglePresenting method.
       */
      togglePresenting() {
          if (this.session)
              this.stopPresenting();
          else
              this.startPresenting();
      }
      /**
       * The bindCullingViewport method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      bindCullingViewport(renderstate, fovY, projectionMatrixMat4) {
          renderstate.viewXfo = this.viewXfo;
          renderstate.viewScale = 1.0;
          renderstate.region = this.region;
          renderstate.cameraMatrix = renderstate.viewXfo.toMat4();
          const viewMatrixMat4 = renderstate.cameraMatrix.inverse();
          renderstate.viewport = this;
          // const frustumHPersp = Math.tan(fovY / 2.0) * flocalDist * 2.0
          // const frustumWPersp = frustumHPersp * aspect
          // const frustumHOrtho = this.camera.getFrustumHeight()
          // const frustumWOrtho = frustumHPersp * aspect
          // const viewportFrustum = Vec4(
          //   MathFunctions.lerp(frustumWPersp, frustumWOrtho, isOrthographic),
          //   MathFunctions.lerp(frustumHPersp, frustumHOrtho, isOrthographic),
          //   flocalDist,
          //   fovY
          // )
          const gl = this.__renderer.gl;
          renderstate.bindRendererUnifs = (unifs) => {
              const { cameraMatrix, viewMatrix, projectionMatrix, eye, isOrthographic } = unifs;
              if (cameraMatrix) {
                  gl.uniformMatrix4fv(cameraMatrix.location, false, renderstate.cameraMatrix.asArray());
              }
              if (viewMatrix) {
                  gl.uniformMatrix4fv(viewMatrix.location, false, viewMatrixMat4.asArray());
              }
              if (projectionMatrix) {
                  gl.uniformMatrix4fv(projectionMatrix.location, false, projectionMatrixMat4.asArray());
              }
              if (eye) {
                  // for monocular rendering, we just render viewport 0
                  gl.uniform1i(eye.location, 0);
              }
              if (isOrthographic) {
                  // Left or right eye, when rendering stereo VR.
                  gl.uniform1i(isOrthographic.location, 0);
              }
              // if (viewportFrustum && this.viewportFrustum) {
              //   // Left or right eye, when rendering stereo VR.
              //   gl.uniform4f(
              //     viewportFrustum.location,
              //     this.viewportFrustum.x,
              //     this.viewportFrustum.y,
              //     this.viewportFrustum.z,
              //     this.viewportFrustum.w
              //   )
              // }
          };
          renderstate.bindViewports = (unifs, draw) => draw();
      }
      /**
       * The bindXRViewport method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      bindXRViewport(renderstate, viewports) {
          renderstate.viewXfo = this.viewXfo;
          renderstate.viewScale = 1.0;
          renderstate.region = this.region;
          renderstate.cameraMatrix = renderstate.viewXfo.toMat4();
          renderstate.viewport = this;
          const gl = this.__renderer.gl;
          renderstate.bindRendererUnifs = (unifs) => {
              // Note: the camera matrix should be the head position instead
              // of the eye position. The inverse(viewMatrix) can be used
              // when we want the eye pos.
              const { cameraMatrix } = unifs;
              if (cameraMatrix) {
                  gl.uniformMatrix4fv(cameraMatrix.location, false, renderstate.cameraMatrix.asArray());
              }
          };
          renderstate.bindViewports = (unifs, draw) => {
              const { isOrthographic } = unifs;
              if (isOrthographic) {
                  gl.uniform1i(isOrthographic.location, 0);
              }
              viewports.forEach((vp, index) => {
                  let vp_region = vp.region;
                  gl.viewport(vp_region[0], vp_region[1], vp_region[2], vp_region[3]);
                  const { viewMatrix, projectionMatrix, eye } = unifs;
                  if (viewMatrix) {
                      gl.uniformMatrix4fv(viewMatrix.location, false, vp.viewMatrix.asArray());
                  }
                  if (projectionMatrix) {
                      gl.uniformMatrix4fv(projectionMatrix.location, false, vp.projectionMatrix.asArray());
                  }
                  if (eye) {
                      // Left or right eye, when rendering stereo VR.
                      gl.uniform1i(eye.location, index);
                  }
                  draw();
              });
          };
      }
  }

  /** Class representing a VR head.
   * @private
   */
  class XRHead {
      xrvp;
      treeItem;
      mat4;
      localXfo;
      hmdGeomItem;
      /**
       * Create a VR head.
       * @param xrvp - The VR viewport.
       * @param stageTreeItem - The stageTreeItem value.
       */
      constructor(xrvp, stageTreeItem) {
          this.xrvp = xrvp;
          this.treeItem = new TreeItem('XRHead');
          stageTreeItem.addChild(this.treeItem);
          this.mat4 = new Mat4();
          this.localXfo = new Xfo();
      }
      /**
       * The Set wether the HMB is visible in rendering or not. Used in spectator rendering.
       * @param state - The visibility value.
       */
      setVisible(state) {
          if (state && !this.hmdGeomItem) {
              const assetItem = this.xrvp.getAsset();
              if (!assetItem)
                  return;
              const hmdGeomItem = assetItem.getChildByName('HMD');
              if (!hmdGeomItem)
                  return;
              this.hmdGeomItem = hmdGeomItem.clone({ assetItem });
              if (this.hmdGeomItem) {
                  const quat = new Quat();
                  quat.setFromAxisAndAngle(new Vec3(0, 1, 0), Math.PI);
                  this.hmdGeomItem.localXfoParam.value = new Xfo(new Vec3(0, -0.035, -0.03), quat, new Vec3(0.001, 0.001, 0.001) // VRAsset units are in mm.
                  );
                  this.treeItem.addChild(this.hmdGeomItem, false);
              }
          }
          if (this.hmdGeomItem) {
              this.hmdGeomItem.visibleParam.value = state;
          }
      }
      /**
       * The update method.
       * @param pose - The pose value.
       */
      update(pose) {
          // Old
          // this.mat4.fromArray(pose.poseModelMatrix);
          // New
          this.mat4.fromArray(pose.transform.matrix);
          this.localXfo.setFromMat4(this.mat4);
          // const pos = pose.transform.position;
          // this.localXfo.tr.set(pos.x, pos.y,pos.z);
          // const ori = pose.transform.orientation;
          // this.localXfo.ori.set(ori.x, ori.y, ori.z, ori.x);
          this.treeItem.localXfoParam.value = this.localXfo;
      }
      /**
       * The getTreeItem method.
       * @return - The return value.
       */
      getTreeItem() {
          return this.treeItem;
      }
      /**
       * The getXfo method.
       * @return - The return value.
       */
      getXfo() {
          return this.localXfo;
      }
  }

  // const line = new Lines()
  // line.setNumVertices(2)
  // line.setNumSegments(1)
  // line.setSegmentVertexIndices(0, 0, 1)
  // const positions = <Vec3Attribute>line.getVertexAttribute('positions')
  // positions.setValue(0, new Vec3(0.0, 0.0, 0.0))
  // positions.setValue(1, new Vec3(0.0, 0.0, -1.0))
  // line.setBoundingBoxDirty()
  /** Class representing a VR controller.
   *
   * The XRController class wraps the XRInputSource provided by the WebXR API.
   *
   * https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource
   *
   * The XRController provides a tree item that can be used to attach geometries to represenet
   * the controllers or tools that the user may have in thier hands.
   * ```javascript
   * renderer.getXRViewport().then((xrvp) => {
   *   xrvp.on('controllerAdded', (event) => {
   *     const controller = event.controller
   *
   *     // Configure the distance of the ray cast performed by the controller into the scene.
   *     // Note: setting to 0 disables ray casting.
   *     controller.raycastDist = 20.0
   *
   *     // Remove the green ball added by the VRViewManipulator.
   *     controller.tipItem.removeAllChildren()
   *
   *     // Add a visual indication of the ray.
   *     const pointerItem = new GeomItem('PointerRay', line, pointermat)
   *     pointerItem.setSelectable(false)
   *     const pointerXfo = new Xfo()
   *     pointerXfo.sc.set(1, 1, controller.raycastDist)
   *     pointerItem.localXfoParam.value = pointerXfo
   *     controller.tipItem.addChild(pointerItem, false)
   *
   *     // The tip items needs to be rotated down a little to make it
   *     // point in the right direction.
   *     const tipItemXfo = controller.tipItem.localXfoParam.value
   *     tipItemXfo.ori.setFromAxisAndAngle(new Vec3(1, 0, 0), -0.8)
   *     controller.tipItem.localXfoParam.value = tipItemXfo
   *
   *     controller.on('buttonPressed', (event) => {
   *       console.log('buttonPressed', event)
   *     })
   *     controller.on('buttonReleased', (event) => {
   *       console.log('buttonReleased', event)
   *     })
   *   })
   * })
   * ```
   *
   * **Events**
   * * **buttonPressed:** Emitted when the user presses any of the buttons aside from the trigger button.
   * * **buttonReleased:** Emitted when the user release any of the buttons aside from the trigger button.
   *
   *
   * @extends EventEmitter
   */
  class XRController extends EventEmitter {
      id;
      buttonPressed;
      xrvp;
      inputSource;
      pressedButtons = [];
      treeItem;
      tipItem;
      // The frequency of raycasting into the scene for this controller
      raycastTick = 5;
      raycastArea = 0.005;
      raycastDist = 0.04;
      pointerRay = new Ray();
      mat4;
      xfo;
      raycastAreaCache = 0;
      raycastDistCache = 0;
      rayCastRenderTargetProjMatrix = new Mat4();
      tick;
      hitTested;
      pointerOverItem;
      intersectionData;
      /**
       * Create a VR controller.
       * @param xrvp - The Vr viewport.
       * @param inputSource - The input source.
       * @param id - The id value.
       */
      constructor(xrvp, inputSource, id) {
          super();
          this.xrvp = xrvp;
          this.inputSource = inputSource;
          this.id = id;
          this.buttonPressed = false;
          this.inputSource.gamepad.buttons.forEach((button, index) => {
              if (index == 0)
                  return;
              this.pressedButtons[index] = button.pressed;
          });
          // /////////////////////////////////
          // Xfo
          this.mat4 = new Mat4();
          this.xfo = new Xfo();
          // this.setVisible(true);
          this.treeItem = new TreeItem('XRController:' + inputSource.handedness + id);
          // Controller coordinate system
          // X = Horizontal.
          // Y = Down through the knuckles.
          // Z = Towards handle base.
          if (!SystemDesc.isMobileDevice) {
              // A Vive or Oculus Controller
              this.tipItem = new TreeItem('Tip');
              // Note: the tip of the controller need to be off
              // the end of the controller. getGeomItemAtTip
              // now searches a grid in that area and so we need to
              // ensure that the grid does not touch the controller,
              // else it will return the controller geom from
              // the getGeomItemAtTip function
              const tipXfo = new Xfo();
              tipXfo.tr.set(0.0, -0.05, -0.13);
              // tilt the pointer down a little to be easier on the wrists.
              tipXfo.ori.setFromAxisAndAngle(new Vec3(1, 0, 0), Math.PI * -0.2);
              this.tipItem.localXfoParam.value = tipXfo;
              this.treeItem.addChild(this.tipItem, false);
              xrvp.stageTreeItem.addChild(this.treeItem);
              // const pointermat = new Material('pointermat', 'LinesShader')
              // pointermat.setSelectable(false)
              // pointermat.getParameter('BaseColor').value = new Color(1.2, 0, 0)
              // const pointerItem = new GeomItem('PointerRay', line, pointermat)
              // pointerItem.setSelectable(false)
              // const pointerXfo = new Xfo()
              // pointerXfo.sc.set(1, 1, this.raycastDist)
              // pointerItem.localXfoParam.value = pointerXfo
              // this.tipItem.addChild(pointerItem, false)
              if (inputSource.targetRayMode == 'tracked-pointer') {
                  // Once we have an input profile, we can determine the XR Device in use.
                  switch (inputSource.profiles[0]) {
                      case 'htc-vive':
                          localStorage.setItem('ZeaEngine_XRDevice', 'Vive');
                          break;
                      case 'oculus-touch':
                      case 'oculus-touch-v2':
                      case 'oculus-touch-v3':
                          localStorage.setItem('ZeaEngine_XRDevice', 'Oculus');
                          break;
                  }
                  //   // Use the fetchProfile method from the motionControllers library
                  //   // to find the appropriate glTF mesh path for this controller.
                  //   fetchProfile(inputSource, DEFAULT_PROFILES_PATH).then(({ profile, assetPath }) => {
                  //     // Typically if you wanted to animate the controllers in response
                  //     // to device inputs you'd create a new MotionController() instance
                  //     // here to handle the animation, but this sample will skip that
                  //     // and only display a static mesh for simplicity.
                  //     scene.inputRenderer.setControllerMesh(new Gltf2Node({ url: assetPath }), inputSource.handedness)
                  //   })
                  xrvp.loadHMDResources().then((assetItem) => {
                      if (!assetItem)
                          return;
                      const localXfo = new Xfo();
                      localXfo.ori.setFromAxisAndAngle(new Vec3(0, 1, 0), Math.PI);
                      localXfo.sc.set(0.001, 0.001, 0.001); // VRAsset units are in mm.
                      let srcControllerTree;
                      if (inputSource.profiles[0] == 'htc-vive') {
                          srcControllerTree = assetItem.getChildByName('Controller');
                          localXfo.tr.set(0, -0.035, -0.085);
                      }
                      else {
                          switch (inputSource.handedness) {
                              case 'left':
                                  srcControllerTree = assetItem.getChildByName('LeftController');
                                  localXfo.tr.set(0, -0.035, -0.085);
                                  localXfo.sc.scaleInPlace(0.85);
                                  break;
                              case 'right':
                                  srcControllerTree = assetItem.getChildByName('RightController');
                                  localXfo.tr.set(0, -0.035, -0.085);
                                  localXfo.sc.scaleInPlace(0.85);
                                  break;
                              case 'none':
                              default:
                                  srcControllerTree = assetItem.getChildByName('Controller');
                                  break;
                          }
                      }
                      if (srcControllerTree) {
                          const controllerTree = srcControllerTree.clone({ assetItem });
                          controllerTree.localXfoParam.value = localXfo;
                          this.treeItem.addChild(controllerTree, false);
                      }
                  });
              }
          }
          this.tick = 0;
      }
      /**
       * The getHandedness method.
       * @return - The return value.
       */
      getHandedness() {
          return this.inputSource.handedness;
      }
      /**
       * The getId method.
       * @return - The return value.
       */
      getId() {
          return this.id;
      }
      /**
       * The getTreeItem method.
       * @return - The return value.
       */
      getTreeItem() {
          return this.treeItem;
      }
      /**
       * The getTipItem method.
       * @return - The return value.
       */
      getTipItem() {
          return this.tipItem;
      }
      /**
       * The getTipXfo method.
       * @return - The return value.
       */
      getTipXfo() {
          return this.tipItem.globalXfoParam.value;
      }
      /**
       * The isButtonPressed method.
       * @return - The return value.
       */
      isButtonPressed() {
          return this.buttonPressed;
      }
      /**
       * The getControllerStageLocalXfo method.
       * @return - The return value.
       */
      getControllerStageLocalXfo() {
          return this.xfo;
      }
      /**
       * The getControllerTipStageLocalXfo method.
       * @return - The return value.
       */
      getControllerTipStageLocalXfo() {
          return this.xfo.multiply(this.tipItem.localXfoParam.value);
      }
      // ////////////////////////////////
      /**
       * The updatePose method.
       * @param refSpace - The refSpace value.
       * @param xrFrame - The xrFrame value.
       * @param inputSource - The inputSource value.
       */
      updatePose(refSpace, xrFrame, inputSource) {
          const inputPose = xrFrame.getPose(inputSource.gripSpace, refSpace);
          // We may not get a inputPose back in cases where the input source has lost
          // tracking or does not know where it is relative to the given frame
          // of reference.
          if (!inputPose || !inputPose.transform) {
              return;
          }
          this.mat4.fromArray(inputPose.transform.matrix);
          this.xfo.setFromMat4(this.mat4);
          // const pos = inputPose.transform.position;
          // this.xfo.tr.set(pos.x, pos.y,pos.z);
          // const ori = inputPose.transform.orientation;
          // this.xfo.ori.set(ori.x, ori.y, ori.z, ori.x);
          // //////////////////////////////
          this.treeItem.localXfoParam.value = this.xfo;
          // Reset the geom at tip so it will be recomputed if necessary
          this.hitTested = false;
          let rebindRenderTarget = false;
          // /////////////////////////////////
          // Simulate Pointer Enter/Leave Events.
          // Check for pointer over every Nth frame (at 90fps this should be fine.)
          if (this.raycastDist > 0.0 && this.raycastTick > 0 && this.tick % this.raycastTick == 0) {
              const intersectionData = this.getGeomItemAtTip();
              rebindRenderTarget = true;
              if (intersectionData != undefined) {
                  const event = new XRControllerEvent(this.xrvp, this, 0, this.buttonPressed ? 1 : 0);
                  event.intersectionData = intersectionData;
                  event.pointerRay = this.pointerRay;
                  if (intersectionData.geomItem != this.pointerOverItem) {
                      if (this.pointerOverItem) {
                          event.leftGeometry = this.pointerOverItem;
                          this.pointerOverItem.onPointerLeave(event);
                          if (event.propagating)
                              this.xrvp.emit('pointerLeaveGeom', event);
                      }
                      event.propagating = true;
                      this.pointerOverItem = intersectionData.geomItem;
                      this.pointerOverItem.onPointerEnter(event);
                      if (event.propagating)
                          this.xrvp.emit('pointerOverGeom', event);
                  }
                  // emit the pointer move event directly to the item.
                  intersectionData.geomItem.onPointerMove(event);
              }
              else if (this.pointerOverItem) {
                  const event = new XRControllerEvent(this.xrvp, this, 0, this.buttonPressed ? 1 : 0);
                  event.pointerRay = this.pointerRay;
                  event.leftGeometry = this.pointerOverItem;
                  this.pointerOverItem.onPointerLeave(event);
                  this.pointerOverItem = null;
              }
          }
          this.inputSource.gamepad.buttons.forEach((button, index) => {
              if (index == 0)
                  return;
              if (button.pressed && !this.pressedButtons[index]) {
                  this.pressedButtons[index] = true;
                  const event = new XRControllerEvent(this.xrvp, this, index, 1);
                  event.intersectionData = this.getGeomItemAtTip();
                  event.pointerRay = this.pointerRay;
                  this.emit('buttonPressed', event);
                  rebindRenderTarget = true;
              }
              else if (!button.pressed && this.pressedButtons[index]) {
                  this.pressedButtons[index] = false;
                  const event = new XRControllerEvent(this.xrvp, this, index, 0);
                  this.emit('buttonReleased', event);
              }
          });
          this.tick++;
          return rebindRenderTarget;
      }
      // ////////////////////////////////
      /**
       * The getGeomItemAtTip method.
       * @return - The return value.
       */
      getGeomItemAtTip() {
          if (this.hitTested)
              return this.intersectionData;
          this.hitTested = true;
          if (this.raycastDist == 0)
              return null;
          const renderer = this.xrvp.getRenderer();
          const xfo = this.tipItem.globalXfoParam.value.clone();
          xfo.sc.set(1, 1, 1);
          this.pointerRay.start = xfo.tr;
          this.pointerRay.dir = xfo.ori.getZaxis().negate();
          const dist = this.raycastDist * this.xrvp.stageScale;
          const area = this.raycastArea * this.xrvp.stageScale;
          if (dist != this.raycastDistCache || area != this.raycastAreaCache) {
              this.rayCastRenderTargetProjMatrix.setOrthographicMatrix(area * -0.5, area * 0.5, area * -0.5, area * 0.5, 0.0, dist);
              this.raycastDistCache = dist;
              this.raycastAreaCache = area;
          }
          this.intersectionData = renderer.raycastWithProjection(xfo, this.rayCastRenderTargetProjMatrix, this.pointerRay);
          return this.intersectionData;
      }
  }
  class VRController extends XRController {
  }

  /**
   * Class representing a view tool
   * @extends BaseTool
   */
  class XRViewManipulator extends BaseTool {
      enableViewScale = true;
      listenerIDs = {};
      controllerTriggersHeld = [];
      xrvp;
      vrControllerToolTip;
      vrControllerToolTipMat;
      grabPos;
      stageXfo__GrabStart;
      grabDir;
      grabDist;
      /**
       */
      constructor(xrvp) {
          super();
          this.xrvp = xrvp;
          this.vrControllerToolTip = new Cross(0.05);
          this.vrControllerToolTipMat = new Material('VRController Cross', 'LinesShader');
          this.vrControllerToolTipMat.getParameter('BaseColor').value = new Color('#03E3AC');
      }
      // /////////////////////////////////////
      //
      /**
       * Adds the icon to the tip of the VR Controller
       * @param event
       */
      /**
       * The activateTool method.
       */
      activateTool() {
          super.activateTool();
          const bindController = (controller) => {
              const geomItem = new GeomItem('XRViewManipulatorToolTip', this.vrControllerToolTip, this.vrControllerToolTipMat);
              geomItem.setSelectable(false);
              controller.getTipItem().removeAllChildren();
              controller.getTipItem().addChild(geomItem, false);
          };
          for (const controller of this.xrvp.getControllers()) {
              bindController(controller);
          }
          this.listenerIDs['controllerAdded'] = this.xrvp.on('controllerAdded', (event) => {
              bindController(event.controller);
          });
      }
      /**
       * The deactivateTool method.
       */
      deactivateTool() {
          super.deactivateTool();
          const unbindController = (controller) => {
              const geomItem = controller.getTipItem().getChildByName('XRViewManipulatorToolTip');
              controller.getTipItem().removeChildByHandle(geomItem);
          };
          for (const controller of this.xrvp.getControllers()) {
              unbindController(controller);
          }
          this.xrvp.off('controllerAdded', this.listenerIDs['controllerAdded']);
      }
      // ///////////////////////////////////
      // XRController events
      // eslint-disable-next-line require-jsdoc
      initMoveStage() {
          if (this.controllerTriggersHeld.length == 1) {
              this.grabPos = this.controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr.clone();
              this.stageXfo__GrabStart = this.xrvp.getXfo().clone();
          }
          else if (this.controllerTriggersHeld.length == 2) {
              const p0 = this.controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr;
              const p1 = this.controllerTriggersHeld[1].getControllerTipStageLocalXfo().tr;
              this.grabDir = p1.subtract(p0);
              this.grabPos = p0.lerp(p1, 0.5);
              this.grabDir.y = 0.0;
              this.grabDist = this.grabDir.length();
              this.grabDir.scaleInPlace(1 / this.grabDist);
              this.stageXfo__GrabStart = this.xrvp.getXfo().clone();
          }
      }
      /**
       * The onXRControllerButtonDown method.
       * @param event - The event param.
       * @return The return value.
       */
      onXRControllerButtonDown(event) {
          if (event.button != 0)
              return;
          const index = this.controllerTriggersHeld.indexOf(event.controller);
          if (index == -1) {
              this.controllerTriggersHeld.push(event.controller);
              this.initMoveStage();
              event.stopPropagation();
              event.setCapture(this);
          }
      }
      /**
       * The onXRControllerButtonUp method.
       * @param event - The event param.
       * @return The return value.
       */
      onXRControllerButtonUp(event) {
          if (event.button != 0)
              return;
          const index = this.controllerTriggersHeld.indexOf(event.controller);
          if (index != -1) {
              this.controllerTriggersHeld.splice(index, 1);
              this.initMoveStage();
              event.stopPropagation();
              if (this.controllerTriggersHeld.length == 0) {
                  event.releaseCapture();
              }
          }
      }
      /**
       * The onVRControllerDoubleClicked method.
       * @param event - The event param.
       */
      onVRControllerDoubleClicked(event) {
          console.log('onVRControllerDoubleClicked:', this.controllerTriggersHeld.length);
          const stageXfo = this.xrvp.getXfo().clone();
          stageXfo.sc.set(1, 1, 1);
          this.xrvp.setXfo(stageXfo);
      }
      /**
       * The onVRPoseChanged method.
       * @param event - The event param.
       */
      onVRPoseChanged(event) {
          if (this.controllerTriggersHeld.length == 1) {
              const grabPos = this.controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr;
              const deltaXfo = new Xfo();
              deltaXfo.tr = this.grabPos.subtract(grabPos);
              // //////////////
              // Update the stage Xfo
              const stageXfo = this.stageXfo__GrabStart.multiply(deltaXfo);
              this.xrvp.setXfo(stageXfo);
          }
          else if (this.controllerTriggersHeld.length == 2) {
              const p0 = this.controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr;
              const p1 = this.controllerTriggersHeld[1].getControllerTipStageLocalXfo().tr;
              const grabPos = p0.lerp(p1, 0.5);
              const grabDir = p1.subtract(p0);
              grabDir.y = 0.0;
              const grabDist = grabDir.length();
              // Sometimes we would get NaN values in the stage Xfo
              if (grabDist < 0.0001)
                  return;
              grabDir.scaleInPlace(1 / grabDist);
              const deltaXfo = new Xfo();
              // //////////////
              // Compute ori
              let angle = this.grabDir.angleTo(grabDir);
              if (this.grabDir.cross(grabDir).y > 0.0) {
                  angle = -angle;
              }
              deltaXfo.ori.rotateY(angle);
              const deltaTr = this.grabPos.subtract(grabPos);
              // Rotate around the point between the hands.
              const oriTrDelta = deltaXfo.ori.rotateVec3(this.grabPos);
              deltaXfo.tr.addInPlace(this.grabPos.subtract(oriTrDelta));
              // //////////////
              // Compute sc
              // Limit to a 10x change in scale per grab.
              if (this.enableViewScale) {
                  const sc = Math.max(Math.min(this.grabDist / grabDist, 10.0), 0.1);
                  // Avoid causing a scale that would make the user < 1.0 scale factor.
                  // if(stageSc < 1.0){
                  //     sc = 1.0 / this.stageXfo__GrabStart.sc.x;
                  // }
                  deltaXfo.sc.set(sc, sc, sc);
                  // Scale around the point between the hands.
                  const deltaSc = this.grabPos.scale(1.0 - sc);
                  deltaXfo.tr.addInPlace(deltaXfo.ori.rotateVec3(deltaSc));
                  deltaTr.scaleInPlace(sc);
              }
              // //////////////
              // Compute tr
              deltaXfo.tr.addInPlace(deltaXfo.ori.rotateVec3(deltaTr));
              // //////////////
              // Update the stage Xfo
              const stageXfo = this.stageXfo__GrabStart.multiply(deltaXfo);
              this.xrvp.setXfo(stageXfo);
          }
      }
      // ///////////////////////////////////
      // Pointer events
      /**
       * Event fired when a pointing device button is pressed while the pointer is over the tool.
       *
       * @param event - The event param.
       */
      onPointerDown(event) {
          if (event instanceof XRControllerEvent) {
              this.onXRControllerButtonDown(event);
          }
      }
      /**
       * Event fired when a pointing device is moved while the cursor's hotspot is inside it.
       *
       * @param event - The event param.
       */
      onPointerMove(event) {
          if (event instanceof XRPoseEvent) {
              this.onVRPoseChanged(event);
          }
      }
      /**
       * Event fired when a pointing device button is released while the pointer is over the tool.
       *
       * @param event - The event param.
       */
      onPointerUp(event) {
          if (event instanceof XRControllerEvent) {
              this.onXRControllerButtonUp(event);
          }
      }
      /**
       * Event fired when a pointing device button is double clicked on the tool.
       *
       * @param event - The event param.
       */
      onPointerDoubleClick(event) {
          if (event instanceof XRControllerEvent) {
              this.onVRControllerDoubleClicked(event);
          }
      }
  }

  /** This Viewport class is used for rendering stereoscopic views to VR controllers using the WebXR api.
   *  When the GLRenderer class detects a valid WebXF capable device is plugged in, this class is automatically
   *  instantiated ready for XR sessions
   *
   * **Events**
   * * **presentingChanged:** Emitted when presenting is started or stopped
   * * **controllerAdded:** Emitted when a new XR controller is detected.
   * * **viewChanged:** Emitted during presentation each time the frame is rendered.
   * * **pointerDoubleClick:** Emitted when the user double clicks with an XR pointer.
   * * **pointerDown:** Emitted when the user presses an XR pointer
   * * **pointerUp:** Emitted when the user releases an XR pointer
   *
   * @extends XRViewport
   */
  class VRViewport extends XRViewport {
      vrAsset;
      hmd = '';
      hmdAssetPromise;
      xrhead;
      /**
       * Create a VR viewport.
       * @param renderer - The renderer value.
       */
      constructor(renderer, sessionMode) {
          super(renderer, sessionMode);
          this.xrhead = new XRHead(this, this.stageTreeItem);
          this.setManipulator(new XRViewManipulator(this));
      }
      /**
       * The getAsset method.
       * @return - The return value.
       */
      getAsset() {
          return this.vrAsset;
      }
      /**
       * The getVRHead method.
       * @return - The return value.
       */
      getVRHead() {
          return this.xrhead;
      }
      /**
       * Returns the name of the HMD being used.
       * @return - The return value.
       */
      getHMDName() {
          return this.hmd;
      }
      /**
       * The loadHMDResources method.
       * @return - The return value.
       */
      loadHMDResources() {
          if (SystemDesc.isMobileDevice) {
              return Promise.resolve(null);
          }
          // If the HMD has changed, reset it.
          let hmd = localStorage.getItem('ZeaEngine_XRDevice');
          if (!hmd) {
              hmd = 'Oculus';
              localStorage.setItem('ZeaEngine_XRDevice', hmd);
          }
          if (this.hmd != hmd) {
              this.hmdAssetPromise = undefined;
          }
          else if (this.hmdAssetPromise)
              return this.hmdAssetPromise;
          this.hmd = hmd;
          this.hmdAssetPromise = new Promise((resolve, reject) => {
              // ////////////////////////////////////////////
              // Resources
              {
                  let hmdAssetId;
                  switch (hmd) {
                      case 'Vive':
                          hmdAssetId = 'ZeaEngine/Vive.vla';
                          break;
                      case 'Oculus':
                          hmdAssetId = 'ZeaEngine/Oculus.vla';
                          break;
                      default:
                          hmdAssetId = 'ZeaEngine/Vive.vla';
                          break;
                  }
                  if (!resourceLoader.commonResources[hmdAssetId]) {
                      // Cache the asset so if an avatar needs to display,
                      // it can use the same asset.
                      const asset = new VLAAsset(hmdAssetId);
                      asset.load(resourceLoader.systemUrls[hmdAssetId]);
                      resourceLoader.commonResources[hmdAssetId] = asset;
                  }
                  this.vrAsset = resourceLoader.getCommonResource(hmdAssetId);
                  const bind = () => {
                      const materialLibrary = this.vrAsset.getMaterialLibrary();
                      const materialNames = materialLibrary.getMaterialNames();
                      for (const name of materialNames) {
                          const material = materialLibrary.getMaterial(name);
                          if (material) {
                              material.setShaderName('SimpleSurfaceShader');
                          }
                      }
                      this.vrAsset.traverse((item) => {
                          item.setSelectable(false);
                      });
                      resolve(this.vrAsset);
                  };
                  if (this.vrAsset.isLoaded())
                      bind();
                  else
                      this.vrAsset.once('loaded', bind);
              }
          });
          return this.hmdAssetPromise;
      }
      /**
       * The startPresenting method.
       */
      startPresenting() {
          return new Promise((resolve, reject) => {
              // https://github.com/immersive-web/webxr/blob/master/explainer.md
              const startPresenting = () => {
                  navigator.xr
                      .requestSession('immersive-vr', {
                      // Our standing experience will require at least a local-floor
                      // reference space (which will be available even on 3DoF device)
                      // but can optionally make use of bounded-floor reference spaces
                      // when available.
                      requiredFeatures: ['local-floor'],
                      optionalFeatures: ['bounded-floor'],
                  })
                      .then((session) => {
                      const viewport = this.__renderer.getViewport();
                      if (viewport) {
                          const camera = viewport.getCamera();
                          const cameraXfo = camera.globalXfoParam.value;
                          // Convert Y-Up to Z-Up.
                          const stageXfo = new Xfo();
                          stageXfo.tr = cameraXfo.tr.clone();
                          stageXfo.tr.z -= 1.3; // assume sitting, and move the floor down a bit
                          const dir = cameraXfo.ori.getZaxis();
                          dir.z = 0;
                          dir.normalizeInPlace();
                          stageXfo.ori.setFromDirectionAndUpvector(dir, new Vec3(0, 0, 1));
                          this.setXfo(stageXfo);
                      }
                      session.addEventListener('end', () => {
                          this.stageTreeItem.setVisible(false);
                          this.session = null;
                          // Make sure the default fbo is bound.
                          // This addrsses an error generated by rendring directly after the session ends.
                          // INVALID_FRAMEBUFFER_OPERATION: clear: Cannot render to a XRWebGLLayer framebuffer outside of an XRSession animation frame callback.
                          const gl = this.__renderer.gl;
                          gl.bindFramebuffer(gl.FRAMEBUFFER, null);
                          this.emit('presentingChanged', new StateChangedEvent(false));
                      });
                      const onSelectStart = (event) => {
                          const controller = this.controllersMap[event.inputSource.handedness];
                          if (controller) {
                              controller.buttonPressed = true;
                              this.onPointerDown(new XRControllerEvent(this, controller, 0, 1));
                          }
                      };
                      const onSelectEnd = (ev) => {
                          const controller = this.controllersMap[ev.inputSource.handedness];
                          if (controller) {
                              controller.buttonPressed = false;
                              this.onPointerUp(new XRControllerEvent(this, controller, 0, 0));
                          }
                      };
                      const createVRController = (inputSource) => {
                          if (this.controllersMap[inputSource.handedness]) {
                              this.controllersMap[inputSource.handedness].inputSource = inputSource;
                              return;
                          }
                          const id = this.controllers.length;
                          console.log('creating controller:', inputSource.handedness, inputSource.profiles);
                          const controller = new XRController(this, inputSource, id);
                          this.controllersMap[inputSource.handedness] = controller;
                          this.controllers[id] = controller;
                          this.controllerPointerDownTime[id] = [];
                          controller.on('buttonPressed', (event) => {
                              this.onPointerDown(event);
                          });
                          controller.on('buttonReleased', (event) => {
                              this.onPointerUp(event);
                          });
                          const event = new ControllerAddedEvent(controller);
                          this.emit('controllerAdded', event);
                          return controller;
                      };
                      const onInputSourcesChange = (event) => {
                          // As input sources are connected if they are tracked-pointer devices
                          // look up which meshes should be associated with their profile and
                          // load as the controller model for that hand.
                          for (const inputSource of event.added) {
                              if (inputSource.profiles.length == 0)
                                  continue;
                              if (inputSource.profiles[0] == 'generic-touchscreen') ;
                              else {
                                  createVRController(inputSource);
                              }
                          }
                      };
                      session.addEventListener('selectstart', onSelectStart);
                      session.addEventListener('selectend', onSelectEnd);
                      session.addEventListener('inputsourceschange', onInputSourcesChange);
                      this.session = session;
                      // ////////////////////////////
                      // @ts-ignore - Note: We could install the webxr type definitions and remove this ignore.
                      const glLayer = new XRWebGLLayer(session, this.__gl);
                      session.updateRenderState({
                          baseLayer: glLayer,
                      });
                      this.width = glLayer.framebufferWidth;
                      this.height = glLayer.framebufferHeight;
                      this.region = [0, 0, this.width, this.height];
                      this.depthRange = [session.renderState.depthNear, session.renderState.depthFar];
                      this.resizeRenderTargets(this.width, this.height);
                      // ////////////////////////////
                      // eslint-disable-next-line require-jsdoc
                      const onRefSpaceCreated = (refSpace) => {
                          this.refSpace = refSpace;
                          this.stageTreeItem.setVisible(true);
                          this.emit('presentingChanged', new StateChangedEvent(true));
                          // In VR, we need to load the HMD so we can see
                          // our controllers.
                          this.loadHMDResources().then(() => {
                              this.startSession();
                              resolve();
                          });
                      };
                      // Attempt to get a 'bounded-floor' reference space, which will align
                      // the user's physical floor with Y=0 and provide boundaries that
                      // indicate where the user can safely walk.
                      session
                          .requestReferenceSpace('bounded-floor')
                          .catch((e) => {
                          console.warn(e.message);
                          // If a bounded reference space isn't supported, fall back to a
                          // local-floor reference space. This still provides a floor-relative
                          // space and will always be supported for immersive sessions. It
                          // will not, however, provide boundaries and generally expects the
                          // user to stand in one place. If the device doesn't have a way of
                          // determining the floor level (for example, with a 3DoF device)
                          // then it will return an emulated local-floor space, where the view
                          // is translated up by a static height so that the scene still
                          // renders in approximately the right place.
                          console.log('Falling back to local-floor reference space');
                          session.requestReferenceSpace('local-floor').then(onRefSpaceCreated);
                      })
                          .then((value) => {
                          if (value)
                              onRefSpaceCreated(value);
                      })
                          .catch((e) => {
                          console.warn(e.message);
                          reject(new Error('Unable to start XR Session:' + e.message));
                      });
                  })
                      .catch((e) => {
                      console.warn(e.message);
                  });
              };
              startPresenting();
          });
      }
      // //////////////////////////
      // Controllers
      /**
       * The updateControllers method.
       * @param xrFrame - The xrFrame value.
       * @param event - The pose changed event object that will be emitted for observers such as collab.
       */
      updateControllers(xrFrame) {
          let rebindRenderTarget = false;
          const inputSources = this.session.inputSources;
          for (let i = 0; i < inputSources.length; i++) {
              const inputSource = inputSources[i];
              // Note: This is to avoid a bug/feature in WebXR where initially the
              // controllers have no handedness specified, then suddenly
              // get handedness. We need the handedness before we can setup the controller.
              if (inputSource.profiles.length == 0)
                  return;
              if (!this.controllers[i]) {
                  console.warn('Missing controller');
                  continue;
                  // this.__createController(i, inputSource)
              }
              const res = this.controllers[i].updatePose(this.refSpace, xrFrame, inputSource);
              rebindRenderTarget = rebindRenderTarget || res;
          }
          return rebindRenderTarget;
      }
      /**
       * The drawXRFrame method.
       * @param xrFrame - The xrFrame value.
       */
      drawXRFrame(xrFrame) {
          const session = xrFrame.session;
          const layer = session.renderState.baseLayer;
          const pose = xrFrame.getViewerPose(this.refSpace);
          if (!pose) {
              // No pose available during XR present
              // Note: before the Headset is put on the pose is missing, or after it is taken off
              return;
          }
          const views = pose.views;
          if (!this.projectionMatricesUpdated) {
              this.projectionMatrices = [];
              this.viewMatrices = [];
              this.cameraMatrices = [];
              for (let i = 0; i < views.length; i++) {
                  const view = views[i];
                  const projMat = new Mat4();
                  projMat.fromArray(view.projectionMatrix);
                  this.projectionMatrices[i] = projMat;
                  this.viewMatrices[i] = new Mat4();
                  this.cameraMatrices[i] = new Mat4();
              }
              this.projectionMatricesUpdated = true;
          }
          const gl = this.__renderer.gl;
          this.depthRange = [session.renderState.depthNear, session.renderState.depthFar]; // TODO: check if this changes during session
          const renderstate = new ColorRenderState(this.__renderer.gl);
          renderstate.pushGLStack('VRViewport.drawXRFrame');
          renderstate.boundRendertarget = layer.framebuffer;
          renderstate.region = this.region;
          renderstate.depthRange = this.depthRange;
          renderstate.viewport = this;
          renderstate.xrviewport = this;
          const viewports = [];
          for (let i = 0; i < views.length; i++) {
              const view = views[i];
              this.viewMatrices[i].fromArray(view.transform.inverse.matrix);
              this.viewMatrices[i].multiplyInPlace(this.invStageMatrix);
              const vp = layer.getViewport(view);
              viewports.push({
                  viewMatrix: this.viewMatrices[i],
                  projectionMatrix: this.projectionMatrices[i],
                  region: [vp.x, vp.y, vp.width, vp.height],
                  isOrthographic: 0,
              });
          }
          this.xrhead.update(pose);
          const headXfo = this.xrhead.getTreeItem().globalXfoParam.value;
          const cameraMatrixMat4 = headXfo.toMat4();
          this.viewXfo = headXfo;
          renderstate.viewXfo = headXfo;
          renderstate.cameraMatrix = cameraMatrixMat4;
          renderstate.viewScale = this.stageScale;
          renderstate.region = this.region;
          renderstate.vrPresenting = true; // Some rendering is adjusted slightly in VR. e.g. Billboards
          this.updateControllers(xrFrame);
          // ///////////////////////
          // Prepare the pointerMove event.
          const event = new XRPoseEvent(this, this.viewXfo, this.controllers);
          if (event.getCapture()) {
              event.getCapture().onPointerMove(event);
              // events are now always sent to the capture item first,
              // but can continue propagating to other items if no call
              // to event.stopPropagation() was made.
          }
          if (this.manipulator && event.propagating) {
              this.manipulator.onPointerMove(event);
          }
          // ///////////////////////
          // Binding
          this.bindXRViewport(renderstate, viewports);
          // ///////////////////////
          // Drawing
          // If any of the controllers did some raycasting, then we need to rebind the
          // WebXR render target before we draw the scene.
          gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, renderstate.boundRendertarget);
          let col = this.backgroundColorParam.value.asArray();
          gl.clearColor(col[0], col[1], col[2], col[3]);
          gl.colorMask(true, true, true, true);
          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
          this.draw(renderstate);
          renderstate.popGLStack();
          if (renderstate.stack.length != 0) {
              console.warn(' corrupt renderstate.stack.length:', renderstate.stack.length);
          }
          // ///////////////////////
          // Emit a signal for the shared session.
          const viewChangedEvent = new XRViewChangedEvent(renderstate.viewXfo);
          // TODO: better solution than setting members individually?
          viewChangedEvent.hmd = this.hmd;
          viewChangedEvent.controllers = this.controllers;
          viewChangedEvent.viewport = this;
          viewChangedEvent.xrviewport = this;
          this.emit('viewChanged', viewChangedEvent);
          this.tick++;
      }
      /**
       * Handler of the `pointerdown` event fired when the pointer device is initially pressed.
       *
       * @param event - The DOM event produced by a pointer
       */
      onPointerDown(event) {
          event.intersectionData = event.controller.getGeomItemAtTip();
          event.pointerRay = event.controller.pointerRay;
          // //////////////////////////////////////
          // Double Tap
          // First check for double tap handlers.
          // If the manipulator or the viewport handle that
          // then skip the 'pointerDown' event.
          const downTime = Date.now();
          if (downTime - this.controllerPointerDownTime[event.controller.id][event.button] < this.doubleClickTime) {
              this.emit('pointerDoubleClick', event);
              if (!event.propagating)
                  return;
              if (this.manipulator) {
                  this.manipulator.onPointerDoubleClick(event);
                  if (!event.propagating)
                      return;
              }
          }
          this.controllerPointerDownTime[event.controller.id][event.button] = downTime;
          // //////////////////////////////////////
          if (event.getCapture()) {
              event.getCapture().onPointerDown(event);
              // events are now always sent to the capture item first,
              // but can continue propagating to other items if no call
              // to event.stopPropagation() was made.
              if (!event.propagating)
                  return;
          }
          if (event.intersectionData != undefined) {
              event.intersectionData.geomItem.onPointerDown(event);
              if (!event.propagating)
                  return;
          }
          this.emit('pointerDown', event);
          if (!event.propagating)
              return;
          if (this.manipulator) {
              this.manipulator.onPointerDown(event);
          }
      }
      /**
       * Causes an event to occur when a user releases a mouse button over a element.
       *
       * @param event - The event that occurs.
       */
      onPointerUp(event) {
          event.pointerRay = event.controller.pointerRay;
          if (event.getCapture()) {
              event.getCapture().onPointerUp(event);
              // events are now always sent to the capture item first,
              // but can continue propagating to other items if no call
              // to event.stopPropagation() was made.
          }
          if (event.propagating) {
              event.intersectionData = event.controller.getGeomItemAtTip();
              if (event.intersectionData != undefined) {
                  event.intersectionData.geomItem.onPointerUp(event);
              }
          }
          if (event.propagating) {
              this.emit('pointerUp', event);
          }
          if (event.propagating) {
              if (this.manipulator) {
                  this.manipulator.onPointerUp(event);
              }
          }
          const pointerDownTime = this.controllerPointerDownTime[event.controller.id][event.button];
          const pointerUpTime = Date.now();
          if (pointerUpTime - pointerDownTime < this.clickTime) {
              event.propagating = true;
              if (event.intersectionData != undefined) {
                  event.intersectionData.geomItem.onPointerClick(event);
              }
              if (event.propagating) {
                  this.emit('pointerClick', event);
              }
              if (event.propagating && this.manipulator) {
                  this.manipulator.onPointerClick(event);
              }
          }
          this.controllerPointerDownTime[event.controller.id][event.button] = 0;
      }
  }

  /** This Viewport class is used for rendering stereoscopic views to VR controllers using the WebXR api.
   *  When the GLRenderer class detects a valid WebXF capable device is plugged in, this class is automatically
   *  instantiated ready for XR sessions
   *
   * **Events**
   * * **presentingChanged:** Emitted when presenting is started or stopped
   * * **controllerAdded:** Emitted when a new XR controller is detected.
   * * **viewChanged:** Emitted during presentation each time the frame is rendered.
   * * **pointerDoubleClick:** Emitted when the user double clicks with an XR pointer.
   * * **pointerDown:** Emitted when the user presses an XR pointer
   * * **pointerUp:** Emitted when the user releases an XR pointer
   *
   * @extends XRViewport
   */
  class ARViewport extends XRViewport {
      stageXfoSet = false;
      xrViewerSpace;
      xrHitTestSource;
      reticle;
      /**
       * Create a VR viewport.
       * @param renderer - The renderer value.
       */
      constructor(renderer, sessionMode) {
          super(renderer, sessionMode);
          const disc = new Disc(0.1, 24);
          const material = new FlatSurfaceMaterial('reticle');
          material.baseColorParam.value = new Color(0.75, 0.75, 0.75, 0.4);
          this.reticle = new GeomItem('reticle', disc, material);
          // Convert Y-Up to Z-Up.
          const xfo = new Xfo();
          // Convert Y-Up to Z-Up.
          xfo.ori.setFromAxisAndAngle(new Vec3(1, 0, 0), Math.PI * 0.5);
          this.reticle.geomOffsetXfoParam.value = xfo;
          this.stageTreeItem.addChild(this.reticle);
      }
      /**
       * The startPresenting method.
       */
      startPresenting() {
          return new Promise((resolve, reject) => {
              // https://github.com/immersive-web/webxr/blob/master/explainer.md
              const startPresenting = () => {
                  // @ts-ignore
                  navigator.xr
                      .requestSession('immersive-ar', { requiredFeatures: ['local', 'hit-test', 'anchors'] })
                      .then((session) => {
                      session.addEventListener('end', () => {
                          this.stageTreeItem.setVisible(false);
                          this.session = null;
                          this.emit('presentingChanged', new StateChangedEvent(false));
                      });
                      this.reticle.setVisible(true);
                      const onSelect = (event) => {
                          const hitTestResults = event.frame.getHitTestResults(this.xrHitTestSource);
                          if (hitTestResults.length > 0) {
                              const pose = hitTestResults[0].getPose(this.refSpace);
                              if (this.reticle.isVisible()) {
                                  if (!this.stageXfoSet) {
                                      this.stageXfo.tr = this.reticle.globalXfoParam.value.tr.negate();
                                      this.setXfo(this.stageXfo);
                                      this.stageXfoSet = true;
                                  }
                                  else {
                                      const pointerEvent = new XRPointerEvent(this, this.reticle.globalXfoParam.value, event, hitTestResults);
                                      this.emit('pointerPressed', pointerEvent);
                                  }
                              }
                              else {
                                  const localXfo = new Xfo();
                                  localXfo.setFromMat4(new Mat4(...pose.transform.matrix));
                                  const pointerEvent = new XRPointerEvent(this, this.stageXfo.multiply(localXfo), event, hitTestResults);
                                  this.emit('pointerPressed', pointerEvent);
                              }
                          }
                      };
                      session.addEventListener('select', onSelect);
                      this.session = session;
                      // ////////////////////////////
                      // @ts-ignore - Note: We could install the webxr type definitions and remove this ignore.
                      const glLayer = new XRWebGLLayer(session, this.__gl);
                      session.updateRenderState({
                          baseLayer: glLayer,
                      });
                      this.width = glLayer.framebufferWidth;
                      this.height = glLayer.framebufferHeight;
                      this.region = [0, 0, this.width, this.height];
                      this.depthRange = [session.renderState.depthNear, session.renderState.depthFar];
                      this.resizeRenderTargets(this.width, this.height);
                      // ////////////////////////////
                      // In this sample we want to cast a ray straight out from the viewer's
                      // position and render a reticle where it intersects with a real world
                      // surface. To do this we first get the viewer space, then create a
                      // hitTestSource that tracks it.
                      session.requestReferenceSpace('viewer').then((refSpace) => {
                          this.xrViewerSpace = refSpace;
                          session.requestHitTestSource({ space: this.xrViewerSpace }).then((hitTestSource) => {
                              this.xrHitTestSource = hitTestSource;
                          });
                      });
                      session.requestReferenceSpace('local').then((refSpace) => {
                          this.refSpace = refSpace;
                          this.stageTreeItem.setVisible(true);
                          this.emit('presentingChanged', new StateChangedEvent(true));
                          this.startSession();
                          resolve();
                      });
                  })
                      .catch((e) => {
                      console.warn(e.message);
                  });
              };
              startPresenting();
          });
      }
      /**
       * The drawXRFrame method.
       * @param xrFrame - The xrFrame value.
       */
      drawXRFrame(xrFrame) {
          const session = xrFrame.session;
          const layer = session.renderState.baseLayer;
          const pose = xrFrame.getViewerPose(this.refSpace);
          if (!pose) {
              // No pose available during XR present
              // Note: before the Headset is put on the pose is missing, or after it is taken off
              return;
          }
          if (this.xrHitTestSource && this.reticle.isVisible()) {
              const hitTestResults = xrFrame.getHitTestResults(this.xrHitTestSource);
              if (hitTestResults.length > 0) {
                  const hitPose = hitTestResults[0].getPose(this.refSpace);
                  const localXfo = new Xfo();
                  localXfo.setFromMat4(new Mat4(hitPose.transform.matrix));
                  this.reticle.localXfoParam.value = localXfo;
              }
          }
          const views = pose.views;
          if (!this.projectionMatricesUpdated) {
              this.projectionMatrices = [];
              this.viewMatrices = [];
              this.cameraMatrices = [];
              for (let i = 0; i < views.length; i++) {
                  const view = views[i];
                  const projMat = new Mat4();
                  projMat.fromArray(view.projectionMatrix);
                  this.projectionMatrices[i] = projMat;
                  this.viewMatrices[i] = new Mat4();
                  this.cameraMatrices[i] = new Mat4();
              }
              this.projectionMatricesUpdated = true;
          }
          this.depthRange = [session.renderState.depthNear, session.renderState.depthFar]; // TODO: check if this changes during session
          const renderstate = new ColorRenderState(this.__renderer.gl);
          renderstate.boundRendertarget = layer.framebuffer;
          renderstate.region = this.region;
          renderstate.viewport = this;
          renderstate.xrviewport = this;
          const viewports = [];
          // renderstate.boundRendertarget.vrfbo = true;
          for (let i = 0; i < views.length; i++) {
              const view = views[i];
              this.viewMatrices[i].fromArray(view.transform.inverse.matrix);
              // Note: the stage matrix
              this.viewMatrices[i].multiplyInPlace(this.invStageMatrix);
              // this.cameraMatrices[i].fromArray(view.transform.matrix);
              const vp = layer.getViewport(view);
              viewports.push({
                  viewMatrix: this.viewMatrices[i],
                  projectionMatrix: this.projectionMatrices[i],
                  region: [vp.x, vp.y, vp.width, vp.height],
                  isOrthographic: 0,
              });
          }
          this.viewXfo.setFromMat4(new Mat4(pose.transform.matrix));
          renderstate.viewXfo = this.stageXfo.multiply(this.viewXfo);
          renderstate.cameraMatrix = renderstate.viewXfo.toMat4();
          renderstate.viewScale = this.stageScale;
          renderstate.region = this.region;
          renderstate.vrPresenting = true; // Some rendering is adjusted slightly in VR. e.g. Billboards
          // ///////////////////////
          // Binding
          this.bindXRViewport(renderstate, viewports);
          this.draw(renderstate);
          {
              // ///////////////////////
              // Prepare the pointerMove event.
              const event = new XRPoseEvent(this, this.viewXfo);
              if (event.getCapture()) {
                  event.getCapture().onPointerMove(event);
                  // events are now always sent to the capture item first,
                  // but can continue propagating to other items if no call
                  // to event.stopPropagation() was made.
              }
              if (this.manipulator && event.propagating) {
                  this.manipulator.onPointerMove(event);
              }
          }
          // ///////////////////////
          // Emit a signal for the shared session.
          const viewChangedEvent = new XRViewChangedEvent(renderstate.viewXfo);
          // TODO: better solution than setting members individually?
          viewChangedEvent.viewport = this;
          viewChangedEvent.xrviewport = this;
          this.emit('viewChanged', viewChangedEvent);
          this.tick++;
      }
  }

  /* eslint-disable guard-for-in */
  /*
     drawGeomData(renderstate: GeomDataRenderState) {
  -    this.glMaterial.bind(renderstate, false)
  +    // this.glMaterial.bind(renderstate, false)
       for (const key in this.glGeomItemSets) {
         const glGeomItemSet = this.glGeomItemSets[key]
         glGeomItemSet.draw(renderstate)
       }
  -    this.glMaterial.unbind(renderstate)
  +    // this.glMaterial.unbind(renderstate)
     }
  */
  /** Class for managing all the GeomItems discovered in the SceneTree.
   * @private
   */
  class GLGeomItemLibrary extends EventEmitter {
      renderer;
      // Note: item 0 is always null.
      // The reduction shader reads pixel values, and assumes 0 is an empty pixel.
      glGeomItems = [null];
      glGeomItemEventHandlers = [];
      glGeomItemsMap = new Map();
      glGeomItemsIndexFreeList = [];
      dirtyItemIndices = new Set();
      // Items that have transform or bounding box changes and need to be updated in the worker.
      dirtyWorkerItemIndices = new Set();
      removedItemIndices = [];
      glGeomItemsTexture = null;
      enableFrustumCulling;
      xrViewport;
      xrPresenting = false;
      xrFovY = 0.0;
      xrProjectionMatrix = new Mat4();
      // Occlusion Culling
      enableOcclusionCulling;
      debugOcclusionBuffer = false;
      occlusionDataBuffer;
      occlusionImage;
      occlusionImageItem;
      reductionDataBuffer;
      bbox;
      reductionShader;
      boundingBoxShader;
      inFrustumIndicesCount = 0;
      drawIdsBufferDirty = false;
      inFrustumDrawIdsBuffer;
      reductionDataArray;
      occlusionDataBufferSizeFactor = window.devicePixelRatio;
      timer_query_ext = null;
      worker;
      /**
       * Create a GLGeomItemLibrary.
       * @param renderer - The renderer instance
       * @param options - The options object passed to the GLRenderer constructor.
       */
      constructor(renderer, options) {
          super();
          this.renderer = renderer;
          this.enableFrustumCulling = options.enableFrustumCulling || options.enableOcclusionCulling;
          // Note: while it would be possible to get Occlusion Culling working in WebGL1,
          // we would need to jump through a lot of hoops.
          // - setup a vertex attribute to emulate gl_VertexID (in the Reduction shader)
          // - implement bit masking so we can extract the geomItemId from the Uint8 geom data buffer.
          // - clean up all the code to not use the building % , << & operators
          // - pass uniform values for the texture sizes.
          const gl = this.renderer.gl;
          this.enableOcclusionCulling = options.enableOcclusionCulling && gl.name == 'webgl2';
          this.debugOcclusionBuffer = options.debugOcclusionBuffer ?? false;
          if (this.enableFrustumCulling) {
              this.setupCullingWorker(renderer);
          }
      }
      /**
       * Sets up the Culling Worker to start calculating frustum culling.
       * @param renderer - The renderer instance
       */
      setupCullingWorker(renderer) {
          this.worker = new WorkerFactory();
          // This is a mock web worker to use when testing.
          // this.worker = {
          //   postMessage: (message) => {
          //     handleMessage(message, (message) => {
          //       this.worker.onmessage({data: message })
          //     })
          //   },
          // }
          this.worker.postMessage({
              type: 'Init',
              enableOcclusionCulling: this.enableOcclusionCulling,
          });
          let workerReady = true;
          this.worker.onmessage = (message) => {
              if (message.data.type == 'InFrustumIndices') {
                  if (this.enableOcclusionCulling) {
                      // First full the items that the frustum culling removed.
                      if (message.data.newlyCulled) {
                          this.applyCullResults(message.data);
                      }
                      this.calculateOcclusionCulling(message.data.inFrustumIndices);
                  }
                  else {
                      this.applyCullResults(message.data);
                      this.emitCullingUpdateData(message.data);
                      workerReady = true;
                  }
              }
              else if (message.data.type == 'CullResults') {
                  this.applyCullResults(message.data);
                  this.emitCullingUpdateData(message.data);
                  workerReady = true;
              }
              else if (message.data.type == 'Done') {
                  // Used mostly to make our unit testing robust.
                  this.renderer.emit('CullingUpdated');
              }
              workerReady = true;
          };
          const viewportChanged = () => {
              const viewport = renderer.getViewport();
              const camera = renderer.getViewport().getCamera();
              const aspectRatio = viewport.getWidth() / viewport.getHeight();
              if (camera.isOrthographic()) {
                  const frustumHeight = camera.getFrustumHeight();
                  const frustumWidth = frustumHeight * aspectRatio;
                  this.worker.postMessage({
                      type: 'ViewportChanged',
                      frustumHeight,
                      frustumWidth,
                      isOrthographic: true,
                      solidAngleLimit: renderer.solidAngleLimit,
                  });
              }
              else {
                  const frustumHalfAngleY = camera.getFov() * 0.5;
                  const frustumHalfAngleX = Math.atan(Math.tan(frustumHalfAngleY) * aspectRatio);
                  this.worker.postMessage({
                      type: 'ViewportChanged',
                      frustumHalfAngleX,
                      frustumHalfAngleY,
                      isOrthographic: false,
                      solidAngleLimit: renderer.solidAngleLimit,
                  });
              }
          };
          renderer.on('resized', viewportChanged);
          const camera = renderer.getViewport().getCamera();
          camera.on('projectionParamChanged', (event) => {
              if (camera.isOrthographic()) {
                  viewportChanged();
              }
          });
          viewportChanged();
          renderer.once('xrViewportSetup', (event) => {
              this.xrViewport = event.xrViewport;
              const xrvp = event.xrViewport;
              xrvp.on('presentingChanged', (event) => {
                  this.xrPresenting = event.state;
                  if (event.state) {
                      cullFreq = 10;
                      let frustumHalfAngleX;
                      let frustumHalfAngleY;
                      if (xrvp instanceof VRViewport) {
                          // Note: We approximate the culling viewport to be
                          // a wider version of the 2 eye frustums merged together.
                          // Wider, so that items are considered visible before the are in view.
                          // Note each VR headset comes with its own FOV, and I can't seem to be
                          // able to get it from the WebXR API, so I am putting in some guesses
                          // based on this diagram: https://blog.mozvr.com/content/images/2016/02/human-visual-field.jpg
                          frustumHalfAngleX = MathFunctions.degToRad(62);
                          frustumHalfAngleY = MathFunctions.degToRad(50);
                      }
                      else if (xrvp instanceof ARViewport) {
                          // TODO: determine the frustum size for a phone.
                          const aspectRatio = xrvp.getWidth() / xrvp.getHeight();
                          frustumHalfAngleY = 62 * MathFunctions.degToRad(0.5);
                          frustumHalfAngleX = Math.atan(Math.tan(frustumHalfAngleY) * aspectRatio);
                      }
                      this.xrFovY = frustumHalfAngleY * 2.0;
                      const aspect = frustumHalfAngleY / frustumHalfAngleX;
                      // @ts-ignore
                      const near = xrvp.depthRange[0];
                      // @ts-ignore
                      const far = xrvp.depthRange[1];
                      this.xrProjectionMatrix.setPerspectiveMatrix(this.xrFovY, aspect, near, far);
                      this.worker.postMessage({
                          type: 'ViewportChanged',
                          frustumHalfAngleX,
                          frustumHalfAngleY,
                          isOrthographic: false,
                          solidAngleLimit: renderer.solidAngleLimit * 4,
                      });
                      this.occlusionDataBuffer.resize(Math.ceil(xrvp.getWidth() / 4), Math.ceil(xrvp.getWidth() / 4));
                  }
                  else {
                      cullFreq = 5;
                      viewportChanged();
                      // push the camera xfo to the worker.
                      forceViewChanged();
                  }
              });
          });
          let tick = 0;
          let cullFreq = 5;
          renderer.on('viewChanged', (event) => {
              // Calculate culling every Nth frame.
              if (workerReady) {
                  if (tick % cullFreq == 0) {
                      workerReady = false;
                      const pos = event.viewXfo.tr;
                      const ori = event.viewXfo.ori;
                      this.worker.postMessage({
                          type: 'ViewChanged',
                          cameraPos: pos.asArray(),
                          cameraOri: ori.asArray(),
                          solidAngleLimit: renderer.solidAngleLimit,
                      });
                  }
                  tick++;
              }
          });
          const forceViewChanged = () => {
              const camera = renderer.getViewport().getCamera();
              const viewXfo = camera.globalXfoParam.value;
              const pos = viewXfo.tr;
              const ori = viewXfo.ori;
              this.worker.postMessage({
                  type: 'ViewChanged',
                  cameraPos: pos.asArray(),
                  cameraOri: ori.asArray(),
                  solidAngleLimit: renderer.solidAngleLimit,
              });
          };
          // If a movement finishes, we should update the culling results
          // based on the last position. (we might have skipped it in the viewChanged handler above)
          renderer.getViewport().getCamera().on('movementFinished', forceViewChanged);
          // Initialize the view values on the worker.
          forceViewChanged();
          {
              // ////////////////////////////////////////
              // Occlusion Culling
              if (this.enableOcclusionCulling) {
                  const gl = this.renderer.gl;
                  // https://www.khronos.org/registry/webgl/extensions/EXT_disjoint_timer_query_webgl2/
                  // this.timer_query_ext = gl.getExtension('EXT_disjoint_timer_query_webgl2')
                  const occlusionDataBufferWidth = Math.ceil(this.renderer.getWidth() / this.occlusionDataBufferSizeFactor);
                  const occlusionDataBufferHeight = Math.ceil(this.renderer.getHeight() / this.occlusionDataBufferSizeFactor);
                  this.occlusionDataBuffer = new GLRenderTarget(gl, {
                      type: gl.FLOAT,
                      format: gl.RGBA,
                      minFilter: gl.NEAREST,
                      magFilter: gl.NEAREST,
                      width: occlusionDataBufferWidth,
                      height: occlusionDataBufferHeight,
                      depthType: gl.UNSIGNED_INT,
                      depthFormat: gl.DEPTH_COMPONENT,
                      depthInternalFormat: gl.DEPTH_COMPONENT24,
                  });
                  // this.occlusionDataBuffer.clearColor.set(0.1, 0, 0, 1)
                  this.renderer.on('resized', (event) => {
                      if (!this.xrPresenting) {
                          this.occlusionDataBuffer.resize(Math.ceil(event.width / this.occlusionDataBufferSizeFactor), Math.ceil(event.height / this.occlusionDataBufferSizeFactor));
                      }
                  });
                  // Do we resize the occlusion buffer to match the screen resolution of the HMD?
                  // So far we are not seeing great performance in XR with culling enabled.
                  // For some reason, reduction is already 10x more costly in VR with the same
                  // resolution occlusion buffer.
                  // renderer.once('xrViewportSetup', (event: XrViewportEvent) => {
                  //   console.log('xrViewportSetup')
                  //   const xrvp = event.xrViewport
                  //   xrvp.on('presentingChanged', (event: StateChangedEvent) => {
                  //     if (event.state) {
                  //       occlusionDataBufferSizeFactor = 0.2
                  //       this.occlusionDataBuffer.resize(
                  //         Math.ceil(xrvp.getWidth() / occlusionDataBufferSizeFactor),
                  //         Math.ceil(xrvp.getWidth() / occlusionDataBufferSizeFactor)
                  //       )
                  //     } else {
                  //       occlusionDataBufferSizeFactor = 1
                  //       this.occlusionDataBuffer.resize(
                  //         Math.ceil(this.renderer.getWidth() / occlusionDataBufferSizeFactor),
                  //         Math.ceil(this.renderer.getWidth() / occlusionDataBufferSizeFactor)
                  //       )
                  //     }
                  //     this.occlusionImage.setData(
                  //       this.occlusionDataBuffer.width,
                  //       this.occlusionDataBuffer.height,
                  //       this.occlusionDataBuffer.textureTargets[0]
                  //     )
                  //   })
                  // })
                  this.reductionDataBuffer = new GLRenderTarget(gl, {
                      type: gl.UNSIGNED_BYTE,
                      internalFormat: gl.R8,
                      format: gl.RED,
                      minFilter: gl.NEAREST,
                      magFilter: gl.NEAREST,
                      width: 1,
                      height: 1,
                      depthType: gl.UNSIGNED_SHORT,
                      depthFormat: gl.DEPTH_COMPONENT,
                      depthInternalFormat: gl.DEPTH_COMPONENT16,
                  });
                  this.bbox = new GLLines(gl, new BBoxOcclusionLinesCuboid());
                  this.reductionShader = new ReductionShader(gl);
                  this.boundingBoxShader = new BoundingBoxShader(gl);
                  this.boundingBoxShader.compileForTarget('GLGeomItemLibrary', this.renderer.directives);
                  this.inFrustumIndicesCount = 0;
              }
          }
      }
      /**
       * Handles applying the culling results received from the GLGeomItemLibraryCullingWorker
       * @param {object} data - The object containing the newlyCulled and newlyUnCulled results.
       */
      applyCullResults(data) {
          // return
          if (data.newlyCulled) {
              data.newlyCulled.forEach((index) => {
                  if (this.glGeomItems[index])
                      this.glGeomItems[index].setCulled(true);
              });
          }
          if (data.newlyUnCulled) {
              data.newlyUnCulled.forEach((index) => {
                  // console.log('newlyUnCulled:', this.glGeomItems[index].geomItem.getName())
                  if (this.glGeomItems[index])
                      this.glGeomItems[index].setCulled(false);
              });
          }
          this.renderer.requestRedraw();
      }
      /**
       * @private
       * @param data
       */
      emitCullingUpdateData(data) {
          // Used mostly to make our unit testing robust.
          // Also to help display render stats.
          // console.log(`visible: ${data.visible} / total: ${data.total}`)
          this.renderer.emit('CullingUpdated', {
              culled: data.newlyCulled?.length,
              unCulled: data.newlyUnCulled?.length,
              visible: data.visible,
              total: data.total,
              visibleGeomStats: data.visibleGeomStats,
              totalGeomStats: data.totalGeomStats,
          });
      }
      /**
       * Given the IDs of the items we know are in the frustum, setup an instanced attribute we can use
       * to render bounding boxes for these items if they do not show up in the initial GPU buffer.
       * @param {Float32Array} inFrustumIndices - The array of indices of items we know are in the frustum.
       */
      updateCulledDrawIDsBuffer(inFrustumIndices) {
          const gl = this.renderer.gl;
          if (!gl.floatTexturesSupported) {
              this.drawIdsBufferDirty = false;
              return;
          }
          if (this.inFrustumDrawIdsBuffer && this.inFrustumIndicesCount != inFrustumIndices.length) {
              gl.deleteBuffer(this.inFrustumDrawIdsBuffer);
              this.inFrustumDrawIdsBuffer = null;
          }
          if (!this.inFrustumDrawIdsBuffer) {
              this.inFrustumDrawIdsBuffer = gl.createBuffer();
              gl.bindBuffer(gl.ARRAY_BUFFER, this.inFrustumDrawIdsBuffer);
          }
          gl.bindBuffer(gl.ARRAY_BUFFER, this.inFrustumDrawIdsBuffer);
          gl.bufferData(gl.ARRAY_BUFFER, inFrustumIndices, gl.STATIC_DRAW);
          this.inFrustumIndicesCount = inFrustumIndices.length;
          this.drawIdsBufferDirty = false;
          // Note: we get errors trying to read data back from images less than 4x4 pixels.
          const size = Math.max(4, MathFunctions.nextPow2(Math.round(Math.sqrt(this.glGeomItems.length) + 0.5)));
          if (this.reductionDataBuffer.width != size) {
              this.reductionDataBuffer.resize(size, size);
              this.reductionDataArray = new Uint8Array(size * size);
          }
      }
      /**
       * Calculate a further refinement of the culling by using the GPU to see which items are actually visible.
       * @param inFrustumIndices - The array of indices of items we know are in the frustum.
       */
      calculateOcclusionCulling(inFrustumIndices) {
          if (inFrustumIndices && inFrustumIndices.length > 0) {
              this.updateCulledDrawIDsBuffer(inFrustumIndices);
          }
          if (this.inFrustumIndicesCount == 0) {
              this.worker.postMessage({
                  type: 'OcclusionData',
                  visibleItems: [],
              });
              return;
          }
          const gl = this.renderer.gl;
          const renderstate = new GeomDataRenderState(gl);
          renderstate.pushGLStack('calculateOcclusionCulling');
          this.renderer.bindGLRenderer(renderstate);
          renderstate.directives = [...this.renderer.directives, '#define DRAW_GEOMDATA'];
          renderstate.floatGeomBuffer = true;
          renderstate.occlusionCulling = 1;
          if (this.xrPresenting) {
              this.xrViewport.bindCullingViewport(renderstate, this.xrFovY, this.xrProjectionMatrix);
          }
          else {
              this.renderer.getViewport().bindGLViewport(renderstate);
          }
          // this.renderer.drawSceneGeomData(renderstate)
          const drawSceneGeomData = (renderstate) => {
              this.occlusionDataBuffer.bindForWriting(renderstate, true);
              renderstate.glDisable(gl.BLEND);
              renderstate.glDisable(gl.CULL_FACE);
              renderstate.glEnable(gl.DEPTH_TEST);
              gl.depthFunc(gl.LESS);
              gl.depthMask(true);
              // For now, just rendering the main opaque geoms.
              const opaqueGeomsPass = this.renderer.getPass(0);
              opaqueGeomsPass.drawGeomData(renderstate);
              const linesPass = this.renderer.getPass(1);
              linesPass.drawGeomData(renderstate);
              // for (const key in this.__passes) {
              //   // Skip pass categories that do not match
              //   // the mask. E.g. we may not want to hit
              //   // "Overlay" geoms such as labels,
              //   // or we might be trying to move labels and don't
              //   // want to grab normal geoms.
              //   if ((Number.parseInt(key) & mask) == 0) continue
              //   const passSet = this.__passes[key]
              //   for (const pass of passSet) {
              //     if (pass.enabled) pass.drawGeomData(renderstate)
              //   }
              // }
              this.occlusionDataBuffer.unbindForWriting(renderstate);
          };
          // Draw one point for each pixel in the occlusion buffer.
          // This point will color a single pixel in the reduction buffer.
          const numReductionPoints = this.occlusionDataBuffer.width * this.occlusionDataBuffer.height;
          const ext = this.timer_query_ext;
          // Now perform a reduction to calculate the indices of visible items.
          const reduce = (renderstate, clear, query) => {
              this.reductionDataBuffer.bindForWriting(renderstate, clear);
              // The second time we reduce into the reductionDataBuffer, we want to
              // keep the values that were already there. The first reduction counted
              // the items visible after the scene was drawn. The second one adds items
              // visible due to the bounding boxes being visible.
              if (!clear) {
                  gl.enable(gl.BLEND);
                  gl.blendEquation(gl.FUNC_ADD);
                  gl.blendFunc(gl.SRC_COLOR, gl.DST_COLOR);
              }
              this.reductionShader.bind(renderstate);
              const { geomDataTexture, reductionTextureWidth } = renderstate.unifs;
              if (geomDataTexture)
                  this.occlusionDataBuffer.bindToUniform(renderstate, geomDataTexture);
              if (reductionTextureWidth)
                  gl.uniform1i(reductionTextureWidth.location, this.reductionDataBuffer.width);
              if (ext)
                  gl.beginQuery(ext.TIME_ELAPSED_EXT, query);
              gl.drawArrays(gl.POINTS, 0, numReductionPoints);
              if (ext)
                  gl.endQuery(ext.TIME_ELAPSED_EXT);
              if (!clear) {
                  gl.disable(gl.BLEND);
              }
              this.reductionDataBuffer.unbindForWriting(renderstate);
          };
          const drawCulledBBoxes = () => {
              this.occlusionDataBuffer.bindForWriting(renderstate, false);
              // Now clear the color buffer, but not the depth buffer
              // and draw the bounding boxes of occluded items.
              // This means the second reduction only count fragments
              // rasterized by the bounding boxes, and not the initial
              // scene geometry.(which was counted in the first reduce)
              // Note: disable this code to see the full occlusion buffer in debugging.
              if (!this.debugOcclusionBuffer) {
                  gl.colorMask(true, true, true, true);
                  gl.clearColor(0, 0, 0, 0);
                  gl.clear(gl.COLOR_BUFFER_BIT); // do _not_ clear depth.
              }
              this.boundingBoxShader.bind(renderstate, 'GLGeomItemLibrary');
              this.bbox.bind(renderstate);
              // Read each Matrix and Bbox settings from the Texture.
              const { instancesTexture, instancesTextureSize, instancedDraw, reductionDataTexture, occlusionCulling } = renderstate.unifs;
              this.glGeomItemsTexture.bindToUniform(renderstate, instancesTexture);
              gl.uniform1i(instancesTextureSize.location, this.glGeomItemsTexture.width);
              gl.uniform1i(instancedDraw.location, 1);
              this.reductionDataBuffer.bindColorTexture(renderstate, reductionDataTexture);
              // The instanced transform ids are bound as an instanced attribute.
              const location = renderstate.attrs.instancedIds.location;
              gl.enableVertexAttribArray(location);
              gl.bindBuffer(gl.ARRAY_BUFFER, this.inFrustumDrawIdsBuffer);
              gl.vertexAttribPointer(location, 1, gl.FLOAT, false, 1 * 4, 0);
              gl.vertexAttribDivisor(location, 1); // This makes it instanced
              // Now draw all the bounding boxes to make sure we catch anything.
              // Note: If the geometry is listed visibility buffer, we skip it.
              // Do this draws only the bounding boxes for non-visible geometries.
              renderstate.bindViewports(renderstate.unifs, () => {
                  this.bbox.drawInstanced(renderstate, this.inFrustumIndicesCount);
              });
              this.occlusionDataBuffer.unbindForWriting(renderstate);
          };
          let queryDrawScene;
          let queryReduceSceneGeoms;
          let queryDrawCulledBBoxes;
          let queryReduceBBoxes;
          if (ext) {
              queryDrawScene = gl.createQuery();
              gl.beginQuery(ext.TIME_ELAPSED_EXT, queryDrawScene);
          }
          drawSceneGeomData(renderstate);
          if (ext)
              gl.endQuery(ext.TIME_ELAPSED_EXT);
          // We render the scene geometry, reduce, then render
          // the boxes, reduce again. The bounding boxes displayed
          // are based on the results of the first reduce.
          if (ext)
              queryReduceSceneGeoms = gl.createQuery();
          reduce(renderstate, true, queryReduceSceneGeoms);
          if (ext) {
              queryDrawCulledBBoxes = gl.createQuery();
              gl.beginQuery(ext.TIME_ELAPSED_EXT, queryDrawCulledBBoxes);
          }
          //
          drawCulledBBoxes();
          // All rendering is done.
          renderstate.popGLStack();
          if (ext)
              gl.endQuery(ext.TIME_ELAPSED_EXT);
          if (ext)
              queryReduceBBoxes = gl.createQuery();
          reduce(renderstate, false, queryReduceBBoxes);
          const queryResults = {
              numReductionPoints,
          };
          const checkQuery = (name, query) => {
              const available = gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE);
              const disjoint = gl.getParameter(ext.GPU_DISJOINT_EXT);
              if (available && !disjoint) {
                  // See how much time the rendering of the object took in nanoseconds.
                  const timeElapsed = gl.getQueryParameter(query, gl.QUERY_RESULT);
                  queryResults[name] = timeElapsed / 1000000;
                  // Clean up the query object.
                  gl.deleteQuery(query);
              }
          };
          // //////////////////////////////////////////
          // Pull down the reduction values from the GPU for processing.
          const w = this.reductionDataBuffer.width;
          const h = this.reductionDataBuffer.height;
          const format = gl.RED;
          const type = gl.UNSIGNED_BYTE;
          this.reductionDataBuffer.bindForReading();
          readPixelsAsync(gl, 0, 0, w, h, format, type, this.reductionDataArray).then(() => {
              this.reductionDataBuffer.unbindForReading();
              if (ext) {
                  checkQuery('queryDrawScene', queryDrawScene);
                  checkQuery('queryDrawCulledBBoxes', queryDrawCulledBBoxes);
                  checkQuery('queryReduceSceneGeoms', queryReduceSceneGeoms);
                  checkQuery('queryReduceBBoxes', queryReduceBBoxes);
                  this.renderer.emit('occlusionCullingProfilingData', queryResults);
              }
              // console.log(this.reductionDataArray)
              // Now send the buffer to the worker, where it will determine what culling
              // needs to be applied on top of the frustum culling.
              this.worker.postMessage({
                  type: 'OcclusionData',
                  visibleItems: this.reductionDataArray,
              });
          });
      }
      /**
       * The addGeomItem method.
       * @param geomItem - The geomItem value.
       * @return - The index of GLGeomItem
       */
      addGeomItem(geomItem) {
          let index = this.glGeomItemsMap.get(geomItem);
          if (index != undefined) {
              // Increment the ref count for the GLGeom
              return this.glGeomItems[index];
          }
          // Use recycled indices if there are any available...
          if (this.glGeomItemsIndexFreeList.length > 0) {
              index = this.glGeomItemsIndexFreeList.pop();
          }
          else {
              index = this.glGeomItems.length;
              this.glGeomItems.push(null);
          }
          // If an item is removed and re-added immediately, we avoid removing the item from the culling worker.
          if (this.removedItemIndices.includes(index)) {
              this.removedItemIndices.splice(this.removedItemIndices.indexOf(index), 1);
          }
          this.dirtyItemIndices.add(index);
          // ///////////////////////////////////////////
          // Material
          const materialParam = geomItem.materialParam;
          let material = materialParam.value;
          // Add the material here so that when we populate the GeomItem texture.
          // the material already has an Id.
          let matIndex = this.renderer.glMaterialLibrary.addMaterial(material);
          const materialChanged = () => {
              // Ref count the materials in the material library.
              this.renderer.glMaterialLibrary.removeMaterial(material);
              material = materialParam.value;
              glGeomItem.materialId = this.renderer.glMaterialLibrary.addMaterial(material);
              workerItemDataChanged();
              geomItemChanged();
          };
          materialParam.on('valueChanged', materialChanged);
          // ///////////////////////////////////////////
          // GeomItem
          const gl = this.renderer.gl;
          const supportInstancing = material.getShaderClass().supportsInstancing();
          const geomIndex = -1;
          const glGeomItem = new GLGeomItem(gl, geomItem, index, geomIndex, matIndex, supportInstancing);
          const geomItemChanged = () => {
              if (this.dirtyItemIndices.has(index))
                  return;
              this.dirtyItemIndices.add(index);
              this.renderer.drawItemChanged();
          };
          geomItem.geomMatParam.on('valueChanged', geomItemChanged);
          geomItem.on('cutAwayChanged', geomItemChanged);
          geomItem.on('highlightChanged', geomItemChanged);
          geomItem.on('selectabilityChanged', geomItemChanged);
          geomItem.on('opacityChanged', geomItemChanged);
          const workerItemDataChanged = () => {
              if (this.enableFrustumCulling) {
                  if (!this.dirtyWorkerItemIndices.has(index)) {
                      this.dirtyWorkerItemIndices.add(index);
                      this.renderer.drawItemChanged();
                  }
              }
          };
          if (this.enableFrustumCulling) {
              this.dirtyWorkerItemIndices.add(index);
          }
          geomItem.on('visibilityChanged', workerItemDataChanged);
          geomItem.on('opacityChanged', workerItemDataChanged);
          geomItem.geomMatParam.on('valueChanged', workerItemDataChanged);
          geomItem.geomParam.on('boundingBoxChanged', workerItemDataChanged);
          this.glGeomItems[index] = glGeomItem;
          this.glGeomItemEventHandlers[index] = {
              geomItemChanged,
              materialChanged,
              workerItemDataChanged,
          };
          this.glGeomItemsMap.set(geomItem, index);
          // Note: before the renderer is disabled, this is a  no-op.
          this.renderer.requestRedraw();
          return glGeomItem;
      }
      /**
       * The removeGeomItem method.
       * @param geomItem - The geomItem value.
       * @return - The return value.
       */
      removeGeomItem(geomItem) {
          const index = this.glGeomItemsMap.get(geomItem);
          // This GeomItem may not yet have been added to the Renderer.
          // This may be because it is part of an asset that is still loading
          // and has not yet received its geometry.
          if (index == undefined)
              return null;
          const glGeomItem = this.glGeomItems[index];
          const material = geomItem.materialParam.value;
          this.renderer.glMaterialLibrary.removeMaterial(material);
          const handlers = this.glGeomItemEventHandlers[index];
          const materialParam = geomItem.materialParam;
          materialParam.off('valueChanged', handlers.materialChanged);
          geomItem.geomMatParam.off('valueChanged', handlers.geomItemChanged);
          geomItem.off('cutAwayChanged', handlers.geomItemChanged);
          geomItem.off('highlightChanged', handlers.geomItemChanged);
          geomItem.off('selectabilityChanged', handlers.geomItemChanged);
          // material.off('opacityChanged', handlers.geomItemChanged)
          geomItem.off('opacityChanged', handlers.geomItemChanged);
          geomItem.off('visibilityChanged', handlers.workerItemDataChanged);
          geomItem.geomMatParam.off('valueChanged', handlers.workerItemDataChanged);
          geomItem.off('opacityChanged', handlers.workerItemDataChanged);
          geomItem.geomParam.off('boundingBoxChanged', handlers.workerItemDataChanged);
          this.glGeomItems[index] = null;
          this.glGeomItemEventHandlers[index] = null;
          this.glGeomItemsIndexFreeList.push(index);
          this.glGeomItemsMap.delete(geomItem);
          this.removedItemIndices.push(index);
          if (this.dirtyWorkerItemIndices.has(index)) {
              this.dirtyWorkerItemIndices.delete(index);
          }
          this.renderer.requestRedraw();
          return glGeomItem;
      }
      /**
       * The getGeomItem method.
       * @param index - The index value.
       * @return - The GLGeomItem that wraps the provided GeomItem
       */
      getGeomItem(index) {
          if (index >= this.glGeomItems.length) {
              console.warn('Invalid Draw Item id:' + index + ' NumItems:' + (this.glGeomItems.length - 1));
              return undefined;
          }
          return this.glGeomItems[index]?.geomItem;
      }
      /**
       * The getGeomItem method.
       * @param geomItem - The geomItem value.
       * @return - The GLGeomItem that wraps the provided GeomItem
       */
      getGLGeomItem(geomItem) {
          const index = this.glGeomItemsMap.get(geomItem);
          if (index != undefined) {
              // Increment the ref count for the GLGeom
              return this.glGeomItems[index];
          }
          return null;
      }
      // ////////////////////////////////////////////////
      // Data Uploading
      /**
       * The populateDrawItemDataArray method.
       * @param index - The index of the item in the library.
       * @param subIndex - The index of the item within the block being uploaded.
       * @param dataArray - The dataArray value.
       * @private
       */
      populateDrawItemDataArray(index, subIndex, dataArray) {
          const glGeomItem = this.glGeomItems[index];
          // When an item is deleted, we allocate its index to the free list
          // and null this item in the array. skip over null items.
          if (!glGeomItem)
              return;
          const { geomItem, geomId } = glGeomItem;
          const material = geomItem.materialParam.value;
          const stride = pixelsPerItem$1 * 4; // The number of floats per draw item.
          const offset = subIndex * stride;
          // /////////////////////////
          // Geom Item Params
          let flags = 0;
          if (geomItem.isCutawayEnabled()) {
              flags |= GLGeomItemFlags.GEOMITEM_FLAG_CUTAWAY;
          }
          if (!geomItem.isSelectable()) {
              flags |= GLGeomItemFlags.GEOMITEM_INVISIBLE_IN_GEOMDATA;
          }
          if (!material.isOpaque() || !geomItem.isOpaque()) {
              flags |= GLGeomItemFlags.GEOMITEM_TRANSPARENT;
          }
          const pix0 = new Float32Array(dataArray.buffer, (offset + 0) * 4, 4);
          pix0[0] = flags;
          pix0[1] = geomItem.opacity;
          const allocation = this.renderer.glMaterialLibrary.getMaterialAllocation(material);
          if (allocation) {
              pix0[2] = allocation.start;
          }
          // Store the geomId for debugging purposes.
          // see: DEBUG_GEOM_ID
          pix0[4] = geomId;
          // /////////////////////////
          // Geom Matrix
          const mat4 = geomItem.geomMatParam.value;
          const pix1 = new Float32Array(dataArray.buffer, (offset + 1 * 4) * 4, 4);
          const pix2 = new Float32Array(dataArray.buffer, (offset + 2 * 4) * 4, 4);
          const pix3 = new Float32Array(dataArray.buffer, (offset + 3 * 4) * 4, 4);
          pix1.set([mat4.xAxis.x, mat4.yAxis.x, mat4.zAxis.x, mat4.translation.x]);
          pix2.set([mat4.xAxis.y, mat4.yAxis.y, mat4.zAxis.y, mat4.translation.y]);
          pix3.set([mat4.xAxis.z, mat4.yAxis.z, mat4.zAxis.z, mat4.translation.z]);
          // /////////////////////////
          // Highlight
          const pix4 = new Float32Array(dataArray.buffer, (offset + 4 * 4) * 4, 4);
          if (geomItem.isHighlighted()) {
              const highlight = geomItem.getHighlight();
              pix4.set([highlight.r, highlight.g, highlight.b, highlight.a]);
          }
          // /////////////////////////
          // Cutaway
          const pix5 = new Float32Array(dataArray.buffer, (offset + 5 * 4) * 4, 4);
          if (geomItem.isCutawayEnabled()) {
              const cutAwayVector = geomItem.getCutVector();
              const cutAwayDist = geomItem.getCutDist();
              // console.log(geomItem.getName(), geomItem.isCutawayEnabled(), flags, pix0.toString())
              pix5.set([cutAwayVector.x, cutAwayVector.y, cutAwayVector.z, cutAwayDist]);
          }
          // /////////////////////////
          // Bounding Box
          const bbox = geomItem.boundingBoxParam.value;
          const pix6 = new Float32Array(dataArray.buffer, (offset + 6 * 4) * 4);
          const pix7 = new Float32Array(dataArray.buffer, (offset + 7 * 4) * 4);
          pix6.set([bbox.p0.x, bbox.p0.y, bbox.p0.z, 0.0]);
          pix7.set([bbox.p1.x, bbox.p1.y, bbox.p1.z, 0.0]);
      }
      /**
       * Gathers data to pass to the culling worker.
       * @param geomItem - The GeomItem to gether the data for.
       * @param material - The material of GeomItem.
       * @param index - The index of the item to gether the data for.
       * @return - the JSON data that will be passed to the worker.
       */
      getCullingWorkerData(geomItem, index) {
          const bbox = geomItem.boundingBoxParam.value;
          const boundingRadius = bbox.size() * 0.5;
          const pos = bbox.center();
          const material = geomItem.materialParam.value;
          // Some items can't be culled. They should be flagged as overlay or not cullable
          const cullable = geomItem.cullable && !geomItem.isOverlay() && !material.getShaderClass().isOverlay();
          const transparent = !geomItem.isOpaque() || !material.isOpaque();
          const geomStats = {
              triangles: 0,
              lines: 0,
              points: 0,
          };
          const geom = geomItem.geomParam.value;
          if (geom instanceof CompoundGeom) {
              geomStats.triangles += geom.getNumTriangles();
              geomStats.lines += geom.getNumLineSegments();
              geomStats.points += geom.getNumPoints();
          }
          else if (geom instanceof Mesh || geom instanceof MeshProxy) {
              geomStats.triangles += geom.getNumTriangles();
          }
          else if (geom instanceof Lines || geom instanceof LinesProxy) {
              geomStats.lines += geom.getNumLineSegments();
          }
          else if (geom instanceof Points || geom instanceof PointsProxy) {
              geomStats.points += geom.getNumVertices();
          }
          else {
              throw new Error('Unsupported geom type:' + geom.constructor.name);
          }
          return {
              id: index,
              boundingRadius,
              pos: pos.asArray(),
              cullable,
              visible: geomItem.isVisible(),
              transparent,
              geomStats,
          };
      }
      /**
       * Any items that need to be updated on the worker are now pushed.
       */
      uploadGeomItemsToWorker() {
          if (this.enableFrustumCulling) {
              const geomItemsUpdateToCullingWorker = [];
              this.dirtyWorkerItemIndices.forEach((index) => {
                  const glGeomItem = this.glGeomItems[index];
                  // When an item is deleted, we allocate its index to the free list
                  // and null this item in the array. skip over null items.
                  if (!glGeomItem)
                      return;
                  const { geomItem } = glGeomItem;
                  const data = this.getCullingWorkerData(geomItem, index);
                  if (data)
                      geomItemsUpdateToCullingWorker.push(data);
              });
              // /////////////////////////
              // Update the culling worker
              this.worker.postMessage({
                  type: 'UpdateGeomItems',
                  geomItems: geomItemsUpdateToCullingWorker,
                  removedItemIndices: this.removedItemIndices,
              });
              this.dirtyWorkerItemIndices.clear();
              this.removedItemIndices = [];
          }
      }
      /**
       * The uploadGeomItems method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      uploadGeomItems(renderstate) {
          const gl = this.renderer.gl;
          if (!gl.floatTexturesSupported) {
              return;
          }
          let size = Math.round(Math.sqrt(this.glGeomItems.length * pixelsPerItem$1) + 0.5);
          // Only support power 2 textures. Else we get strange corruption on some GPUs
          // in some scenes.
          size = MathFunctions.nextPow2(size);
          // Size should be a multiple of pixelsPerItem, so each geom item is always contiguous
          // in memory. (makes updating a lot easier. See __updateItemInstanceData below)
          if (size % pixelsPerItem$1 != 0)
              size += pixelsPerItem$1 - (size % pixelsPerItem$1);
          if (!this.glGeomItemsTexture) {
              this.glGeomItemsTexture = new GLTexture2D(gl, {
                  format: 'RGBA',
                  type: 'FLOAT',
                  width: size,
                  height: size,
                  filter: 'NEAREST',
                  wrap: 'CLAMP_TO_EDGE',
                  mipMapped: false,
              });
              this.glGeomItemsTexture.clear();
          }
          else if (this.glGeomItemsTexture.width != size) {
              this.glGeomItemsTexture.resize(size, size);
              this.dirtyItemIndices = new Set(Array((size * size) / pixelsPerItem$1)
                  .fill(0) // TODO: check, is 0 ok as an argument here?
                  .map((v, i) => i));
          }
          gl.bindTexture(gl.TEXTURE_2D, this.glGeomItemsTexture.glTex);
          const typeId = this.glGeomItemsTexture.getType();
          const dirtyItemIndices = Array.from(this.dirtyItemIndices);
          for (let i = 0; i < dirtyItemIndices.length; i++) {
              const indexStart = dirtyItemIndices[i];
              const yoffset = Math.floor((indexStart * pixelsPerItem$1) / size);
              let indexEnd = indexStart + 1;
              for (let j = i + 1; j < dirtyItemIndices.length; j++) {
                  const index = dirtyItemIndices[j];
                  if (Math.floor((index * pixelsPerItem$1) / size) != yoffset) {
                      break;
                  }
                  if (index != indexEnd) {
                      break;
                  }
                  indexEnd++;
              }
              // TODO: for contiguous blocks, we create larger arrays and populate
              // and upload them in one step.
              const uploadCount = indexEnd - indexStart;
              const xoffset = (indexStart * pixelsPerItem$1) % size;
              const width = pixelsPerItem$1 * uploadCount;
              const height = 1;
              const dataArray = new Float32Array(pixelsPerItem$1 * 4 * uploadCount); // 4==RGBA pixels.
              for (let j = indexStart; j < indexEnd; j++) {
                  this.populateDrawItemDataArray(j, j - indexStart, dataArray);
              }
              if (typeId == gl.FLOAT) {
                  this.glGeomItemsTexture.populate(dataArray, width, height, xoffset, yoffset, false);
              }
              else {
                  const unit16s = MathFunctions.convertFloat32ArrayToUInt16Array(dataArray);
                  this.glGeomItemsTexture.populate(unit16s, width, height, xoffset, yoffset, false);
              }
              i += uploadCount - 1;
          }
          this.removedItemIndices = [];
          this.dirtyItemIndices = new Set();
      }
      /**
       * Updates the GPU state if any update is needed.
       * @param renderstate - The object tracking the current state of the renderer
       */
      bind(renderstate) {
          if (this.dirtyWorkerItemIndices.size > 0 || this.removedItemIndices.length > 0) {
              this.uploadGeomItemsToWorker();
          }
          if (this.dirtyItemIndices.size > 0) {
              this.uploadGeomItems(renderstate);
          }
          const gl = this.renderer.gl;
          const { instancesTexture, instancesTextureSize } = renderstate.unifs;
          if (instancesTexture) {
              this.glGeomItemsTexture.bindToUniform(renderstate, instancesTexture);
              gl.uniform1i(instancesTextureSize.location, this.glGeomItemsTexture.width);
          }
      }
  }

  var frag$f = "\nprecision highp float;\n#define GLSLIFY 1\n\nuniform float outlineThickness;\nuniform sampler2D highlightDataTexture;\n\nvarying vec2 v_texCoord;\n\nfloat M_PI = 3.141592653589793;\nfloat diff(vec4 pixelA, vec4 pixelB)\n{\n  return abs(pixelA.r - pixelB.r) + abs(pixelA.g - pixelB.g) + abs(pixelA.b - pixelB.b) + abs(pixelA.a - pixelB.a);\n}\n\n// find the first pixel which is not the same as the center pixel.\nvec4 RadialSearch(vec2 uv)\n{\n  vec2 texSize = vec2(textureSize(highlightDataTexture, 0));\n  ivec2 pixelCenterCoord = ivec2(uv * texSize);\n  vec4 pixelCenter = texelFetch(highlightDataTexture, pixelCenterCoord, 0);\n\n  vec3 offset = vec3((1.0 / texSize.x), (1.0 / texSize.y), 0.0);\n\n  vec4 result = pixelCenter;\n  float weights = 1.0;\n  float radius = 0.0;\n  int differentPixels = 0;\n  while (radius <= outlineThickness + 0.001) {\n    radius += 1.0;\n    \n    int samples = int(2.0 * M_PI * radius);\n    for (int i =0; i<samples; i++) {\n      float theta = (float(i) / float(samples)) * 2.0 * M_PI;\n      vec2 dir = vec2(radius * cos(theta) * offset.x, radius * sin(theta) * offset.y);\n      \n      ivec2 pixelCoord = ivec2((uv + dir) * texSize);\n      vec4 pixel = texelFetch(highlightDataTexture, pixelCoord, 0);\n      if ((pixel.r > 0.0 || pixel.g > 0.0 || pixel.b > 0.0)) {\n        if (diff(pixel, pixelCenter) > 0.1) differentPixels++;\n        // Blend the outer ring of pixels.\n        // Note: disabled because I ran out of time. We can blend off the highlight towards\n        // the edges to get a nicely anti-aliazed outline. \n        // float dist = length(vec2(pixelCoord) - vec2(pixelCenterCoord));\n        // float blendStart = max(1.0, outlineThickness - 0.5);\n        pixel.a = 1.0; //smoothstep(1.0, 0.0, dist - blendStart);\n\n        result += pixel;\n        weights += pixel.a;\n      }\n    }\n  }\n\n  // Note: at the boundary between 2 highlighted objects, we get a nice blending effect. \n  if (weights > 1.0) {\n    result = result / weights;\n  }\n\n  // If all the pixels found are the same as the center pixel, we just\n  // return the center pixel.\n  if (differentPixels == 0) {\n    return pixelCenter;\n  }\n\n  return result;\n}\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\nvoid main(void) {\n    \n  vec4 outlineColor = RadialSearch(v_texCoord);\n  \n  if (outlineColor.a > 0.0001) {\n#ifndef ENABLE_ES3\n    gl_FragColor = outlineColor;\n#else\n    fragColor = outlineColor;\n#endif\n  }\n  else {\n    discard;\n  }\n}\n\n"; // eslint-disable-line

  var vert$g = "\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;    //(location = 0)\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  v_texCoord = positions.xy+0.5;\n  gl_Position = vec4(positions.xy*2.0, 0.0, 1.0);\n}\n\n"; // eslint-disable-line

  /* eslint-disable require-jsdoc */
  class HighlightsShader extends GLShader {
      /**
       * Create a GL shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'HighlightsShader');
          this.setShaderStage('VERTEX_SHADER', vert$g);
          this.setShaderStage('FRAGMENT_SHADER', frag$f);
      }
  }

  var frag$e = "\n#ifndef ENABLE_ES3\n#extension GL_EXT_frag_depth: enable\n#endif\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D colorTexture;\nuniform sampler2D depthTexture;\nuniform vec2 screenSize;\nuniform vec2 depthRange;\n\nuniform float outlineThickness;\nuniform color outlineColor;\nuniform float outlineSensitivity;\nuniform float outlineDepthBias;\n\nvarying vec2 v_texCoord;\n\n// http://web.archive.org/web/20130416194336/http://olivers.posterous.com/linear-depth-in-glsl-for-real\nfloat LinearEyeDepth(float z_b) {\n  float z_n = 2.0 * z_b - 1.0;\n  float z_e = 2.0 * depthRange.x * depthRange.y / (depthRange.y + depthRange.x - z_n * (depthRange.y - depthRange.x));\n  return z_e;\n}\n\nfloat LogEyeDepth(float z_b) {\n  return depthRange.x + ((depthRange.y - depthRange.x) * z_b);\n}\n\n// https://www.vertexfragment.com/ramblings/unity-postprocessing-sobel-outline/#depth-based-outline\n// https://github.com/ssell/UnitySobelOutline/blob/2e1f4a5b4e703ae2c96aaf08d5518ce58abbaab9/Assets/Resources/Shaders/SobelOutlineHLSL.shader\n\nfloat SobelDepth(float ldc, float ldl, float ldr, float ldu, float ldd)\n{\n  return abs(ldl - ldc) +\n      abs(ldr - ldc) +\n      abs(ldu - ldc) +\n      abs(ldd - ldc);\n}\n\nfloat SobelSampleDepth(vec2 uv, vec3 offset)\n{\n  float pixelCenter = LinearEyeDepth(texture2D(depthTexture, uv).r);\n  float pixelLeft   = LinearEyeDepth(texture2D(depthTexture, uv - offset.xz).r);\n  float pixelRight  = LinearEyeDepth(texture2D(depthTexture, uv + offset.xz).r);\n  float pixelUp     = LinearEyeDepth(texture2D(depthTexture, uv + offset.zy).r);\n  float pixelDown   = LinearEyeDepth(texture2D(depthTexture, uv - offset.zy).r);\n\n  float  outlineDepthMultiplier = (1.0 / pixelCenter) * outlineSensitivity;\n\n  return SobelDepth(pixelCenter, pixelLeft, pixelRight, pixelUp, pixelDown) * outlineDepthMultiplier;\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec3 offset = vec3((1.0 / screenSize.x), (1.0 / screenSize.y), 0.0) * outlineThickness;\n  float sobelDepth = SobelSampleDepth(v_texCoord, offset);\n  float sobelValue = pow(sobelDepth, outlineDepthBias);\n\n  float minEdgeValue = 0.25;\n  float maxEdgeValue = 0.55;\n  sobelDepth = smoothstep(minEdgeValue, maxEdgeValue, sobelValue);\n\n#ifdef ENABLE_ES3\n  fragColor = vec4(outlineColor.rgb, sobelDepth);\n#else\n  fragColor = vec4(mix(texture2D(colorTexture, v_texCoord).rgb, outlineColor.rgb, sobelDepth), 1.0);\n#ifdef  GL_EXT_frag_depth\n  gl_FragDepthEXT = texture2D(depthTexture, v_texCoord).r;\n#endif\n#endif\n\n  // float z = texture2D(depthTexture, v_texCoord).r;\n  // float near = depthRange.x * 2.0;    // the near plane\n  // float far = depthRange.y / 2.0;     // the far plane\n  // float c = (2.0 * near) / (far + near - z * (far - near));  // convert to linear values \n  // fragColor = vec4(vec3(c), 1.0);\n\n  \n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n"; // eslint-disable-line

  var vert$f = "\nprecision highp float;\n#define GLSLIFY 1\nattribute vec3 positions;    //(location = 0)\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  v_texCoord = positions.xy+0.5;\n  gl_Position = vec4(positions.xy*2.0, 0.0, 1.0);\n}\n"; // eslint-disable-line

  /* eslint-disable require-jsdoc */
  class SilhouetteShader extends GLShader {
      /**
       * Create a GL shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'SilhouetteShader');
          this.setShaderStage('VERTEX_SHADER', vert$f);
          this.setShaderStage('FRAGMENT_SHADER', frag$e);
      }
  }

  /* eslint-disable guard-for-in */
  let activeGLRenderer;
  let pointerIsDown = false;
  let pointerLeft = false;
  const registeredPasses = [];
  // On Firefox, this provides better performance.
  // Portafill from 24FPS to 28fps....
  // https://hackmd.io/@jgilbert/HkwAQHKRr?type=view#Use-requestPostAnimationFrame-not-requestAnimationFrame
  let requestPostAnimationFrame;
  // @ts-ignore
  if (globalThis.requestPostAnimationFrame) {
      // @ts-ignore
      requestPostAnimationFrame = window.requestPostAnimationFrame;
  }
  else {
      // @ts-ignore
      requestPostAnimationFrame = function (callback) {
          requestAnimationFrame(() => {
              setTimeout(callback, 0);
          });
      };
  }
  /**
   * Class representing a GL base renderer.
   *
   * @extends ParameterOwner
   */
  class GLBaseRenderer extends ParameterOwner {
      #listenerIDs = new Map();
      directives = [];
      directivesHash;
      solidAngleLimit = 0.004;
      __gl;
      glcanvas = null;
      #scene = null;
      #shaderDirectives = {};
      #renderGeomDataFbosRequested = false;
      #shaders = {};
      #passes = {};
      #passAssignments = new Map();
      #passesRegistrationOrder = [];
      #viewports = [];
      #activeViewport = undefined;
      #continuousDrawing = false;
      #redrawRequested = false;
      #drawSuspensionLevel = 0;
      floatGeomBuffer = true;
      multiSampledScreenBuffer = false;
      xrViewportPresenting = false;
      xrViewport = undefined;
      #xrViewportPromise;
      glMaterialLibrary;
      glGeomItemLibrary;
      glGeomLibrary;
      highlightsShader;
      silhouetteShader;
      screenQuad = null;
      #resizeObserver;
      #onResizeCallback;
      /**
       * Create a GL base renderer.
       * @param $canvas - The canvas element.
       * @param options - The options value.
       */
      constructor($canvas, options = {}) {
          super();
          if (!SystemDesc.gpuDesc) {
              throw new Error('Unable to create renderer. WebGL not Supported');
          }
          // Function Bindings.
          this.requestRedraw = this.requestRedraw.bind(this);
          this.__gl = this.setupWebGL($canvas, options);
          const gl = this.__gl;
          this.highlightsShader = new HighlightsShader(gl);
          this.silhouetteShader = new SilhouetteShader(gl);
          this.screenQuad = new GLScreenQuad(this.__gl, this.directives);
          this.bindEventHandlers();
          const mainViewport = this.addViewport('main');
          mainViewport.debugGeomDataBuffer = options.debugGeomDataBuffer;
          mainViewport.debugOcclusionBuffer = options.debugOcclusionBuffer;
          this.glMaterialLibrary = new GLMaterialLibrary(this);
          this.glMaterialLibrary.on('updated', () => {
              this.requestRedraw();
          });
          this.glGeomLibrary = new GLGeomLibrary(this);
          this.glGeomLibrary.on('updated', () => {
              this.requestRedraw();
          });
          this.glGeomItemLibrary = new GLGeomItemLibrary(this, options);
          this.glGeomItemLibrary.on('updated', () => {
              this.requestRedraw();
          });
          registeredPasses.forEach((reg) => {
              // eslint-disable-next-line new-cap
              // @ts-ignore
              const pass = new reg.cls();
              this.addPass(pass, reg.passType);
          });
          // ////////////////////////////////////////////
          // WebXR
          this.#xrViewportPromise = new Promise((resolve, reject) => {
              if ((options.supportXR ?? true) && navigator.xr) {
                  const sessionMode = (options.xrMode ?? 'VR') == 'AR' ? 'immersive-ar' : 'immersive-vr';
                  const setupXRViewport = () => {
                      this.xrViewport = this.setupXRViewport(sessionMode);
                      let event = new XrViewportEvent(this.xrViewport);
                      this.emit('xrViewportSetup', event);
                      resolve(this.xrViewport);
                  };
                  navigator.xr
                      .isSessionSupported(sessionMode)
                      .then((isSupported) => {
                      if (isSupported) {
                          setupXRViewport();
                      }
                  })
                      .catch((reason) => {
                      console.warn('Unable to setup XR:' + reason);
                      reject('Unable to setup XR:' + reason);
                  });
              }
          });
      }
      /**
       * The setShaderPreprocessorDirective method.
       * @param name - The name value.
       * @param value - The value param.
       */
      setShaderPreprocessorDirective(name, value) {
          // const gl = this.__gl
          this.#shaderDirectives[name] = value;
          const directives = [];
          let str = '';
          // eslint-disable-next-line guard-for-in
          for (const key in this.#shaderDirectives) {
              const directive = this.#shaderDirectives[key];
              directives.push(directive);
              str += directive;
          }
          this.directives = directives;
          this.directivesHash = '' + StringFunctions.hashStr(str);
      }
      /**
       * Returns HTMLCanvasElement's width
       *
       * @return - The return value.
       */
      getWidth() {
          return this.glcanvas.width;
      }
      /**
       * Returns HTMLCanvasElement's Height
       * @return - The return value.
       */
      getHeight() {
          return this.glcanvas.height;
      }
      // //////////////////////////////////////
      // Viewports
      /**
       * Adds a new viewport(viewing region) to the scene.
       *
       * @param name - The name of the viewport.
       * @return - The return value.
       */
      addViewport(name) {
          // TODO: We may need to merge GLBaseRenderer into GLRenderer to avoid this nasty cast.
          const renderer = this;
          const vp = new GLViewport(renderer, name, this.getWidth(), this.getHeight());
          const updated = () => {
              this.requestRedraw();
          };
          const viewChanged = (data) => {
              if (!this.xrViewportPresenting) {
                  this.emit('viewChanged', data);
              }
          };
          vp.on('updated', updated);
          vp.on('viewChanged', viewChanged);
          this.#viewports.push(vp);
          this.#activeViewport = vp;
          return vp;
      }
      /**
       * Returns a viewport element by specifying its index in the list of viewports.
       *
       * @param index - The index value.
       * @return - The return value.
       */
      getViewport(index = 0) {
          return this.#viewports[index];
      }
      /**
       * Returns a viewport element under the specified XY coordinates.
       *
       * @param offsetX - The viewport offset in the X axis.
       * @param offsetY - The viewport offset in the Y axis.
       * @return - The return value.
       */
      getViewportAtPos(offsetX, offsetY) {
          for (const vp of this.#viewports) {
              const x = vp.getPosX();
              const y = vp.getPosY();
              const width = vp.getWidth();
              const height = vp.getHeight();
              if (offsetX >= x && offsetY >= y && offsetX <= width + x && offsetY <= height + y)
                  return vp;
          }
          return undefined;
      }
      /**
       * Sets as `active` the specified viewport.
       *
       * @param vp - The viewport.
       */
      activateViewport(vp) {
          if (this.#activeViewport == vp)
              return;
          this.#activeViewport = vp;
      }
      /**
       * Sets as àctive` the viewport under the specified XY coordinates.
       *
       * @param offsetX - The viewport offset in the X axis.
       * @param offsetY - The viewport offset in the Y axis.
       */
      activateViewportAtPos(offsetX, offsetY) {
          if (this.xrViewportPresenting)
              return;
          const vp = this.getViewportAtPos(offsetX, offsetY);
          if (vp && vp != this.#activeViewport)
              this.activateViewport(vp);
      }
      /**
       * Returns current active viewport.
       *
       * @return - The return value.
       */
      getActiveViewport() {
          return this.#activeViewport;
      }
      /**
       * The suspendDrawing method.
       */
      suspendDrawing() {
          this.#drawSuspensionLevel++;
      }
      /**
       * The resumeDrawing method.
       */
      resumeDrawing() {
          this.#drawSuspensionLevel--;
          if (this.#drawSuspensionLevel == 0) {
              this.renderGeomDataFbos();
              this.requestRedraw();
          }
      }
      /**
       * The renderGeomDataFbos method. Frame buffer (FBO).
       */
      renderGeomDataFbos() {
          if (this.#renderGeomDataFbosRequested == true)
              return;
          this.#renderGeomDataFbosRequested = true;
          const onAnimationFrame = () => {
              for (const vp of this.#viewports)
                  vp.invalidateGeomDataBuffer();
              this.#renderGeomDataFbosRequested = false;
          };
          requestPostAnimationFrame(onAnimationFrame);
      }
      // //////////////////////////////////////
      // Scene
      /**
       * Returns current scene(Environment where all assets live) object.
       *
       * @return - The return value.
       */
      getScene() {
          return this.#scene;
      }
      /**
       * Sets scene to the renderer.
       *
       * @param scene - The scene value.
       */
      setScene(scene) {
          this.#scene = scene;
          this.addTreeItem(this.#scene.getRoot());
          let event = new SceneSetEvent(this.#scene);
          this.emit('sceneSet', event);
      }
      /**
       * Adds tree items to the renderer, selecting the correct pass to delegate rendering too, and listens to future changes in the tree.
       *
       * @param treeItem - The tree item to add.
       */
      addTreeItem(treeItem) {
          // Note: we can have BaseItems in the tree now.
          if (!(treeItem instanceof TreeItem))
              return;
          const listenerIDs = {};
          let continueInSubTree = true;
          if (treeItem instanceof GeomItem) {
              const geomParam = treeItem.geomParam;
              if (geomParam.value == undefined) {
                  // we will add this geomItem once it receives its geom.
                  const geomAssigned = () => {
                      delete listenerIDs['Geometry.valueChanged'];
                      this.assignTreeItemToGLPass(treeItem);
                  };
                  listenerIDs['Geometry.valueChanged'] = geomParam.once('valueChanged', geomAssigned);
              }
              else {
                  continueInSubTree = this.assignTreeItemToGLPass(treeItem);
              }
          }
          else {
              continueInSubTree = this.assignTreeItemToGLPass(treeItem);
          }
          if (continueInSubTree) {
              // Traverse the tree adding items until we hit the leaves (which are usually GeomItems.)
              for (const childItem of treeItem.getChildren()) {
                  if (childItem)
                      this.addTreeItem(childItem);
              }
              listenerIDs['childAdded'] = treeItem.on('childAdded', (event) => {
                  this.addTreeItem(event.childItem);
              });
              listenerIDs['childRemoved'] = treeItem.on('childRemoved', (event) => {
                  this.removeTreeItem(event.childItem);
              });
          }
          listenerIDs['visibilityChanged'] = treeItem.on('visibilityChanged', (event) => {
              this.renderGeomDataFbos();
          });
          this.#listenerIDs.set(treeItem, listenerIDs);
          this.renderGeomDataFbos();
      }
      /**
       * Searches through the passes and finds the appropriate pass to draw the given tree items.
       *
       * @param treeItem - The tree item to assign.
       */
      assignTreeItemToGLPass(treeItem) {
          if (treeItem instanceof GeomItem) {
              const geomItem = treeItem;
              this.glGeomItemLibrary.addGeomItem(geomItem);
          }
          for (let i = this.#passesRegistrationOrder.length - 1; i >= 0; i--) {
              const pass = this.#passesRegistrationOrder[i];
              const rargs = {
                  continueInSubTree: true,
              };
              const handled = pass.itemAddedToScene(treeItem, rargs);
              if (handled) {
                  this.#passAssignments.set(treeItem, pass);
                  return rargs.continueInSubTree;
              }
          }
          return true;
      }
      /**
       * Remove tree items from the scene.
       *
       * @param treeItem - The tree item to remove.
       */
      removeTreeItem(treeItem) {
          // Note: we can have BaseItems in the tree now.
          if (!(treeItem instanceof TreeItem))
              return;
          const listenerIDs = this.#listenerIDs.get(treeItem);
          this.#listenerIDs.delete(treeItem);
          treeItem.off('visibilityChanged', listenerIDs['visibilityChanged']);
          const pass = this.#passAssignments.get(treeItem);
          if (pass != undefined) {
              const rargs = {
                  continueInSubTree: true,
              };
              pass.itemRemovedFromScene(treeItem, rargs);
              this.#passAssignments.delete(treeItem);
          }
          // Note: if 'continueInSubTree' was false when adding the
          //  item to the tree these listeners were never bound.
          const continueInSubTree = listenerIDs['childAdded'] != undefined && listenerIDs['childRemoved'] != undefined;
          if (continueInSubTree) {
              treeItem.off('childAdded', listenerIDs['childAdded']);
              treeItem.off('childRemoved', listenerIDs['childRemoved']);
              // Traverse the tree adding items till we hit the leaves (which are usually GeomItems).
              for (const childItem of treeItem.getChildren()) {
                  if (childItem)
                      this.removeTreeItem(childItem);
              }
          }
          if (treeItem instanceof GeomItem) {
              const geomItem = treeItem;
              if (listenerIDs['Geometry.valueChanged']) {
                  const geomParam = treeItem.geomParam;
                  geomParam.off('valueChanged', listenerIDs['Geometry.valueChanged']);
              }
              this.glGeomItemLibrary.removeGeomItem(geomItem);
          }
          this.renderGeomDataFbos();
      }
      // ///////////////////////
      // Renderer Setup
      /**
       * Getter for gl.
       */
      get gl() {
          return this.__gl;
      }
      /**
       * The getGL method.
       * @return - The return value.
       */
      getGL() {
          return this.__gl;
      }
      /**
       * Handle the canvas's parent resizing.
       *
       * @param newWidth - The new width of the canvas.
       * @param newHeight - The new height of the canvas.
       *
       * @private
       */
      handleResize(newWidth, newHeight) {
          if (this.xrViewportPresenting) {
              return;
          }
          const width = Math.round(Math.max(4, newWidth) * window.devicePixelRatio);
          const height = Math.round(Math.max(4, newHeight) * window.devicePixelRatio);
          if (this.glcanvas.width != width || this.glcanvas.height != height) {
              this.glcanvas.width = width;
              this.glcanvas.height = height;
              this.#viewports.forEach((viewport) => {
                  viewport.resize(width, height);
              });
              const event = new ResizedEvent(width, height);
              this.emit('resized', event);
              this.requestRedraw();
          }
      }
      /**
       * Returns host div of the canvas element.
       *
       * @return - The return value.
       */
      getDiv() {
          return this.glcanvas.parentElement;
      }
      /**
       * Setups the WebGL configuration for the renderer, specifying the canvas element where our
       * @private
       * @param $canvas - The $canvas element.
       * @param webglOptions - The webglOptions value.
       */
      setupWebGL($canvas, options = {}) {
          const { tagName } = $canvas;
          if (!['DIV', 'CANVAS'].includes(tagName)) {
              throw new Error('Only CANVAS and DIV are valid root elements.');
          }
          const rootIsDiv = tagName === 'DIV';
          this.glcanvas = $canvas;
          if (rootIsDiv) {
              console.warn('@GLBaseRenderer#setupWebGL.', 'Using a DIV as root element is deprecated.', 'Use a CANVAS instead.', 'See: https://docs.zea.live/zea-engine/#/getting-started/get-started-with-engine?id=basic-setup');
              this.glcanvas = document.createElement('canvas');
              $canvas.appendChild(this.glcanvas);
          }
          else {
              this.glcanvas = $canvas;
          }
          this.glcanvas.style['touch-action'] = 'none';
          this.glcanvas.style['user-select'] = 'none';
          this.glcanvas.style['-webkit-user-select'] = 'none';
          this.glcanvas.style['-webkit-touch-callout'] = 'none';
          this.glcanvas.parentElement.style.position = 'relative';
          // Now scrollbars can appear causing the content size to change,
          // causing an infinite loop of resizing.
          this.glcanvas.parentElement.style.overflow = 'hidden';
          this.glcanvas.style.width = '100%';
          this.glcanvas.style.height = '100%';
          this.glcanvas.style.position = 'absolute';
          // Rapid resizing of the canvas would cause issues with WebGL.
          // FrameBuffer objects would end up all black. So here we throttle
          // the resizing of the canvas to ensure 2 resize commands are not
          // closer than 100ms appart.
          const throttledResize = throttle((entries) => {
              if (!this.__gl)
                  return;
              if (this.__gl.isContextLost()) {
                  console.warn('WebGL Context Lost');
                  return;
              }
              if (!Array.isArray(entries) || !entries.length)
                  return;
              for (const entry of entries) {
                  if (!entry.contentRect)
                      return;
                  const displayWidth = Math.round(entry.contentRect.width);
                  const displayHeight = Math.round(entry.contentRect.height);
                  this.handleResize(displayWidth, displayHeight);
              }
          }, 500);
          this.#onResizeCallback = () => {
              // The ResizeObserver below will miss zoom changes, while this
              // resize event catches them. Both may be triggered by window
              // resizes, but the throttle function ensures we don't resize
              // needlessly.
              const entries = [
                  {
                      contentRect: {
                          width: this.glcanvas.parentElement.clientWidth,
                          height: this.glcanvas.parentElement.clientHeight,
                      },
                  },
              ];
              throttledResize(entries);
          };
          window.addEventListener('resize', this.#onResizeCallback);
          // https://webglfundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html
          this.#resizeObserver = new ResizeObserver(throttledResize);
          try {
              // only call us of the number of device pixels changed
              // @ts-ignore
              this.#resizeObserver.observe(this.glcanvas.parentNode, { box: 'device-pixel-content-box' });
          }
          catch (ex) {
              // device-pixel-content-box is not supported so fallback to this
              // @ts-ignore
              this.#resizeObserver.observe(this.glcanvas.parentNode, { box: 'content-box' });
          }
          this.handleResize(this.glcanvas.parentElement.clientWidth, this.glcanvas.parentElement.clientHeight);
          const disablingOnMacOsChrome = SystemDesc.OS === 'macOS' && SystemDesc.browserName === 'Chrome';
          const disablingOnMobileSafari = SystemDesc.isIOSDevice;
          const webglOptions = {};
          webglOptions.preserveDrawingBuffer = true; // Note: The unit tests all render black if this is false
          webglOptions.antialias = disablingOnMacOsChrome || disablingOnMobileSafari ? false : options.antialias ?? true;
          webglOptions.depth = true;
          webglOptions.stencil = true;
          webglOptions.alpha = options.alpha ?? true;
          webglOptions.premultipliedAlpha = options.premultipliedAlpha ?? false;
          // Detect if an XR Compatible device is plugged in and automatically enable XR.
          if (navigator.xr || options.supportXR) {
              webglOptions.xrCompatible = true;
          }
          this.multiSampledScreenBuffer = webglOptions.antialias;
          // Most applications of our engine will prefer the high-performance context by default.
          webglOptions.powerPreference = options.powerPreference || 'high-performance';
          const gl = create3DContext(this.glcanvas, webglOptions);
          if (!gl)
              alert('Unable to create WebGL context. WebGL not supported.');
          if (gl.name == 'webgl2') {
              this.setShaderPreprocessorDirective('ENABLE_ES3', '#define ENABLE_ES3');
          }
          if (gl.floatTexturesSupported) {
              this.setShaderPreprocessorDirective('ENABLE_FLOAT_TEXTURES', '#define ENABLE_FLOAT_TEXTURES');
          }
          {
              // Note: disabling multi-draw on Chrome on OsX as it runs incredibly slowly.
              const disableOnChromeAndMacOS = SystemDesc.browserName == 'Chrome' && SystemDesc.OS === 'macOS';
              if (disableOnChromeAndMacOS && options.disableMultiDraw != false) {
                  console.warn('Disabling multi-draw on Chrome on OsX due to performance issues.', SystemDesc);
              }
              const shouldDisableMultiDraw = options.disableMultiDraw || disableOnChromeAndMacOS;
              const ext = gl.name == 'webgl2' ? gl.getExtension('WEBGL_multi_draw') : null;
              if (ext && (!shouldDisableMultiDraw || options.disableMultiDraw == false)) {
                  gl.multiDrawArrays = ext.multiDrawArraysWEBGL.bind(ext);
                  gl.multiDrawElements = ext.multiDrawElementsWEBGL.bind(ext);
                  gl.multiDrawElementsInstanced = ext.multiDrawElementsInstancedWEBGL.bind(ext);
                  gl.multiDrawArraysInstanced = ext.multiDrawArraysInstancedWEBGL.bind(ext);
              }
              else {
                  this.setShaderPreprocessorDirective('EMULATE_MULTI_DRAW', '#define EMULATE_MULTI_DRAW');
              }
          }
          // Note: Mobile devices don't provide much support for reading data back from float textures,
          // and checking compatibility is patchy at best.
          // Note: We are now pushing on high-end mobile devices.
          // Galaxy and above. We need this. We need to accurately determine
          // if the float buffer is not supported.
          if (SystemDesc.browserName == 'Safari' && gl.name == 'webgl') {
              this.floatGeomBuffer = false;
          }
          else {
              this.floatGeomBuffer = options.floatGeomBuffer != undefined ? options.floatGeomBuffer : gl.floatTexturesSupported;
          }
          gl.floatGeomBuffer = this.floatGeomBuffer;
          return gl;
      }
      /**
       * Binds IO event handlers to the canvas
       */
      bindEventHandlers() {
          // ////////////////////////////////
          // Setup event handlers
          const isValidCanvas = () => this.getWidth() > 0 && this.getHeight();
          /** Mouse Events Start */
          // Mobile devices emulate mouse events after emitting touch events
          // which causes double taps and other weirdness.
          const isMobileDeviceMouseEvent = (event) => {
              if (SystemDesc.isMobileDevice) {
                  // console.warn('Mobile device is triggering mouse event:', event.type)
                  return true;
              }
              return false;
          };
          this.glcanvas.addEventListener('mousedown', (event) => {
              if (isMobileDeviceMouseEvent()) {
                  return;
              }
              const pointerEvent = new ZeaMouseEvent(event, this.glcanvas.getBoundingClientRect());
              pointerIsDown = true;
              activeGLRenderer = this;
              this.activateViewportAtPos(pointerEvent.rendererX, pointerEvent.rendererY);
              const viewport = this.getActiveViewport();
              if (viewport) {
                  viewport.onPointerDown(pointerEvent);
              }
              pointerLeft = false;
          });
          document.addEventListener('mouseup', (event) => {
              if (isMobileDeviceMouseEvent()) {
                  return;
              }
              if (activeGLRenderer != this || !isValidCanvas())
                  return;
              const pointerEvent = new ZeaMouseEvent(event, this.glcanvas.getBoundingClientRect());
              pointerIsDown = false;
              const viewport = this.getActiveViewport();
              if (viewport) {
                  viewport.onPointerUp(pointerEvent);
              }
              if (pointerLeft) {
                  if (viewport) {
                      viewport.onPointerLeave(pointerEvent);
                  }
                  activeGLRenderer = undefined;
              }
          });
          document.addEventListener('mousemove', (event) => {
              if (isMobileDeviceMouseEvent()) {
                  return;
              }
              if (activeGLRenderer != this || !isValidCanvas())
                  return;
              const pointerEvent = new ZeaMouseEvent(event, this.glcanvas.getBoundingClientRect());
              if (!pointerIsDown)
                  this.activateViewportAtPos(pointerEvent.rendererX, pointerEvent.rendererY);
              const viewport = this.getActiveViewport();
              if (viewport) {
                  viewport.onPointerMove(pointerEvent);
              }
          });
          this.glcanvas.addEventListener('mouseenter', (event) => {
              if (isMobileDeviceMouseEvent()) {
                  return;
              }
              if (!pointerIsDown) {
                  activeGLRenderer = this;
                  const pointerEvent = new ZeaMouseEvent(event, this.glcanvas.getBoundingClientRect());
                  this.activateViewportAtPos(pointerEvent.rendererX, pointerEvent.rendererY);
                  if (!pointerIsDown) {
                      const viewport = this.getActiveViewport();
                      if (viewport) {
                          viewport.onPointerEnter(pointerEvent);
                      }
                  }
                  pointerLeft = false;
              }
          });
          this.glcanvas.addEventListener('mouseleave', (event) => {
              if (isMobileDeviceMouseEvent()) {
                  return;
              }
              if (activeGLRenderer != this || !isValidCanvas())
                  return;
              const pointerEvent = new ZeaMouseEvent(event, this.glcanvas.getBoundingClientRect());
              if (!pointerIsDown) {
                  const viewport = this.getActiveViewport();
                  if (viewport) {
                      viewport.onPointerLeave(pointerEvent);
                  }
                  activeGLRenderer = undefined;
              }
              else {
                  pointerLeft = true;
              }
          });
          document.addEventListener('contextmenu', (event) => {
              if (activeGLRenderer != this || !isValidCanvas())
                  return;
              // prevent context menu from being displayed when right clicking on the viewport.
              // Note: we allow context menus for other items.
              event.preventDefault();
              event.stopPropagation();
          });
          /** Mouse Events End */
          /** Touch Events Start */
          this.glcanvas.addEventListener('touchstart', (event) => {
              activeGLRenderer = this;
              const viewport = this.getActiveViewport();
              const pointerEvent = new ZeaTouchEvent(event, this.glcanvas.getBoundingClientRect());
              viewport.onPointerDown(pointerEvent);
          }, { passive: true });
          this.glcanvas.addEventListener('touchend', (event) => {
              const viewport = this.getActiveViewport();
              const pointerEvent = new ZeaTouchEvent(event, this.glcanvas.getBoundingClientRect());
              viewport.onPointerUp(pointerEvent);
          }, { passive: true });
          this.glcanvas.addEventListener('touchmove', (event) => {
              const viewport = this.getActiveViewport();
              const pointerEvent = new ZeaTouchEvent(event, this.glcanvas.getBoundingClientRect());
              viewport.onPointerMove(pointerEvent);
          }, { passive: true });
          this.glcanvas.addEventListener('touchcancel', (event) => {
              const viewport = this.getActiveViewport();
              const pointerEvent = new ZeaTouchEvent(event, this.glcanvas.getBoundingClientRect());
              viewport.onTouchCancel(pointerEvent);
          }, { passive: true });
          /** Touch Events End */
          const onWheel = (event) => {
              if (activeGLRenderer != this || !isValidCanvas())
                  return;
              if (activeGLRenderer) {
                  const pointerEvent = new ZeaWheelEvent(event, this.glcanvas.getBoundingClientRect());
                  const vp = activeGLRenderer.getActiveViewport();
                  if (vp) {
                      vp.onWheel(pointerEvent);
                  }
              }
          };
          /** DOMMouseScroll is for mozilla. */
          window.addEventListener('wheel', onWheel, { passive: false });
          document.addEventListener('keydown', (event) => {
              if (activeGLRenderer != this || !isValidCanvas())
                  return;
              const keyboardEvent = new ZeaKeyboardEvent(event);
              const vp = activeGLRenderer.getActiveViewport();
              if (vp) {
                  vp.onKeyDown(keyboardEvent);
              }
          });
          document.addEventListener('keyup', (event) => {
              if (activeGLRenderer != this || !isValidCanvas())
                  return;
              const keyboardEvent = new ZeaKeyboardEvent(event);
              const vp = activeGLRenderer.getActiveViewport();
              if (vp) {
                  vp.onKeyUp(keyboardEvent);
              }
          });
      }
      /**
       * Returns canvas that was used to generate the gl context.
       *
       * @return - The return value.
       */
      getGLCanvas() {
          return this.glcanvas;
      }
      /**
       * Frames the specified viewport to the entire scene.
       * > See also: ${Viewport#frameView}
       * @param viewportIndex - The viewportIndex value. If multiple viewports are configured, a viewport index will need to be provided.
       * @param duration - The duration of time to apply the frame. A value of 0 specifies an instantaneous movement of the camera.
       * @param frameBorder - The variable to use to provide an empty space around the border for geometries.
       */
      frameAll(viewportIndex = 0, duration = 0, frameBorder = 0.1) {
          this.#viewports[viewportIndex].frameView([this.#scene.getRoot()], duration, frameBorder);
      }
      // ///////////////////////
      // Render Items Setup
      /**
       * A factory function used to construct new shader objects. If that specified shader has already been constructed, it returns the existing shader.
       * @param shaderName - The shader name.
       * @return - The return value.
       */
      getOrCreateShader(shaderName) {
          let glShader = this.#shaders[shaderName];
          if (!glShader) {
              glShader = Registry.constructClass(shaderName);
              if (!glShader)
                  console.error('@GLBaseRenderer#getOrCreateShader - Shader not registered with the Registry:', shaderName);
              glShader.setGLContext(this.__gl);
              this.#shaders[shaderName] = glShader;
          }
          return glShader;
      }
      /**
       * The addPass method.
       * @param pass - The pass value.
       * @param passType - The passType value.
       * @param updateIndices - The updateIndices value.
       * @return - The return value.
       */
      addPass(pass, passType = -1) {
          if (passType == -1)
              passType = pass.getPassType();
          if (!this.#passes[passType])
              this.#passes[passType] = [];
          let index = 0;
          for (const key in this.#passes) {
              if (key == passType.toString())
                  break;
              index += this.#passes[key].length;
          }
          index += this.#passes[passType].length;
          pass.on('updated', (event) => {
              this.requestRedraw();
              // If a pass is requesting an update, it is because geometry or
              // visibility is changing and the geom data Fbo will also be out
              // of date.
              this.renderGeomDataFbos();
          });
          // @ts-ignore TODO: Merge GLRenderer and GLBaseRenderer.
          pass.init(this, index);
          this.#passes[passType].push(pass);
          // Now update all the  subsequent pass indices because the
          // indices after will have changed.
          let offset = 0;
          for (const key in this.#passes) {
              const passSet = this.#passes[key];
              passSet.forEach((pass, index) => {
                  pass.setPassIndex(offset + index);
              });
              offset += passSet.length;
          }
          this.#passesRegistrationOrder.push(pass);
          this.requestRedraw();
          return index;
      }
      /**
       * The getPass method.
       * @param index - The index value.
       * @return - The return value.
       */
      getPass(index) {
          let offset = 0;
          for (const key in this.#passes) {
              const passSet = this.#passes[key];
              if (index - offset < passSet.length)
                  return passSet[index - offset];
              offset += passSet.length;
          }
          return undefined;
      }
      /**
       * Find a pass given a class type. Used by the GPViewport to find the GLOverlayPass.
       * @param index - The index value.
       * @return - The return value.
       */
      findPassIndex(cls) {
          let offset = 0;
          for (const key in this.#passes) {
              const passSet = this.#passes[key];
              for (let i = 0; i < passSet.length; i++) {
                  if (passSet[i] instanceof cls)
                      return offset;
                  offset++;
              }
          }
          return -1;
      }
      // ///////////////////////
      // VR Setup
      /**
       * The setupXRViewport method.
       */
      setupXRViewport(sessionMode) {
          // Always get the last display. Additional displays are added at the end.(e.g. [Polyfill, HMD])
          const xrvp = sessionMode == 'immersive-ar' ? new ARViewport(this, sessionMode) : new VRViewport(this, sessionMode);
          const emitViewChanged = (event) => {
              this.emit('viewChanged', event);
          };
          xrvp.on('presentingChanged', (event) => {
              const state = event.state;
              // Note: the WebXREmulator does a double emit and this causes issues.
              if (this.xrViewportPresenting == state)
                  return;
              this.xrViewportPresenting = state;
              if (state) {
                  // Let the passes know that VR is starting.
                  // They can do things like optimize shaders.
                  for (const key in this.#passes) {
                      const passSet = this.#passes[key];
                      for (const pass of passSet) {
                          pass.startPresenting();
                      }
                  }
                  xrvp.on('viewChanged', emitViewChanged);
              }
              else {
                  xrvp.off('viewChanged', emitViewChanged);
                  this.emit('updated');
                  for (const key in this.#passes) {
                      const passSet = this.#passes[key];
                      for (const pass of passSet) {
                          pass.stopPresenting();
                      }
                  }
                  const viewXfo = this.getViewport().getCamera().globalXfoParam.value;
                  const event = new ViewChangedEvent('CameraAndPointer', viewXfo);
                  this.emit('viewChanged', event);
                  this.requestRedraw();
              }
          });
          return xrvp;
      }
      /**
       * The getVRViewport method.
       * @return - The return value.
       */
      getVRViewport() {
          return this.xrViewport;
      }
      /**
       * The getXRViewport method.
       * @return - The return value.
       */
      getXRViewport() {
          return this.#xrViewportPromise;
      }
      /**
       * The isXRViewportPresenting method.
       * @return - The return value.
       */
      isXRViewportPresenting() {
          return this.xrViewportPresenting;
      }
      // //////////////////////////
      // Rendering
      /**
       * The isContinuouslyDrawing method.
       * @return - The return value.
       */
      isContinuouslyDrawing() {
          return this.#continuousDrawing;
      }
      /**
       * The startContinuousDrawing method.
       */
      startContinuousDrawing() {
          if (this.isContinuouslyDrawing() || this.xrViewportPresenting)
              return;
          const onAnimationFrame = () => {
              const renderstate = new ColorRenderState(this.gl);
              if (this.#continuousDrawing && !this.xrViewportPresenting)
                  window.requestAnimationFrame(onAnimationFrame);
              for (const vp of this.#viewports)
                  vp.draw(renderstate);
          };
          this.#continuousDrawing = true;
          requestPostAnimationFrame(onAnimationFrame);
      }
      /**
       * The stopContinuousDrawing method.
       */
      stopContinuousDrawing() {
          this.#continuousDrawing = false;
      }
      /**
       * The toggleContinuousDrawing method.
       */
      toggleContinuousDrawing() {
          if (!this.#continuousDrawing) {
              this.startContinuousDrawing();
          }
          else {
              this.stopContinuousDrawing();
          }
      }
      /**
       * The drawItemChanged method.
       */
      drawItemChanged() {
          for (const vp of this.#viewports)
              vp.invalidateGeomDataBuffer();
          this.requestRedraw();
      }
      /**
       * Request a single redraw, usually in response to a signal/event.
       * @return - The return value.
       */
      requestRedraw() {
          // If a redraw has already been requested, then simply return and wait.
          if (!this.__gl ||
              this.#redrawRequested ||
              this.#continuousDrawing ||
              this.xrViewportPresenting ||
              this.#drawSuspensionLevel > 0) {
              return false;
          }
          if (this.__gl.isContextLost()) {
              console.warn('WebGL Context Lost');
              return false;
          }
          const onAnimationFrame = () => {
              this.#redrawRequested = false;
              const renderstate = new ColorRenderState(this.gl);
              for (const vp of this.#viewports) {
                  vp.draw(renderstate);
              }
              if (renderstate.stack.length != 0) {
                  console.warn(' corrupt renderstate.stack.length:', renderstate.stack.length);
              }
          };
          requestPostAnimationFrame(onAnimationFrame);
          this.#redrawRequested = true;
          return true;
      }
      /**
       * Forces a redraw of the viewports
       */
      forceRender() {
          if (!this.#redrawRequested) {
              console.warn('@GlBaseRenderer#forceRender - Scene is not dirty');
              return;
          }
          this.#redrawRequested = false;
          const renderstate = new ColorRenderState(this.gl);
          for (const vp of this.#viewports) {
              vp.draw(renderstate);
          }
      }
      /**
       * The bindGLRenderer method.
       * @param renderstate - The renderstate value.
       */
      bindGLRenderer(renderstate) {
          renderstate.gl = this.__gl;
          renderstate.renderer = this;
          renderstate.directives = this.directives;
          renderstate.directivesHash = this.directivesHash;
      }
      /**
       * The drawScene method.
       * @param renderstate - The renderstate value.
       */
      drawScene(renderstate) {
          // Bind already called by GLRenderer.
          renderstate.directives = [...this.directives, '#define DRAW_COLOR'];
          for (const key in this.#passes) {
              const passSet = this.#passes[key];
              for (const pass of passSet) {
                  if (pass.enabled)
                      pass.draw(renderstate);
              }
          }
      }
      /**
       * The drawHighlightedGeoms method.
       * @param renderstate - The renderstate value.
       */
      drawHighlightedGeoms(renderstate) {
          this.bindGLRenderer(renderstate);
          renderstate.directives = [...this.directives, '#define DRAW_HIGHLIGHT'];
          for (const key in this.#passes) {
              const passSet = this.#passes[key];
              for (const pass of passSet) {
                  if (pass.enabled)
                      pass.drawHighlightedGeoms(renderstate);
              }
          }
      }
      /**
       * The drawSceneGeomData method.
       * @param renderstate - The renderstate value.
       * @param mask - The mask value
       */
      drawSceneGeomData(renderstate, mask = 255) {
          renderstate.pushGLStack('GLBaseRenderer.drawSceneGeomData');
          renderstate.glEnable(this.__gl.DEPTH_TEST);
          renderstate.glEnable(this.__gl.CULL_FACE);
          this.bindGLRenderer(renderstate);
          renderstate.directives = [...this.directives, '#define DRAW_GEOMDATA'];
          renderstate.floatGeomBuffer = this.floatGeomBuffer;
          for (const key in this.#passes) {
              // Skip pass categories that do not match
              // the mask. E.g. we may not want to hit
              // "Overlay" geoms such as labels,
              // or we might be trying to move labels and don't
              // want to grab normal geoms.
              if ((Number.parseInt(key) & mask) == 0)
                  continue;
              const passSet = this.#passes[key];
              for (const pass of passSet) {
                  if (pass.enabled)
                      pass.drawGeomData(renderstate);
              }
          }
          renderstate.popGLStack();
      }
      // ////////////////////////////////////////
      // Static Methods
      /**
       * The registerPass method.
       * @param cls - The cls value.
       * @param passType - The passType value.
       */
      static registerPass(cls, passType) {
          registeredPasses.push({ cls, passType });
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy(loseContext = true) {
          this.#resizeObserver.disconnect();
          window.removeEventListener('resize', this.#onResizeCallback);
          if (loseContext) {
              const ext = this.__gl.getExtension('WEBGL_lose_context');
              if (ext)
                  ext.loseContext();
          }
      }
  }

  var frag$d = "\nprecision highp float;\n#define GLSLIFY 1\n\nvarying vec2 v_texCoord;\n\nimport 'GLSLUtils.glsl'\nimport 'Hammersley.glsl'\nimport 'ImportanceSampleGGX.glsl'\n\nfloat GeometrySchlickGGX(float NdotV, float roughness)\n{\n  float a = roughness;\n  float k = (a * a) / 2.0;\n\n  float nom   = NdotV;\n  float denom = NdotV * (1.0 - k) + k;\n\n  return nom / denom;\n}\n// ----------------------------------------------------------------------------\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n{\n  float NdotV = max(dot(N, V), 0.0);\n  float NdotL = max(dot(N, L), 0.0);\n  float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n  float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n  return ggx1 * ggx2;\n}\n\nvec2 IntegrateBRDF(float NdotV, float roughness)\n{\n  vec3 V;\n  V.x = sqrt(1.0 - NdotV*NdotV);\n  V.y = 0.0;\n  V.z = NdotV;\n\n  float A = 0.0;\n  float B = 0.0;\n\n  vec3 N = vec3(0.0, 0.0, 1.0);\n\n  for(uint i = 0u; i < SAMPLE_COUNT; ++i)\n  {\n    vec2 Xi = Hammersley(i, SAMPLE_COUNT);\n    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\n    vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n\n    float NdotL = max(L.z, 0.0);\n    float NdotH = max(H.z, 0.0);\n    float VdotH = max(dot(V, H), 0.0);\n\n    if (NdotL > 0.0)\n    {\n      float G = GeometrySmith(N, V, L, roughness);\n      float G_Vis = (G * VdotH) / (NdotH * NdotV);\n      float Fc = pow(1.0 - VdotH, 5.0);\n\n      A += (1.0 - Fc) * G_Vis;\n      B += Fc * G_Vis;\n    }\n  }\n  A /= float(SAMPLE_COUNT);\n  B /= float(SAMPLE_COUNT);\n  return vec2(A, B);\n}\n\nout vec2 fragColor;\nvoid main(void) {\n  vec2 integratedBRDF = IntegrateBRDF(v_texCoord.x, v_texCoord.y);\n  fragColor = integratedBRDF;\n}\n\n"; // eslint-disable-line

  var vert$e = "\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"; // eslint-disable-line

  /* eslint-disable require-jsdoc */
  /** Shader for convolving Environment maps.
   * @extends GLShader
   * @private
   */
  class PreComputeBRDFShader extends GLShader {
      /**
       * Create a GL renderer.
       * @param gl - The options value.
       */
      constructor(gl) {
          super(gl, 'PreComputeBRDFShader');
          this.setShaderStage('VERTEX_SHADER', vert$e);
          this.setShaderStage('FRAGMENT_SHADER', frag$d);
      }
  }

  var frag$c = "\nprecision highp float;\n#define GLSLIFY 1\nimport 'constants.glsl'\nimport 'convolve-helpers.glsl'\n\nuniform float roughness;\nuniform int faceId;\nvarying vec2 v_texCoord;\n\nout vec4 fragColor;\nvoid main(void) {\n\n  vec3 N = cubeFaceUvToDir(v_texCoord.x, v_texCoord.y, faceId);   \n\n  vec3 irradiance = vec3(0.0);\n\n  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n  vec3 tangent   = normalize(cross(up, N));\n  vec3 bitangent = cross(N, tangent);\n\n  float nrSamples = 0.0; \n  for(float phi = 0.0; phi < 2.0 * PI; phi += SAMPLE_DELTA)\n  {\n    for(float theta = 0.0; theta < 0.5 * PI; theta += SAMPLE_DELTA)\n    {\n      // spherical to cartesian (in tangent space)\n      // from spherical coordinates to cartesian coordinates\n      vec3 H = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));\n      // tangent space to world\n      vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n\n      irradiance += sampleEnvMap(normalize(sampleVec)).rgb * cos(theta) * sin(theta);\n      nrSamples++;\n    }\n  }\n  irradiance = PI * irradiance * (1.0 / float(nrSamples));\n\n  fragColor = vec4(irradiance, 1.0);\n}\n"; // eslint-disable-line

  var vert$d = "\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"; // eslint-disable-line

  /* eslint-disable require-jsdoc */
  /** Shader for convolving Environment maps.
   * @extends GLShader
   * @private
   */
  class ConvolveIrradianceShader extends GLShader {
      /**
       * Create a GL renderer.
       * @param gl - The options value.
       */
      constructor(gl) {
          super(gl, 'ConvolveIrradianceShader');
          this.setShaderStage('VERTEX_SHADER', vert$d);
          this.setShaderStage('FRAGMENT_SHADER', frag$c);
      }
  }

  var vert$c = "\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"; // eslint-disable-line

  var frag$b = "precision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'ImportanceSampleGGX.glsl'\nimport 'convolve-helpers.glsl'\nimport 'Hammersley.glsl'\n  \n  \nuniform float roughness;\nuniform int faceId;\nvarying vec2 v_texCoord;\n\nout vec4 fragColor;\nvoid main(void) {\n\n  vec3 N = cubeFaceUvToDir(v_texCoord.x, v_texCoord.y, faceId);   \n\n  vec3 R = N;\n  vec3 V = R;\n\n  float totalWeight = 0.0;   \n  vec3 prefilteredColor = vec3(0.0);     \n  for(uint i = 0u; i < SAMPLE_COUNT; ++i)\n  {\n    vec2 Xi = Hammersley(i, SAMPLE_COUNT);\n    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\n    vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n\n    float NdotL = max(dot(N, L), 0.0);\n    if (NdotL > 0.0)\n    {\n      prefilteredColor += sampleEnvMap(L).rgb * NdotL;\n      totalWeight      += NdotL;\n    }\n  }\n  prefilteredColor = prefilteredColor / totalWeight;\n\n  fragColor = vec4(prefilteredColor, 1.0);\n}\n"; // eslint-disable-line

  /* eslint-disable require-jsdoc */
  /** Shader for convolving Environment maps.
   * @extends GLShader
   * @private
   */
  class ConvolveSpecularShader extends GLShader {
      /**
       * Create a GL renderer.
       * @param gl - The options value.
       */
      constructor(gl) {
          super(gl, 'ConvolveSpecularShader');
          this.setShaderStage('VERTEX_SHADER', vert$c);
          this.setShaderStage('FRAGMENT_SHADER', frag$b);
      }
  }

  /** Class representing a GL probe.
   * @private
   */
  class GLProbe extends EventEmitter {
      __gl;
      maxFragmentShaderTextureUnits;
      textureType;
      textureDesc;
      __convolved;
      __fbos;
      brdfLUTTexture;
      irradianceCubeTex;
      specularCubetex;
      /**
       * Create a GL probe.
       * @param gl - The webgl rendering context.
       * @param name - The name value.
       */
      constructor(gl, name) {
          super();
          this.__gl = gl;
          const gl_casted = gl;
          this.maxFragmentShaderTextureUnits = gl.getParameter(this.__gl.MAX_TEXTURE_IMAGE_UNITS);
          if (!gl_casted.__quadVertexIdsBuffer)
              gl_casted.setupInstancedQuad();
          this.textureType = 1; // Default 2d 8 bit texture image texture.
          this.textureDesc = [0, 0, 0, 0]; // To be populated by derived classes.
          this.__convolved = false;
          this.__fbos = [];
      }
      /**
       * The convolveProbe method.
       * @param srcGLTex - The srcGLTex value.
       */
      convolveProbe(srcGLTex) {
          const gl = this.__gl;
          const renderstate = new RenderState(gl);
          renderstate.directives = ['#define ENABLE_ES3', '#define ENABLE_FLOAT_TEXTURES'];
          // Note: in testing we are running on the Google SwiftShader emulated GPU.
          if (SystemDesc.deviceCategory == 'Low') {
              renderstate.directives.push('#define SAMPLE_DELTA 0.1');
              renderstate.directives.push('#define SAMPLE_COUNT 64u');
          }
          else if (SystemDesc.deviceCategory == 'Medium') {
              renderstate.directives.push('#define SAMPLE_DELTA 0.08');
              renderstate.directives.push('#define SAMPLE_COUNT 256u');
          }
          else {
              renderstate.directives.push('#define SAMPLE_DELTA 0.025');
              renderstate.directives.push('#define SAMPLE_COUNT 1024u');
          }
          this.brdfLUTTexture = gl.createTexture();
          // pre-allocate enough memory for the LUT texture.
          gl.bindTexture(gl.TEXTURE_2D, this.brdfLUTTexture);
          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RG16F, 512, 512, 0, gl.RG, gl.FLOAT, null);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
          const brdfShader = new PreComputeBRDFShader(this.__gl);
          const brdfShaderComp = brdfShader.compileForTarget('GLProbe', renderstate.directives);
          const brdfShaderBinding = generateShaderGeomBinding(this.__gl, brdfShaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);
          const brdfFboId = gl.createFramebuffer();
          gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, brdfFboId);
          gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.brdfLUTTexture, 0);
          brdfShader.bind(renderstate);
          brdfShaderBinding.bind(renderstate);
          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
          gl.viewport(0, 0, 512, 512);
          gl.drawQuad();
          gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
          gl.deleteFramebuffer(brdfFboId);
          brdfShader.unbind(renderstate);
          brdfShader.destroy();
          // ////////////////////////////////////////////
          // ConvolveIrradianceShader Shader
          {
              const convolveIrradianceShader = new ConvolveIrradianceShader(this.__gl);
              const convolveIrradianceShaderComp = convolveIrradianceShader.compileForTarget('GLProbe', renderstate.directives);
              const convolveIrradianceShaderBinding = generateShaderGeomBinding(this.__gl, convolveIrradianceShaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);
              convolveIrradianceShader.bind(renderstate, 'GLProbe');
              convolveIrradianceShaderBinding.bind(renderstate);
              const unifs = renderstate.unifs;
              srcGLTex.bindToUniform(renderstate, unifs.envMap);
              // ////////////////////////////////////////////
              // Irradiance Cube
              const size = 64;
              this.irradianceCubeTex = gl.createTexture();
              gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.irradianceCubeTex);
              gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
              gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
              gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);
              // Resize all the faces first.
              for (let i = 0; i < 6; i++) {
                  gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA32F, size, size, 0, gl.RGBA, gl.FLOAT, null);
              }
              // Attach one face of cube map
              const irradianceFboId = gl.createFramebuffer();
              gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, irradianceFboId);
              for (let i = 0; i < 6; ++i) {
                  gl.uniform1i(unifs.faceId.location, i);
                  gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, this.irradianceCubeTex, 0);
                  gl.viewport(0, 0, size, size); // Match the viewport to the texture size
                  gl.clearColor(1, 0, 0, 1);
                  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
                  gl.drawQuad();
              }
              gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
              gl.deleteFramebuffer(irradianceFboId);
              // Note: without the mipmaps, te cube sampling seems a big broken.
              // No colors.
              gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
          }
          // ////////////////////////////////////////////
          // Specular Cube Pyramid
          {
              const convolverShader = new ConvolveSpecularShader(this.__gl);
              const covolverShaderComp = convolverShader.compileForTarget('GLProbe', renderstate.directives);
              const covolverShaderBinding = generateShaderGeomBinding(this.__gl, covolverShaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);
              convolverShader.bind(renderstate, 'GLProbe');
              covolverShaderBinding.bind(renderstate);
              const unifs = renderstate.unifs;
              srcGLTex.bindToUniform(renderstate, unifs.envMap);
              this.specularCubetex = gl.createTexture();
              gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.specularCubetex);
              gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
              gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
              gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);
              // Resize all the faces first.
              const size = 256;
              for (let i = 0; i < 6; i++) {
                  gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA32F, size, size, 0, gl.RGBA, gl.FLOAT, null);
              }
              gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
              // gl.enable(gl.TEXTURE_CUBE_MAP_SEAMLESS) // not supported in webgl
              const maxMipLevels = 5;
              for (let mip = 0; mip < maxMipLevels; ++mip) {
                  // resize framebuffer according to mip-level size.
                  const mipWidth = size * Math.pow(0.5, mip);
                  const mipHeight = size * Math.pow(0.5, mip);
                  // Attach one face of cube map
                  const fboId = gl.createFramebuffer();
                  gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fboId);
                  gl.viewport(0, 0, mipWidth, mipHeight); // Match the viewport to the texture size
                  const roughness = mip / (maxMipLevels - 1);
                  gl.uniform1f(unifs.roughness.location, roughness);
                  for (let i = 0; i < 6; ++i) {
                      gl.uniform1i(unifs.faceId.location, i);
                      gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, this.specularCubetex, mip);
                      gl.drawQuad();
                  }
                  gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
                  gl.deleteFramebuffer(fboId);
              }
              convolverShader.destroy();
          }
          this.__convolved = true;
      }
      /**
       * The bind method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param unif - The WebGL uniform
       * @return - Returns true if the Probe was successfully bound.
       */
      bind(renderstate) {
          const gl = this.__gl;
          const { irradianceMap, prefilterMap, brdfLUT, envMapFlags } = renderstate.unifs;
          if (!this.__convolved) {
              // By default, all the texture units are bound to unit:0
              // So if a shader contains cube maps, and they are left on unit 0
              // and also the shader contains regular textures, and they are also left on unit 0
              // then we get errors saying:
              // GL_INVALID_OPERATION: Two textures of different types use the same sampler location.
              // So bind to an unused texture unit...
              if (irradianceMap) {
                  gl.uniform1i(irradianceMap.location, this.maxFragmentShaderTextureUnits - 1);
              }
              if (prefilterMap) {
                  gl.uniform1i(prefilterMap.location, this.maxFragmentShaderTextureUnits - 1);
              }
              if (envMapFlags) {
                  gl.uniform1i(envMapFlags.location, -1);
              }
              return false;
          }
          // Note: a cube map can never be bound to texture unit 0.
          // This is because if any other samplers are left unbound
          // (e.g. a diffuse sampler left unbound because no diffuse texture is assigned)
          // then the texture unit binding defaults to 0.
          // If the cube map is then bound to unit 0, then we get the error message:
          // GL_INVALID_OPERATION: Two textures of different types use the same sampler location.
          // Ths simple workaround here is to bind the BRDF Lut first, which is a TEXTURE_2D, and the cube maps
          // to other units:(1 & 2).
          // This error started occuring when we moved PBR binding to the shader instead of in the renderer.
          // See: StandardSurfaceShader.bind
          if (brdfLUT) {
              const unit = renderstate.boundTextures++;
              gl.activeTexture(this.__gl.TEXTURE0 + unit);
              gl.bindTexture(gl.TEXTURE_2D, this.brdfLUTTexture);
              gl.uniform1i(brdfLUT.location, unit);
          }
          if (irradianceMap) {
              const unit = renderstate.boundTextures++;
              const texId = this.__gl.TEXTURE0 + unit;
              gl.activeTexture(texId);
              gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.irradianceCubeTex);
              gl.uniform1i(irradianceMap.location, unit);
          }
          if (prefilterMap) {
              const unit = renderstate.boundTextures++;
              const texId = this.__gl.TEXTURE0 + unit;
              gl.activeTexture(texId);
              gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.specularCubetex);
              gl.uniform1i(prefilterMap.location, unit);
          }
          if (envMapFlags) {
              gl.uniform1i(envMapFlags.location, 0);
          }
          return true;
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          // super.destroy()
      }
  }

  var frag$a = "\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'gamma.glsl'\nimport 'constants.glsl'\n\nuniform float focus;\nuniform float exposure;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\nvarying vec2 v_texCoord;\n\n#define ENABLE_INLINE_GAMMACORRECTION\n\n#define ENV_MAP_LATLONG 0\n#define ENV_MAP_OCT 1\n#define ENV_MAP_CUBE 2\n#define ENV_MAP_irradianceMap 8\n#define ENV_MAP_prefilterMap 3\n#define ENV_MAP_STEREO_LATLONG 4\n#define ENV_MAP_DUALFISHEYE 5\n#define ENV_MAP_SH 6\n#define ENV_MAP_BRDF_LUT 7\n\n#define ENV_MAPTYPE ENV_MAP_OCT\n\n#if (ENV_MAPTYPE == ENV_MAP_LATLONG)  \n\nimport 'envmap-equirect.glsl'\n\nuniform sampler2D backgroundImage;\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = latLongUVsFromDir(normalize(dir));\n  vec4 texel = texture2D(backgroundImage, uv) * exposure;\n  return vec4(texel.rgb/texel.a, 1.0);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_OCT)  \n\nimport 'envmap-octahedral.glsl'\n\nuniform sampler2D   envMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = dirToSphOctUv(normalize(dir));\n  if (false) {\n    vec4 texel = texture2D(envMap, uv);\n    return vec4(texel.rgb/texel.a, 1.0);\n  }\n  else {\n    return texture2D(envMap, uv) * exposure;\n  }\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_CUBE)\n\nuniform samplerCube cubeMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return texture(cubeMap, dir, 0.0);// * exposure;\n  // return textureLod(cubeMap, dir, exposure);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_irradianceMap)\n\nuniform samplerCube irradianceMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return textureLod(irradianceMap, dir, exposure);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_prefilterMap)\n\nuniform samplerCube prefilterMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return textureLod(prefilterMap, dir, exposure);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_STEREO_LATLONG)  \n\nimport 'envmap-equirect.glsl'\nuniform int eye;// L = 0, R = 1;\nuniform sampler2D backgroundImage;\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = latLongUVsFromDir(normalize(v_worldDir));\n  uv.y *= 0.5;\n  if (eye == 1) {\n    uv.y += 0.5;\n  }\n  vec4 texel = texture2D(backgroundImage, uv) * exposure;\n  fragColor = vec4(texel.rgb/texel.a, 1.0);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_DUALFISHEYE)\n\nimport 'envmap-dualfisheye.glsl'\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = dualfisheyeUVsFromDir(dir);\n  return texture2D(backgroundImage, uv) * exposure;\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_SH)\n\nimport 'SHCoeffs.glsl'\n\nvec4 sampleEnvMap(vec3 dir) {\n\treturn vec4(sampleSHCoeffs(dir) * exposure, 1.0);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_BRDF_LUT)\n\nuniform sampler2D brdfLUT;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return texture2D(brdfLUT, v_texCoord);\n}\n#endif\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  fragColor = sampleEnvMap(normalize(v_worldDir));\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n"; // eslint-disable-line

  var vert$b = "\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\n\nimport 'inverse.glsl'\nimport 'transpose.glsl'\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID() * 2.0;\n  v_texCoord = position * 0.5 + 0.5;\n\n  mat4 inverseProjection = inverse(projectionMatrix);\n  mat3 inverseModelview = transpose(mat3(viewMatrix));\n\n  // transform from the normalized device coordinates back to the view space\n  vec3 unprojected = (inverseProjection * vec4(position, 0, 1)).xyz;\n\n  // transfrom from the view space back to the world space\n  // and use it as a sampling vector\n  v_worldDir = inverseModelview * unprojected;\n\n  gl_Position = vec4(position, 0, 1);\n}\n"; // eslint-disable-line

  /* eslint-disable require-jsdoc */
  class EnvMapShader extends GLShader {
      /**
       * Create a GL shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'EnvMapShader');
          this.setShaderStage('VERTEX_SHADER', vert$b);
          this.setShaderStage('FRAGMENT_SHADER', frag$a);
      }
  }

  /** Class representing a GL environment map.
   * @extends GLProbe
   * @private
   */
  class GLEnvMap extends GLProbe {
      __renderer;
      __envMap;
      __backgroundFocus;
      __srcGLTex = null;
      __envMapShader = null;
      __envMapShaderBinding = null;
      __lodPyramid;
      /**
       * Create a GL env map.
       * @param renderer - The renderer value.
       * @param envMap - The environment map.
       */
      constructor(renderer, envMap) {
          super(renderer.gl, 'EnvMap');
          this.__renderer = renderer;
          this.__envMap = envMap;
          this.__backgroundFocus = 0.0;
          if (this.__envMap.isLoaded()) {
              this.init();
          }
          else {
              this.__envMap.once('loaded', (event) => {
                  this.init();
              });
          }
      }
      get glTex() {
          return this.__srcGLTex;
      }
      /**
       * @private
       */
      init() {
          const gl = this.__renderer.gl;
          if (!gl.__quadVertexIdsBuffer)
              gl.setupInstancedQuad();
          this.__srcGLTex = new GLHDRImage(gl, this.__envMap);
          this.__envMapShader = new EnvMapShader(gl);
          const envMapShaderComp = this.__envMapShader.compileForTarget('GLEnvMap', ['#define ENABLE_ES3']);
          this.__envMapShaderBinding = generateShaderGeomBinding(gl, envMapShaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);
          const headlightParam = this.__envMap.headlightModeParam;
          const updateHeadlightModeFlag = () => {
              const ENVMAP_FLAG_HEADLIGHT = 1; // 1<<0;
              if (headlightParam.value) {
                  this.textureDesc[3] |= ENVMAP_FLAG_HEADLIGHT;
              }
              else {
                  this.textureDesc[3] &= ~ENVMAP_FLAG_HEADLIGHT;
              }
          };
          updateHeadlightModeFlag();
          headlightParam.on('valueChanged', () => {
              updateHeadlightModeFlag();
              this.emit('updated');
          });
          this.convolveProbe(this.__srcGLTex);
          this.emit('updated');
      }
      /**
       * The getEnvMap method.
       * @return - The return value.
       */
      getEnvMap() {
          return this.__envMap;
      }
      /**
       * The getBackgroundFocus method.
       * @return - The return value.
       */
      getBackgroundFocus() {
          return this.__backgroundFocus;
      }
      /**
       * The setBackgroundFocus method.
       * @param val - The val param.
       */
      setBackgroundFocus(val) {
          this.__backgroundFocus = val;
          this.__renderer.requestRedraw();
      }
      /**
       * The draw method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          if (this.__envMap.isLoaded()) {
              const gl = this.__gl;
              {
                  // /////////////////
                  this.__envMapShader.bind(renderstate, 'GLEnvMap');
                  const unifs = renderstate.unifs;
                  const { envMap, focus, exposure } = renderstate.unifs;
                  if (envMap) {
                      this.__srcGLTex.bindToUniform(renderstate, envMap);
                  }
                  if (focus)
                      gl.uniform1f(focus.location, this.__backgroundFocus);
                  if (exposure)
                      gl.uniform1f(exposure.location, renderstate.exposure);
                  this.__envMapShaderBinding.bind(renderstate);
                  gl.depthMask(false);
                  renderstate.bindViewports(unifs, () => {
                      gl.drawQuad();
                  });
                  gl.depthMask(true);
              }
          }
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          super.destroy();
          if (this.__srcGLTex)
              this.__srcGLTex.destroy();
      }
  }

  const ALL_PASSES = PassType.OPAQUE | PassType.TRANSPARENT | PassType.OVERLAY;
  // TODO: move this fn somewhere
  /** Class representing a GL renderer.
   * @extends GLBaseRenderer
   */
  class GLRenderer extends GLBaseRenderer {
      #exposure = 1.0;
      #gamma = 2.2;
      #glEnvMap = null;
      #glBackgroundMap;
      #displayEnvironment;
      highlightOutlineThickness = 1;
      renderMode = 'pbr';
      outlineMethod = 'geometry';
      outlineThickness = 0;
      outlineColor = new Color(0.15, 0.15, 0.15, 1);
      hiddenLineColor = new Color(0.15, 0.15, 0.15, 0.0);
      outlineSensitivity = 2;
      outlineDepthBias = 0.7;
      #rayCastDist;
      #rayCastArea;
      #rayCastRenderTarget = null;
      #backgroundMapShader = null;
      #backgroundMapShaderBinding = null;
      #rayCastRenderTargetProjMatrix = new Mat4();
      /**
       * Create a GL renderer.
       * @param $canvas - The $canvas value.
       * @param options - The dictionary of options.
       */
      constructor($canvas, options = {}) {
          // use HTMLCanvasElement?
          super($canvas, options);
          // ///////////////////////
          // Renderer Setup
          this.#exposure = 1.0;
          this.#gamma = 2.2;
          this.#displayEnvironment = true;
          this.#rayCastDist = 0;
          this.#rayCastArea = 0;
          this.setShaderPreprocessorDirective('ENABLE_GAMMACORRECTION', '#define ENABLE_INLINE_GAMMACORRECTION');
          if (!options.disableTextures) {
              this.setShaderPreprocessorDirective('ENABLE_TEXTURES', '#define ENABLE_TEXTURES');
          }
          if (options.debugGeomIds) {
              this.setShaderPreprocessorDirective('DEBUG_GEOM_ID', '#define DEBUG_GEOM_ID');
          }
      }
      /**
       * The __bindEnvMap method.
       * @param env - The env value.
       * @private
       */
      __bindEnvMap(env) {
          const gl = this.__gl;
          if (env instanceof EnvMap) {
              // Note: Safari doesn't support rendering to floating
              // point textures, so our PBR lighting pipeline doesn't work.
              if (gl.name !== 'webgl2') {
                  return;
              }
              if (env.type === 'FLOAT') {
                  this.setShaderPreprocessorDirective('ENABLE_PBR', '#define ENABLE_PBR');
                  this.#glEnvMap = new GLEnvMap(this, env);
              }
              // } else if (env.isStreamAtlas()) { // TODO: are these two lines still needed?
              //   this.#glEnvMap = new GLImageStream(gl, env)
              // else {
              //   this.#glEnvMap = new GLTexture2D(this.__gl, env)
              // }
          }
          else {
              // Note: The difference between an EnvMap and a BackgroundMap, is that
              // An EnvMap must be HDR, and can be convolved for reflections.
              // A Background map can be simply an image.
              const backgroundMap = env;
              if (backgroundMap.type === 'HDR') {
                  this.#glBackgroundMap = new GLHDRImage(this.__gl, backgroundMap); // todo: is this cast ok?
              }
              else {
                  this.#glBackgroundMap = new GLTexture2D(this.__gl, backgroundMap);
              }
              this.#glBackgroundMap.on('loaded', () => {
                  this.requestRedraw();
              });
              this.#glBackgroundMap.on('updated', () => {
                  this.requestRedraw();
              });
              if (!this.#backgroundMapShader) {
                  if (!gl.__quadVertexIdsBuffer)
                      gl.setupInstancedQuad();
                  this.#backgroundMapShader = new EnvMapShader(this.__gl);
                  // switch (backgroundMap.getMapping()) {
                  //   case 'octahedral':
                  //     break
                  //   case 'latlong':
                  //     break
                  //   case 'steriolatlong':
                  //     break
                  //   case 'dualfisheye':
                  //     break
                  //   case 'uv':
                  //   default:
                  //     break
                  // }
                  const shaderComp = this.#backgroundMapShader.compileForTarget('key', []);
                  this.#backgroundMapShaderBinding = generateShaderGeomBinding(this.__gl, shaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);
              }
              // console.warn('Unsupported EnvMap:' + env)
              return;
          }
          this.#glEnvMap.on('loaded', (event) => {
              this.requestRedraw();
          });
          this.#glEnvMap.on('updated', (event) => {
              this.requestRedraw();
          });
          const event = new EnvMapAssignedEvent(this.#glEnvMap);
          this.emit('envMapAssigned', event);
      }
      /**
       * The setScene method.
       * @param scene - The scene value.
       */
      setScene(scene) {
          const envMapParam = scene.envMapParam;
          if (envMapParam.value != undefined) {
              this.__bindEnvMap(envMapParam.value);
          }
          envMapParam.on('valueChanged', () => {
              this.__bindEnvMap(envMapParam.value);
          });
          const displayEnvMapParam = scene.displayEnvMapParam;
          this.#displayEnvironment = displayEnvMapParam.value;
          displayEnvMapParam.on('valueChanged', () => {
              this.#displayEnvironment = displayEnvMapParam.value;
              this.requestRedraw();
          });
          super.setScene(scene);
      }
      /**
       * The addViewport method.
       * @param name - The name value.
       * @return - The return value.
       */
      addViewport(name) {
          const vp = super.addViewport(name);
          return vp;
      }
      // //////////////////////////
      // GUI
      /**
       * Getter for exposure.
       * @return exposure
       */
      get exposure() {
          return this.#exposure;
      }
      /**
       * Setter for exposure.
       * @param val - The val value.
       */
      set exposure(val) {
          this.#exposure = val;
          this.requestRedraw();
      }
      /**
       * Getter for gamma.
       */
      get gamma() {
          return this.#gamma;
      }
      /**
       * Setter for gamma.
       * @param val - The val value.
       */
      set gamma(val) {
          this.#gamma = val;
          this.requestRedraw();
      }
      /**
       * Getter for displayEnvironment.
       */
      get displayEnvironment() {
          return this.#displayEnvironment;
      }
      /**
       * Setter for displayEnvironment.
       * @param val - The val value.
       */
      set displayEnvironment(val) {
          this.#displayEnvironment = val;
          this.requestRedraw();
      }
      // //////////////////////////
      // Raycasting
      bindRaycastViewport(renderstate, viewXfo, projectionMatrixMat4) {
          const region = [0, 0, 3, 3];
          renderstate.viewXfo = viewXfo;
          renderstate.cameraMatrix = viewXfo.toMat4();
          renderstate.viewScale = 1.0;
          renderstate.region = region;
          const viewMatrixMat4 = renderstate.cameraMatrix.inverse();
          const gl = this.gl;
          renderstate.bindRendererUnifs = (unifs) => {
              const { cameraMatrix, viewMatrix, projectionMatrix, eye, isOrthographic, viewportFrustum } = unifs;
              if (cameraMatrix) {
                  gl.uniformMatrix4fv(cameraMatrix.location, false, renderstate.cameraMatrix.asArray());
              }
              if (viewMatrix) {
                  gl.uniformMatrix4fv(viewMatrix.location, false, viewMatrixMat4.asArray());
              }
              if (projectionMatrix) {
                  gl.uniformMatrix4fv(projectionMatrix.location, false, projectionMatrixMat4.asArray());
              }
              if (eye) {
                  gl.uniform1i(eye.location, 0);
              }
              if (isOrthographic) {
                  gl.uniform1i(isOrthographic.location, 1);
              }
          };
          renderstate.bindViewports = (unifs, draw) => draw();
      }
      /**
       * Ray casting is implemented by rendering a small image from the position of the ray, and capturing geometries detected in the resulting image.
       * This method takes a Ray value, and uses that base the ray cast operation.
       *
       * @param ray - The ray to use in the raycast.
       * @param dist - The maximum distance to cast the ray
       * @param area - The area to use for the ray
       * @param mask - The mask to filter our certain pass types. Can be PassType.OPAQUE | PassType.TRANSPARENT | PassType.OVERLAY
       * @return - The object containing the ray cast results.
       */
      raycastWithRay(ray, dist, area = 0.01, mask = ALL_PASSES) {
          const xfo = new Xfo();
          xfo.setLookAt(ray.start, ray.start.add(ray.dir), new Vec3(0, 0, 1));
          return this.raycast(xfo, ray, dist, area, mask);
      }
      /**
       * Ray casting is implemented by rendering a small image from the position of the ray, and capturing geometries detected in the resulting image.
       * This method takes an Xfo value, and uses that base the ray cast operation.
       *
       * @param xfo - The xfo to use in the raycast.
       * @param dist - The maximum distance to cast the ray
       * @param area - The area to use for the ray
       * @param mask - The mask to filter our certain pass types. Can be PassType.OPAQUE | PassType.TRANSPARENT | PassType.OVERLAY
       * @return - The object containing the ray cast results.
       */
      raycastWithXfo(xfo, dist, area = 0.01, mask = ALL_PASSES) {
          const ray = new Ray(xfo.tr, xfo.ori.getZaxis().negate());
          return this.raycast(xfo, ray, dist, area, mask);
      }
      /**
       * Ray casting is implemented by rendering a small image from the position of the ray, and capturing geometries detected in the resulting image.
       *
       * @private
       *
       * @param xfo - The xfo to use in the raycast.
       * @param ray - The ray to use in the raycast.
       * @param dist - The maximum distance to cast the ray
       * @param area - The area to use for the ray
       * @param mask - The mask to filter our certain pass types. Can be PassType.OPAQUE | PassType.TRANSPARENT | PassType.OVERLAY
       * @return - The object containing the ray cast results.
       */
      raycast(xfo, ray, dist, area = 0.01, mask = ALL_PASSES) {
          if (this.#rayCastDist != dist || this.#rayCastArea != area) {
              this.#rayCastRenderTargetProjMatrix.setOrthographicMatrix(area * -0.5, area * 0.5, area * -0.5, area * 0.5, 0.0, dist);
              this.#rayCastDist = dist;
              this.#rayCastArea = area;
          }
          return this.raycastWithProjection(xfo, this.#rayCastRenderTargetProjMatrix, ray, mask);
      }
      /**
       * Ray casting is implemented by rendering a small image from the position of the ray, and capturing geometries detected in the resulting image.
       *
       * @private
       *
       * @param viewXfo - The xfo to use in the raycast.
       * @param projectionMatrix - The projectionMatrix to use in the raycast.
       * @param ray - The ray to use in the raycast.
       * @param mask - The mask to filter our certain pass types. Can be PassType.OPAQUE | PassType.TRANSPARENT | PassType.OVERLAY
       * @return - The object containing the ray cast results.
       */
      raycastWithProjection(viewXfo, projectionMatrix, ray, mask = ALL_PASSES) {
          const renderstate = new GeomDataRenderState(this.__gl);
          this.bindRaycastViewport(renderstate, viewXfo, projectionMatrix);
          const gl = this.__gl;
          if (!this.#rayCastRenderTarget) {
              this.#rayCastRenderTarget = new GLRenderTarget(gl, {
                  type: gl.FLOAT,
                  format: gl.RGBA,
                  filter: gl.NEAREST,
                  createDepthTexture: true,
                  width: 3,
                  height: 3,
                  numColorChannels: 1,
              });
          }
          this.#rayCastRenderTarget.bindForWriting(renderstate, true);
          gl.enable(gl.CULL_FACE);
          gl.enable(gl.DEPTH_TEST);
          gl.depthFunc(gl.LEQUAL);
          gl.depthMask(true);
          this.drawSceneGeomData(renderstate, mask);
          gl.finish();
          this.#rayCastRenderTarget.unbindForWriting();
          this.#rayCastRenderTarget.bindForReading();
          const geomDatas = new Float32Array(4 * 9);
          gl.readPixels(0, 0, 3, 3, gl.RGBA, gl.FLOAT, geomDatas);
          this.#rayCastRenderTarget.unbindForReading();
          // ////////////////////////////////////
          // We have a 3x3 grid of pixels, and we
          // scan them to find if any geom was in the
          // frustum.
          // Starting with the center pixel (4),
          // then left and right (3, 5)
          // Then top bottom (1, 7)
          const checkPixel = (id) => geomDatas[id * 4 + 3] != 0;
          const dataPixels = [4, 3, 5, 1, 7];
          let geomData;
          for (const pixelID of dataPixels) {
              if (checkPixel(pixelID)) {
                  geomData = geomDatas.subarray(pixelID * 4, pixelID * 4 + 4);
                  break;
              }
          }
          if (!geomData)
              return null;
          // Mask the pass id to be only the first 6 bits of the integer.
          const passId = Math.round(geomData[0]) & (64 - 1);
          const geomItemAndDist = this.getPass(passId)?.getGeomItemAndDist(geomData);
          if (geomItemAndDist) {
              const intersectionPos = ray.start.add(ray.dir.scale(geomItemAndDist.dist));
              return {
                  pointerRay: ray,
                  intersectionPos,
                  geomItem: geomItemAndDist.geomItem,
                  componentId: -1,
                  dist: geomItemAndDist.dist,
                  geomData,
              };
          }
          else {
              return null;
          }
      }
      /**
       *
       * @private
       *
       * @param xfo - The ray to use in the raycast.
       * @param ray - The ray to use in the raycast.
       * @param dist - The maximum distance to cast the ray
       * @param area - The area to use for the ray
       * @param mask - The mask to filter our certain pass types. Can be PassType.OPAQUE | PassType.TRANSPARENT | PassType.OVERLAY
       * @return - The object containing the ray cast results.
       */
      raycastCluster(xfo, ray, dist, area = 0.01, mask = ALL_PASSES) {
          const gl = this.__gl;
          const renderstate = new GeomDataRenderState(this.__gl);
          this.bindRaycastViewport(renderstate, xfo, this.#rayCastRenderTargetProjMatrix);
          if (!this.#rayCastRenderTarget) {
              this.#rayCastRenderTarget = new GLRenderTarget(gl, {
                  type: 'FLOAT',
                  format: 'RGBA',
                  filter: 'NEAREST',
                  createDepthTexture: true,
                  width: 3,
                  height: 3,
                  numColorChannels: 1,
              });
              this.#rayCastRenderTargetProjMatrix = new Mat4();
          }
          if (this.#rayCastDist != dist || this.#rayCastArea != area) {
              this.#rayCastRenderTargetProjMatrix.setOrthographicMatrix(area * -0.5, area * 0.5, area * -0.5, area * 0.5, 0.0, dist);
              this.#rayCastDist = dist;
              this.#rayCastArea = area;
          }
          this.#rayCastRenderTarget.bindForWriting(renderstate, true);
          gl.enable(gl.CULL_FACE);
          gl.enable(gl.DEPTH_TEST);
          gl.depthFunc(gl.LEQUAL);
          gl.depthMask(true);
          this.drawSceneGeomData(renderstate, mask);
          gl.finish();
          this.#rayCastRenderTarget.unbindForWriting();
          this.#rayCastRenderTarget.bindForReading();
          const geomDatas = new Float32Array(4 * 9);
          gl.readPixels(0, 0, 3, 3, gl.RGBA, gl.FLOAT, geomDatas);
          this.#rayCastRenderTarget.unbindForReading();
          // ////////////////////////////////////
          // We have a 3x3 grid of pixels, and we
          // scan them to find if any geom was in the
          // frustum.
          // Note: we return every intersection, because even multiple intersections
          // on the same geometry will be at different distances.
          // This method is often used to get an average distance.
          const checkPixel = (id) => geomDatas[id * 4 + 3] != 0;
          const result = [];
          for (let i = 0; i < 9; i++) {
              if (checkPixel(i)) {
                  const geomData = geomDatas.subarray(i * 4, i * 4 + 4);
                  // Mask the pass id to be only the first 6 bits of the integer.
                  const passId = Math.round(geomData[0]) & (64 - 1);
                  const pass = this.getPass(passId);
                  if (pass) {
                      const geomItemAndDist = pass.getGeomItemAndDist(geomData);
                      if (geomItemAndDist) {
                          const intersectionPos = ray.start.add(ray.dir.scale(geomItemAndDist.dist));
                          result.push({
                              pointerRay: ray,
                              intersectionPos,
                              geomItem: geomItemAndDist.geomItem,
                              componentId: -1,
                              dist: geomItemAndDist.dist,
                              geomData,
                          });
                      }
                  }
              }
          }
          return result;
      }
      // //////////////////////////
      // Rendering
      /**
       * The drawBackground method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawBackground(renderstate) {
          if (this.#glBackgroundMap && this.#backgroundMapShader && this.#backgroundMapShaderBinding) {
              if (!this.#glBackgroundMap.isLoaded())
                  return;
              const gl = this.__gl;
              gl.depthMask(false);
              this.#backgroundMapShader.bind(renderstate);
              const unifs = renderstate.unifs;
              this.#glBackgroundMap.bindToUniform(renderstate, unifs.backgroundImage);
              this.#backgroundMapShaderBinding.bind(renderstate);
              gl.drawQuad();
          }
          else if (this.#glEnvMap && this.#glEnvMap.draw /* Note: video env maps cannot be drawn directly.*/) {
              this.#glEnvMap.draw(renderstate);
          }
      }
      /**
       * The bindGLRenderer method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      bindGLRenderer(renderstate) {
          super.bindGLRenderer(renderstate);
          if (renderstate instanceof ColorRenderState) {
              renderstate.envMap = this.#glEnvMap;
              renderstate.exposure = this.#exposure;
              renderstate.renderMode = this.renderMode;
              renderstate.outlineThickness = this.outlineThickness;
              renderstate.outlineColor = this.outlineColor;
              renderstate.hiddenLineColor = this.hiddenLineColor;
              renderstate.outlineMethod = this.outlineMethod;
              renderstate.screenQuad = this.screenQuad;
          }
      }
      /**
       * The drawScene method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawScene(renderstate) {
          this.bindGLRenderer(renderstate);
          if (this.#displayEnvironment)
              this.drawBackground(renderstate);
          super.drawScene(renderstate);
          // console.log("Draw Calls:" + renderstate['drawCalls']);
      }
  }

  /** This class abstracts the rendering of a collection of geometries to screen.
   * @extends EventEmitter
   * @private
   */
  class GLGeomItemSetMultiDraw extends EventEmitter {
      renderer;
      gl;
      glGeomItems = [];
      glGeomIdsMapping = {};
      glgeomItemEventHandlers = [];
      freeIndices = [];
      // The last camera position from which the data was sorted
      viewPos = new Vec3();
      // Mapping from the array of glGeomItems, to the actual rendering
      // order. When rendering transparent geoms, we sort this array.
      // Mapping from the array of glGeomItems, to the actual rendering
      // order. When rendering transparent geoms, we sort this array.
      drawElementCounts = new Int32Array(0);
      drawElementOffsets = new Int32Array(0);
      highlightElementCounts = new Int32Array(0);
      highlightElementOffsets = new Int32Array(0);
      drawOrderToIndex = [];
      indexToDrawIndex = [];
      drawIdsArray = new Float32Array(0);
      drawIdsBufferDirty = true;
      drawIdsTexture = null;
      highlightedItems = [];
      highlightedIdsArray = null;
      highlightedIdsTexture = null;
      highlightedIdsBufferDirty = false;
      // When a geometry changes, we update offset and count the values.
      dirtyGeomIndices = new Set();
      /**
       * Create a GL geom item set.
       * @param renderer - The renderer object.
       */
      constructor(renderer) {
          super();
          this.renderer = renderer;
          this.gl = renderer.gl;
          this.renderer.glGeomLibrary.on('geomDataChanged', (event) => {
              const geomItemIndices = this.glGeomIdsMapping[event.index];
              if (geomItemIndices != undefined) {
                  this.dirtyGeomIndices.add(event.index);
              }
          });
      }
      /**
       * The addGLGeomItem method.
       * @param glGeomItem - The glGeomItem value.
       */
      addGLGeomItem(glGeomItem) {
          const index = this.freeIndices.length > 0 ? this.freeIndices.pop() : this.glGeomItems.length;
          // Note: we now allocate the draw index right away.
          // Visibility only controls the element count value
          this.indexToDrawIndex[index] = this.drawOrderToIndex.length;
          this.drawOrderToIndex.push(index);
          const eventHandlers = {};
          // //////////////////////////////
          // Visibility
          eventHandlers.visibilityChanged = (event) => {
              const drawIndex = this.indexToDrawIndex[index];
              if (event.visible) {
                  const offsetAndCount = this.renderer.glGeomLibrary.getGeomOffsetAndCount(glGeomItem.geomId);
                  this.drawElementCounts[drawIndex] = offsetAndCount[1];
              }
              else {
                  this.drawElementCounts[drawIndex] = 0;
              }
              this.emit('updated');
          };
          glGeomItem.on('visibilityChanged', eventHandlers.visibilityChanged);
          // //////////////////////////////
          // Highlighted
          if (glGeomItem.geomItem.isHighlighted()) {
              this.highlightedItems.push(glGeomItem);
              this.highlightedIdsBufferDirty = true;
          }
          eventHandlers.highlightChanged = (event) => {
              if (event && event.name) {
                  // Note: highlightChanged is fired when the color changes
                  // or another highlight is added over the top. We avoid
                  // adding the same index again here. (TODO: use Set?)
                  if (this.highlightedItems.includes(glGeomItem))
                      return;
                  this.highlightedItems.push(glGeomItem);
              }
              else {
                  this.highlightedItems.splice(this.highlightedItems.indexOf(glGeomItem), 1);
              }
              // console.log("highlightChanged:", glGeomItem.geomItem.getName(), glGeomItem.geomItem.isHighlighted(), this.highlightedItems)
              this.highlightedIdsBufferDirty = true;
              this.emit('updated');
          };
          glGeomItem.geomItem.on('highlightChanged', eventHandlers.highlightChanged);
          // //////////////////////////////
          // Geometry
          const geomParam = glGeomItem.geomItem.geomParam;
          let geom = geomParam.value;
          glGeomItem.geomId = this.renderer.glGeomLibrary.addGeom(geom);
          // Keep track of which geomitems use which geoms, so we can update the offset and count array if they change.
          if (!this.glGeomIdsMapping[glGeomItem.geomId]) {
              this.glGeomIdsMapping[glGeomItem.geomId] = [index];
          }
          else {
              this.glGeomIdsMapping[glGeomItem.geomId].push(index);
          }
          this.glGeomItems[index] = glGeomItem;
          this.glgeomItemEventHandlers[index] = eventHandlers;
          this.drawIdsBufferDirty = true;
          this.emit('updated');
      }
      /**
       * The removeGLGeomItem method.
       * @param glGeomItem - The glGeomItem value.
       */
      removeGLGeomItem(glGeomItem) {
          const index = this.glGeomItems.indexOf(glGeomItem);
          const geom = this.renderer.glGeomLibrary.getGeom(glGeomItem.geomId);
          this.renderer.glGeomLibrary.removeGeom(geom);
          const geomItemIndices = this.glGeomIdsMapping[glGeomItem.geomId];
          geomItemIndices.splice(geomItemIndices.indexOf(index), 1);
          if (geomItemIndices.length == 0) {
              delete this.glGeomIdsMapping[glGeomItem.geomId];
              if (this.dirtyGeomIndices.has(glGeomItem.geomId))
                  this.dirtyGeomIndices.delete(glGeomItem.geomId);
          }
          const eventHandlers = this.glgeomItemEventHandlers[index];
          glGeomItem.geomItem.off('highlightChanged', eventHandlers.highlightChanged);
          glGeomItem.off('visibilityChanged', eventHandlers.visibilityChanged);
          this.glGeomItems[index] = null;
          this.glgeomItemEventHandlers[index] = null;
          this.drawIdsArray[index] = 0;
          this.drawElementOffsets[index] = 0;
          this.drawElementCounts[index] = 0;
          this.freeIndices.push(index);
          if (glGeomItem.isVisible()) {
              // Note: as items are removed, the indexToDrawIndex values get broken and must be updated.
              const drawIndex = this.drawOrderToIndex.indexOf(index);
              this.drawOrderToIndex.splice(drawIndex, 1);
              this.indexToDrawIndex[index] = -1;
              this.drawElementCounts[drawIndex] = 0;
              this.drawIdsBufferDirty = true;
          }
          if (glGeomItem.geomItem.isHighlighted()) {
              const highlightIndex = this.highlightedItems.indexOf(glGeomItem);
              this.highlightedItems.splice(highlightIndex, 1);
              this.highlightedIdsBufferDirty = true;
          }
          this.emit('updated');
      }
      // ////////////////////////////////////
      // Draw Ids
      cleanGeomIds() {
          // When a geometry changes, we update offset and count the values.
          // Note: this method is quite expensive.
          // (taking up 80% of the time to load the GPU in the Memory test before it was refactored)
          // The cost is probably in the "drawOrderToIndex.indexOf(index)" call below.
          // Most of the time, we are adding/removing GeomItems. The geoms rarely change
          // independently.
          // We run this method in the rare occurrence that a geom changes, and not its GeomItem.
          this.dirtyGeomIndices.forEach((geomId) => {
              const geomItemIndices = this.glGeomIdsMapping[geomId];
              if (geomItemIndices != undefined) {
                  const offsetAndCount = this.renderer.glGeomLibrary.getGeomOffsetAndCount(geomId);
                  geomItemIndices.forEach((index) => {
                      const glGeomItem = this.glGeomItems[index];
                      if (glGeomItem.isVisible()) {
                          const drawIndex = this.indexToDrawIndex[index];
                          this.drawElementOffsets[drawIndex] = offsetAndCount[0];
                          this.drawElementCounts[drawIndex] = offsetAndCount[1];
                          this.drawIdsArray[drawIndex] = glGeomItem.geomItemId;
                          const highlightIndex = this.highlightedItems.indexOf(glGeomItem);
                          if (highlightIndex != -1) {
                              this.highlightElementOffsets[highlightIndex] = offsetAndCount[0];
                              this.highlightElementCounts[highlightIndex] = offsetAndCount[1];
                          }
                      }
                  });
              }
          });
          this.dirtyGeomIndices = new Set();
      }
      /**
       * The updateDrawIDsBuffer method.
       * @param renderstate - The object used to track state changes during rendering.
       */
      updateDrawIDsBuffer(renderstate) {
          {
              if (!this.drawIdsArray || this.drawOrderToIndex.length > this.drawIdsArray.length) {
                  this.drawIdsArray = new Float32Array(this.drawOrderToIndex.length);
                  // Note: the +1 here is to avoid an exception thrown on Safari if the offsets and counts are
                  // exactly the size of the number of drawn items. (a bug in the validation).
                  this.drawElementOffsets = new Int32Array(this.drawOrderToIndex.length + 1);
                  this.drawElementCounts = new Int32Array(this.drawOrderToIndex.length + 1);
              }
              this.drawOrderToIndex.forEach((itemIndex, drawIndex) => {
                  const glGeomItem = this.glGeomItems[itemIndex];
                  if (!glGeomItem)
                      return;
                  const offsetAndCount = this.renderer.glGeomLibrary.getGeomOffsetAndCount(glGeomItem.geomId);
                  this.drawElementOffsets[drawIndex] = offsetAndCount[0];
                  this.drawElementCounts[drawIndex] = glGeomItem.isVisible() ? offsetAndCount[1] : 0;
                  this.drawIdsArray[drawIndex] = glGeomItem.geomItemId;
                  // Note: as items are removed, these indices must be updated.
                  this.indexToDrawIndex[itemIndex] = drawIndex;
              });
              this.dirtyGeomIndices = new Set();
          }
          const gl = this.renderer.gl;
          const unit = renderstate.boundTextures++;
          gl.activeTexture(gl.TEXTURE0 + unit);
          const drawIdsTextureSize = MathFunctions.nextPow2(Math.ceil(Math.sqrt(this.drawOrderToIndex.length))) * 2;
          if (!this.drawIdsTexture) {
              this.drawIdsTexture = new GLTexture2D(this.gl, {
                  format: gl.name == 'webgl2' ? 'RED' : 'ALPHA',
                  type: 'FLOAT',
                  width: drawIdsTextureSize,
                  height: drawIdsTextureSize,
                  filter: 'NEAREST',
                  wrap: 'CLAMP_TO_EDGE',
                  mipMapped: false,
              });
          }
          else if (this.drawIdsTexture.width < drawIdsTextureSize || this.drawIdsTexture.height < drawIdsTextureSize) {
              this.drawIdsTexture.resize(drawIdsTextureSize, drawIdsTextureSize);
          }
          {
              const tex = this.drawIdsTexture;
              const texWidth = this.drawIdsTexture.width;
              gl.bindTexture(gl.TEXTURE_2D, tex.glTex);
              const level = 0;
              const xoffset = 0;
              const height = 1;
              const format = tex.getFormat();
              const type = tex.getType();
              const rows = Math.ceil((xoffset + this.drawOrderToIndex.length) / texWidth);
              let consumed = 0;
              let remaining = this.drawOrderToIndex.length;
              let rowStart = xoffset;
              for (let i = 0; i < rows; i++) {
                  let width;
                  if (rowStart + remaining > texWidth) {
                      width = texWidth - rowStart;
                      rowStart = 0;
                  }
                  else {
                      width = remaining;
                  }
                  const x = consumed % texWidth;
                  const y = Math.floor(consumed / texWidth);
                  const data = this.drawIdsArray.subarray(consumed, consumed + width);
                  gl.texSubImage2D(gl.TEXTURE_2D, level, x, y, width, height, format, type, data);
                  consumed += width;
                  remaining -= width;
              }
          }
          gl.bindTexture(gl.TEXTURE_2D, null);
          renderstate.boundTextures--;
          this.drawIdsBufferDirty = false;
      }
      // ////////////////////////////////////
      // Selected Items
      /**
       * The updateHighlightedIDsBuffer method.
       * @param renderstate - The object used to track state changes during rendering.
       */
      updateHighlightedIDsBuffer(renderstate) {
          if (this.highlightedIdsBufferDirty) {
              if (!this.highlightedIdsArray || this.highlightedItems.length > this.highlightedIdsArray.length) {
                  this.highlightedIdsArray = new Float32Array(this.highlightedItems.length);
                  // Note: the +1 here is to avoid an exception thrown on Safari if the offsets and counts are
                  // exactly the size of the number of drawn items. (a bug in the validation).
                  this.highlightElementOffsets = new Int32Array(this.highlightedItems.length + 1);
                  this.highlightElementCounts = new Int32Array(this.highlightedItems.length + 1);
              }
              // Collect all visible geom ids into the instanceIds array.
              // Note: the draw count can be less than the number of instances
              // we re-use the same buffer and simply invoke fewer draw calls.
              this.highlightedItems.forEach((glGeomItem, index) => {
                  this.highlightedIdsArray[index] = glGeomItem.geomItemId;
                  const offsetAndCount = this.renderer.glGeomLibrary.getGeomOffsetAndCount(glGeomItem.geomId);
                  this.highlightElementOffsets[index] = offsetAndCount[0];
                  this.highlightElementCounts[index] = offsetAndCount[1];
              });
              for (let i = this.highlightedItems.length; i < this.highlightElementCounts.length; i++) {
                  this.highlightElementOffsets[i] = 0;
                  this.highlightElementCounts[i] = 0;
              }
              this.highlightedIdsBufferDirty = false;
          }
          const gl = this.renderer.gl;
          const unit = renderstate.boundTextures++;
          gl.activeTexture(gl.TEXTURE0 + unit);
          const highlightIdsTextureSize = MathFunctions.nextPow2(Math.ceil(Math.sqrt(this.highlightedItems.length)));
          if (!this.highlightedIdsTexture) {
              this.highlightedIdsTexture = new GLTexture2D(this.gl, {
                  format: gl.name == 'webgl2' ? 'RED' : 'ALPHA',
                  type: 'FLOAT',
                  width: highlightIdsTextureSize,
                  height: highlightIdsTextureSize,
                  filter: 'NEAREST',
                  wrap: 'CLAMP_TO_EDGE',
                  mipMapped: false,
              });
          }
          else if (this.highlightedIdsTexture.width < highlightIdsTextureSize ||
              this.highlightedIdsTexture.height < highlightIdsTextureSize) {
              this.highlightedIdsTexture.resize(highlightIdsTextureSize, highlightIdsTextureSize);
          }
          {
              const tex = this.highlightedIdsTexture;
              const texWidth = this.highlightedIdsTexture.width;
              gl.bindTexture(gl.TEXTURE_2D, tex.glTex);
              const level = 0;
              const xoffset = 0;
              const height = 1;
              const format = tex.getFormat();
              const type = tex.getType();
              const rows = Math.ceil((xoffset + this.highlightedIdsArray.length) / texWidth);
              let consumed = 0;
              let remaining = this.highlightedIdsArray.length;
              let rowStart = xoffset;
              for (let i = 0; i < rows; i++) {
                  let width;
                  if (rowStart + remaining > texWidth) {
                      width = texWidth - rowStart;
                      rowStart = 0;
                  }
                  else {
                      width = remaining;
                  }
                  const x = consumed % texWidth;
                  const y = Math.floor(consumed / texWidth);
                  const data = this.highlightedIdsArray.subarray(consumed, consumed + width);
                  gl.texSubImage2D(gl.TEXTURE_2D, level, x, y, width, height, format, type, data);
                  consumed += width;
                  remaining -= width;
              }
          }
          gl.bindTexture(gl.TEXTURE_2D, null);
          renderstate.boundTextures--;
      }
      // ////////////////////////////////////
      // Drawing
      /**
       * The draw method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          if (this.drawIdsBufferDirty) {
              this.updateDrawIDsBuffer(renderstate);
          }
          else if (this.dirtyGeomIndices.size > 0) {
              this.cleanGeomIds();
          }
          // Note: updateDrawIDsBuffer first, as this avoids a case where the buffers stay dirty
          // because the last item was removed.
          if (this.drawIdsArray.length == 0) {
              return;
          }
          if (this.drawIdsTexture) {
              const { drawIdsTexture } = renderstate.unifs;
              this.drawIdsTexture.bindToUniform(renderstate, drawIdsTexture);
          }
          this.bindAndRender(renderstate, this.drawElementCounts, this.drawElementOffsets, this.drawOrderToIndex.length);
      }
      /**
       * The drawHighlighted method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawHighlighted(renderstate) {
          if (this.highlightedItems.length == 0) {
              return;
          }
          if (this.highlightedIdsBufferDirty) {
              this.updateHighlightedIDsBuffer(renderstate);
          }
          if (this.highlightedIdsTexture) {
              const { drawIdsTexture } = renderstate.unifs;
              this.highlightedIdsTexture.bindToUniform(renderstate, drawIdsTexture);
          }
          this.bindAndRender(renderstate, this.highlightElementCounts, this.highlightElementOffsets, this.highlightedItems.length);
      }
      /**
       * The drawGeomData method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawGeomData(renderstate) {
          if (this.drawIdsBufferDirty) {
              this.updateDrawIDsBuffer(renderstate);
          }
          // Note: updateDrawIDsBuffer first, as this avoids a case where the buffers stay dirty
          // because the last item was removed.
          if (this.drawOrderToIndex.length == 0) {
              return;
          }
          if (this.drawIdsTexture) {
              const { drawIdsTexture } = renderstate.unifs;
              this.drawIdsTexture.bindToUniform(renderstate, drawIdsTexture);
          }
          this.bindAndRender(renderstate, this.drawElementCounts, this.drawElementOffsets, this.drawOrderToIndex.length);
      }
      /**
       * The bindAndRender method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param counts - the counts for each element drawn in by this draw call.
       * @param offsets - the offsets for each element drawn in by this draw call.
       * @private
       */
      bindAndRender(renderstate, counts, offsets, drawCount) {
          const gl = this.gl;
          const unifs = renderstate.unifs;
          // Specify an instanced draw to the shader so it knows how
          // to retrieve the modelmatrix.
          if (unifs.instancedDraw) {
              gl.uniform1i(renderstate.unifs.instancedDraw.location, 1);
          }
          renderstate.bindViewports(unifs, () => {
              this.multiDraw(renderstate, counts, offsets, drawCount);
          });
      }
      /**
       * Sorts the drawn items in order furthest to nearest when rendering transparent objects.
       * @param viewPos - The position of the camera that we are sorting relative to.
       */
      sortItems(viewPos) {
          const distances = new Float32Array(this.drawOrderToIndex.length);
          this.drawOrderToIndex.forEach((itemIndex) => {
              const glGeomItem = this.glGeomItems[itemIndex];
              if (glGeomItem) {
                  const bbox = glGeomItem.geomItem.boundingBoxParam.value;
                  // Calculate the disance to the surface of the bounding sphere.
                  // TODO: calculate the distance the nearest point on the bounding box.
                  const center = bbox.center();
                  const size = bbox.size();
                  const dist = center.distanceTo(viewPos) - size;
                  distances[itemIndex] = dist;
              }
          });
          this.drawOrderToIndex.sort((a, b) => distances[b] - distances[a]);
          this.drawOrderToIndex.forEach((itemIndex, drawIndex) => {
              const glGeomItem = this.glGeomItems[itemIndex];
              if (glGeomItem) {
                  this.drawIdsArray[drawIndex] = glGeomItem.geomItemId;
                  this.indexToDrawIndex[itemIndex] = drawIndex;
              }
          });
          // Force the re-generation of the draw ids texture using the new ordering.
          this.drawIdsBufferDirty = true;
          this.viewPos = viewPos;
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          if (this.drawIdsTexture) {
              this.drawIdsTexture.destroy();
          }
          if (this.highlightedIdsTexture) {
              this.highlightedIdsTexture.destroy();
          }
          this.emit('destructing');
      }
  }

  /** Class representing a GL mesh.
   * @extends GLGeom
   * @private
   */
  class GLPointsItemSet extends GLGeomItemSetMultiDraw {
      /**
       * Draw an item to screen.
       * @param renderstate - The object tracking the current state of the renderer
       * @param drawIds - the draw id for each element drawn in by this draw call.
       * @param counts - the geom element count for each element drawn in by this draw call.
       * @param offsets - the geom element offset for each element drawn in by this draw call.
       * @param drawCount - the number of active draw calls for this invocation
       */
      multiDraw(renderstate, counts, offsets, drawCount) {
          const gl = this.gl;
          if (gl.multiDrawArrays) {
              gl.multiDrawArrays(gl.POINTS, offsets, 0, counts, 0, drawCount);
          }
          else {
              const { drawId } = renderstate.unifs;
              for (let i = 0; i < drawCount; i++) {
                  gl.uniform1i(drawId.location, i);
                  gl.drawArrays(gl.POINTS, offsets[i], counts[i]);
              }
          }
      }
  }

  /** Class representing a GL mesh.
   * @extends GLGeom
   * @private
   */
  class GLLinesItemSet extends GLGeomItemSetMultiDraw {
      /**
       * Draw an item to screen.
       * @param renderstate - The object tracking the current state of the renderer
       * @param drawIds - the draw id for each element drawn in by this draw call.
       * @param counts - the geom element count for each element drawn in by this draw call.
       * @param offsets - the geom element offset for each element drawn in by this draw call.
       * @param drawCount - the number of active draw calls for this invocation
       */
      multiDraw(renderstate, counts, offsets, drawCount) {
          const { occluded, hiddenLineColor } = renderstate.unifs;
          // @ts-ignore
          const drawingHiddenLines = 
          // @ts-ignore
          renderstate.hiddenLineColor &&
              // @ts-ignore
              renderstate.hiddenLineColor.a > 0 &&
              occluded &&
              hiddenLineColor;
          const gl = this.gl;
          if (gl.multiDrawArrays) {
              gl.multiDrawElements(gl.LINES, counts, 0, gl.UNSIGNED_INT, offsets, 0, drawCount);
              if (drawingHiddenLines) {
                  gl.uniform1i(occluded.location, 1);
                  // @ts-ignore
                  gl.uniform4fv(hiddenLineColor.location, renderstate.hiddenLineColor.asArray());
                  gl.depthFunc(gl.GREATER);
                  gl.depthMask(false);
                  gl.multiDrawElements(gl.LINES, counts, 0, gl.UNSIGNED_INT, offsets, 0, drawCount);
                  gl.depthFunc(gl.LEQUAL);
                  gl.depthMask(true);
                  gl.uniform1i(occluded.location, 0);
              }
          }
          else {
              const { drawId } = renderstate.unifs;
              for (let i = 0; i < drawCount; i++) {
                  gl.uniform1i(drawId.location, i);
                  gl.drawElements(gl.LINES, counts[i], gl.UNSIGNED_INT, offsets[i]);
              }
              if (drawingHiddenLines) {
                  gl.uniform1i(occluded.location, 1);
                  // @ts-ignore
                  gl.uniform4fv(hiddenLineColor.location, renderstate.hiddenLineColor.asArray());
                  gl.depthFunc(gl.GREATER);
                  gl.depthMask(false);
                  for (let i = 0; i < drawCount; i++) {
                      gl.uniform1i(drawId.location, i);
                      gl.drawElements(gl.LINES, counts[i], gl.UNSIGNED_INT, offsets[i]);
                  }
                  gl.depthFunc(gl.LEQUAL);
                  gl.depthMask(true);
                  gl.uniform1i(occluded.location, 0);
              }
          }
      }
  }

  var GeomType$1;
  (function (GeomType) {
      GeomType[GeomType["TRIANGLES"] = 0] = "TRIANGLES";
      GeomType[GeomType["LINES"] = 1] = "LINES";
      GeomType[GeomType["POINTS"] = 2] = "POINTS";
  })(GeomType$1 || (GeomType$1 = {}));
  /** Class representing a GL mesh.
   * @extends GLGeom
   * @private
   */
  class GLMeshItemSet extends GLGeomItemSetMultiDraw {
      /**
       * Draw an item to screen.
       * @param renderstate - The object tracking the current state of the renderer
       * @param drawIds - the draw id for each element drawn in by this draw call.
       * @param counts - the geom element count for each element drawn in by this draw call.
       * @param offsets - the geom element offset for each element drawn in by this draw call.
       * @param drawCount - the number of active draw calls for this invocation
       */
      multiDraw(renderstate, counts, offsets, drawCount) {
          const gl = this.gl;
          const multiDrawMeshes = () => {
              if (gl.multiDrawElements) {
                  gl.multiDrawElements(gl.TRIANGLES, counts, 0, gl.UNSIGNED_INT, offsets, 0, drawCount);
              }
              else {
                  const { drawId } = renderstate.unifs;
                  for (let i = 0; i < drawCount; i++) {
                      gl.uniform1i(drawId.location, i);
                      gl.drawElements(gl.TRIANGLES, counts[i], gl.UNSIGNED_INT, offsets[i]);
                  }
              }
          };
          const { geomType, outlineThickness, viewportSize, renderMode } = renderstate.unifs;
          const renderModeValue = renderstate instanceof ColorRenderState && renderMode ? renderstate.renderMode : null;
          const drawingOutlines = renderstate instanceof ColorRenderState &&
              outlineThickness &&
              viewportSize &&
              renderstate.outlineMethod == 'geometry' &&
              renderstate.outlineThickness > 0 &&
              renderModeValue != 'flat-noedges' &&
              renderModeValue != 'pbr-noedges';
          const drawingWireframeOutlines = drawingOutlines && renderModeValue == 'wireframe';
          if (drawingWireframeOutlines) {
              gl.enable(gl.STENCIL_TEST);
              gl.clearStencil(0);
              gl.clear(gl.STENCIL_BUFFER_BIT);
              gl.stencilOpSeparate(gl.FRONT, gl.DECR_WRAP, gl.DECR_WRAP, gl.DECR_WRAP);
              gl.stencilOpSeparate(gl.BACK, gl.INCR_WRAP, gl.INCR_WRAP, gl.INCR_WRAP);
              gl.stencilFunc(gl.ALWAYS, 0, 0xff);
              gl.enable(gl.CULL_FACE);
              gl.cullFace(gl.BACK);
              gl.disable(gl.DEPTH_TEST);
              gl.depthMask(false);
              gl.colorMask(false, false, false, false);
              // @ts-ignore
          }
          else if (renderModeValue == 'hiddenline') {
              // Note: only the standard surface shader exposes the 'renderMode' uniform,
              // so this prevents other shaders from being skippped.
              // e.g. PMI data shoudl show up normally in wireframe mode and it is rendered using the FlatSurfaceShader.
              // don't render surfaces
              // Note: Make sure to render alpha channel
              gl.colorMask(false, false, false, true);
          }
          if (geomType)
              gl.uniform1i(geomType.location, GeomType$1.TRIANGLES);
          // Always zero this value before drawing the faces, else the shader could think its drawing the outline.
          if (outlineThickness) {
              gl.uniform1f(outlineThickness.location, 0);
          }
          multiDrawMeshes();
          if (drawingOutlines) {
              const colorRenderState = renderstate;
              // Only draw font faces. BEcause all faces are drawn, it can make a mess to see the back faces through the front faces.
              // e.g. we might see the triangles on the other side of a sphere rendered over the top of triangles on the near side.
              gl.enable(gl.CULL_FACE);
              gl.cullFace(gl.FRONT);
              // @ts-ignore
              gl.uniform1f(outlineThickness.location, colorRenderState.outlineThickness * window.devicePixelRatio);
              gl.uniform2f(viewportSize.location, renderstate.region[2] - renderstate.region[0], renderstate.region[3] - renderstate.region[1]);
              // @ts-ignore
              if (renderModeValue == 'hiddenline') {
                  // start rendering surfaces again
                  gl.colorMask(true, true, true, true);
              }
              if (!drawingWireframeOutlines) {
                  gl.enable(gl.BLEND);
                  gl.blendEquation(gl.FUNC_ADD);
                  gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);
              }
              multiDrawMeshes();
              gl.disable(gl.CULL_FACE);
              gl.cullFace(gl.BACK);
              if (drawingWireframeOutlines) {
                  gl.enable(gl.DEPTH_TEST);
                  gl.depthMask(true);
                  gl.colorMask(true, true, true, true);
                  gl.stencilFunc(gl.NOTEQUAL, 0x0, 0xff);
                  gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
                  // Blend the outline over the existing geometry.
                  {
                      gl.enable(gl.BLEND);
                      gl.blendEquation(gl.FUNC_ADD);
                      gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);
                  }
                  // cache the previously bound shader.
                  const shader = colorRenderState.glShader;
                  const shaderKey = colorRenderState.shaderkey;
                  const screenQuad = colorRenderState.screenQuad;
                  screenQuad.bindShader(colorRenderState);
                  screenQuad.draw(colorRenderState, colorRenderState.outlineColor);
                  // Re-bind the previously bound geomdata shader.
                  shader.bind(colorRenderState, shaderKey);
                  this.renderer.glGeomItemLibrary.bind(colorRenderState);
                  this.renderer.glGeomLibrary.bind(colorRenderState);
                  this.renderer.glMaterialLibrary.bind(colorRenderState);
                  gl.disable(gl.STENCIL_TEST);
              }
          }
      }
  }

  /** This class abstracts the rendering of a collection of geometries to screen.
   * @extends EventEmitter
   * @private
   */
  class GLGeomItemSet extends EventEmitter {
      gl;
      glGeom;
      id;
      glGeomItems;
      glgeomItems_freeIndices;
      glgeomItemEventHandlers;
      drawIdsArray = null;
      drawIdsBuffer = null;
      drawIdsBufferDirty;
      highlightedIdsArray = null;
      highlightedIdsBuffer = null;
      highlightedIdsBufferDirty;
      visibleItems;
      highlightedItems;
      /**
       * Create a GL geom item set.
       * @param gl - The webgl rendering context.
       * @param glGeom - The glGeom value.
       */
      constructor(gl, glGeom) {
          super();
          this.gl = gl;
          this.glGeom = glGeom;
          this.id = glGeom ? glGeom.getGeom().getId() : this.getId();
          this.glGeomItems = [];
          this.glgeomItems_freeIndices = [];
          this.glgeomItemEventHandlers = [];
          this.drawIdsArray = null;
          this.drawIdsBuffer = null;
          this.drawIdsBufferDirty = true;
          this.highlightedIdsArray = null;
          this.highlightedIdsBuffer = null;
          this.highlightedIdsBufferDirty = true;
          this.visibleItems = [];
          this.highlightedItems = [];
      }
      /**
       * The getGLGeom method.
       * @return - The return value.
       */
      getGLGeom() {
          return this.glGeom;
      }
      /**
       * The getDrawCount method.
       * @return - The return value.
       */
      getDrawCount() {
          return this.visibleItems.length;
      }
      /**
       * The addGLGeomItem method.
       * @param glGeomItem - The glGeomItem value.
       */
      addGLGeomItem(glGeomItem) {
          let index;
          if (this.glgeomItems_freeIndices.length > 0) {
              index = this.glgeomItems_freeIndices.pop();
          }
          else {
              index = this.glGeomItems.length;
              this.glGeomItems.push(null);
          }
          if (glGeomItem.geomItem.isVisible()) {
              this.visibleItems.push(index);
              const event = new CountChangedEvent(1, this.visibleItems.length);
              this.emit('drawCountChanged', event);
          }
          if (glGeomItem.geomItem.isHighlighted()) {
              this.highlightedItems.push(index);
              this.highlightedIdsBufferDirty = true;
          }
          const eventHandlers = {};
          eventHandlers.highlightChanged = (event) => {
              if (glGeomItem.geomItem.isHighlighted()) {
                  // Note: highlightChanged is fired when the color changes
                  // or another highlight is added over the top. We avoid
                  // adding the same index again here. (TODO: use Set?)
                  if (this.highlightedItems.includes(index))
                      return;
                  this.highlightedItems.push(index);
                  const event = new CountChangedEvent(1, this.highlightedItems.length);
                  this.emit('highlightedCountChanged', event);
              }
              else {
                  this.highlightedItems.splice(this.highlightedItems.indexOf(index), 1);
                  const event = new CountChangedEvent(-1, this.highlightedItems.length);
                  this.emit('highlightedCountChanged', event);
              }
              // console.log("highlightChanged:", glGeomItem.geomItem.getName(), glGeomItem.geomItem.isHighlighted(), this.highlightedItems)
              this.highlightedIdsBufferDirty = true;
          };
          glGeomItem.geomItem.on('highlightChanged', eventHandlers.highlightChanged);
          eventHandlers.visibilityChanged = (event) => {
              const visible = event.visible;
              if (visible) {
                  this.visibleItems.push(index);
                  const event = new CountChangedEvent(1, this.visibleItems.length);
                  this.emit('drawCountChanged', event);
              }
              else {
                  this.visibleItems.splice(this.visibleItems.indexOf(index), 1);
                  const event = new CountChangedEvent(-1, this.visibleItems.length);
                  this.emit('drawCountChanged', event);
              }
              this.drawIdsBufferDirty = true;
          };
          glGeomItem.geomItem.on('visibilityChanged', eventHandlers.visibilityChanged);
          this.glGeomItems[index] = glGeomItem;
          this.glgeomItemEventHandlers[index] = eventHandlers;
          this.drawIdsBufferDirty = true;
          glGeomItem.GLGeomItemSet = this;
      }
      /**
       * The removeGLGeomItem method.
       * @param glGeomItem - The glGeomItem value.
       */
      removeGLGeomItem(glGeomItem) {
          const index = this.glGeomItems.indexOf(glGeomItem);
          const eventHandlers = this.glgeomItemEventHandlers[index];
          glGeomItem.geomItem.off('highlightChanged', eventHandlers.highlightChanged);
          glGeomItem.geomItem.off('visibilityChanged', eventHandlers.visibilityChanged);
          this.glGeomItems[index] = null;
          this.glgeomItemEventHandlers[index] = null;
          glGeomItem.GLGeomItemSet = null;
          this.glgeomItems_freeIndices.push(index);
          if (glGeomItem.geomItem.isVisible()) {
              this.visibleItems.splice(this.visibleItems.indexOf(index), 1);
              const event = new CountChangedEvent(-1, this.visibleItems.length);
              this.emit('drawCountChanged', event);
          }
          if (glGeomItem.geomItem.isHighlighted()) {
              this.highlightedItems.splice(this.highlightedItems.indexOf(index), 1);
              const event = new CountChangedEvent(-1, this.highlightedItems.length);
              this.emit('highlightedCountChanged', event);
          }
          this.drawIdsBufferDirty = true;
          // console.log("removeGLGeomItem:", glGeomItem.geomItem.getName(), this.glGeomItems.length)
          if (this.glGeomItems.length == this.glgeomItems_freeIndices.length) {
              this.destroy();
          }
      }
      // ////////////////////////////////////
      // Instance Ids
      /**
       * The updateDrawIDsBuffer method.
       * The culling system will specify a subset of the total number of items for
       * drawing.
       */
      updateDrawIDsBuffer() {
          const gl = this.gl;
          if (!gl.floatTexturesSupported) {
              this.drawIdsBufferDirty = false;
              return;
          }
          if (this.drawIdsBuffer && this.glGeomItems.length != this.drawIdsArray.length) {
              this.gl.deleteBuffer(this.drawIdsBuffer);
              this.drawIdsBuffer = null;
          }
          if (!this.drawIdsBuffer) {
              this.drawIdsBuffer = gl.createBuffer();
              gl.bindBuffer(gl.ARRAY_BUFFER, this.drawIdsBuffer);
          }
          gl.bindBuffer(gl.ARRAY_BUFFER, this.drawIdsBuffer);
          gl.bufferData(gl.ARRAY_BUFFER, this.getDrawIdsArray(), gl.STATIC_DRAW);
          this.drawIdsBufferDirty = false;
      }
      /**
       * The getDrawIdsArray method.
       * @return - The drawIds for each GeomItem packed into a Float32Array
       */
      getDrawIdsArray() {
          if (this.drawIdsBufferDirty) {
              if (!this.drawIdsArray || this.glGeomItems.length != this.drawIdsArray.length) {
                  this.drawIdsArray = new Float32Array(this.glGeomItems.length);
              }
              // Collect all visible geom ids into the instanceIds array.
              // Note: the draw count can be less than the number of instances
              // we re-use the same buffer and simply invoke fewer draw calls.
              this.visibleItems.forEach((index, tgtIndex) => {
                  this.drawIdsArray[tgtIndex] = this.glGeomItems[index].geomItemId;
              });
              this.drawIdsBufferDirty = false;
          }
          return this.drawIdsArray;
      }
      // ////////////////////////////////////
      // Selected Items
      /**
       * The updateHighlightedIDsBuffer method.
       */
      updateHighlightedIDsBuffer() {
          const gl = this.gl;
          if (!gl.floatTexturesSupported) {
              this.highlightedIdsBufferDirty = false;
              return;
          }
          if (this.highlightedIdsBuffer && this.glGeomItems.length > this.highlightedIdsArray.length) {
              this.gl.deleteBuffer(this.highlightedIdsBuffer);
              this.highlightedIdsBuffer = null;
          }
          if (!this.highlightedIdsBuffer) {
              this.highlightedIdsBuffer = gl.createBuffer();
          }
          gl.bindBuffer(gl.ARRAY_BUFFER, this.highlightedIdsBuffer);
          gl.bufferData(gl.ARRAY_BUFFER, this.getHighlightedIdsArray(), gl.STATIC_DRAW);
          this.highlightedIdsBufferDirty = false;
      }
      /**
       * The getHighlightedIdsArray method.
       * @return - The drawIds for each GeomItem packed into a Float32Array
       */
      getHighlightedIdsArray() {
          if (this.highlightedIdsBufferDirty) {
              if (!this.highlightedIdsArray || this.highlightedItems.length > this.highlightedIdsArray.length) {
                  this.highlightedIdsArray = new Float32Array(this.glGeomItems.length);
              }
              // Collect all visible geom ids into the instanceIds array.
              // Note: the draw count can be less than the number of instances
              // we re-use the same buffer and simply invoke fewer draw calls.
              this.highlightedItems.forEach((index, tgtIndex) => {
                  this.highlightedIdsArray[tgtIndex] = this.glGeomItems[index].geomItemId;
              });
              this.highlightedIdsBufferDirty = false;
          }
          return this.highlightedIdsArray;
      }
      // ////////////////////////////////////
      // Drawing
      /**
       * The draw method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          if (this.visibleItems.length == 0) {
              return;
          }
          if (this.drawIdsBufferDirty) {
              this.updateDrawIDsBuffer();
          }
          this.bindAndRender(renderstate, this.visibleItems, this.drawIdsBuffer);
      }
      /**
       * The drawHighlighted method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawHighlighted(renderstate) {
          if (this.highlightedItems.length == 0) {
              return;
          }
          if (this.highlightedIdsBufferDirty) {
              this.updateHighlightedIDsBuffer();
          }
          this.bindAndRender(renderstate, this.highlightedItems, this.highlightedIdsBuffer);
      }
      /**
       * The drawGeomData method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawGeomData(renderstate) {
          if (this.visibleItems.length == 0) {
              return;
          }
          if (this.drawIdsBufferDirty) {
              this.updateDrawIDsBuffer();
          }
          this.bindAndRender(renderstate, this.visibleItems, this.drawIdsBuffer);
      }
      bindAndRender(renderstate, itemIndices, drawIdsBuffer) {
          const gl = this.gl;
          const unifs = renderstate.unifs;
          // Lazy unbinding. We can have situations where we have many materials
          // all bound to the same geom. e.g. lots of billboards
          // We can avoid the expensive re-binding of geoms with a simple check.
          if (renderstate.glGeom != this.glGeom) {
              this.glGeom.bind(renderstate);
              renderstate.glGeom = this.glGeom;
          }
          if (!gl.floatTexturesSupported || !gl.drawElementsInstanced || !renderstate.supportsInstancing) {
              if (renderstate.unifs.instancedDraw) {
                  gl.uniform1i(renderstate.unifs.instancedDraw.location, 0);
              }
              itemIndices.forEach((index) => {
                  this.glGeomItems[index].bind(renderstate);
                  renderstate.bindViewports(unifs, () => {
                      this.glGeom.draw(renderstate);
                  });
              });
          }
          else {
              // console.log("draw:"+ this.drawIdsArray);
              // Specify an instanced draw to the shader so it knows how
              // to retrieve the modelmatrix.
              if (renderstate.unifs.instancedDraw) {
                  gl.uniform1i(renderstate.unifs.instancedDraw.location, 1);
              }
              // The instanced transform ids are bound as an instanced attribute.
              const location = renderstate.attrs.instancedIds.location;
              gl.enableVertexAttribArray(location);
              gl.bindBuffer(gl.ARRAY_BUFFER, drawIdsBuffer);
              gl.vertexAttribPointer(location, 1, gl.FLOAT, false, 1 * 4, 0);
              gl.vertexAttribDivisor(location, 1); // This makes it instanced
              renderstate.bindViewports(unifs, () => {
                  this.glGeom.drawInstanced(renderstate, itemIndices.length);
              });
          }
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          if (this.drawIdsBuffer) {
              this.gl.deleteBuffer(this.drawIdsBuffer);
              this.drawIdsBuffer = null;
          }
          if (this.highlightedIdsBuffer) {
              this.gl.deleteBuffer(this.highlightedIdsBuffer);
              this.highlightedIdsBuffer = null;
          }
          this.emit('destructing');
      }
  }

  var vert$a = "\nprecision highp float;\n#define GLSLIFY 1\nattribute vec3 positions;  //(location = 0)\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  v_texCoord = positions.xy+0.5;\n  gl_Position = vec4(positions.xy*2.0, -1.0, 1.0);\n}\n"; // eslint-disable-line

  var frag$9 = "\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D colorTexture;\nuniform sampler2D depthTexture;\nuniform vec2 screenSize;\n\nuniform float growth;\n\nvarying vec2 v_texCoord;\n\nbool sampleNeiPixel(vec2 fragCoord, inout vec4 res) {\n  res = texture2D(colorTexture, fragCoord/screenSize);\n  if (res.a > 0.0) {\n    return true;\n  }\n  return false;\n}\n\nvec4 samplePixels(vec2 fragCoord) {\n  vec4 res = vec4(0.0);\n  \n  if (sampleNeiPixel(fragCoord, res)) return res; // M\n  \n  // Search surrounding pixels for geoms\n  if (sampleNeiPixel(fragCoord+vec2( 1, 0), res)) return res; // E\n  if (sampleNeiPixel(fragCoord+vec2(-1, 0), res)) return res; // W\n  if (sampleNeiPixel(fragCoord+vec2( 0, 1), res)) return res; // N\n  if (sampleNeiPixel(fragCoord+vec2( 0,-1), res)) return res; // S\n  if (sampleNeiPixel(fragCoord+vec2( 1, 1), res)) return res; // NW\n  if (sampleNeiPixel(fragCoord+vec2(-1, 1), res)) return res; // NE\n  if (sampleNeiPixel(fragCoord+vec2( 1,-1), res)) return res; // SW\n  if (sampleNeiPixel(fragCoord+vec2(-1,-1), res)) return res; // SE\n  \n  return res;\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  fragColor = samplePixels(gl_FragCoord.xy);\n  if (fragColor.a < 0.0001) {\n    discard; \n  }\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n"; // eslint-disable-line

  /* eslint-disable require-jsdoc */
  class FattenLinesShader extends GLShader {
      /**
       * Create a GL shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'FattenLinesShader');
          this.setShaderStage('VERTEX_SHADER', vert$a);
          this.setShaderStage('FRAGMENT_SHADER', frag$9);
      }
  }

  const deepEquals = (arr0, arr1) => {
      return arr0.length == arr1.length && !arr0.some((v, index) => v != arr1[index]);
  };
  var GeomType;
  (function (GeomType) {
      GeomType[GeomType["TRIANGLES"] = 0] = "TRIANGLES";
      GeomType[GeomType["LINES"] = 1] = "LINES";
      GeomType[GeomType["POINTS"] = 2] = "POINTS";
  })(GeomType || (GeomType = {}));
  /** This class abstracts the rendering of a collection of geometries to screen.
   * @extends EventEmitter
   * @private
   */
  class GLGeomItemSetMultiDrawCompoundGeom extends EventEmitter {
      renderer;
      gl;
      glGeomItems = [];
      glGeomIdsMapping = {};
      glgeomItemEventHandlers = [];
      freeIndices = [];
      // protected visibleItems: GLGeomItem[] = []
      dirtyGeomItems = new Set();
      drawIdsBufferDirty = true;
      // protected drawCounts: Record<string, number> = {}
      drawIdsArraysAllocators = {};
      drawIdsArrays = {};
      drawIdsTextures = {};
      drawElementCounts = {};
      drawElementOffsets = {};
      drawOrderToIndex = [];
      indexToDrawIndex = [];
      // As transparent geometries are re-sorted, the allocations are moved around
      // This array stores the new start position of each geometries allocation.
      // Note: sorting is disabled untill we fix all remaining issues.
      // protected indexToOffsets: Record<string, number[]> = {}
      highlightedItems = {};
      highlightedIdsArraysAllocators = {};
      // protected highlightedDrawCounts: Record<string, number> = {}
      highlightElementCounts = {};
      highlightElementOffsets = {};
      highlightedIdsArray = {};
      highlightedIdsTextures = {};
      dirtyHighlightedGeomItems = new Set();
      highlightedIdsBufferDirty = true;
      linesGeomDataBuffer = null;
      fattenLinesShader = null;
      quad = null;
      fbo = null;
      /**
       * Create a GL geom item set.
       * @param {GLBaseRenderer} renderer - The renderer object.
       */
      constructor(renderer) {
          super();
          this.renderer = renderer;
          this.gl = renderer.gl;
          this.renderer.glGeomLibrary.on('geomDataChanged', (event) => {
              const geomItemIndices = this.glGeomIdsMapping[event.index];
              if (geomItemIndices != undefined) {
                  geomItemIndices.forEach((index) => {
                      this.dirtyGeomItems.add(index);
                      if (!this.drawIdsBufferDirty) {
                          this.drawIdsBufferDirty = true;
                          this.emit('updated');
                      }
                  });
              }
          });
      }
      addItemToHighlight(index, highlightName) {
          // Check to see if the highlight key contains
          // a subGeomIndex at the end separated by a ':'
          const subGeomIndexIndex = highlightName.indexOf(':');
          let subGeomIndices = [];
          if (subGeomIndexIndex != -1) {
              subGeomIndices = highlightName
                  .substring(subGeomIndexIndex + 1)
                  .split(',')
                  .map((v) => Number.parseInt(v));
          }
          // Note: highlightChanged is fired when the color changes
          // or another highlight is added over the top. We avoid
          // adding the same index again here. (TODO: use Set?)
          if (this.highlightedItems[index] && deepEquals(this.highlightedItems[index], subGeomIndices))
              return;
          this.highlightedItems[index] = subGeomIndices;
          this.highlightedIdsBufferDirty = true;
          this.emit('updated');
      }
      /**
       * The addGLGeomItem method.
       * @param {GLGeomItem} glGeomItem - The glGeomItem value.
       */
      addGLGeomItem(glGeomItem) {
          const index = this.freeIndices.length > 0 ? this.freeIndices.pop() : this.glGeomItems.length;
          const eventHandlers = {};
          // //////////////////////////////
          // Visibility
          if (glGeomItem.visible) {
              this.indexToDrawIndex[index] = this.drawOrderToIndex.length;
              this.drawOrderToIndex.push(index);
              this.dirtyGeomItems.add(index);
          }
          eventHandlers.visibilityChanged = (event) => {
              this.dirtyGeomItems.add(index);
              this.drawIdsBufferDirty = true;
              if (event.visible) {
                  // If the item is becoming visible for the firs time, we need to
                  // assign a drawOrder index.
                  const drawIndex = this.indexToDrawIndex[index];
                  if (drawIndex == undefined || drawIndex == -1) {
                      this.indexToDrawIndex[index] = this.drawOrderToIndex.length;
                      this.drawOrderToIndex.push(index);
                  }
              }
              this.emit('updated');
          };
          glGeomItem.on('visibilityChanged', eventHandlers.visibilityChanged);
          // //////////////////////////////
          // Highlighted
          if (glGeomItem.geomItem.isHighlighted()) {
              this.addItemToHighlight(index, glGeomItem.geomItem.getHighlightName());
          }
          eventHandlers.highlightChanged = (event) => {
              if (event && event.name) {
                  this.addItemToHighlight(index, event.name);
              }
              else {
                  delete this.highlightedItems[index];
                  // console.log("highlightChanged:", glGeomItem.geomItem.getName(), glGeomItem.geomItem.isHighlighted(), this.highlightedItems)
                  this.highlightedIdsBufferDirty = true;
                  this.emit('updated');
              }
          };
          glGeomItem.geomItem.on('highlightChanged', eventHandlers.highlightChanged);
          // //////////////////////////////
          // ShatterState
          eventHandlers.shatterStateChanged = (event) => {
              // const geomBuffers = this.renderer.glGeomLibrary.getGeomBuffers(glGeomItem.geomId)
              // if (geomBuffers.materials.length == 0)
              {
                  this.dirtyGeomItems.add(index);
                  this.drawIdsBufferDirty = true;
                  // We need the new GeomData Fbos written so we can
                  // detect these subgeoms.
                  this.renderer.renderGeomDataFbos();
              }
          };
          glGeomItem.on('shatterStateChanged', eventHandlers.shatterStateChanged);
          // //////////////////////////////
          // Geometry
          const geomParam = glGeomItem.geomItem.geomParam;
          let geom = geomParam.value;
          glGeomItem.geomId = this.renderer.glGeomLibrary.addGeom(geom);
          // Keep track of which geomitems use which geoms, so we can update the offset and count array if they change.
          if (!this.glGeomIdsMapping[glGeomItem.geomId]) {
              this.glGeomIdsMapping[glGeomItem.geomId] = [index];
          }
          else {
              this.glGeomIdsMapping[glGeomItem.geomId].push(index);
          }
          this.glGeomItems[index] = glGeomItem;
          this.glgeomItemEventHandlers[index] = eventHandlers;
          this.drawIdsBufferDirty = true;
          this.emit('updated');
      }
      /**
       * The removeGLGeomItem method.
       * @param {GLGeomItem} glGeomItem - The glGeomItem value.
       */
      removeGLGeomItem(glGeomItem) {
          const index = this.glGeomItems.indexOf(glGeomItem);
          const geomItemIndices = this.glGeomIdsMapping[glGeomItem.geomId];
          geomItemIndices.splice(geomItemIndices.indexOf(index), 1);
          if (geomItemIndices.length == 0) {
              delete this.glGeomIdsMapping[glGeomItem.geomId];
          }
          const geom = glGeomItem.geomItem.geomParam.value;
          this.renderer.glGeomLibrary.removeGeom(geom);
          const eventHandlers = this.glgeomItemEventHandlers[index];
          glGeomItem.geomItem.off('highlightChanged', eventHandlers.highlightChanged);
          glGeomItem.off('visibilityChanged', eventHandlers.visibilityChanged);
          this.glGeomItems[index] = null;
          this.glgeomItemEventHandlers[index] = null;
          this.freeIndices.push(index);
          if (this.dirtyGeomItems.has(index)) {
              this.dirtyGeomItems.delete(index);
          }
          // Clear any drawing allocations.
          for (let key in this.drawIdsArraysAllocators) {
              const prevAllocation = this.drawIdsArraysAllocators[key].getAllocation(index);
              if (prevAllocation) {
                  for (let i = 0; i < prevAllocation.size; i++) {
                      this.drawElementOffsets[key][prevAllocation.start + i] = 0;
                      this.drawElementCounts[key][prevAllocation.start + i] = 0;
                  }
                  this.drawIdsArraysAllocators[key].deallocate(index);
              }
          }
          if (glGeomItem.isVisible()) {
              const drawIndex = this.drawOrderToIndex.indexOf(index);
              this.drawOrderToIndex.splice(drawIndex, 1);
              this.indexToDrawIndex[index] = -1;
              this.drawIdsBufferDirty = true;
          }
          if (glGeomItem.geomItem.isHighlighted()) {
              delete this.highlightedItems[index];
              this.highlightedIdsBufferDirty = true;
          }
          this.emit('updated');
      }
      // ////////////////////////////////////
      // Draw Ids
      // ////////////////////////////////////
      // Instance Ids
      /**
       * The updateDrawIDsBuffer method.
       * @param {RenderState} renderstate - The object used to track state changes during rendering.
       */
      updateDrawIDsBuffer(renderstate) {
          this.dirtyGeomItems.forEach((index) => {
              const glGeomItem = this.glGeomItems[index];
              if (!glGeomItem)
                  return;
              // Note: culled geoms should still be allocated.
              // unculling/changing visiblity only changes the count value from zero to the actual value.
              {
                  const geom = this.renderer.glGeomLibrary.getGeom(glGeomItem.geomId);
                  const geomBuffers = geom.genBuffers();
                  // Here we calculate how many draws for each type of geometry, each
                  // compound goem needs. We then allocate the space we have specified.
                  let drawCounts = {};
                  if (glGeomItem.shattered) {
                      // for shattered geoms, we draw once for each subgeom for each element type
                      for (let key in geomBuffers.subGeomCounts) {
                          drawCounts[key] = geomBuffers.subGeomCounts[key].length;
                      }
                  }
                  else {
                      // for non-shattered geoms, we just draw once for each element type per GeomItem.
                      for (let key in geomBuffers.materialSubGeoms) {
                          drawCounts[key] = geomBuffers.materialSubGeoms[key].length;
                      }
                  }
                  for (let key in drawCounts) {
                      const drawCount = drawCounts[key];
                      let allocator = this.drawIdsArraysAllocators[key];
                      if (!allocator) {
                          allocator = new Allocator1D();
                          this.drawIdsArraysAllocators[key] = allocator;
                      }
                      else {
                          // This happens when an item drawing changes. e.g. it becomes shattered.
                          const prevAllocation = allocator.getAllocation(index);
                          if (prevAllocation) {
                              if (prevAllocation.size == drawCount)
                                  continue;
                              // Zero the previous allocation to remove any rendering.
                              for (let i = 0; i < prevAllocation.size; i++) {
                                  this.drawElementCounts[key][prevAllocation.start + i] = 0;
                              }
                          }
                      }
                      allocator.allocate(index, drawCount);
                  }
              }
          });
          for (let key in this.drawIdsArraysAllocators) {
              const allocator = this.drawIdsArraysAllocators[key];
              // Note: the - 1 here is to avoid an exception thrown on Safari if the offsets and counts are
              // exactly the size of the number of drawn items. (a bug in the validation).
              if (!this.drawElementCounts[key] || allocator.reservedSpace > this.drawElementCounts[key].length - 1) {
                  const drawIdsArray = new Float32Array(allocator.reservedSpace * 4); // one RGBA pixel per drawn geometry.
                  // Note: the +1 here is to avoid an exception thrown on Safari if the offsets and counts are
                  // exactly the size of the number of drawn items. (a bug in the validation).
                  const drawElementOffsets = new Int32Array(allocator.reservedSpace + 1);
                  const drawElementCounts = new Int32Array(allocator.reservedSpace + 1);
                  if (this.drawElementCounts[key]) {
                      drawIdsArray.set(this.drawIdsArrays[key], 0);
                      drawElementOffsets.set(this.drawElementOffsets[key], 0);
                      drawElementCounts.set(this.drawElementCounts[key], 0);
                  }
                  this.drawIdsArrays[key] = drawIdsArray;
                  this.drawElementOffsets[key] = drawElementOffsets;
                  this.drawElementCounts[key] = drawElementCounts;
              }
          }
          const elementSize = 4; //  Uint32Array for UNSIGNED_INT
          this.dirtyGeomItems.forEach((itemIndex) => {
              const glGeomItem = this.glGeomItems[itemIndex];
              if (!glGeomItem)
                  return;
              const offsetAndCount = this.renderer.glGeomLibrary.getGeomOffsetAndCount(glGeomItem.geomId);
              const geomBuffers = this.renderer.glGeomLibrary.getGeomBuffers(glGeomItem.geomId);
              // If an item is invisible, we allocate values, but set all count values to zero
              const visible = glGeomItem.isVisible();
              if (glGeomItem.shattered) {
                  let subIndex = 0;
                  const addSubGeoms = (offsets, counts, type) => {
                      const allocator = this.drawIdsArraysAllocators[type];
                      const drawIdsArray = this.drawIdsArrays[type];
                      const drawElementOffsets = this.drawElementOffsets[type];
                      const drawElementCounts = this.drawElementCounts[type];
                      const allocation = allocator.getAllocation(itemIndex);
                      if (!allocation)
                          return;
                      const materials = geomBuffers.materials;
                      // if (!this.indexToOffsets[type]) this.indexToOffsets[type] = []
                      // this.indexToOffsets[type][itemIndex] = allocation.start
                      for (let i = 0; i < offsets.length; i++) {
                          // The draw id within this element type. (e.g. TRIANGLES, LINES, POINTS)
                          const drawId = allocation.start + i;
                          drawElementOffsets[drawId] = offsetAndCount[0] + offsets[i] * elementSize;
                          drawElementCounts[drawId] = visible ? counts[i] : 0;
                          drawIdsArray[drawId * 4 + 0] = glGeomItem.geomItemId;
                          // Note: a zero value means no sub-geom was being drawn.
                          drawIdsArray[drawId * 4 + 1] = subIndex + 1;
                          // Note: subGeomMaterialIndices is Uint8Array, and 0 means no custom
                          // material is assigned to the subGeom.
                          // Subtract 1 to get the actual material id.
                          if (materials.length > 0 && geomBuffers.subGeomMaterialIndices[i] > 0) {
                              const materialId = geomBuffers.subGeomMaterialIndices[i] - 1;
                              const material = geomBuffers.materials[materialId];
                              const materialAddr = this.renderer.glMaterialLibrary.getMaterialAllocation(material);
                              drawIdsArray[drawId * 4 + 2] = materialAddr.start;
                          }
                          else {
                              drawIdsArray[drawId * 4 + 2] = 0.0;
                          }
                          drawIdsArray[drawId * 4 + 3] = 0; // spare
                          subIndex++;
                      }
                  };
                  addSubGeoms(geomBuffers.subGeomOffsets['TRIANGLES'], geomBuffers.subGeomCounts['TRIANGLES'], 'TRIANGLES');
                  addSubGeoms(geomBuffers.subGeomOffsets['LINES'], geomBuffers.subGeomCounts['LINES'], 'LINES');
                  addSubGeoms(geomBuffers.subGeomOffsets['POINTS'], geomBuffers.subGeomCounts['POINTS'], 'POINTS');
              }
              else {
                  const addSubGeoms = (subGeoms, type) => {
                      const allocator = this.drawIdsArraysAllocators[type];
                      const drawIdsArray = this.drawIdsArrays[type];
                      const drawElementOffsets = this.drawElementOffsets[type];
                      const drawElementCounts = this.drawElementCounts[type];
                      const allocation = allocator.getAllocation(itemIndex);
                      if (!allocation)
                          return;
                      const materials = geomBuffers.materials;
                      // if (!this.indexToOffsets[type]) this.indexToOffsets[type] = []
                      // this.indexToOffsets[type][itemIndex] = allocation.start
                      for (let i = 0; i < subGeoms.length; i++) {
                          const subGeom = subGeoms[i];
                          // The draw id within this element type. (e.g. TRIANGLES, LINES, POINTS)
                          const drawId = allocation.start + i;
                          drawElementOffsets[drawId] = offsetAndCount[0] + subGeom.offset * elementSize;
                          drawElementCounts[drawId] = visible ? subGeom.count : 0;
                          drawIdsArray[drawId * 4 + 0] = glGeomItem.geomItemId;
                          // Note: a zero value means no sub-geom was being drawn.
                          drawIdsArray[drawId * 4 + 1] = 0;
                          if (materials.length > 0 && subGeom.materialId >= 0 && geomBuffers.materials[subGeom.materialId]) {
                              const material = geomBuffers.materials[subGeom.materialId];
                              const materialAddr = this.renderer.glMaterialLibrary.getMaterialAllocation(material);
                              drawIdsArray[drawId * 4 + 2] = materialAddr.start;
                          }
                          else {
                              drawIdsArray[drawId * 4 + 2] = 0.0;
                          }
                          drawIdsArray[drawId * 4 + 3] = 0; // spare
                      }
                  };
                  for (let key in geomBuffers.materialSubGeoms) {
                      const allocator = this.drawIdsArraysAllocators[key];
                      const allocation = allocator.getAllocation(itemIndex);
                      if (!allocation)
                          continue;
                      const subGeoms = geomBuffers.materialSubGeoms[key];
                      addSubGeoms(subGeoms, key);
                  }
              }
          });
          const gl = this.renderer.gl;
          let regen = false;
          const updateDrawIdsTexture = (key) => {
              const drawIdsArray = this.drawIdsArrays[key];
              let drawIdsTexture = this.drawIdsTextures[key];
              const reservedSpaceDrawCount = this.drawIdsArraysAllocators[key].reservedSpace;
              const unit = renderstate.boundTextures++;
              gl.activeTexture(gl.TEXTURE0 + unit);
              const drawIdsTextureSize = MathFunctions.nextPow2(Math.ceil(Math.sqrt(reservedSpaceDrawCount)));
              if (!drawIdsTexture) {
                  drawIdsTexture = new GLTexture2D(this.gl, {
                      format: 'RGBA',
                      type: 'FLOAT',
                      width: drawIdsTextureSize,
                      height: drawIdsTextureSize,
                      filter: 'NEAREST',
                      wrap: 'CLAMP_TO_EDGE',
                      mipMapped: false,
                  });
                  this.drawIdsTextures[key] = drawIdsTexture;
                  regen = true;
              }
              else if (drawIdsTexture.width < drawIdsTextureSize || drawIdsTexture.height < drawIdsTextureSize) {
                  drawIdsTexture.resize(drawIdsTextureSize, drawIdsTextureSize);
                  for (let i = 0; i < this.drawOrderToIndex.length; i++)
                      this.dirtyGeomItems.add(i);
                  regen = true;
              }
              {
                  const tex = drawIdsTexture;
                  const texWidth = drawIdsTexture.width;
                  gl.bindTexture(gl.TEXTURE_2D, tex.glTex);
                  const level = 0;
                  const xoffset = 0;
                  const height = 1;
                  const format = tex.getFormat();
                  const type = tex.getType();
                  if (regen) {
                      const drawCount = this.drawIdsArraysAllocators[key].allocatedSpace;
                      const rows = Math.ceil((xoffset + drawCount) / texWidth);
                      let consumed = 0;
                      let remaining = drawCount;
                      let rowStart = xoffset;
                      for (let i = 0; i < rows; i++) {
                          let width;
                          if (rowStart + remaining > texWidth) {
                              width = texWidth - rowStart;
                              rowStart = 0;
                          }
                          else {
                              width = remaining;
                          }
                          const x = consumed % texWidth;
                          const y = Math.floor(consumed / texWidth);
                          const data = drawIdsArray.subarray(consumed * 4, (consumed + width) * 4);
                          if (data.length != width * 4) {
                              throw new Error('Invalid drawIds subarray :' + data.length + ' width:' + width);
                          }
                          gl.texSubImage2D(gl.TEXTURE_2D, level, x, y, width, height, format, type, data);
                          consumed += width;
                          remaining -= width;
                      }
                  }
                  else {
                      const allocator = this.drawIdsArraysAllocators[key];
                      this.dirtyGeomItems.forEach((itemIndex) => {
                          // const glGeomItem = this.glGeomItems[itemIndex]!
                          // if (!glGeomItem /* || !glGeomItem.isVisible()*/) return
                          const allocation = allocator.getAllocation(itemIndex);
                          if (!allocation)
                              return;
                          const start = allocation.start;
                          const drawCount = allocation.size;
                          const xoffset = start % texWidth;
                          const rows = Math.ceil((xoffset + drawCount) / texWidth);
                          let consumed = 0;
                          let remaining = drawCount;
                          let rowStart = xoffset;
                          for (let i = 0; i < rows; i++) {
                              let width;
                              if (rowStart + remaining > texWidth) {
                                  width = texWidth - rowStart;
                                  rowStart = 0;
                              }
                              else {
                                  width = remaining;
                              }
                              const x = (start + consumed) % texWidth;
                              const y = Math.floor((start + consumed) / texWidth);
                              const data = drawIdsArray.subarray((start + consumed) * 4, (start + consumed + width) * 4);
                              if (data.length != width * 4) {
                                  throw new Error('Invalid drawIds subarray :' + data.length + ' width:' + width);
                              }
                              gl.texSubImage2D(gl.TEXTURE_2D, level, x, y, width, height, format, type, data);
                              consumed += width;
                              remaining -= width;
                          }
                      });
                  }
              }
              gl.bindTexture(gl.TEXTURE_2D, null);
              renderstate.boundTextures--;
          };
          for (let key in this.drawIdsArrays) {
              // TODO: Only re-upload the dirty items.
              updateDrawIdsTexture(key);
          }
          this.dirtyGeomItems = new Set();
          this.drawIdsBufferDirty = false;
      }
      // ////////////////////////////////////
      // Selected Items
      /**
       * The updateHighlightedIDsBuffer method.
       * @param {RenderState} renderstate - The object used to track state changes during rendering.
       */
      updateHighlightedIDsBuffer(renderstate) {
          if (this.highlightedIdsBufferDirty) {
              // Clear all previous highlight buffers.
              // Note: we could considerably simplify the following code if we don't plan on
              // incrementally updating the highlight code.
              this.highlightedIdsArraysAllocators = {};
              this.highlightedIdsArray = {};
              this.highlightElementOffsets = {};
              this.highlightElementCounts = {};
              for (let key in this.highlightedItems) {
                  const index = Number.parseInt(key);
                  const subGeomIndices = this.highlightedItems[key];
                  const glGeomItem = this.glGeomItems[index];
                  const geomBuffers = this.renderer.glGeomLibrary.getGeomBuffers(glGeomItem.geomId);
                  let drawCounts = {
                      TRIANGLES: 0,
                      LINES: 0,
                      POINTS: 0,
                  };
                  if (subGeomIndices.length > 0) {
                      // for shattered geoms, we draw once for each subgeom for each element type
                      subGeomIndices.forEach((subGeomIndex) => {
                          if (subGeomIndex < geomBuffers.subGeomCounts['TRIANGLES'].length)
                              drawCounts['TRIANGLES'] += 1;
                          else {
                              const linesSubGeomIndex = subGeomIndex - geomBuffers.subGeomCounts['TRIANGLES'].length;
                              if (linesSubGeomIndex < geomBuffers.subGeomCounts['LINES'].length)
                                  drawCounts['LINES'] += 1;
                              else {
                                  const pointsSubGeomIndex = linesSubGeomIndex - geomBuffers.subGeomCounts['LINES'].length;
                                  if (pointsSubGeomIndex < geomBuffers.subGeomCounts['POINTS'].length)
                                      drawCounts['POINTS'] += 1;
                              }
                          }
                      });
                  }
                  else {
                      // for non-shattered geoms, we just draw once for each element type per GeomItem.
                      for (let key in geomBuffers.counts) {
                          if (geomBuffers.counts[key] > 0)
                              drawCounts[key] = 1;
                      }
                  }
                  for (let key in drawCounts) {
                      const drawCount = drawCounts[key];
                      if (drawCount == 0)
                          continue;
                      if (!this.highlightedIdsArraysAllocators[key]) {
                          this.highlightedIdsArraysAllocators[key] = new Allocator1D();
                      }
                      this.highlightedIdsArraysAllocators[key].allocate(index, drawCount);
                  }
              }
              // let regen = false
              for (let key in this.highlightedIdsArraysAllocators) {
                  const allocator = this.highlightedIdsArraysAllocators[key];
                  // Note: the - 1 here is to avoid an exception thrown on Safari if the offsets and counts are
                  // exactly the size of the number of drawn items. (a bug in the validation).
                  if (!this.highlightElementCounts[key] ||
                      allocator.reservedSpace > this.highlightElementCounts[key].length - 1) {
                      // if (this.highlightElementCounts[key] && allocator.reservedSpace > this.highlightElementCounts[key].length - 1) regen = true
                      this.highlightedIdsArray[key] = new Float32Array(allocator.reservedSpace * 4); // one RGBA pixel per drawn geometry.
                      // Note: the +1 here is to avoid an exception thrown on Safari if the offsets and counts are
                      // exactly the size of the number of drawn items. (a bug in the validation).
                      this.highlightElementOffsets[key] = new Int32Array(allocator.reservedSpace + 1);
                      this.highlightElementCounts[key] = new Int32Array(allocator.reservedSpace + 1);
                  }
              }
              const elementSize = 4; //  Uint32Array for UNSIGNED_INT
              for (let key in this.highlightedItems) {
                  const itemIndex = Number.parseInt(key);
                  const subGeomIndices = this.highlightedItems[key];
                  const glGeomItem = this.glGeomItems[itemIndex];
                  const offsetAndCount = this.renderer.glGeomLibrary.getGeomOffsetAndCount(glGeomItem.geomId);
                  const geomBuffers = this.renderer.glGeomLibrary.getGeomBuffers(glGeomItem.geomId);
                  if (subGeomIndices.length != 0) {
                      // let subIndex = 0
                      subGeomIndices.forEach((subGeomIndex, index) => {
                          const addSubGeom = (offsets, counts, type, subIndex) => {
                              const allocator = this.highlightedIdsArraysAllocators[type];
                              const drawIdsArray = this.highlightedIdsArray[type];
                              const drawElementOffsets = this.highlightElementOffsets[type];
                              const drawElementCounts = this.highlightElementCounts[type];
                              const allocation = allocator.getAllocation(itemIndex);
                              // for (let i = 0; i < offsets.length; i++) {
                              const drawId = allocation.start + index;
                              drawElementOffsets[drawId] = offsetAndCount[0] + offsets[subIndex] * elementSize;
                              drawElementCounts[drawId] = counts[subIndex];
                              drawIdsArray[drawId * 4 + 0] = glGeomItem.geomItemId;
                              drawIdsArray[drawId * 4 + 1] = subGeomIndex + 1;
                              drawIdsArray[drawId * 4 + 2] = 0.0; // materialId
                              drawIdsArray[drawId * 4 + 3] = 0.0; // spare
                          };
                          if (subGeomIndex < geomBuffers.subGeomCounts['TRIANGLES'].length) {
                              addSubGeom(geomBuffers.subGeomOffsets['TRIANGLES'], geomBuffers.subGeomCounts['TRIANGLES'], 'TRIANGLES', subGeomIndex);
                          }
                          else {
                              const linesSubGeomIndex = subGeomIndex - geomBuffers.subGeomCounts['TRIANGLES'].length;
                              if (linesSubGeomIndex < geomBuffers.subGeomCounts['LINES'].length) {
                                  addSubGeom(geomBuffers.subGeomOffsets['LINES'], geomBuffers.subGeomCounts['LINES'], 'LINES', linesSubGeomIndex);
                              }
                              else {
                                  const pointsSubGeomIndex = linesSubGeomIndex - geomBuffers.subGeomCounts['LINES'].length;
                                  if (pointsSubGeomIndex < geomBuffers.subGeomCounts['POINTS'].length) {
                                      addSubGeom(geomBuffers.subGeomOffsets['POINTS'], geomBuffers.subGeomCounts['POINTS'], 'POINTS', pointsSubGeomIndex);
                                  }
                              }
                          }
                      });
                  }
                  else {
                      for (let key in geomBuffers.offsets) {
                          const count = geomBuffers.counts[key];
                          if (count == 0)
                              continue;
                          const offset = geomBuffers.offsets[key];
                          const allocator = this.highlightedIdsArraysAllocators[key];
                          const allocation = allocator.getAllocation(itemIndex);
                          const drawId = allocation.start;
                          this.highlightElementOffsets[key][drawId] = offsetAndCount[0] + offset * elementSize;
                          this.highlightElementCounts[key][drawId] = count;
                          this.highlightedIdsArray[key][drawId * 4 + 0] = glGeomItem.geomItemId;
                      }
                  }
              }
              this.highlightedIdsBufferDirty = false;
          }
          const gl = this.renderer.gl;
          const updateDrawIdsTexture = (key) => {
              const drawIdsArray = this.highlightedIdsArray[key];
              if (!drawIdsArray || drawIdsArray.length == 0)
                  return;
              let drawIdsTexture = this.highlightedIdsTextures[key];
              const reservedSpaceDrawCount = this.highlightedIdsArraysAllocators[key].reservedSpace;
              const unit = renderstate.boundTextures++;
              gl.activeTexture(gl.TEXTURE0 + unit);
              const drawIdsTextureSize = MathFunctions.nextPow2(Math.ceil(Math.sqrt(reservedSpaceDrawCount)));
              if (!drawIdsTexture) {
                  drawIdsTexture = new GLTexture2D(this.gl, {
                      format: 'RGBA',
                      type: 'FLOAT',
                      width: drawIdsTextureSize,
                      height: drawIdsTextureSize,
                      filter: 'NEAREST',
                      wrap: 'CLAMP_TO_EDGE',
                      mipMapped: false,
                  });
                  this.highlightedIdsTextures[key] = drawIdsTexture;
              }
              else if (drawIdsTexture.width < drawIdsTextureSize || drawIdsTexture.height < drawIdsTextureSize) {
                  drawIdsTexture.resize(drawIdsTextureSize, drawIdsTextureSize);
              }
              {
                  const tex = drawIdsTexture;
                  const texWidth = drawIdsTexture.width;
                  gl.bindTexture(gl.TEXTURE_2D, tex.glTex);
                  const level = 0;
                  const xoffset = 0;
                  const height = 1;
                  const format = tex.getFormat();
                  const type = tex.getType();
                  const drawCount = this.highlightedIdsArraysAllocators[key].allocatedSpace;
                  const rows = Math.ceil((xoffset + drawCount) / texWidth);
                  let consumed = 0;
                  let remaining = drawCount;
                  let rowStart = xoffset;
                  for (let i = 0; i < rows; i++) {
                      let width;
                      if (rowStart + remaining > texWidth) {
                          width = texWidth - rowStart;
                          rowStart = 0;
                      }
                      else {
                          width = remaining;
                      }
                      const x = consumed % texWidth;
                      const y = Math.floor(consumed / texWidth);
                      const data = drawIdsArray.subarray(consumed * 4, (consumed + width) * 4);
                      if (data.length != width * 4) {
                          throw new Error('Invalid drawIds subarray :' + data.length + ' width:' + width);
                      }
                      gl.texSubImage2D(gl.TEXTURE_2D, level, x, y, width, height, format, type, data);
                      consumed += width;
                      remaining -= width;
                  }
              }
              gl.bindTexture(gl.TEXTURE_2D, null);
              renderstate.boundTextures--;
          };
          for (let key in this.highlightedIdsArray) {
              // TODO: Only re-upload the dirty items.
              updateDrawIdsTexture(key);
          }
      }
      // ////////////////////////////////////
      // Drawing
      /**
       * The draw method.
       * @param {RenderState} renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          if (this.drawOrderToIndex.length == 0) {
              return;
          }
          if (this.drawIdsBufferDirty) {
              this.updateDrawIDsBuffer(renderstate);
          }
          renderstate.pushGLStack('GLGeomItemSetMultiDrawCompoundGeom.draw');
          const drawIdsArray = this.drawIdsArrays;
          const counts = this.drawElementCounts;
          const offsets = this.drawElementOffsets;
          const drawIdsTextures = this.drawIdsTextures;
          const allocators = this.drawIdsArraysAllocators;
          const gl = this.gl;
          const unifs = renderstate.unifs;
          const depthFuncValue = gl.getParameter(gl.DEPTH_FUNC);
          const { drawIdsTexture, geomType, outlineThickness, viewportSize, occluded, renderMode } = renderstate.unifs;
          const renderModeValue = renderstate instanceof ColorRenderState && renderMode ? renderstate.renderMode : null;
          const drawEdges = renderModeValue != 'flat-noedges' && renderModeValue != 'shaded-noedges' && renderModeValue != 'pbr-noedges';
          const drawingOutlines = renderstate instanceof ColorRenderState &&
              outlineThickness &&
              viewportSize &&
              renderstate.outlineMethod == 'geometry' &&
              renderstate.outlineThickness > 0 &&
              drawEdges;
          const drawingWireframeOutlines = drawingOutlines && renderModeValue == 'wireframe';
          // @ts-ignore
          const drawingHiddenLines = 
          // @ts-ignore
          renderstate.hiddenLineColor &&
              // @ts-ignore
              renderstate.hiddenLineColor.a > 0 &&
              occluded;
          if (drawingWireframeOutlines) {
              gl.enable(gl.STENCIL_TEST);
              gl.clearStencil(0);
              gl.clear(gl.STENCIL_BUFFER_BIT);
              gl.stencilOpSeparate(gl.FRONT, gl.DECR_WRAP, gl.DECR_WRAP, gl.DECR_WRAP);
              gl.stencilOpSeparate(gl.BACK, gl.INCR_WRAP, gl.INCR_WRAP, gl.INCR_WRAP);
              gl.stencilFunc(gl.ALWAYS, 0, 0xff);
              gl.enable(gl.CULL_FACE);
              gl.cullFace(gl.BACK);
              gl.disable(gl.DEPTH_TEST);
              gl.depthMask(false);
              gl.colorMask(false, false, false, false);
          }
          else if (renderModeValue == 'hiddenline') {
              // don't render surfaces. But render alpha channel
              gl.colorMask(false, false, false, true);
          }
          else {
              // Compound Geoms should always be rendered double sided
              // so we can correctly render cutting planes.
              // Note: We needed this because the FlatSurfaceShader turns on culling
              // when it unbinds which then affects the rendering of other items like this.
              // An issue is logged to clean this up.
              // https://github.com/ZeaInc/zea-engine/issues/699
              gl.disable(gl.CULL_FACE);
          }
          if (drawIdsArray['TRIANGLES'] && allocators['TRIANGLES'].allocatedSpace > 0) {
              drawIdsTextures['TRIANGLES'].bindToUniform(renderstate, drawIdsTexture);
              if (geomType)
                  gl.uniform1i(geomType.location, GeomType.TRIANGLES);
              // Always zero this value before drawing the faces, else the shader could think its drawing the outline.
              if (outlineThickness) {
                  gl.uniform1f(outlineThickness.location, 0);
              }
              renderstate.bindViewports(unifs, () => {
                  this.multiDrawMeshes(renderstate, counts['TRIANGLES'], offsets['TRIANGLES'], allocators['TRIANGLES'].allocatedSpace);
              });
              if (drawingOutlines) {
                  // Only draw font faces. BEcause all faces are drawn, it can make a mess to see the back faces through the front faces.
                  // e.g. we might see the triangles on the other side of a sphere rendered over the top of triangles on the near side.
                  gl.enable(gl.CULL_FACE);
                  gl.cullFace(gl.FRONT);
                  gl.uniform1f(outlineThickness.location, this.renderer.outlineThickness * window.devicePixelRatio);
                  gl.uniform2f(viewportSize.location, renderstate.region[2] - renderstate.region[0], renderstate.region[3] - renderstate.region[1]);
                  if (renderModeValue == 'hiddenline') {
                      // start rendering surfaces again
                      gl.colorMask(true, true, true, true);
                  }
                  if (!drawingWireframeOutlines) {
                      renderstate.glEnable(gl.BLEND);
                      gl.blendEquation(gl.FUNC_ADD);
                      gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);
                  }
                  renderstate.bindViewports(unifs, () => {
                      this.multiDrawMeshes(renderstate, counts['TRIANGLES'], offsets['TRIANGLES'], allocators['TRIANGLES'].allocatedSpace);
                  });
                  gl.disable(gl.CULL_FACE);
                  gl.cullFace(gl.BACK);
                  if (drawingWireframeOutlines) {
                      gl.enable(gl.DEPTH_TEST);
                      gl.depthMask(true);
                      gl.colorMask(true, true, true, true);
                      gl.stencilFunc(gl.NOTEQUAL, 0x0, 0xff);
                      gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
                      {
                          renderstate.glEnable(gl.BLEND);
                          gl.blendEquation(gl.FUNC_ADD);
                          gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);
                      }
                      // cache the previously bound shader.
                      const shader = renderstate.glShader;
                      const shaderKey = renderstate.shaderkey;
                      const screenQuad = this.renderer.screenQuad;
                      screenQuad.bindShader(renderstate);
                      screenQuad.draw(renderstate, this.renderer.outlineColor);
                      // Re-bind the previously bound geomdata shader.
                      shader.bind(renderstate, shaderKey);
                      this.renderer.glGeomItemLibrary.bind(renderstate);
                      this.renderer.glGeomLibrary.bind(renderstate);
                      this.renderer.glMaterialLibrary.bind(renderstate);
                      gl.disable(gl.STENCIL_TEST);
                  }
              }
              else {
                  renderstate.glEnable(gl.BLEND);
                  gl.blendEquation(gl.FUNC_ADD);
                  gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);
              }
          }
          if (drawEdges && drawIdsArray['LINES'] && allocators['LINES'].allocatedSpace > 0) {
              drawIdsTextures['LINES'].bindToUniform(renderstate, drawIdsTexture);
              if (geomType)
                  gl.uniform1i(geomType.location, GeomType.LINES);
              renderstate.bindViewports(unifs, () => {
                  this.multiDrawLines(renderstate, counts['LINES'], offsets['LINES'], allocators['LINES'].allocatedSpace);
              });
              if (drawingHiddenLines) {
                  const { hiddenLineColor } = renderstate.unifs;
                  gl.uniform1i(occluded.location, 1);
                  // @ts-ignore
                  gl.uniform4fv(hiddenLineColor.location, renderstate.hiddenLineColor.asArray());
                  gl.depthFunc(gl.GREATER);
                  gl.depthMask(false);
                  renderstate.bindViewports(unifs, () => {
                      this.multiDrawLines(renderstate, counts['LINES'], offsets['LINES'], allocators['LINES'].allocatedSpace);
                  });
                  // Restore defaults.
                  gl.depthFunc(depthFuncValue);
                  gl.depthMask(true);
                  gl.uniform1i(occluded.location, 0);
              }
          }
          if (drawIdsArray['POINTS'] && allocators['POINTS'].allocatedSpace > 0) {
              drawIdsTextures['POINTS'].bindToUniform(renderstate, drawIdsTexture);
              if (geomType)
                  gl.uniform1i(geomType.location, GeomType.POINTS);
              renderstate.bindViewports(unifs, () => {
                  this.multiDrawPoints(renderstate, counts['POINTS'], offsets['POINTS'], allocators['POINTS'].allocatedSpace);
              });
              if (drawingHiddenLines) {
                  const { hiddenLineColor } = renderstate.unifs;
                  gl.uniform1i(occluded.location, 1);
                  // @ts-ignore
                  gl.uniform4fv(hiddenLineColor.location, renderstate.hiddenLineColor.asArray());
                  gl.depthFunc(gl.GREATER);
                  gl.depthMask(false);
                  renderstate.bindViewports(unifs, () => {
                      this.multiDrawPoints(renderstate, counts['POINTS'], offsets['POINTS'], allocators['POINTS'].allocatedSpace);
                  });
                  gl.depthFunc(depthFuncValue);
                  gl.depthMask(true);
                  gl.uniform1i(occluded.location, 0);
              }
          }
          // Reset to drawing triangles in case the shader is used
          // to draw a regular mesh next.
          if (geomType)
              gl.uniform1i(geomType.location, 0);
          renderstate.popGLStack();
      }
      /**
       * The drawGeomData method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawGeomData(renderstate) {
          if (this.drawIdsBufferDirty) {
              this.updateDrawIDsBuffer(renderstate);
          }
          renderstate.pushGLStack('GLGeomItemSetMultiDrawCompoundGeom.drawGeomData');
          const gl = this.renderer.gl;
          const unifs = renderstate.unifs;
          const { drawIdsTexture, geomType } = unifs;
          const counts = this.drawElementCounts;
          const offsets = this.drawElementOffsets;
          const drawIdsTextures = this.drawIdsTextures;
          const allocators = this.drawIdsArraysAllocators;
          const drawIdsArray = this.drawIdsArrays;
          if (this.renderer.renderMode != 'wireframe') {
              renderstate.bindViewports(unifs, () => {
                  if (drawIdsArray['TRIANGLES'] && allocators['TRIANGLES'].allocatedSpace > 0) {
                      drawIdsTextures['TRIANGLES'].bindToUniform(renderstate, drawIdsTexture);
                      if (geomType)
                          gl.uniform1i(geomType.location, GeomType.TRIANGLES);
                      this.multiDrawMeshes(renderstate, counts['TRIANGLES'], offsets['TRIANGLES'], allocators['TRIANGLES'].allocatedSpace);
                  }
              });
          }
          //  Note: lines in VR are not fattened...
          const enableLineFattening = true;
          if (renderstate.geomDataFbo && enableLineFattening) {
              if (!this.linesGeomDataBuffer) {
                  this.linesGeomDataBuffer = new GLTexture2D(gl, {
                      type: this.renderer.floatGeomBuffer ? 'FLOAT' : 'UNSIGNED_BYTE',
                      format: 'RGBA',
                      filter: 'NEAREST',
                      width: 1,
                      height: 2,
                  });
                  this.fattenLinesShader = new FattenLinesShader(gl);
                  this.quad = new GLMesh(gl, new Plane(1, 1));
              }
              const geomDataFbo = renderstate.geomDataFbo;
              const width = geomDataFbo.width;
              const height = geomDataFbo.height;
              if (this.linesGeomDataBuffer.width != width || this.linesGeomDataBuffer.height != height) {
                  if (this.fbo) {
                      gl.deleteFramebuffer(this.fbo);
                      this.fbo = null;
                  }
                  this.linesGeomDataBuffer.resize(width, height);
                  this.fbo = gl.createFramebuffer();
                  const colorTex = this.linesGeomDataBuffer.glTex;
                  const depthBuffer = geomDataFbo.depthTexture; // Share the existing depth buffer.
                  if (gl.name == 'webgl2') {
                      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.fbo);
                      gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, colorTex, 0);
                      gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthBuffer, 0);
                  }
                  else {
                      gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);
                      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, colorTex, 0);
                      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthBuffer, 0);
                  }
                  checkFramebuffer(gl, width, height);
              }
              else {
                  if (gl.name == 'webgl2')
                      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.fbo);
                  else
                      gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);
              }
              gl.colorMask(true, true, true, true);
              gl.clearColor(0, 0, 0, 0);
              gl.clear(gl.COLOR_BUFFER_BIT); // do not clear depth
          }
          renderstate.bindViewports(unifs, () => {
              if (drawIdsArray['LINES'] && allocators['LINES'].allocatedSpace > 0) {
                  drawIdsTextures['LINES'].bindToUniform(renderstate, drawIdsTexture);
                  if (geomType)
                      gl.uniform1i(geomType.location, GeomType.LINES);
                  // When debugging the lines geomdata buffer, we can enable this line to make lines draw yellow.
                  // const { passId } = renderstate.unifs
                  // if (passId) {
                  //   gl.uniform1i(passId.location, 99)
                  // }
                  this.multiDrawLines(renderstate, counts['LINES'], offsets['LINES'], allocators['LINES'].allocatedSpace);
              }
              if (drawIdsArray['POINTS'] && allocators['POINTS'].allocatedSpace > 0) {
                  drawIdsTextures['POINTS'].bindToUniform(renderstate, drawIdsTexture);
                  if (geomType)
                      gl.uniform1i(geomType.location, GeomType.POINTS);
                  this.multiDrawPoints(renderstate, counts['POINTS'], offsets['POINTS'], allocators['POINTS'].allocatedSpace);
              }
          });
          if (this.linesGeomDataBuffer && renderstate.geomDataFbo && enableLineFattening) {
              renderstate.boundRendertarget = null;
              renderstate.geomDataFbo.bindForWriting(renderstate);
              // cache the previously bound shader.
              const geomDataShader = renderstate.glShader;
              const geomDataShaderKey = renderstate.shaderkey;
              this.fattenLinesShader.bind(renderstate);
              gl.disable(gl.DEPTH_TEST);
              const { colorTexture, screenSize } = renderstate.unifs;
              this.linesGeomDataBuffer.bindToUniform(renderstate, colorTexture);
              const geomDataFbo = renderstate.geomDataFbo;
              gl.uniform2f(screenSize.location, geomDataFbo.width, geomDataFbo.height);
              this.quad.bindAndDraw(renderstate);
              gl.enable(gl.DEPTH_TEST);
              // Re-bind the previously bound geomdata shader.
              geomDataShader.bind(renderstate, geomDataShaderKey);
              this.renderer.glGeomItemLibrary.bind(renderstate);
              this.renderer.glGeomLibrary.bind(renderstate);
              this.renderer.glMaterialLibrary.bind(renderstate);
          }
          renderstate.popGLStack();
      }
      /**
       * The drawHighlighted method.
       * @param {HighlightRenderState} renderstate - The object tracking the current state of the renderer
       */
      drawHighlighted(renderstate) {
          if (Object.keys(this.highlightedItems).length == 0) {
              return;
          }
          if (this.highlightedIdsBufferDirty) {
              this.updateHighlightedIDsBuffer(renderstate);
          }
          renderstate.pushGLStack('GLGeomItemSetMultiDrawCompoundGeom.drawHighlighted');
          const drawIdsArray = this.highlightedIdsArray;
          const counts = this.highlightElementCounts;
          const offsets = this.highlightElementOffsets;
          const drawIdsTextures = this.highlightedIdsTextures;
          const allocators = this.highlightedIdsArraysAllocators;
          const unifs = renderstate.unifs;
          const gl = this.renderer.gl;
          // Compound Geoms should always be rendered double sided
          // so we can correctly render cutting planes.
          // Note: We needed this because the FlatSurfaceShader turns on culling
          // when it unbinds which then affects the rendering of other items like this.
          // An issue is logged to clean this up.
          // https://github.com/ZeaInc/zea-engine/issues/699
          renderstate.glDisable(gl.CULL_FACE);
          const { drawIdsTexture, geomType } = renderstate.unifs;
          renderstate.bindViewports(unifs, () => {
              if (drawIdsArray['TRIANGLES'] && allocators['TRIANGLES'].allocatedSpace > 0) {
                  drawIdsTextures['TRIANGLES'].bindToUniform(renderstate, drawIdsTexture);
                  if (geomType)
                      gl.uniform1i(geomType.location, GeomType.TRIANGLES);
                  this.multiDrawMeshes(renderstate, counts['TRIANGLES'], offsets['TRIANGLES'], allocators['TRIANGLES'].allocatedSpace);
              }
              if (drawIdsArray['LINES'] && allocators['LINES'].allocatedSpace > 0) {
                  drawIdsTextures['LINES'].bindToUniform(renderstate, drawIdsTexture);
                  if (geomType)
                      gl.uniform1i(geomType.location, GeomType.LINES);
                  this.multiDrawLines(renderstate, counts['LINES'], offsets['LINES'], allocators['LINES'].allocatedSpace);
              }
              if (drawIdsArray['POINTS'] && allocators['POINTS'].allocatedSpace > 0) {
                  drawIdsTextures['POINTS'].bindToUniform(renderstate, drawIdsTexture);
                  if (geomType)
                      gl.uniform1i(geomType.location, GeomType.POINTS);
                  this.multiDrawPoints(renderstate, counts['POINTS'], offsets['POINTS'], allocators['POINTS'].allocatedSpace);
              }
          });
          // Reset to drawing triangles in case the shader is used
          // to draw a regular mesh next.
          if (geomType)
              gl.uniform1i(geomType.location, 0);
          renderstate.popGLStack();
      }
      multiDrawMeshes(renderstate, counts, offsets, drawCount) {
          const gl = this.gl;
          if (gl.multiDrawElements) {
              gl.multiDrawElements(gl.TRIANGLES, counts, 0, gl.UNSIGNED_INT, offsets, 0, drawCount);
          }
          else {
              const { drawId } = renderstate.unifs;
              for (let i = 0; i < drawCount; i++) {
                  gl.uniform1i(drawId.location, i);
                  gl.drawElements(gl.TRIANGLES, counts[i], gl.UNSIGNED_INT, offsets[i]);
              }
          }
      }
      multiDrawLines(renderstate, counts, offsets, drawCount) {
          const gl = this.gl;
          if (gl.multiDrawElements) {
              gl.multiDrawElements(gl.LINES, counts, 0, gl.UNSIGNED_INT, offsets, 0, drawCount);
          }
          else {
              const { drawId } = renderstate.unifs;
              for (let i = 0; i < drawCount; i++) {
                  gl.uniform1i(drawId.location, i);
                  gl.drawElements(gl.LINES, counts[i], gl.UNSIGNED_INT, offsets[i]);
              }
          }
      }
      multiDrawPoints(renderstate, counts, offsets, drawCount) {
          const gl = this.gl;
          if (gl.multiDrawElements) {
              gl.multiDrawElements(gl.POINTS, counts, 0, gl.UNSIGNED_INT, offsets, 0, drawCount);
          }
          else {
              const { drawId } = renderstate.unifs;
              for (let i = 0; i < drawCount; i++) {
                  gl.uniform1i(drawId.location, i);
                  gl.drawElements(gl.POINTS, counts[i], gl.UNSIGNED_INT, offsets[i]);
              }
          }
      }
      // /**
      //  * Draw an item to screen.
      //  * @param {RenderState} renderstate - The object tracking the current state of the renderer
      //  * @param {Float32Array} drawIds - the draw id for each element drawn in by this draw call.
      //  * @param {Int32Array} counts - the geom element count for each element drawn in by this draw call.
      //  * @param {Int32Array} offsets - the geom element offset for each element drawn in by this draw call.
      //  * @param {number} drawCount - the number of active draw calls for this invocation
      //  */
      // abstract multiDraw(
      //   renderstate: RenderState,
      //   drawIds: Float32Array,
      //   counts: Int32Array,
      //   offsets: Int32Array,
      //   drawCount: number
      // ): void
      /**
       * Sorts the drawn items in order furthest to nearest when rendering transparent objects.
       * @param {Vec3} viewPos - The position of the camera that we are sorting relative to.
       */
      sortItems(viewPos) {
          if (this.drawIdsBufferDirty) {
              return;
          }
          // The sorting breaks the tellescope dataset is strange ways.
          // disabling for now.
          return;
          /*
          const distances: Float32Array = new Float32Array(this.drawOrderToIndex.length)
          this.drawOrderToIndex.forEach((itemIndex) => {
            const glGeomItem = this.glGeomItems[itemIndex]
            if (glGeomItem) {
              const bbox = glGeomItem.geomItem.boundingBoxParam.value
              // Calculate the disance to the surface of the bounding sphere.
              // TODO: calculate the distance the nearest point on the bounding box.
              const center = bbox.center()
              const size = bbox.size()
              const dist = center.distanceTo(viewPos) - size
      
              distances[itemIndex] = dist
            }
          })
          this.drawOrderToIndex.sort((a, b) => distances[b] - distances[a])
      
          // Now we re-create the drawElementCounts arrays according to the order of the drawn GLGeomItems.
          // Note: We draw the TRIANGLES, then LINES, then POINTS. We can't draw lines behind transparent geoms.
          // We could simply not bother sorting the lines and points.
          const gl = this.gl
          const drawElementCounts: Record<string, Int32Array> = {}
          const drawElementOffsets: Record<string, Int32Array> = {}
          if (this.drawElementCounts.TRIANGLES) {
            drawElementCounts.TRIANGLES = new Int32Array(this.drawElementCounts.TRIANGLES.length + 1)
            drawElementOffsets.TRIANGLES = new Int32Array(this.drawElementOffsets.TRIANGLES.length + 1)
          }
          if (this.drawElementCounts.TRIANGLES) {
            drawElementCounts.LINES = new Int32Array(this.drawElementCounts.LINES.length + 1)
            drawElementOffsets.LINES = new Int32Array(this.drawElementOffsets.LINES.length + 1)
          }
          if (this.drawElementCounts.POINTS) {
            drawElementCounts.POINTS = new Int32Array(this.drawElementCounts.POINTS.length + 1)
            drawElementOffsets.POINTS = new Int32Array(this.drawElementOffsets.POINTS.length + 1)
          }
      
          const drawOffsets: Record<string, number> = {
            TRIANGLES: 0,
            LINES: 0,
            POINTS: 0,
          }
          const elementSize = 4 //  Uint32Array for UNSIGNED_INT
          this.drawOrderToIndex.forEach((itemIndex, drawIndex) => {
            const glGeomItem = this.glGeomItems[itemIndex]
            if (glGeomItem) {
              for (let key in this.drawIdsArraysAllocators) {
                const drawOffset = drawOffsets[key]
                const allocation = this.drawIdsArraysAllocators[key].getAllocation(itemIndex)
                if (!allocation) continue
      
                const geomBuffers = this.renderer.glGeomLibrary.getGeomBuffers(glGeomItem.geomId)
                const offsetAndCount = this.renderer.glGeomLibrary.getGeomOffsetAndCount(glGeomItem.geomId)
                if (allocation.size > 1) {
                  for (let i = 0; i < allocation.size; i++) {
                    const drawId = drawOffset + i
                    drawElementCounts[key][drawId] = glGeomItem.culled ? 0 : geomBuffers.subGeomCounts[key][i]
                    drawElementOffsets[key][drawId] = offsetAndCount[0] + geomBuffers.offsets[key] * elementSize
                  }
                } else {
                  drawElementCounts[key][drawOffset] = glGeomItem.culled ? 0 : geomBuffers.counts[key]
                  drawElementOffsets[key][drawOffset] = offsetAndCount[0] + geomBuffers.offsets[key] * elementSize
                }
                if (!this.indexToOffsets[key]) this.indexToOffsets[key] = []
                this.indexToOffsets[key][itemIndex] = drawOffset
      
                ////////////////////////////////////////
                //
                const drawIdsArray = this.drawIdsArrays[key]
                let drawIdsTexture = this.drawIdsTextures[key]
                const tex = drawIdsTexture
                const texWidth = drawIdsTexture.width
                gl.bindTexture(gl.TEXTURE_2D, tex.glTex)
                const level = 0
                const height = 1
                const format = tex.getFormat()
                const type = tex.getType()
      
                const startSrc = allocation.start
                const startTgt = drawOffset
                const drawCount = allocation.size
      
                const xoffset = startTgt % texWidth
                const rows = Math.ceil((xoffset + drawCount) / texWidth)
                let consumed = 0
                let remaining = drawCount
                let rowStart = xoffset
                for (let i = 0; i < rows; i++) {
                  let width
                  if (rowStart + remaining > texWidth) {
                    width = texWidth - rowStart
                    rowStart = 0
                  } else {
                    width = remaining
                  }
                  const x = (startTgt + consumed) % texWidth
                  const y = Math.floor((startTgt + consumed) / texWidth)
                  const data = drawIdsArray.subarray((startSrc + consumed) * 4, (startSrc + consumed + width) * 4)
                  if (data.length != width * 4) {
                    throw new Error('Invalid drawIds subarray :' + data.length + ' width:' + width)
                  }
                  gl.texSubImage2D(gl.TEXTURE_2D, level, x, y, width, height, format, type, data)
      
                  consumed += width
                  remaining -= width
                }
                drawOffsets[key] += allocation.size
              }
              this.indexToDrawIndex[itemIndex] = drawIndex
            }
          })
          this.drawElementCounts = drawElementCounts
          this.drawElementOffsets = drawElementOffsets
      
          gl.bindTexture(gl.TEXTURE_2D, null)
          */
      }
      /**
       * The destroy is called by the system to cause explicit resources cleanup.
       * Users should never need to call this method directly.
       */
      destroy() {
          for (let key in this.drawIdsTextures) {
              this.drawIdsTextures[key].destroy();
          }
          for (let key in this.highlightedIdsTextures) {
              this.highlightedIdsTextures[key].destroy();
          }
          this.emit('destructing');
      }
  }

  /* eslint-disable guard-for-in */
  /** Class representing GL shader materials.
   * @private
   */
  class GLShaderGeomSets extends EventEmitter {
      renderer;
      gl;
      glShader;
      glGeomItemSets = {};
      /**
       * Create a GL shader material.
       * @param pass - The pass that owns this object.
       * @param gl - The glShader value.
       * @param shaders - The shader value.
       */
      constructor(renderer, gl, glShader) {
          super();
          this.renderer = renderer;
          this.gl = gl;
          this.glShader = glShader;
      }
      /**
       * Given a GeomItem, constructs the GLGeomItemSet that handles drawing that type of geometry.
       * @param geom - The geomitem value.
       * @return - The return value.
       * */
      getOrCreateGLGeomItemSet(geom) {
          let glGeomItemSet;
          if (geom instanceof CompoundGeom) {
              if (this.glGeomItemSets['CompoundGeom'])
                  return this.glGeomItemSets['CompoundGeom'];
              glGeomItemSet = new GLGeomItemSetMultiDrawCompoundGeom(this.renderer);
              this.glGeomItemSets['CompoundGeom'] = glGeomItemSet;
          }
          else if (geom instanceof Mesh || geom instanceof MeshProxy) {
              if (this.glGeomItemSets['GLMesh'])
                  return this.glGeomItemSets['GLMesh'];
              glGeomItemSet = new GLMeshItemSet(this.renderer);
              this.glGeomItemSets['GLMesh'] = glGeomItemSet;
          }
          else if (geom instanceof Lines || geom instanceof LinesProxy) {
              if (this.glGeomItemSets['GLLines'])
                  return this.glGeomItemSets['GLLines'];
              glGeomItemSet = new GLLinesItemSet(this.renderer);
              this.glGeomItemSets['GLLines'] = glGeomItemSet;
          }
          else if (geom instanceof Points || geom instanceof PointsProxy) {
              if (this.glGeomItemSets['GLPoints'])
                  return this.glGeomItemSets['GLPoints'];
              glGeomItemSet = new GLPointsItemSet(this.renderer);
              this.glGeomItemSets['GLPoints'] = glGeomItemSet;
          }
          else {
              throw new Error('Unsupported geom type:' + geom.constructor.name);
          }
          glGeomItemSet.on('updated', () => {
              this.emit('updated');
          });
          return glGeomItemSet;
      }
      /**
       * The addGLGeomItem method.
       * @param glGeomItem - The glGeomItem value.
       */
      addGLGeomItem(glGeomItem) {
          const geom = glGeomItem.geomItem.geomParam.value;
          const glGeomItemSet = this.getOrCreateGLGeomItemSet(geom);
          glGeomItem.GLGeomItemSet = glGeomItemSet;
          glGeomItemSet.addGLGeomItem(glGeomItem);
      }
      /**
       *  Called by the GLPass to remove an item from this GLShaderGeomSets object.
       * @param glGeomItem - The glGeomItem value.
       */
      removeGLGeomItem(glGeomItem) {
          const glGeomItemSet = glGeomItem.GLGeomItemSet;
          glGeomItemSet.removeGLGeomItem(glGeomItem);
          glGeomItem.GLGeomItemSet = null;
      }
      /**
       * Binds one of its shaders for rendering, and also the other textures and values needed.
       * @param glShader - The shader to bind
       * @param renderstate - The render state for the current draw traversal
       * @param key - The key to use to cache the shader binding.
       * @private
       */
      bindShader(glShader, renderstate, key) {
          const gl = this.gl;
          // to force the re-compliation of a shader with different
          // directives, we supply a different key.
          if (!glShader.isCompiledForTarget(key)) {
              if (gl.multiDrawElements) {
                  renderstate.directives.push('#define ENABLE_MULTI_DRAW\n#extension GL_ANGLE_multi_draw : enable');
              }
              else {
                  renderstate.directives.push('#define ENABLE_MULTI_DRAW');
              }
              glShader.compileForTarget(key, renderstate.directives);
              renderstate.directives.pop();
          }
          if (!glShader.bind(renderstate, key)) {
              throw new Error('Unable to bind shader:' + glShader);
          }
          this.renderer.glGeomItemLibrary.bind(renderstate);
          this.renderer.glGeomLibrary.bind(renderstate);
          this.renderer.glMaterialLibrary.bind(renderstate);
      }
      /**
       * Draws all elements, binding the shader and continuing into the GLGLGeomSetGeomItemSets
       * @param renderstate - The render state for the current draw traversal
       */
      draw(renderstate) {
          this.bindShader(this.glShader, renderstate, 'multidraw-draw');
          for (const elementType in this.glGeomItemSets) {
              this.glGeomItemSets[elementType].draw(renderstate);
          }
          this.glShader.unbind(renderstate);
      }
      /**
       * The drawHighlightedGeoms method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawHighlightedGeoms(renderstate) {
          this.bindShader(this.glShader, renderstate, 'multidraw-highlight');
          for (const elementType in this.glGeomItemSets) {
              this.glGeomItemSets[elementType].drawHighlighted(renderstate);
          }
          this.glShader.unbind(renderstate);
      }
      /**
       * The drawGeomData method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawGeomData(renderstate) {
          this.bindShader(this.glShader, renderstate, 'multidraw-geomdata');
          const gl = renderstate.gl;
          const { passId } = renderstate.unifs;
          if (passId) {
              gl.uniform1i(passId.location, renderstate.passIndex);
          }
          for (const elementType in this.glGeomItemSets) {
              this.glGeomItemSets[elementType].drawGeomData(renderstate);
          }
          this.glShader.unbind(renderstate);
      }
      /**
       * Sorts the drawn items in order furthest to nearest when rendering transparent objects.
       * @param viewPos - The position of the camera that we are sorting relative to.
       */
      sortItems(viewPos) {
          // Note: sorting here will not sort geometries of different types.
          // this is a flawed solution that only sorts geomemtries of the same
          // time and same shader against each other. Given that this is the data 99% o
          // of the time, this is an acceptable tradeoff
          for (const elementType in this.glGeomItemSets) {
              this.glGeomItemSets[elementType].sortItems(viewPos);
          }
      }
  }

  /* eslint-disable guard-for-in */
  /** Class representing GL material geom item sets.
   * @private
   */
  class GLMaterialGeomItemSets extends EventEmitter {
      pass;
      gl;
      glMaterial;
      glGeomItemSets = new Map();
      listenerIds = {};
      drawCount = 0;
      /**
       * Create a GL material geom item set.
       * @param pass - The pass that owns the GLMaterialGeomItemSets.
       * @param glMaterial - The glMaterial value.
       */
      constructor(pass, glMaterial) {
          super();
          this.pass = pass;
          this.gl = pass.renderer.gl;
          if (glMaterial) {
              this.glMaterial = glMaterial;
              const material = glMaterial.material;
              const opacityChanged = () => {
                  material.off('opacityChanged', opacityChanged);
                  this.glGeomItemSets.forEach((glGeomItemSet) => {
                      for (const glGeomItem of glGeomItemSet.glGeomItems) {
                          const geomItem = glGeomItem.geomItem;
                          this.pass.removeGeomItem(geomItem);
                          this.pass.renderer.assignTreeItemToGLPass(geomItem);
                      }
                  });
              };
              this.listenerIds['material.opacityChanged'] = material.on('opacityChanged', opacityChanged);
          }
      }
      /**
       * The addGLGeomItem method.
       * @param glGeomItem - The glGeomItem value.
       * @param glGeom - The glGeomItem value.
       * @private
       */
      addGLGeomItem(glGeomItem, glGeom) {
          let geomItemSet = this.glGeomItemSets.get(glGeom);
          if (!geomItemSet) {
              geomItemSet = new GLGeomItemSet(this.gl, glGeom);
              this.addGeomItemSet(geomItemSet);
          }
          geomItemSet.addGLGeomItem(glGeomItem);
      }
      /**
       * The drawCountChanged method.
       * @param event - The change value.
       * @private
       */
      drawCountChanged(event) {
          this.drawCount += event.change;
          this.emit('updated');
      }
      /**
       * The addGeomItemSet method.
       * @param glGeomItemSet - The glGeomItemSet value.
       */
      addGeomItemSet(glGeomItemSet) {
          this.glGeomItemSets.set(glGeomItemSet.getGLGeom(), glGeomItemSet);
          const listenerID = glGeomItemSet.on('drawCountChanged', (event) => {
              this.drawCountChanged(event);
          });
          glGeomItemSet.once('destructing', () => {
              glGeomItemSet.off('drawCountChanged', listenerID);
              this.glGeomItemSets.delete(glGeomItemSet.getGLGeom());
              if (this.glGeomItemSets.size == 0 && this.glMaterial) {
                  // Remove the listeners.
                  const material = this.glMaterial.material;
                  material.off('opacityChanged', this.listenerIds['material.opacityChanged']);
                  this.emit('destructing');
              }
          });
      }
      /**
       * Draws all elements, binding the shader and continuing into the GLGeomItemSet
       * @param renderstate - The render state for the current draw traversal
       */
      draw(renderstate) {
          if (this.drawCount == 0)
              return;
          const warnMissingUnifs = true;
          if (this.glMaterial)
              this.glMaterial.bind(renderstate, warnMissingUnifs);
          this.glGeomItemSets.forEach((glGeomItemSet) => {
              glGeomItemSet.draw(renderstate);
          });
          if (this.glMaterial)
              this.glMaterial.unbind(renderstate);
      }
      /**
       * The drawHighlighted method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawHighlighted(renderstate) {
          if (this.glMaterial)
              this.glMaterial.bind(renderstate, false);
          this.glGeomItemSets.forEach((glGeomItemSet) => {
              glGeomItemSet.drawHighlighted(renderstate);
          });
          if (this.glMaterial)
              this.glMaterial.unbind(renderstate);
      }
      /**
       * The drawHighlightedGeoms method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawGeomData(renderstate) {
          if (this.glMaterial)
              this.glMaterial.bind(renderstate, false);
          this.glGeomItemSets.forEach((glGeomItemSet) => {
              glGeomItemSet.drawGeomData(renderstate);
          });
          if (this.glMaterial)
              this.glMaterial.unbind(renderstate);
      }
  }

  /** Class representing GL shader materials.
   * @private
   */
  class GLShaderMaterials extends EventEmitter {
      gl;
      pass;
      glShader;
      // to force the re-compliation of a shader with different
      // directives, we supply a different key.
      glShaderKey = '';
      glShaderGeomDataKey = '';
      glShaderHighlightKey = '';
      glMaterialGeomItemSets = new Map();
      /**
       * Create a GL shader material.
       * @param gl - The WebGL Context value.
       * @param pass - The pass that owns this GLShaderMaterials object.
       * @param shaders - The shaders value.
       */
      constructor(gl, pass, glShader) {
          super();
          this.gl = gl;
          this.pass = pass;
          this.glShader = glShader;
          this.glShaderKey = 'draw';
          this.glShaderGeomDataKey = 'geomdata';
          this.glShaderHighlightKey = 'highlight';
      }
      getOrCreateGLMaterialGeomItemSets(key) {
          let glMaterialGeomItemSets = this.glMaterialGeomItemSets.get(key);
          if (!glMaterialGeomItemSets) {
              glMaterialGeomItemSets = new GLMaterialGeomItemSets(this.pass, key);
              this.addMaterialGeomItemSets(key, glMaterialGeomItemSets);
          }
          return glMaterialGeomItemSets;
      }
      addGLGeomItem(glGeomItem, glGeom, glMaterial) {
          // Non textured materails do not need to be bound separately as all the
          // uniform values come from the material texture.
          if (!glMaterial.material.isTextured()) {
              const glMaterialGeomItemSets = this.getOrCreateGLMaterialGeomItemSets(null);
              glMaterialGeomItemSets.addGLGeomItem(glGeomItem, glGeom);
          }
          else {
              const glMaterialGeomItemSets = this.getOrCreateGLMaterialGeomItemSets(glMaterial);
              glMaterialGeomItemSets.addGLGeomItem(glGeomItem, glGeom);
          }
      }
      addMaterialGeomItemSets(glMaterial, glMaterialGeomItemSets) {
          this.glMaterialGeomItemSets.set(glMaterial, glMaterialGeomItemSets);
          const updated = () => {
              this.emit('updated');
          };
          const destructing = () => {
              glMaterialGeomItemSets.off('updated', updated);
              glMaterialGeomItemSets.off('destructing', destructing);
              this.glMaterialGeomItemSets.delete(glMaterial);
              if (this.glMaterialGeomItemSets.size == 0) {
                  // TODO: clean up the shader...
                  this.emit('destructing');
              }
          };
          glMaterialGeomItemSets.on('updated', updated);
          glMaterialGeomItemSets.on('destructing', destructing);
      }
      /**
       * The removeMaterialGeomItemSets method.
       * @param glMaterialGeomItemSets - The glMaterialGeomItemSets value.
       */
      removeMaterialGeomItemSets(glMaterial) {
          this.glMaterialGeomItemSets.delete(glMaterial);
      }
      /**
       * Draws all elements, binding the shader and continuing into the GLMaterialGeomItemSets
       * @param renderstate - The render state for the current draw traversal
       */
      draw(renderstate) {
          const glShader = this.glShader;
          if (!this.glShader.bind(renderstate, this.glShaderKey))
              return;
          this.pass.renderer.glGeomItemLibrary.bind(renderstate);
          this.pass.renderer.glMaterialLibrary.bind(renderstate);
          this.glMaterialGeomItemSets.forEach((glMaterialGeomItemSet) => {
              glMaterialGeomItemSet.draw(renderstate);
          });
          glShader.unbind(renderstate);
      }
      /**
       * The drawHighlightedGeoms method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawHighlightedGeoms(renderstate) {
          if (!this.glShader.bind(renderstate, this.glShaderHighlightKey))
              return;
          this.pass.renderer.glGeomItemLibrary.bind(renderstate);
          this.pass.renderer.glMaterialLibrary.bind(renderstate);
          this.glMaterialGeomItemSets.forEach((glMaterialGeomItemSet) => {
              glMaterialGeomItemSet.drawHighlighted(renderstate);
          });
          this.glShader.unbind(renderstate);
      }
      /**
       * The drawGeomData method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawGeomData(renderstate) {
          if (!this.glShader.bind(renderstate, this.glShaderGeomDataKey))
              return;
          this.pass.renderer.glGeomItemLibrary.bind(renderstate);
          this.pass.renderer.glMaterialLibrary.bind(renderstate);
          const gl = this.gl;
          const { passId } = renderstate.unifs;
          if (passId) {
              gl.uniform1i(passId.location, renderstate.passIndex);
          }
          this.glMaterialGeomItemSets.forEach((glMaterialGeomItemSet) => {
              glMaterialGeomItemSet.drawGeomData(renderstate);
          });
          this.glShader.unbind(renderstate);
      }
  }

  var frag$8 = "\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nimport 'imageAtlas.glsl'\n\nuniform sampler2D atlasBillboards;\n\n/* VS Outputs */\nvarying float v_instanceID;\nvarying vec2 v_texCoord;\nvarying float v_alpha;\nvarying vec4 v_tint;\nvarying vec3 v_viewPos;\n\nuniform sampler2D instancesTexture;\nuniform int instancesTextureSize;\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#endif // DRAW_GEOMDATA\n\nconst int cols_per_instance = 7;\n\nvec4 getHilightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 6);\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int instanceID = int(v_instanceID);\n  vec4 imageColor = texture2D(atlasBillboards, v_texCoord) * v_tint;\n  imageColor.a *= v_alpha;\n  if(imageColor.a < 0.1)\n    discard;\n\n#if defined(DRAW_COLOR)\n  fragColor = imageColor;\n  // fragColor.r = 1.0;\n  // fragColor.a = 1.0;\n#elif defined(DRAW_GEOMDATA)\n  fragColor = setFragColor_geomData(v_viewPos, v_instanceID, 0.0, isOrthographic, 0);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = getHilightColor(instanceID);\n  // Skip unhilighting labels.\n  if(fragColor.r < 0.001 && fragColor.g < 0.001 && fragColor.b < 0.001)\n    discard;\n#endif // DRAW_HIGHLIGHT\n  \n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n"; // eslint-disable-line

  var vert$9 = "\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 cameraMatrix;\nuniform int isOrthographic;\nuniform vec4 viewportFrustum;\n\nimport 'GLSLUtils.glsl'\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\n// A sorted attribute of instance Ids so we draw from back to front.\ninstancedattribute float instanceIds;\n\nimport 'transpose.glsl'\nimport 'imageAtlas.glsl'\n\nuniform sampler2D atlasBillboards_layout;\nuniform vec4 atlasBillboards_desc;\n\nuniform sampler2D instancesTexture;\nuniform int instancesTextureSize;\n\nconst int cols_per_instance = 7;\n\nmat4 getMatrix(sampler2D texture, int textureSize, int index) {\n  // Unpack 3 x 4 matix columns into a 4 x 4 matrix.\n  vec4 col0 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 0);\n  vec4 col1 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 1);\n  vec4 col2 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 2);\n  mat4 result = mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0));\n  return transpose(result);\n  // return mat4(1.0);\n}\n\nmat4 getModelMatrix(int id) {\n  return getMatrix(instancesTexture, instancesTextureSize, id);\n}\nvec4 getInstanceData(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 3);\n}\nvec4 getPivot(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 4);\n}\nvec4 getTintColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 5);\n}\n\n#else\n\nuniform vec4 atlasBillboards_desc;\n\nuniform mat4 modelMatrix;\nuniform vec2 pivot;\nuniform vec4 billboardData;\nuniform vec4 tintColor;\nuniform vec4 layoutData;\n\n#endif\n\nuniform int inVR;\n\nmat4 calcLookAtMatrix(vec3 origin, vec3 target, float roll) {\n  // vec3 rr = vec3(sin(roll), 0.0, cos(roll));\n  vec3 rr = vec3(0.0, 0.0, 1.0);\n  vec3 ww = normalize(target - origin);\n  vec3 uu = normalize(cross(rr, ww));\n  vec3 vv = normalize(cross(ww, uu));\n\n  return mat4(vec4(uu, 0.0), vec4(vv, 0.0), vec4(ww, 0.0), vec4(origin, 1.0));\n}\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n/* VS Outputs */\nvarying float v_instanceID;\nvarying vec2 v_texCoord;\nvarying float v_alpha;\nvarying vec4 v_tint;\nvarying vec3 v_viewPos;\n\nvoid main(void) {\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\n  int instanceID = int(instanceIds);\n  v_instanceID = float(instanceID) + 0.25;\n\n  mat4 modelMatrix = getModelMatrix(instanceID);\n  vec2 pivot = getPivot(instanceID).xy;\n  vec4 billboardData = getInstanceData(instanceID);\n  vec4 layoutData = fetchTexel(atlasBillboards_layout, int(atlasBillboards_desc.z), int(billboardData.z));\n  v_tint = getTintColor(instanceID);\n\n#else\n\n  v_tint = tintColor;\n\n#endif\n\n  vec2 quadVertex = getQuadVertexPositionFromID();\n  \n  vec2 pos = quadVertex + vec2(0.5, 0.0) - pivot;\n  v_texCoord = vec2(quadVertex.x, -quadVertex.y) + 0.5;\n  v_alpha = billboardData.w;\n  v_texCoord *= layoutData.zw;\n  v_texCoord += layoutData.xy;\n\n  float scl = billboardData.x;\n  float width = layoutData.z * atlasBillboards_desc.x * scl;\n  float height = layoutData.w * atlasBillboards_desc.y * scl;\n  int flags = int(billboardData.y);\n\n  // Use cross platform bit flags methods\n  bool alignedToCamera = testFlag(flags, 4); // flag = 1<<2\n  bool drawOnTop = testFlag(flags, 8); // flag = 1 << 3\n  bool fixedSizeOnscreen = testFlag(flags, 16); // flag = 1 << 4\n\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  // Note: items in front of the camera will have a negative value here.\n  float sc = 1.0;\n  if (fixedSizeOnscreen) {\n    if (isOrthographic > 0){\n      // At a distance of 1, we should match the orthographic and perspective sizes.\n      // Calculate the size of the handle in perpective projection at 1 meter.\n      // With a 24mm camera, the Fov is 46.4 degrees, or 0.8098327729253689 radians.\n      // (0.81 / 2.0) * focalDist * 2.0\n      // The frustum height at 1m is 0.81.\n      sc = viewportFrustum.y / 0.8098327;\n    } else {\n      sc = -modelViewMatrix[3][2];\n      \n      if (inVR == 1) {\n        // During XR sessions, there is a scaling applied to the view matrix\n        // which causes a distortion to the line width. We extract that scale here\n        // and use to correct the distortion.\n        // See also: FatPointsShader\n        vec3 viewZ = modelViewMatrix[2].xyz;\n        float viewScale = length(viewZ);\n        sc /= viewScale;\n      }\n    }\n  }\n  \n  mat4 modelViewProjectionMatrix;\n  if (alignedToCamera) {\n    if (inVR == 0) {\n      gl_Position = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n      gl_Position += vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 0.0);\n      v_viewPos = gl_Position.xyz;\n      gl_Position = projectionMatrix * gl_Position;\n    } else {\n      vec3 cameraPos = vec3(cameraMatrix[3][0], cameraMatrix[3][1], cameraMatrix[3][2]);\n      vec3 billboardPos = vec3(modelMatrix[3][0], modelMatrix[3][1], modelMatrix[3][2]);\n      mat4 lookAt = calcLookAtMatrix(billboardPos, cameraPos, 0.0);\n      mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * lookAt;\n      gl_Position = modelViewProjectionMatrix * vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 1.0);\n      v_viewPos = (modelViewMatrix * vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 1.0)).xyz;\n    }\n  }\n  else {\n    modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n    gl_Position = modelViewProjectionMatrix * vec4(pos.x * width, (pos.y + 0.5) * height, 0.0, 1.0);\n    v_viewPos = (modelViewMatrix * vec4(pos.x * width, (pos.y + 0.5) * height, 0.0, 1.0)).xyz;\n  }\n\n  // Use cross platform bit flags methods\n  if (drawOnTop) {\n    if (isOrthographic > 0){\n      gl_Position.z = mix(gl_Position.z, -1.0, 0.5);\n    } else {\n      gl_Position.z = mix(gl_Position.z, -gl_Position.z, 0.5);\n    }\n  }\n}\n"; // eslint-disable-line

  /* eslint-disable require-jsdoc */
  class BillboardShader extends GLShader {
      /**
       * Create a GL shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'BillboardShader');
          this.setShaderStage('VERTEX_SHADER', vert$9);
          this.setShaderStage('FRAGMENT_SHADER', frag$8);
      }
  }

  var vert$8 = "\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;    //(location = 0)\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform vec3 projectionCenter;\n\nimport 'transpose.glsl'\nimport 'GLSLUtils.glsl'\nimport 'stack-gl/transpose.glsl'\nimport 'stack-gl/inverse.glsl'\nimport 'geomItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\n \nvoid main()\n{\n  int geomItemId = getGeomItemId();\n  vec4 pos = vec4(positions, 1.);\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n\n  gl_Position = modelViewProjectionMatrix * pos;\n\n  vec4 worldPos = modelMatrix * pos;\n  v_worldDir = worldPos.xyz - projectionCenter;\n}\n\n"; // eslint-disable-line

  var OctahedralEnvProjectionFrag = "\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'envmap-octahedral.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\nuniform sampler2D envMap;\nuniform int envMapLoaded;\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\nuniform float exposure;\n#endif\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = dirToSphOctUv(dir);\n  vec4 texel = texture2D(envMap, vec2(uv.x, 1.0 - uv.y));\n  return vec4(texel.rgb/texel.a, 1.0); // TODO: Check this line. Do we need it?\n}\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  if (envMapLoaded == 0)  {\n    discard;\n    return;\n  }\n\n  fragColor = sampleEnvMap(normalize(v_worldDir));\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n"; // eslint-disable-line

  class EnvProjectionShader extends GLShader {
      /**
       * Create a GL shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'EnvProjectionShader');
          this.setShaderStage('VERTEX_SHADER', vert$8);
          this.setShaderStage('FRAGMENT_SHADER', OctahedralEnvProjectionFrag);
      }
      /**
       * The bind method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param key - The key value.
       * @return - The return value.
       */
      bind(renderstate, key) {
          super.bind(renderstate, key);
          if (renderstate instanceof ColorRenderState) {
              const colorRenderState = renderstate;
              const gl = this.__gl;
              const { envMap, envMapLoaded, exposure } = renderstate.unifs;
              if (colorRenderState.envMap && colorRenderState.envMap.glTex) {
                  // colorRenderState.envMap.bind(colorRenderState)
                  colorRenderState.envMap.glTex.bindToUniform(renderstate, envMap);
                  gl.uniform1i(envMapLoaded.location, 1);
              }
              else {
                  gl.uniform1i(envMapLoaded.location, 0);
              }
              if (exposure) {
                  gl.uniform1f(exposure.location, colorRenderState.exposure);
              }
          }
          return true;
      }
      /**
       * The supportsInstancing method.
       * @return - return false for shaders that cannot be rendered in instanced mode.
       */
      static supportsInstancing() {
          return false;
      }
      /**
       * Each shader provides a template material that each material instance is
       * based on. The shader specifies the parameters needed by the shader, and
       * the material provides values to the shader during rendering.
       * @return - The template material value.
       */
      static getMaterialTemplate() {
          return material$9;
      }
  }
  const material$9 = new EnvProjectionMaterial();
  Registry.register('EnvProjectionShader', EnvProjectionShader);

  var frag$7 = "\nprecision highp float;\n#define GLSLIFY 1\n\nuniform color BaseColor;\nuniform float Opacity;\nuniform mat4 cameraMatrix;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\n/* VS Outputs */\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\nvarying vec2 v_texCoord;\nvarying float v_geomItemId;\nvarying vec4 v_geomItemData;\nvarying float v_drawItemID;\nvarying vec3 v_worldPos;\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'geometryMask.glsl'\nimport 'GLSLBits.glsl'\nimport 'geomItemFlags.glsl'\n\nuniform int passId;\n\n#if defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n  int geomItemId = int(v_geomItemId + 0.5);\n  int flags = int(v_geomItemData.x + 0.5);\n  float treeItemOpacity = v_geomItemData.y;\n\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n    vec4 cutAwayData  = getCutaway(geomItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (length(planeNormal) > 0.5) {\n      if (cutaway(v_worldPos, planeNormal, planeDist)) {\n          discard;\n          return;\n      }\n    } else {\n      if (testGeometryMask(v_viewPos)) {\n        discard;\n        return;\n      }\n    }\n  }\n\n#if defined(DRAW_COLOR)\n  int debugLevel = 0;\n  if (debugLevel == 0) {\n\n    vec3 viewVector = mat3(cameraMatrix) * normalize(-v_viewPos);\n    vec3 normal = mat3(cameraMatrix) * v_viewNormal;\n    float NdotV = dot(normalize(normal), normalize(viewVector));\n\n    // Modulate the lighting using the texture coord so the line looks round.\n    NdotV *= cos((v_texCoord.x - 0.5) * 2.0);\n\n    vec4 color = BaseColor * NdotV;\n    fragColor = vec4(color.rgb, BaseColor.a * Opacity * treeItemOpacity);\n  }\n  else {\n    fragColor = vec4(v_texCoord.x, 0.0, 0.0, 1.0);\n  }\n#elif defined(DRAW_GEOMDATA)\n\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n\n  float dist = length(v_viewPos);\n  fragColor.r = float(passId); \n  fragColor.g = float(v_drawItemID);\n  fragColor.b = 0.0;// TODO: store poly-id or something.\n  fragColor.a = dist;\n    \n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_geomItemId);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n"; // eslint-disable-line

  var vert$7 = "\nprecision highp float;\n#define GLSLIFY 1\n\ninstancedattribute vec2 segmentIndices;\nattribute float vertexIDs;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform int isOrthographic;\n\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\nuniform int geomItemId;\nint getGeomItemId() {\n  return geomItemId;\n}\n\nuniform sampler2D positionsTexture;\nuniform int positionsTextureSize;\n\nuniform float LineThickness;\nuniform float Overlay;\n\nimport 'calcFatLinesViewPos.glsl'\n\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\nvarying vec2 v_texCoord;\n\nvarying float v_geomItemId;\nvarying vec4 v_geomItemData;\nvarying float v_drawItemID;\nvarying vec3 v_worldPos;\n\nvoid main(void) {\n\n  int geomItemId = getGeomItemId();\n  v_geomItemId = float(geomItemId);\n  v_geomItemData = getInstanceData(geomItemId);\n\n  int vertexID = int(vertexIDs);\n\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  vec3 pos;\n  v_viewPos       = calcFatLinesViewPos(vertexID, modelViewMatrix, v_viewNormal, v_texCoord, pos);\n  v_worldPos      = (modelMatrix * vec4(pos, 1.0)).xyz;\n  v_drawItemID    = float(getGeomItemId());\n\n  gl_Position     = projectionMatrix * vec4(v_viewPos, 1.0);\n\n  if (isOrthographic > 0){\n    gl_Position.z -= mix(gl_Position.z, -1.0, Overlay);\n  } else {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.z, Overlay);\n  }\n\n}\n"; // eslint-disable-line

  /* eslint-disable require-jsdoc */
  /** Shader for drawing Fat lines
   * @extends GLShader
   * @private
   */
  class FatLinesShader extends GLShader {
      /**
       * Create a GL shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'FatLinesShader');
          this.setShaderStage('VERTEX_SHADER', vert$7);
          this.setShaderStage('FRAGMENT_SHADER', frag$7);
      }
      bind(renderstate, key) {
          if (super.bind(renderstate, key)) {
              renderstate.supportsInstancing = false;
              return true;
          }
          return false;
      }
      /**
       * The supportsInstancing method.
       * @return - return false for shaders that cannot be rendered in instanced mode.
       */
      static supportsInstancing() {
          return false;
      }
      /**
       * Each shader provides a template material that each material instance is
       * based on. The shader specifies the parameters needed by the shader, and
       * the material provides values to the shader during rendering.
       * @return - The template material value.
       */
      static getMaterialTemplate() {
          return material$8;
      }
  }
  const material$8 = new FatLinesMaterial('FatLinesShader_template');
  Registry.register('FatLinesShader', FatLinesShader);

  var vert$6 = "\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nattribute vec3 positions;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform int isOrthographic;\n\nimport 'GLSLUtils.glsl'\nimport 'geomItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\nimport 'geomItemFlags.glsl'\nimport 'materialparams.glsl'\n\n/* VS Outputs */\nvarying vec4 v_drawItemIds;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n\nvoid main(void) {\n  v_drawItemIds = getDrawItemIds();\n  int geomItemId = int(v_drawItemIds.x + 0.5);\n  v_geomItemData  = getInstanceData(geomItemId);\n\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  vec4 pos = vec4(positions, 1.);\n  vec4 viewPos = (modelViewMatrix * pos);\n  gl_Position = projectionMatrix * viewPos;\n\n  v_viewPos = viewPos.xyz;\n#ifdef ENABLE_TEXTURES\n  v_textureCoord = texCoords;\n  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n#endif\n\n  //////////////////////////////////////////////\n  // Overlay\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 materialValue1 = getMaterialValue(materialCoords, 1);\n  float overlay = materialValue1.x;\n\n  if (isOrthographic > 0){\n    gl_Position.z -= overlay;\n  } else {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.z, overlay);\n  }\n\n  //////////////////////////////////////////////\n  \n  v_worldPos      = (modelMatrix * pos).xyz;\n}\n"; // eslint-disable-line

  var frag$6 = "\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'geometryMask.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\nimport 'geomItemFlags.glsl'\n\n#ifdef DEBUG_GEOM_ID\nimport 'debugColors.glsl'\n#endif\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\n#endif\n\n/* VS Outputs */\nvarying vec4 v_drawItemIds;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int geomItemId = int(v_drawItemIds.x + 0.5);\n  int flags = int(v_geomItemData.x + 0.5);\n  float treeItemOpacity = v_geomItemData.y;\n\n  // We can make geoms invisible to hide them. \n  // Avoid drawing GeomData for geoms that are completely transparent.\n  if (treeItemOpacity < 0.001) {\n    discard;\n    return;\n  }\n  \n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n  {\n    vec4 cutAwayData   = getCutaway(geomItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (length(planeNormal) > 0.5) {\n      if (cutaway(v_worldPos, planeNormal, planeDist)) {\n          discard;\n          return;\n      }\n    } else {\n      if (testGeometryMask(v_viewPos)) {\n        discard;\n        return;\n      }\n    }\n  }\n\n  //////////////////////////////////////////////\n  // Material\n\n  vec2 materialCoords = v_geomItemData.zw;\n  if (v_drawItemIds.z > 0.5) {\n    materialCoords.x = v_drawItemIds.z;\n  }\n  vec4 baseColor = getMaterialValue(materialCoords, 0);\n\n#ifdef ENABLE_TEXTURES\n  getTextureColorValue(baseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n#endif // ENABLE_TEXTURES\n\n  baseColor.a *= treeItemOpacity;\n\n#if defined(DRAW_COLOR)\n\n  //////////////////////////////////////////////\n  fragColor = baseColor;\n\n#ifdef DEBUG_GEOM_ID\n  // ///////////////////////\n  // Debug Draw ID (this correlates to GeomID within a GLGeomSet)\n  float geomId = v_geomItemData.w;\n  fragColor.rgb = getDebugColor(geomId);\n  // ///////////////////////\n#endif\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n#elif defined(DRAW_GEOMDATA)\n\n  if (occlusionCulling == 0) {\n    // When not occlusion culling, we don't render non-selectable objects.\n    //When occlusion culling, we want to draw all the geom data for all objects.\n    if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n      discard;\n      return;\n    }\n  }\n  else {\n    // Transparent geoms do not render to the occlusion buffer\n    if (testFlag(flags, GEOMITEM_TRANSPARENT)) {\n      discard;\n      return;\n    }\n  }\n\n  fragColor = setFragColor_geomData(v_viewPos, v_drawItemIds.x, v_drawItemIds.y, isOrthographic, flags);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemIds.x);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n"; // eslint-disable-line

  class FlatSurfaceShader extends GLShader {
      /**
       * Create a GL shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'FlatSurfaceShader');
          this.setShaderStage('VERTEX_SHADER', vert$6);
          this.setShaderStage('FRAGMENT_SHADER', frag$6);
      }
      /**
       * The bind method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param key - The key value.
       * @return - The return value.
       */
      bind(renderstate, key) {
          super.bind(renderstate, key);
          renderstate.pushGLStack('FlatSurfaceShader.bind');
          // Note: The GLTransparentGeoms pass only  renders the font faces of objects because for complex geoms, this makes sense
          // but flat surfaces should be double sided, as they are almost always labels, or UI elements.
          const gl = this.__gl;
          renderstate.glDisable(gl.CULL_FACE);
          return true;
      }
      /**
       * The unbind method.
       * @param renderstate - The object tracking the current state of the renderer
       * @return - The return value.
       */
      unbind(renderstate) {
          super.unbind(renderstate);
          renderstate.popGLStack();
          return true;
      }
      /**
       * The getPackedMaterialData method.
       * @param material - The material param.
       * @return - The return value.
       */
      static getPackedMaterialData(material) {
          const matData = new Float32Array(8);
          const baseColorParam = material.getParameter('BaseColor');
          let baseColor;
          if (baseColorParam instanceof MaterialColorParam && baseColorParam.colorSpace == exports.ColorSpace.Gamma) {
              baseColor = baseColorParam.value.toLinear();
          }
          else {
              baseColor = baseColorParam.value;
          }
          matData[0] = baseColor.r;
          matData[1] = baseColor.g;
          matData[2] = baseColor.b;
          matData[3] = baseColor.a;
          const overlayParam = material.getParameter('Overlay');
          if (overlayParam)
              matData[4] = overlayParam.getValue();
          return matData;
      }
      /**
       * Each shader provides a template material that each material instance is
       * based on. The shader specifies the parameters needed by the shader, and
       * the material provides values to the shader during rendering.
       * @return - The template material value.
       */
      static getMaterialTemplate() {
          return material$7;
      }
  }
  const material$7 = new FlatSurfaceMaterial('FlatSurfaceShader_template');
  Registry.register('FlatSurfaceShader', FlatSurfaceShader);

  var vert$5 = "\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nattribute vec3 positions;\n\nimport 'GLSLUtils.glsl'\nimport 'geomItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\nimport 'materialparams.glsl'\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform int isOrthographic;\n\n/* VS Outputs */\nvarying float v_geomItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_worldPos;\n\nvoid main(void) {\n  int geomItemId = getGeomItemId();\n  v_geomItemId = float(geomItemId);\n  v_geomItemData  = getInstanceData(geomItemId);\n\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  vec4 viewPos = modelViewMatrix * vec4(positions, 1.0);\n\n  v_viewPos = viewPos.xyz;\n  gl_Position = projectionMatrix * viewPos;\n\n  //////////////////////////////////////////////\n  // Overlay\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 materialValue1 = getMaterialValue(materialCoords, 1);\n  float overlay = materialValue1.y;\n   \n#if defined(DRAW_GEOMDATA)\n  float _overlay = mix(overlay, 1.0, 0.0001);\n#else\n  float _overlay = overlay;\n#endif\n\n  if (isOrthographic > 0){\n    gl_Position.z -= _overlay;\n  } else {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.z, _overlay);\n  }\n  \n  vec4 pos = vec4(positions, 1.);\n  v_worldPos      = (modelMatrix * pos).xyz;\n}\n"; // eslint-disable-line

  var frag$5 = "\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'geometryMask.glsl'\nimport 'materialparams.glsl'\nimport 'geomItemFlags.glsl'\n\n#if defined(DRAW_COLOR)\n\nuniform int occluded;\nuniform vec4 hiddenLineColor;\n\n#elif defined(DRAW_GEOMDATA)\n\nuniform int isOrthographic;\nimport 'surfaceGeomData.glsl'\n\n#elif defined(DRAW_HIGHLIGHT)\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getHighlightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\n}\n#else // ENABLE_FLOAT_TEXTURES\n\nuniform vec4 highlightColor;\n\nvec4 getHighlightColor() {\n  return highlightColor;\n}\n\n#endif // ENABLE_FLOAT_TEXTURES\n\n#endif // DRAW_HIGHLIGHT\n\n/* VS Outputs */\nvarying float v_geomItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_worldPos;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int geomItemId = int(v_geomItemId + 0.5);\n  int flags = int(v_geomItemData.x + 0.5);\n  float treeItemOpacity = v_geomItemData.y;\n\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n  {\n    vec4 cutAwayData   = getCutaway(geomItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (length(planeNormal) > 0.5) {\n      if (cutaway(v_worldPos, planeNormal, planeDist)) {\n          discard;\n          return;\n      }\n    } else {\n      if (testGeometryMask(v_viewPos)) {\n        discard;\n        return;\n      }\n    }\n  }\n\n  //////////////////////////////////////////////\n  // Material\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 BaseColor = getMaterialValue(materialCoords, 0);\n  vec4 matValue1 = getMaterialValue(materialCoords, 1);\n  vec4 matValue2 = getMaterialValue(materialCoords, 2);\n  float Opacity  = matValue1.r;\n\n  //////////////////////////////////////////////\n  // Color\n#if defined(DRAW_COLOR)\n\n  fragColor = BaseColor;\n  \n  if (occluded == 1) {\n    fragColor = hiddenLineColor;\n  }\n\n  fragColor.a *= Opacity * treeItemOpacity;\n\n  //////////////////////////////////////////////\n  // GeomData\n#elif defined(DRAW_GEOMDATA)\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n  \n  fragColor = setFragColor_geomData(v_viewPos, v_geomItemId, 0.0, isOrthographic, flags);\n  \n  //////////////////////////////////////////////\n  // Highlight\n#elif defined(DRAW_HIGHLIGHT)\n  \n  fragColor = getHighlightColor(geomItemId);\n\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n"; // eslint-disable-line

  /* eslint-disable require-jsdoc */
  class LinesShader extends GLShader {
      /**
       * Create a GL shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'LinesShader');
          this.setShaderStage('VERTEX_SHADER', vert$5);
          this.setShaderStage('FRAGMENT_SHADER', frag$5);
      }
      /**
       * The getPackedMaterialData method.
       * @param material - The material param.
       * @return - The return value.
       */
      static getPackedMaterialData(material) {
          const matData = new Float32Array(8);
          const baseColorParam = material.getParameter('BaseColor');
          let baseColor;
          if (baseColorParam instanceof MaterialColorParam && baseColorParam.colorSpace == exports.ColorSpace.Gamma) {
              baseColor = baseColorParam.value.toLinear();
          }
          else {
              baseColor = baseColorParam.value;
          }
          matData[0] = baseColor.r;
          matData[1] = baseColor.g;
          matData[2] = baseColor.b;
          matData[3] = baseColor.a;
          // Note: By avoiding calling this value 'Opacity', the lines will not be considered 'Transparent'
          // Lines do not need to be depth sorted....
          matData[4] = material.getParameter('Opacity').value;
          matData[5] = material.getParameter('Overlay').value;
          return matData;
      }
      /**
       * Each shader provides a template material that each material instance is
       * based on. The shader specifies the parameters needed by the shader, and
       * the material provides values to the shader during rendering.
       * @return - The template material value.
       */
      static getMaterialTemplate() {
          return material$6;
      }
  }
  const material$6 = new LinesMaterial('LinesShader_template');
  Registry.register('LinesShader', LinesShader);

  var frag$4 = "\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'geometryMask.glsl'\nimport 'materialparams.glsl'\nimport 'geomItemFlags.glsl'\nimport 'surfaceGeomData.glsl'\n\n#if defined(DRAW_GEOMDATA)\n\nimport 'GLSLBits.glsl'\nuniform highp int isOrthographic;\n\n#elif defined(DRAW_HIGHLIGHT)\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getHighlightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\n}\n#else // ENABLE_FLOAT_TEXTURES\n\nuniform vec4 highlightColor;\n\nvec4 getHighlightColor() {\n  return highlightColor;\n}\n\n#endif // ENABLE_FLOAT_TEXTURES\n\n#endif // DRAW_HIGHLIGHT\n\n/* VS Outputs */\nvarying vec2 v_drawItemIds;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n/* VS Outputs */\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  //////////////////////////////////////////////\n  // Color\n#if defined(DRAW_COLOR)\n\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 baseColor = getMaterialValue(materialCoords, 0);\n  vec4 matValue1 = getMaterialValue(materialCoords, 1);\n  float pointSize     = baseColor.a * matValue1.r;\n  float overlay       = matValue1.g;\n\n  fragColor = baseColor;\n\n  //////////////////////////////////////////////\n  // GeomData\n#elif defined(DRAW_GEOMDATA)\n\n  fragColor = setFragColor_geomData(v_viewPos, v_drawItemIds.x, v_drawItemIds.y, isOrthographic, 0);\n\n  //////////////////////////////////////////////\n  // Highlight\n#elif defined(DRAW_HIGHLIGHT)\n  \n  int geomItemId = int(v_drawItemIds.x + 0.5);\n  fragColor = getHighlightColor(geomItemId);\n\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n"; // eslint-disable-line

  var vert$4 = "\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\n\nimport 'GLSLUtils.glsl'\nimport 'geomItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\nimport 'materialparams.glsl'\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform int isOrthographic;\n\n/* VS Outputs */\nvarying vec2 v_drawItemIds;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n\nvoid main(void) {\n  int geomItemId = getGeomItemId();\n  v_drawItemIds.x = float(geomItemId);\n  v_drawItemIds.y = float(gl_VertexID);\n  v_geomItemData  = getInstanceData(geomItemId);\n\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  \n  vec4 viewPos = modelViewMatrix * vec4(positions, 1.);\n  gl_Position = projectionMatrix * viewPos;\n  \n\n  //////////////////////////////////////////////\n  // Material\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 materialValue1 = getMaterialValue(materialCoords, 1);\n  float pointSize = materialValue1.x;\n  float overlay = materialValue1.y;\n\n  //////////////////////////////////////////////\n\n  // Note: as of 22/01/2021 gl_PointSize has stopped working again...\n  // It is working again now in Chrome\n  gl_PointSize = pointSize * 1.0 / length(viewPos.xyz);\n\n  if (isOrthographic > 0){\n    gl_Position.z -= overlay;\n  } else {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.z, overlay);\n  }\n  \n  v_viewPos = -viewPos.xyz;\n}\n"; // eslint-disable-line

  class PointsShader extends GLShader {
      /**
       * Create a GL shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'PointsShader');
          this.setShaderStage('VERTEX_SHADER', vert$4);
          this.setShaderStage('FRAGMENT_SHADER', frag$4);
      }
      /**
       * The getPackedMaterialData method.
       * @param material - The material param.
       * @return - The return value.
       */
      static getPackedMaterialData(material) {
          const matData = new Float32Array(8);
          const baseColorParam = material.getParameter('BaseColor');
          let baseColor;
          if (baseColorParam instanceof MaterialColorParam && baseColorParam.colorSpace == exports.ColorSpace.Gamma) {
              baseColor = baseColorParam.value.toLinear();
          }
          else {
              baseColor = baseColorParam.value;
          }
          matData[0] = baseColor.r;
          matData[1] = baseColor.g;
          matData[2] = baseColor.b;
          matData[3] = baseColor.a;
          matData[4] = material.getParameter('PointSize').value;
          matData[5] = material.getParameter('Overlay').value;
          return matData;
      }
      /**
       * Each shader provides a template material that each material instance is
       * based on. The shader specifies the parameters needed by the shader, and
       * the material provides values to the shader during rendering.
       * @return - The template material value.
       */
      static getMaterialTemplate() {
          return material$5;
      }
  }
  const material$5 = new PointsMaterial('PointsShader_template');
  Registry.register('PointsShader', PointsShader);

  var vert$3 = "\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\ninstancedattribute int drawIndices;\nuniform sampler2D pointsAttributes;\nuniform int texelsPerPoint;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform int isOrthographic;\n\nimport 'GLSLUtils.glsl' \nimport 'inverse.glsl'\nimport 'drawItemTexture.glsl'\nimport 'geomItemId.glsl'\nimport 'modelMatrix.glsl'\nimport 'quadVertexFromID.glsl'\nimport 'materialparams.glsl'\n\n/* VS Outputs */\nvarying vec4 v_drawItemIds;\nvarying vec4 v_geomItemData;\nvarying vec3 v_texCoord;\nvarying vec3 v_viewPos;\nvarying vec4 v_color;\n\nvoid main(void) {\n  int geomItemId = getGeomItemId();\n  v_geomItemData  = getInstanceData(geomItemId);\n\n  vec2 quadPointPos = getQuadVertexPositionFromID();\n  v_texCoord.xy = vec2(quadPointPos.x, -quadPointPos.y) + 0.5;\n\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  ivec2 texSize = textureSize(pointsAttributes, 0);\n  int texelIndex = drawIndices * texelsPerPoint;\n  ivec2 texelCoord = ivec2(\n    texelIndex % texSize.x, \n    texelIndex / texSize.x\n  );\n  vec4 texel0 = texelFetch(pointsAttributes, texelCoord, 0);\n\n  vec3 pos = texel0.xyz;\n  float size = texel0.w;\n\n  if (texelsPerPoint >= 2) {\n    vec4 texel1 = texelFetch(pointsAttributes, ivec2(texelCoord.x + 1, texelCoord.y), 0);\n    v_color = texel1;\n  } else {\n    v_color = vec4(1., 1., 1., 1.);\n  }\n\n  if (texelsPerPoint >= 3) {\n    vec4 texel2 = texelFetch(pointsAttributes, ivec2(texelCoord.x + 2, texelCoord.y), 0);\n    v_texCoord.z = texel2.x;\n  } else {\n    v_texCoord.z = -1.0;\n  }\n  \n  //////////////////////////////////////////////\n  // Material\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 materialValue1 = getMaterialValue(materialCoords, 1);\n  float pointSize = materialValue1.r * size;\n  float overlay = materialValue1.b;\n\n  vec4 viewPos = modelViewMatrix * vec4(pos, 1.0);\n\n  // During XR sessions, there is a scaling applied to the view matrix\n  // which causes a distortion to the line width. We extract that scale here\n  // and use to correct the distortion.\n  // See also: FatLinesShader\n  vec3 viewZ = modelViewMatrix[2].xyz;\n  float viewScale = length(viewZ);\n  viewPos += vec4(vec3(quadPointPos, 0.0) * pointSize * viewScale, 0.);\n\n  // Generate a quad which is 0.5 * PointSize closer towards\n  // us. This allows points to be visualized even if snug on \n  // a surface. (else they get fully clipped)\n  viewPos.z += 0.5 * pointSize;\n\n  v_drawItemIds.x = float(geomItemId);\n  v_drawItemIds.y = float(drawIndices);\n  v_viewPos = -viewPos.xyz;\n  \n  gl_Position = projectionMatrix * viewPos;\n\n  if (isOrthographic > 0){\n    gl_Position.z -= overlay;\n  } else {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.z, overlay);\n  }\n}\n"; // eslint-disable-line

  var frag$3 = "\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nimport 'constants.glsl'\nimport 'GLSLUtils.glsl'\nimport 'materialparams.glsl'\n\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\nuniform int highlightSubIndex;\n\nuniform sampler2D atlasSprites;\nuniform sampler2D atlasSprites_layout;\nuniform vec4 atlasSprites_desc;\n\n/* VS Outputs */\nvarying vec4 v_drawItemIds;\nvarying vec4 v_geomItemData;\nvarying vec3 v_texCoord;\nvarying vec3 v_viewPos;\nvarying vec4 v_color;\n\nvec4 sampleSpriteAtlas(int spriteCoord) {\n  ivec2 atlasSpritesSize = textureSize(atlasSprites_layout, 0);\n  // round to an integer, and avoid floating point issues by adding a small value\n  ivec2 texelCoord = ivec2(\n    spriteCoord % atlasSpritesSize.x, \n    spriteCoord / atlasSpritesSize.x\n  );\n  vec4 layoutData = fetchTexel(atlasSprites_layout, atlasSpritesSize, spriteCoord);\n  vec2 spriteTexCoord = v_texCoord.xy;\n  spriteTexCoord *= layoutData.zw;\n  spriteTexCoord += layoutData.xy;\n  return texture2D(atlasSprites, spriteTexCoord);\n}\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n#if defined(DRAW_COLOR)\n\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 baseColor = getMaterialValue(materialCoords, 0);\n  vec4 matValue1 = getMaterialValue(materialCoords, 1);\n  float pointSize     = matValue1.r;\n  float borderWidth   = matValue1.g;\n\n  if (v_texCoord.z > -0.5) {\n    int spriteCoord = int(v_texCoord.z + 0.1);\n    baseColor = sampleSpriteAtlas(spriteCoord) * v_color;\n    if (baseColor.a < 0.0001) discard;\n  } else {\n    \n    float dist = length(v_texCoord.xy - 0.5);\n    if (dist > 0.5) discard;\n\n    if (dist > 0.5 - (borderWidth * 0.5))\n      baseColor = vec4(0.,0.,0.,1.);\n    else {\n      baseColor = baseColor * v_color;\n      ivec2 texSize = textureSize(BaseColorTex, 0);\n      if (texSize.x == 1 && texSize.y > 1) {\n        vec4 gradient = texture2D(BaseColorTex, vec2(0.5, dist * 2.0));\n        baseColor *= gradient;\n      }\n    }\n  }\n\n  fragColor = baseColor;\n#elif defined(DRAW_GEOMDATA)\n  fragColor = setFragColor_geomData(v_viewPos, v_drawItemIds.x, v_drawItemIds.y, isOrthographic, 0);\n#elif defined(DRAW_HIGHLIGHT)\n  if (highlightSubIndex != -1 && int(v_drawItemIds.y + 0.5) != highlightSubIndex) discard;\n  fragColor = setFragColor_highlight(v_drawItemIds.x);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n"; // eslint-disable-line

  /* eslint-disable require-jsdoc */
  class FatPointsShader extends GLShader {
      /**
       * Create a GL shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'FatPointsShader');
          this.setShaderStage('VERTEX_SHADER', vert$3);
          this.setShaderStage('FRAGMENT_SHADER', frag$3);
      }
      bind(renderstate, key) {
          if (super.bind(renderstate, key)) {
              renderstate.supportsInstancing = false;
              const gl = this.__gl;
              if (!gl.__quadVertexIdsBuffer)
                  gl.setupInstancedQuad();
              renderstate.shaderInstancedGeom = {
                  attrBuffers: gl.__quadattrbuffers,
                  indexBuffer: gl.__quadIndexBuffer,
                  indexDataType: gl.UNSIGNED_BYTE,
                  numVertices: 4,
                  numTriIndices: 6,
              };
              renderstate.supportsInstancing = false;
              return true;
          }
          return false;
      }
      /**
       * The getPackedMaterialData method.
       * @param material - The material param.
       * @return - The return value.
       */
      static getPackedMaterialData(material) {
          const matData = new Float32Array(8);
          const baseColorParam = material.getParameter('BaseColor');
          let baseColor;
          if (baseColorParam instanceof MaterialColorParam && baseColorParam.colorSpace == exports.ColorSpace.Gamma) {
              baseColor = baseColorParam.value.toLinear();
          }
          else {
              baseColor = baseColorParam.value;
          }
          matData[0] = baseColor.r;
          matData[1] = baseColor.g;
          matData[2] = baseColor.b;
          matData[3] = baseColor.a;
          matData[4] = material.getParameter('PointSize').value;
          matData[5] = material.getParameter('BorderWidth').value;
          matData[6] = material.getParameter('Overlay').value;
          return matData;
      }
      /**
       * The supportsInstancing method.
       * @return - return false for shaders that cannot be rendered in instanced mode.
       */
      static supportsInstancing() {
          return false;
      }
      /**
       * Each shader provides a template material that each material instance is
       * based on. The shader specifies the parameters needed by the shader, and
       * the material provides values to the shader during rendering.
       * @return - The template material value.
       */
      static getMaterialTemplate() {
          return material$4;
      }
  }
  const material$4 = new FatPointsMaterial('FatPointsShader_template');
  Registry.register('FatPointsShader', FatPointsShader);

  var frag$2 = "precision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'geometryMask.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\nimport 'geomItemFlags.glsl'\n\n#ifdef DEBUG_GEOM_ID\nimport 'debugColors.glsl'\n#endif\n\n/* VS Outputs */\nvarying vec4 v_drawItemIds;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\nuniform mat4 cameraMatrix;\nuniform int isOrthographic;\n\n#ifdef ENABLE_ES3\n    out vec4 fragColor;\n#endif\n\n#if defined(DRAW_COLOR)\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\nuniform sampler2D OpacityTex;\nuniform int OpacityTexType;\nuniform sampler2D EmissiveStrengthTex;\nuniform int EmissiveStrengthTexType;\n#endif // ENABLE_TEXTURES\n\nimport 'computeViewNormal.glsl'\n  \n// end DRAW_COLOR\n#elif defined(DRAW_GEOMDATA)\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n  int geomItemId = int(v_drawItemIds.x + 0.5);\n  int elemId = int(v_drawItemIds.y + 0.5);\n  int perFaceMaterialId = int(v_drawItemIds.z);\n  int flags = int(v_geomItemData.x + 0.5);\n  float treeItemOpacity = v_geomItemData.y;\n\n  // We can make geoms invisible to hide them. \n  // Avoid drawing GeomData for geoms that are completely transparent.\n  if (treeItemOpacity < 0.001 && !testFlag(flags, GEOMITEM_MASK)) {\n    discard;\n    return;\n  }\n  \n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n  {\n    vec4 cutAwayData   = getCutaway(geomItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (length(planeNormal) > 0.5) {\n      if (cutaway(v_worldPos, planeNormal, planeDist)) {\n          discard;\n          return;\n      }\n    } else {\n      if (testGeometryMask(v_viewPos)) {\n        discard;\n        return;\n      }\n    }\n  }\n\n#if defined(DRAW_COLOR)\n\n  //////////////////////////////////////////////\n  // Normals\n  \n  vec3 viewNormal;\n  if (length(v_viewNormal) < 0.1) {\n    viewNormal = computeViewNormal(v_viewPos);\n  } else {\n    viewNormal = normalize(v_viewNormal);\n  }\n  vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);\n  \n  vec3 viewVector;\n  if (isOrthographic == 0)\n    viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));\n  else \n    viewVector = vec3(-cameraMatrix[2][0], -cameraMatrix[2][1], -cameraMatrix[2][2]);\n  \n  //////////////////////////////////////////////\n  // Material\n\n  vec2 materialCoords = v_geomItemData.zw;\n  if (v_drawItemIds.z > 0.5) {\n    materialCoords.x = v_drawItemIds.z;\n  }\n  vec4 baseColor      = getMaterialValue(materialCoords, 0);\n  vec4 matValue1      = getMaterialValue(materialCoords, 1);\n  float opacity       = baseColor.a * matValue1.r;\n  float emission      = matValue1.g;\n\n#ifdef ENABLE_TEXTURES\n  getTextureColorValue(baseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n  getTextureLuminanceValue(opacity, OpacityTex, OpacityTexType, v_textureCoord);\n  getTextureLuminanceValue(emission, EmissiveStrengthTex, EmissiveStrengthTexType, v_textureCoord);\n#endif\n\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY) && !gl_FrontFacing) {\n    fragColor = baseColor;\n  } else {\n    // Hacky simple irradiance. \n    float ndotv = dot(normal, viewVector);\n    if (ndotv < 0.0) {\n      normal = -normal;\n      ndotv = dot(normal, viewVector);\n\n      // Note: these 2 lines can be used to debug inverted meshes.\n      //baseColor = vec4(1.0, 0.0, 0.0, 1.0);\n      //ndotv = 1.0;\n    }\n\n    fragColor = vec4((ndotv * baseColor.rgb) + (emission * baseColor.rgb), opacity);\n  }\n\n  // Note: the 'treeItemOpacity' is not an input to the lighting, \n  // as we want to also blend off the specular reflections to make an object\n  // fade away to nothing. (not become a transparent glass object).\n  fragColor.a *= treeItemOpacity;\n\n#ifdef DEBUG_GEOM_ID\n  // ///////////////////////\n  // Debug Draw ID (this correlates to GeomID within a GLGeomSet)\n  float geomId = v_geomItemData.w;\n  fragColor.rgb = getDebugColor(geomId);\n  // ///////////////////////\n#endif\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n#elif defined(DRAW_GEOMDATA)\n\n  if (occlusionCulling == 0) {\n    // When not occlusion culling, we don't render non-selectable objects.\n    //When occlusion culling, we want to draw all the geom data for all objects.\n    if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n      discard;\n      return;\n    }\n  }\n  else {\n    // Transparent geoms do not render to the occlusion buffer\n    if (testFlag(flags, GEOMITEM_TRANSPARENT)) {\n      discard;\n      return;\n    }\n  }\n  \n  fragColor = setFragColor_geomData(v_viewPos, v_drawItemIds.x, v_drawItemIds.y, isOrthographic, flags);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemIds.x);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}"; // eslint-disable-line

  var vert$2 = "precision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\nattribute vec3 normals;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nimport 'GLSLUtils.glsl'\nimport 'transpose.glsl'\nimport 'inverse.glsl'\nimport 'geomItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying vec4 v_drawItemIds;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n\nvoid main(void) {\n  v_drawItemIds = getDrawItemIds();\n  int geomItemId = int(v_drawItemIds.x + 0.5);\n  v_geomItemData  = getInstanceData(geomItemId);\n\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  vec4 pos = vec4(positions, 1.);\n  vec4 viewPos    = modelViewMatrix * pos;\n  gl_Position     = projectionMatrix * viewPos;\n\n  mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));\n  v_viewPos       = -viewPos.xyz;\n  v_viewNormal    = normalMatrix * normals; // Note: we normalize in the fragment shader.\n\n#ifdef ENABLE_TEXTURES\n  v_textureCoord = texCoords;\n  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n#endif\n\n  v_worldPos      = (modelMatrix * pos).xyz;\n}\n"; // eslint-disable-line

  /* eslint-disable require-jsdoc */
  /** A simple shader with no support for PBR or textures
   * @ignore
   */
  class SimpleSurfaceShader extends GLShader {
      /**
       * Create a SimpleSurfaceShader
       * @param gl - gl context
       */
      constructor(gl) {
          super(gl, 'SimpleSurfaceShader');
          this.setShaderStage('VERTEX_SHADER', vert$2);
          this.setShaderStage('FRAGMENT_SHADER', frag$2);
      }
      /**
       * The getPackedMaterialData method.
       * @param material - The material param.
       * @return - The return value.
       */
      static getPackedMaterialData(material) {
          const matData = new Float32Array(8);
          const baseColorParam = material.getParameter('BaseColor');
          let baseColor;
          if (baseColorParam instanceof MaterialColorParam && baseColorParam.colorSpace == exports.ColorSpace.Gamma) {
              baseColor = baseColorParam.value.toLinear();
          }
          else {
              baseColor = baseColorParam.value;
          }
          matData[0] = baseColor.r;
          matData[1] = baseColor.g;
          matData[2] = baseColor.b;
          matData[3] = baseColor.a;
          matData[4] = material.getParameter('Opacity').value;
          matData[5] = material.getParameter('EmissiveStrength').value;
          return matData;
      }
      /**
       * Each shader provides a template material that each material instance is
       * based on. The shader specifies the parameters needed by the shader, and
       * the material provides values to the shader during rendering.
       * @return - The template material value.
       */
      static getMaterialTemplate() {
          return material$3;
      }
  }
  const material$3 = new SimpleSurfaceMaterial('SimpleSurfaceShader_template');
  Registry.register('SimpleSurfaceShader', SimpleSurfaceShader);

  var vert$1 = "\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nattribute vec3 positions;\nattribute vec3 normals;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform int isOrthographic;\n\n// Now that we render multiple types of geometry from a single shader\n// we need to know what kind of geometry it is...\nuniform int geomType;\n\nuniform float outlineThickness;\nuniform vec2 viewportSize;\n\n// should be imported by bottom 3\nimport 'GLSLUtils.glsl'\nimport 'transpose.glsl'\nimport 'inverse.glsl'\n\nimport 'geomItemId.glsl'\nimport 'geomType.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\nimport 'geomItemFlags.glsl'\nimport 'materialparams.glsl'\n\n/* VS Outputs */\nvarying vec4 v_drawItemIds;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\n#if defined(DRAW_COLOR)\n#elif defined(DRAW_GEOMDATA)\n#elif defined(DRAW_HIGHLIGHT)\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n\n  v_drawItemIds = getDrawItemIds();\n  int geomItemId = int(v_drawItemIds.x + 0.5);\n  v_geomItemData = getInstanceData(geomItemId);\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n\n  vec4 pos = vec4(positions, 1.);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  vec4 viewPos    = modelViewMatrix * pos;\n  gl_Position     = projectionMatrix * viewPos;\n  v_viewPos       = -viewPos.xyz;\n  v_worldPos      = (modelMatrix * pos).xyz;\n\n  mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));\n  v_viewNormal    = normalMatrix * normals; // Note: we normalize in the fragment shader.\n  \n  // offset slightly the lines and points to make them clearly defined.\n  // This ensures that lines drawn over surfaces are solid and not clipped\n  // at all by the surface.\n  if (geomType == TRIANGLES) {\n    if (outlineThickness > 0.00001) {\n      vec2 screenNormal = v_viewNormal.xy;\n      gl_Position.xy += normalize(screenNormal) * ((2.0 / viewportSize) * outlineThickness) * gl_Position.w;\n    }\n  }\n  \n  //////////////////////////////////////////////\n  // Overlay\n  float viewDepth = v_viewPos.z;\n    \n\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 materialValue2 = getMaterialValue(materialCoords, 2);\n  vec4 materialValue5 = getMaterialValue(materialCoords, 5);\n  float overlay = materialValue2.b;\n  float pointSize = materialValue5.r;\n\n  if (geomType == TRIANGLES) {\n  }\n  else if (geomType == LINES) { // start 'LINES'\n  // Note: this value has been determined to be the smallest possible value\n  // that still makes the lines render over faces consistently\n    overlay += 0.000001 / viewDepth;\n  } // end 'LINES'\n  else if (geomType == POINTS) { // start 'POINTS'\n    // Fixed size on screen points.\n    gl_PointSize = pointSize;\n    overlay += 0.000005 / viewDepth;\n  }  // end 'POINTS'\n\n  if (isOrthographic > 0){\n    gl_Position.z -= overlay;\n  } else {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.z, overlay);\n  }\n\n#ifdef ENABLE_TEXTURES\n  v_textureCoord = texCoords;\n  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n#endif\n\n}\n"; // eslint-disable-line

  var frag$1 = "precision highp float;\nprecision highp int;\n#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl' \nimport 'cutaways.glsl'\nimport 'geometryMask.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\nimport 'GLSLBits.glsl'\nimport 'geomItemFlags.glsl'\n\n/* VS Outputs */\nvarying vec4 v_drawItemIds;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\n// Now that we render multiple types of geometry from a single shader\n// we need to know what kind of geometry it is...\nuniform int geomType;\nimport 'geomType.glsl'\n\nuniform int isOrthographic;\n\n#if defined(DRAW_COLOR)\n\nuniform int renderMode;\nuniform int occluded;\nuniform float outlineThickness;\nuniform vec4 hiddenLineColor;\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\nuniform float exposure;\n#endif\n\nuniform mat4 cameraMatrix;\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\n\nuniform sampler2D AmbientOcclusionTex;\nuniform int AmbientOcclusionTexType;\n\n#ifdef ENABLE_PBR\nuniform sampler2D RoughnessTex;\nuniform int RoughnessTexType;\n\nuniform sampler2D MetallicTex;\nuniform int MetallicTexType;\n\nuniform sampler2D ReflectanceTex;\nuniform int ReflectanceTexType;\n\nuniform sampler2D NormalTex;\nuniform int NormalTexType;\n#endif // ENABLE_PBR\n\nuniform sampler2D EmissiveStrengthTex;\nuniform int EmissiveStrengthTexType;\n\n#endif // ENABLE_TEXTURES\n\nimport 'PBRSurfaceRadiance.glsl'\n\n#ifdef ENABLE_PBR\nmat3 cotangentFrame( in vec3 normal, in vec3 pos, in vec2 texCoord ) {\n  // https://stackoverflow.com/questions/5255806/how-to-calculate-tangent-and-binormal\n  vec3 n = normal;\n  // derivations of the fragment position\n  vec3 pos_dx = dFdx( pos );\n  vec3 pos_dy = dFdy( pos );\n  // derivations of the texture coordinate\n  vec2 texC_dx = dFdx( texCoord );\n  vec2 texC_dy = dFdy( texCoord );\n  // tangent vector and binormal vector\n  vec3 t = -(texC_dy.y * pos_dx - texC_dx.y * pos_dy);\n  vec3 b = -(texC_dx.x * pos_dy - texC_dy.x * pos_dx);\n\n  t = t - n * dot( t, n ); // orthonormalization ot the tangent vectors\n  b = b - n * dot( b, n ); // orthonormalization of the binormal vectors to the normal vector\n  b = b - t * dot( b, t ); // orthonormalization of the binormal vectors to the tangent vector\n  mat3 tbn = mat3( normalize(t), normalize(b), n );\n\n  return tbn;\n}\n#endif\n\nimport 'computeViewNormal.glsl'\n\n#ifdef DEBUG_GEOM_ID\nimport 'debugColors.glsl'\n#endif\n\n// end DRAW_COLOR\n#elif defined(DRAW_GEOMDATA)\n\nimport 'surfaceGeomData.glsl'\n\n#elif defined(DRAW_HIGHLIGHT)\nimport 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n  #ifndef ENABLE_ES3\n    vec4 fragColor;\n  #endif\n  \n  int geomItemId = int(v_drawItemIds.x + 0.5);\n  int elemId = int(v_drawItemIds.y + 0.5);\n  int perFaceMaterialId = int(v_drawItemIds.z);\n  int flags = int(v_geomItemData.x + 0.5);\n  float treeItemOpacity = v_geomItemData.y;\n\n  // We can make geoms invisible to hide them. \n  // Avoid drawing GeomData for geoms that are completely transparent.\n  if (treeItemOpacity < 0.001) {\n    discard;\n    return;\n  }\n  \n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n    vec4 cutAwayData   = getCutaway(geomItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (length(planeNormal) > 0.5) {\n      if (cutaway(v_worldPos, planeNormal, planeDist)) {\n          discard;\n          return;\n      }\n    } else {\n      if (testGeometryMask(v_viewPos)) {\n        discard;\n        return;\n      }\n    }\n  }\n  vec2 materialCoords = v_geomItemData.zw;\n  if (v_drawItemIds.z > 0.5) {\n    materialCoords.x = v_drawItemIds.z;\n  }\n  \n#if defined(DRAW_COLOR)\n\n  if (geomType == TRIANGLES) { // start 'TRIANGLES'\n\n    //////////////////////////////////////////////\n    // Normals\n    vec3 viewNormal;\n    if (length(v_viewNormal) < 0.1) {\n      viewNormal = computeViewNormal(v_viewPos);\n    } else {\n      viewNormal = normalize(v_viewNormal);\n    }\n    vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);\n    \n    vec3 viewVector;\n    if (isOrthographic == 0)\n      viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));\n    else \n      viewVector = vec3(cameraMatrix[2][0], cameraMatrix[2][1], cameraMatrix[2][2]);\n      \n    if (dot(normal, viewVector) < 0.0) {\n      normal = -normal;\n      // Note: this line can be used to debug inverted meshes.\n      //material.baseColor = vec3(1.0, 0.0, 0.0);\n    }\n\n    //////////////////////////////////////////////\n    // Material\n\n    MaterialParams material;\n\n    vec4 matValue0      = getMaterialValue(materialCoords, 0);\n    vec4 matValue1      = getMaterialValue(materialCoords, 1);\n    vec4 matValue2      = getMaterialValue(materialCoords, 2);\n\n    vec4 baseColor = matValue0;\n    float opacity = matValue2.g;\n    material.baseColor     = baseColor.rgb;\n    material.ambientOcclusion = matValue1.r;\n    material.metallic      = matValue1.g;\n    material.roughness     = matValue1.b;\n    material.reflectance   = matValue1.a;\n\n    material.emission      = matValue2.r;\n    material.opacity       = opacity * baseColor.a;\n\n#ifdef ENABLE_TEXTURES\n\n    // Planar YZ projection for texturing, repeating every meter.\n    // vec2 texCoord       = v_worldPos.xz * 0.2;\n    vec2 texCoord          = v_textureCoord;\n\n    getTextureColorValue(baseColor, BaseColorTex, BaseColorTexType, texCoord);\n    getTextureLuminanceValue(material.ambientOcclusion, AmbientOcclusionTex, AmbientOcclusionTexType, texCoord);\n    \n    material.baseColor     = baseColor.rgb;\n    material.opacity       = opacity * baseColor.a;\n\n#ifdef ENABLE_PBR\n\n    getTextureLuminanceValue(material.metallic, MetallicTex, MetallicTexType, texCoord);\n    getTextureLuminanceValue(material.roughness, RoughnessTex, RoughnessTexType, texCoord);\n\n    // TODO: Communicate that this tex contains the roughness as well.\n    if (MetallicTexType != 0) {\n      vec4 metallicRoughness = texture2D(MetallicTex, texCoord);\n      material.roughness = metallicRoughness.g;\n      material.metallic = metallicRoughness.b;\n    }\n\n    getTextureLuminanceValue(material.reflectance, ReflectanceTex, ReflectanceTexType, texCoord);\n#endif // ENABLE_PBR\n\n    getTextureLuminanceValue(material.emission, EmissiveStrengthTex, EmissiveStrengthTexType, texCoord);\n#endif // ENABLE_TEXTURES\n\n#ifdef ENABLE_TEXTURES\n#ifdef ENABLE_PBR\n    if (NormalTexType != 0) {\n      mat3 tbn = cotangentFrame(normal, viewVector, texCoord);\n      normal = normalize(tbn * (texture2D(NormalTex, texCoord).rgb * 2.0 - 1.0));\n    }\n#endif // ENABLE_PBR\n#endif // ENABLE_TEXTURES\n\n    if (outlineThickness > 0.00001) {\n      vec4 edgeColor      = getMaterialValue(materialCoords, 3);\n      vec4 matValue2      = getMaterialValue(materialCoords, 2);\n      float opacity       = matValue2.g;\n\n      edgeColor.a = edgeColor.a * opacity * treeItemOpacity;\n      \n      fragColor = edgeColor;\n    } else {\n      \n      if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY) && !gl_FrontFacing) {\n        fragColor = vec4(material.baseColor, material.opacity);\n      }\n      else if (renderMode == 1) { // Flat\n        fragColor = vec4(material.baseColor, material.opacity);\n      } else if (renderMode == 2) { // Shaded\n        // simple irradiance. \n        float ndotv = dot(normal, viewVector);\n        fragColor = vec4((ndotv * material.baseColor) + (material.emission * material.baseColor), material.opacity);\n      } else if (renderMode == 3) { // PBR\n        fragColor = pbrSurfaceRadiance(material, normal, viewVector);\n      }\n      \n      // Note: the 'treeItemOpacity' is not an input to the PBR lighting, \n      // as we want to also blend off the specular reflections to make an object\n      // fade away to nothing. (not become a transparent glass object).\n      fragColor.a *= treeItemOpacity;\n\n      // Debugging code to help understand what might be happening in the shader.\n      // fragColor = vec4(texture2D(NormalTex, texCoord).rgb, 1.0);\n      // fragColor = metallicRoughness;\n      // fragColor = vec4(material.baseColor, 1.0);;\n      // fragColor = vec4(vec3(material.metallic), 1.0);;\n      // fragColor = vec4(vec3(material.roughness), 1.0);;\n      // fragColor = vec4(vec3(material.ambientOcclusion), 1.0);\n    }\n\n  } // end 'TRIANGLES'\n  else if (geomType == LINES) { // start 'LINES'\n    if (occluded == 1) {\n      vec4 matValue2      = getMaterialValue(materialCoords, 2);\n      float opacity       = matValue2.g;\n      fragColor = hiddenLineColor;\n      fragColor.a = hiddenLineColor.a * opacity * treeItemOpacity;\n    } else {\n      vec4 matValue2      = getMaterialValue(materialCoords, 2);\n      vec4 edgeColor      = getMaterialValue(materialCoords, 3);\n      float opacity       = matValue2.g;\n      float edgeWeight    = matValue2.a;\n      edgeColor.a = edgeColor.a * edgeWeight * opacity * treeItemOpacity;\n      fragColor = edgeColor;\n    }\n  } // end 'LINES'\n  else if (geomType == POINTS) { // start 'POINTS'\n    vec4 pointColor     = getMaterialValue(materialCoords, 4);\n    vec4 matValue2      = getMaterialValue(materialCoords, 2);\n    float opacity       = matValue2.g;\n    pointColor.a = pointColor.a * opacity * treeItemOpacity;\n    fragColor = pointColor;\n  }  // end 'POINTS'\n  \n#ifdef DEBUG_GEOM_ID\n  // ///////////////////////\n  // Debug Draw ID (this correlates to GeomID within a GLGeomSet)\n  float geomId = v_geomItemData.w;\n  fragColor.rgb = getDebugColor(geomId);\n  // ///////////////////////\n#endif\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n// end DRAW_COLOR\n#elif defined(DRAW_GEOMDATA)\n  if (occlusionCulling == 0) {\n    // When not occlusion culling, we don't render non-selectable objects.\n    //When occlusion culling, we want to draw all the geom data for all objects.\n    if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n      discard;\n      return;\n    }\n  }\n  else {\n    // Transparent geoms do not render to the occlusion buffer\n    if (testFlag(flags, GEOMITEM_TRANSPARENT)) {\n      discard;\n      return;\n    }\n  }\n\n  fragColor = setFragColor_geomData(v_viewPos, v_drawItemIds.x, v_drawItemIds.y, isOrthographic, flags);\n   \n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = getHighlightColor(geomItemId);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n\n}"; // eslint-disable-line

  /* eslint-disable require-jsdoc */
  /** A standard shader handling Opaque and transparent items and PBR rendering.
   * @extends GLShader
   * @private
   */
  class StandardSurfaceShader extends GLShader {
      /**
       * Create a GL shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'StandardSuraceShader');
          this.setShaderStage('VERTEX_SHADER', vert$1);
          this.setShaderStage('FRAGMENT_SHADER', frag$1);
      }
      /**
       * The bind method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param key - The key value.
       * @return - The return value.
       */
      bind(renderstate, key) {
          super.bind(renderstate, key);
          if (renderstate instanceof ColorRenderState) {
              const colorRenderState = renderstate;
              const gl = this.__gl;
              if (colorRenderState.envMap) {
                  colorRenderState.envMap.bind(colorRenderState);
              }
              const { exposure, renderMode } = colorRenderState.unifs;
              if (exposure) {
                  gl.uniform1f(exposure.location, colorRenderState.exposure);
              }
              if (colorRenderState.renderMode && renderMode) {
                  if (colorRenderState.renderMode == 'flat' || colorRenderState.renderMode == 'flat-noedges') {
                      gl.uniform1i(renderMode.location, 1);
                  }
                  else if (colorRenderState.renderMode == 'shaded' || colorRenderState.renderMode == 'shaded-noedges') {
                      gl.uniform1i(renderMode.location, 2);
                  }
                  else if (colorRenderState.renderMode == 'pbr' || colorRenderState.renderMode == 'pbr-noedges') {
                      gl.uniform1i(renderMode.location, 3);
                  }
              }
          }
          return true;
      }
      /**
       * The getPackedMaterialData method.
       * @param material - The material param.
       * @return - The return value.
       */
      static getPackedMaterialData(material) {
          const matData = new Float32Array(24);
          const baseColorParam = material.getParameter('BaseColor');
          let baseColor;
          if (baseColorParam instanceof MaterialColorParam && baseColorParam.colorSpace == exports.ColorSpace.Gamma) {
              baseColor = baseColorParam.value.toLinear();
          }
          else {
              baseColor = baseColorParam.value;
          }
          matData[0] = baseColor.r;
          matData[1] = baseColor.g;
          matData[2] = baseColor.b;
          matData[3] = baseColor.a;
          matData[4] = material.getParameter('AmbientOcclusion').value;
          matData[5] = material.getParameter('Metallic').value;
          matData[6] = material.getParameter('Roughness').value;
          matData[7] = material.getParameter('Reflectance').value;
          matData[8] = material.getParameter('EmissiveStrength').value;
          matData[9] = material.getParameter('Opacity').value;
          matData[10] = material.getParameter('Overlay').value;
          matData[11] = material.getParameter('EdgeWeight').value;
          const edgeColor = material.getParameter('EdgeColor').value;
          matData[12] = edgeColor.r;
          matData[13] = edgeColor.g;
          matData[14] = edgeColor.b;
          matData[15] = edgeColor.a;
          const pointColor = material.getParameter('PointColor').value;
          matData[16] = pointColor.r;
          matData[17] = pointColor.g;
          matData[18] = pointColor.b;
          matData[19] = pointColor.a;
          matData[20] = material.getParameter('PointSize').value;
          return matData;
      }
      /**
       * Each shader provides a template material that each material instance is
       * based on. The shader specifies the parameters needed by the shader, and
       * the material provides values to the shader during rendering.
       * @return - The template material value.
       */
      static getMaterialTemplate() {
          return material$2;
      }
  }
  const material$2 = new StandardSurfaceMaterial('StandardSurfaceShader_template');
  Registry.register('StandardSurfaceShader', StandardSurfaceShader);
  Registry.register('TransparentSurfaceShader', StandardSurfaceShader);

  /* eslint-disable require-jsdoc */
  /** A simple shader with no support for PBR or textures
   * @ignore
   */
  class VertexColorShader extends GLShader {
      /**
       * Create a VertexColorShader
       * @param gl - gl context
       */
      constructor(gl) {
          super(gl, 'VertexColorShader');
          this.setShaderStage('VERTEX_SHADER', `precision highp float;


    attribute vec3 positions;
    attribute vec3 normals;
    #ifdef ENABLE_TEXTURES
    attribute vec2 texCoords;
    #endif
    attribute vec4 colors;
    
    uniform mat4 viewMatrix;
    uniform mat4 projectionMatrix;
    
    import 'GLSLUtils.glsl'
    import 'transpose.glsl'
    import 'inverse.glsl'
    import 'geomItemId.glsl'
    import 'drawItemTexture.glsl'
    import 'modelMatrix.glsl'
    
    /* VS Outputs */
    varying vec4 v_drawItemIds;
    varying vec4 v_geomItemData;
    varying vec3 v_viewPos;
    varying vec3 v_viewNormal;
    varying vec4 v_vertexColors;
    #ifdef ENABLE_TEXTURES
    varying vec2 v_textureCoord;
    #endif
    varying vec3 v_worldPos;
    
    void main(void) {
      v_drawItemIds = getDrawItemIds();
      int geomItemId = int(v_drawItemIds.x + 0.5);
      v_geomItemData  = getInstanceData(geomItemId);
      v_vertexColors = colors;
      
      mat4 modelMatrix = getModelMatrix(geomItemId);
      mat4 modelViewMatrix = viewMatrix * modelMatrix;
    
      vec4 pos = vec4(positions, 1.);
      vec4 viewPos    = modelViewMatrix * pos;
      gl_Position     = projectionMatrix * viewPos;
    
      mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));
      v_viewPos       = -viewPos.xyz;
      v_viewNormal    = normalMatrix * normals; // Note: we normalize in the fragment shader.
    
    #ifdef ENABLE_TEXTURES
      v_textureCoord  = texCoords;
      // v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y
    #endif
    
      v_worldPos      = (modelMatrix * pos).xyz;
    }
    `);
          this.setShaderStage('FRAGMENT_SHADER', `precision highp float;

    import 'GLSLUtils.glsl'
    import 'drawItemTexture.glsl'
    import 'cutaways.glsl'
    import 'geometryMask.glsl'
    import 'gamma.glsl'
    import 'materialparams.glsl'
    import 'geomItemFlags.glsl'
    
    #ifdef DEBUG_GEOM_ID
    import 'debugColors.glsl'
    #endif
    
    /* VS Outputs */
    varying vec4 v_drawItemIds;
    varying vec4 v_geomItemData;
    varying vec3 v_viewPos;
    varying vec3 v_viewNormal;
    varying vec4 v_vertexColors;
    #ifdef ENABLE_TEXTURES
    varying vec2 v_textureCoord;
    #endif
    varying vec3 v_worldPos;
    /* VS Outputs */
    
    uniform mat4 cameraMatrix;
    uniform int isOrthographic;
    
    #ifdef ENABLE_ES3
        out vec4 fragColor;
    #endif
    
    
    #if defined(DRAW_COLOR)
    
    import 'computeViewNormal.glsl'
      
    // end DRAW_COLOR
    #elif defined(DRAW_GEOMDATA)
      import 'surfaceGeomData.glsl'
    #elif defined(DRAW_HIGHLIGHT)
      import 'surfaceHighlight.glsl'
    #endif // DRAW_HIGHLIGHT
    
    
    void main(void) {
    #ifndef ENABLE_ES3
      vec4 fragColor;
    #endif
      int geomItemId = int(v_drawItemIds.x + 0.5);
      int elemId = int(v_drawItemIds.y + 0.5);
      int perFaceMaterialId = int(v_drawItemIds.z);
      int flags = int(v_geomItemData.x + 0.5);
      float treeItemOpacity = v_geomItemData.y;
    
      // We can make geoms invisible to hide them. 
      // Avoid drawing GeomData for geoms that are completely transparent.
      if (treeItemOpacity < 0.001) {
        discard;
        return;
      }
      
      // Cutaways
      if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) 
      {
        vec4 cutAwayData   = getCutaway(geomItemId);
        vec3 planeNormal = cutAwayData.xyz;
        float planeDist = cutAwayData.w;
        if (length(planeNormal) > 0.5) {
          if (cutaway(v_worldPos, planeNormal, planeDist)) {
              discard;
              return;
          }
        } else {
          if (testGeometryMask(v_viewPos)) {
            discard;
            return;
          }
        }
      }
    
    #if defined(DRAW_COLOR)
    
      if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY) && !gl_FrontFacing) {
        fragColor = cutColor;
        return;
      } else {

        //////////////////////////////////////////////
        // Normals
        
        vec3 viewNormal;
        if (length(v_viewNormal) < 0.1) {
          viewNormal = computeViewNormal(v_viewPos);
        } else {
          viewNormal = normalize(v_viewNormal);
        }
        vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);
        
        vec3 viewVector;
        if (isOrthographic == 0)
          viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));
        else 
          viewVector = vec3(-cameraMatrix[2][0], -cameraMatrix[2][1], -cameraMatrix[2][2]);
        
        //////////////////////////////////////////////
        // Material
      
        vec4 baseColor = v_vertexColors;
      
        // Hacky simple irradiance. 
        float ndotv = dot(normal, viewVector);
        if (ndotv < 0.0) {
          normal = -normal;
          ndotv = dot(normal, viewVector);
      
          // Note: these 2 lines can be used to debug inverted meshes.
          //baseColor = vec4(1.0, 0.0, 0.0, 1.0);
          //ndotv = 1.0;
        }

        fragColor = vec4((ndotv * baseColor.rgb), 1.0);
      }
    
      // Note: the 'treeItemOpacity' is not an input to the lighting, 
      // as we want to also blend off the specular reflections to make an object
      // fade away to nothing. (not become a transparent glass object).
      fragColor.a *= treeItemOpacity;
    
    
    #ifdef DEBUG_GEOM_ID
      // ///////////////////////
      // Debug Draw ID (this correlates to GeomID within a GLGeomSet)
      float geomId = v_geomItemData.w;
      fragColor.rgb = getDebugColor(geomId);
      // ///////////////////////
    #endif
    
    #ifdef ENABLE_INLINE_GAMMACORRECTION
      fragColor.rgb = toGamma(fragColor.rgb);
    #endif
    
    #elif defined(DRAW_GEOMDATA)
      if (occlusionCulling == 0) {
        // When not occlusion culling, we don't render non-selectable objects.
        //When occlusion culling, we want to draw all the geom data for all objects.
        if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {
          discard;
          return;
        }
      }
      else {
        // Transparent geoms do not render to the occlusion buffer
        if (testFlag(flags, GEOMITEM_TRANSPARENT)) {
          discard;
          return;
        }
      }
      fragColor = setFragColor_geomData(v_viewPos, v_drawItemIds.x, v_drawItemIds.y, isOrthographic, 0);
    #elif defined(DRAW_HIGHLIGHT)
      fragColor = setFragColor_highlight(v_drawItemIds.x);
    #endif // DRAW_HIGHLIGHT
    
    #ifndef ENABLE_ES3
      gl_FragColor = fragColor;
    #endif
    }`);
      }
      /**
       * The bind method.
       * @param renderstate - The object tracking the current state of the renderer
       * @param key - The key value.
       * @return - The return value.
       */
      bind(renderstate, key) {
          super.bind(renderstate, key);
          if (renderstate instanceof ColorRenderState) {
              const gl = this.__gl;
              const { cutColor } = renderstate.unifs;
              if (cutColor) {
                  gl.uniform4f(cutColor.location, 0.3, 0, 0, 1);
              }
          }
          return true;
      }
      /**
       * Each shader provides a template material that each material instance is
       * based on. The shader specifies the parameters needed by the shader, and
       * the material provides values to the shader during rendering.
       * @return - The template material value.
       */
      static getMaterialTemplate() {
          return material$1;
      }
      /**
       * The supportsInstancing method.
       * @return - return false for shaders that cannot be rendered in instanced mode.
       */
      static supportsInstancing() {
          return false;
      }
  }
  const material$1 = new VertexColorMaterial('VertexColorShader_template');
  Registry.register('VertexColorShader', VertexColorShader);

  var frag = "\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\n\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\nimport 'geomItemFlags.glsl'\n\n#if defined(DRAW_COLOR)\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\n#endif\n\n#endif // DRAW_COLOR\n\n/* VS Outputs */\nvarying float v_geomItemId;\nvarying vec4 v_geomItemData;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n  \n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  //////////////////////////////////////////////\n  // Color\n#if defined(DRAW_COLOR)\n\n    vec2 materialCoords = v_geomItemData.zw;\n    vec4 baseColor = getMaterialValue(materialCoords, 0);\n\n  #ifdef ENABLE_TEXTURES\n    getTextureColorValue(baseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n  #endif\n\n    fragColor = baseColor;\n\n  #ifdef ENABLE_INLINE_GAMMACORRECTION\n    fragColor.rgb = toGamma(fragColor.rgb);\n  #endif\n\n  //////////////////////////////////////////////\n  // GeomData\n#elif defined(DRAW_GEOMDATA)\n  fragColor = setFragColor_geomData(vec3(0,0,0), v_geomItemId, 0.0, isOrthographic, 0);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_geomItemId);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n"; // eslint-disable-line

  var vert = "\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nimport 'GLSLUtils.glsl'\nimport 'geomItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_geomItemId;\nvarying vec4 v_geomItemData;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\n\nvoid main(void) {\n  int geomItemId = getGeomItemId();\n  v_geomItemId = float(geomItemId);\n  v_geomItemData  = getInstanceData(geomItemId);\n\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n\n  gl_Position = (modelMatrix * vec4(positions, 1.0));\n\n  v_textureCoord = texCoords;\n  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n}\n"; // eslint-disable-line

  class ScreenSpaceShader extends GLShader {
      /**
       * Create a GL shader.
       * @param gl - The webgl rendering context.
       */
      constructor(gl) {
          super(gl, 'ScreenSpaceShader');
          this.setShaderStage('VERTEX_SHADER', vert);
          this.setShaderStage('FRAGMENT_SHADER', frag);
      }
      static isOverlay() {
          return true;
      }
      /**
       * The getPackedMaterialData method.
       * @param material - The material param.
       * @return - The return value.
       */
      static getPackedMaterialData(material) {
          const matData = new Float32Array(8);
          const baseColor = material.getParameter('BaseColor').value;
          matData[0] = baseColor.r;
          matData[1] = baseColor.g;
          matData[2] = baseColor.b;
          matData[3] = baseColor.a;
          return matData;
      }
      /**
       * Each shader provides a template material that each material instance is
       * based on. The shader specifies the parameters needed by the shader, and
       * the material provides values to the shader during rendering.
       * @return - The template material value.
       */
      static getMaterialTemplate() {
          return material;
      }
  }
  const material = new ScreenSpaceMaterial('ScreenSpaceShader_template');
  Registry.register('ScreenSpaceShader', ScreenSpaceShader);

  /** This class abstracts the rendering of a collection of geometries to screen.
   * @extends GLPass
   */
  class GLStandardGeomsPass extends GLPass {
      materials = new Map();
      listenerIDs = new Map();
      /**
       * Create a GL pass.
       */
      constructor() {
          super();
      }
      /**
       * The init method.
       * @param renderer - The renderer value.
       * @param passIndex - The index of the pass in the GLRenderer
       */
      init(renderer, passIndex) {
          super.init(renderer, passIndex);
      }
      /**
       * The itemAddedToScene method is called on each pass when a new item
       * is added to the scene, and the renderer must decide how to render it.
       * It allows Passes to select geometries to handle the drawing of.
       * @param treeItem - The treeItem value.
       * @param rargs - Extra return values are passed back in this object.
       * The object contains a parameter 'continueInSubTree', which can be set to false,
       * so the subtree of this node will not be traversed after this node is handled.
       * @return - Returns true if the item is now added to the pass.
       */
      itemAddedToScene(treeItem, rargs) {
          if (treeItem instanceof GeomItem) {
              const geomItem = treeItem;
              {
                  {
                      if (this.filterGeomItem(geomItem)) {
                          this.addGeomItem(geomItem);
                          return true;
                      }
                      else {
                          return false;
                      }
                  }
              }
          }
          else {
              return false;
          }
      }
      /**
       * The itemRemovedFromScene method is called on each pass when aa item
       * is removed to the scene, and the pass must handle cleaning up any resources.
       * @param treeItem - The treeItem value.
       * @param rargs - Extra return values are passed back in this object.
       * @return - The return value.
       */
      itemRemovedFromScene(treeItem, rargs) {
          if (treeItem instanceof GeomItem) {
              this.removeGeomItem(treeItem);
              return true;
          }
          return false;
      }
      /**
       * The filterGeomItem method.
       * @param geomItem - The geomItem value.
       * @return - The return value.
       */
      filterGeomItem(geomItem) {
          return true;
      }
      /**
       * Checks the material to see if it is opaque.
       * @param material - The geomItem value.
       * @return - The return value.
       */
      checkMaterial(material) {
          return true;
      }
      /**
       * The addGeomItem method.
       * @param geomItem - The geomItem value.
       */
      addGeomItem(geomItem) {
          const listenerIDs = {};
          this.listenerIDs.set(geomItem, listenerIDs);
          // ////////////////////////////////////
          // Tracking Material Transparency changes...
          // In the case that a geometry material changes, we may need to
          // select a different pass. e.g. if the new material is transparent.
          const reassignPass = () => {
              this.removeGeomItem(geomItem);
              this.renderer.assignTreeItemToGLPass(geomItem);
          };
          listenerIDs['materialParam.valueChanged'] = geomItem.materialParam.on('valueChanged', reassignPass);
          listenerIDs['geomParam.valueChanged'] = geomItem.geomParam.on('valueChanged', reassignPass);
          const opacityChanged = (event) => {
              if (event.isOpaqueStateChanged) {
                  reassignPass();
              }
          };
          const material = geomItem.materialParam.value;
          this.materials.set(geomItem, material);
          listenerIDs['geomItem.opacityChanged'] = geomItem.on('opacityChanged', opacityChanged);
          listenerIDs['material.opacityChanged'] = material.on('opacityChanged', opacityChanged);
      }
      /**
       * The removeGeomItem method.
       * @param geomItem - The geomItem value.
       */
      removeGeomItem(geomItem) {
          const listenerIDs = this.listenerIDs.get(geomItem);
          this.listenerIDs.delete(geomItem);
          geomItem.materialParam.off('valueChanged', listenerIDs['materialParam.valueChanged']);
          geomItem.geomParam.off('valueChanged', listenerIDs['geomParam.valueChanged']);
          const material = this.materials.get(geomItem);
          this.materials.delete(geomItem);
          geomItem.off('opacityChanged', listenerIDs['geomItem.opacityChanged']);
          material.off('opacityChanged', listenerIDs['material.opacityChanged']);
      }
      /**
       * The constructShader method.
       * Given a material, generate the various shaders required to render objects
       * using this material. There should always be at least a single glShader
       * and optionally a glgeomdatashader for rendering the goem data buffer
       * and a glselectedshader for rendering selection hilghlights
       * @param shaderName - The name of the base shader.
       * @return - The object containing the shader instances.
       */
      constructShader(shaderName) {
          const glShader = this.__renderer.getOrCreateShader(shaderName);
          return glShader;
      }
      /**
       * The getGeomItemAndDist method.
       * @param geomData - The geomData value.
       * @return - The return value.
       */
      getGeomItemAndDist(geomData) {
          let itemId;
          let componentId = -1;
          let dist;
          if (geomData instanceof Float32Array) {
              itemId = Math.round(geomData[1]);
              componentId = Math.round(geomData[2]);
              dist = geomData[3];
          }
          else {
              itemId = geomData[0] + ((geomData[1] & 63) << 8);
              dist = MathFunctions.decode16BitFloatFrom2xUInt8(geomData.slice(2, 3));
          }
          const geomItem = this.renderer.glGeomItemLibrary.getGeomItem(itemId);
          if (geomItem) {
              return {
                  geomItem,
                  componentId,
                  dist,
              };
          }
          return undefined;
      }
  }

  /** Class representing a GL opaque geoms pass.
   * @extends GLStandardGeomsPass
   * @private
   */
  class GLOpaqueGeomsPass extends GLStandardGeomsPass {
      glShaderMaterials = new Map();
      glShaderGeomSets = new Map();
      /**
       * Create a GL opaque geoms pass.
       */
      constructor() {
          super();
          // Optimized Render Tree
          // Structured like so for efficient render traversial.
          // {GLShaders}[GLMaterials][GLGeoms][GLGeomItems]
      }
      /**
       * Returns the pass type. OPAQUE passes are always rendered first, followed by TRANSPARENT passes, and finally OVERLAY.
       * @return - The pass type value.
       */
      getPassType() {
          return PassType.OPAQUE;
      }
      // ///////////////////////////////////
      // Bind to Render Tree
      /**
       * The filterGeomItem method.
       * @param geomItem - The geomItem value.
       * @return - The return value.
       */
      filterGeomItem(geomItem) {
          const material = geomItem.materialParam.value;
          return geomItem.isOpaque() && material.isOpaque();
      }
      /**
       * Checks the material to see if it is opaque.
       * @param material - The geomItem value.
       * @return - The return value.
       */
      checkMaterial(material) {
          return material.isOpaque();
      }
      /**
       * Removes the GeomITem from this pass, and then asks the renderer to re-add it.
       * @param geomItem - The geomItem value.
       */
      removeAndReAddGeomItem(geomItem) {
          this.removeGeomItem(geomItem);
          this.__renderer.assignTreeItemToGLPass(geomItem);
      }
      /**
       * The addGeomItem method.
       * @param geomItem - The geomItem value.
       * @return - The return value.
       */
      addGeomItem(geomItem) {
          super.addGeomItem(geomItem);
          const materialParam = geomItem.materialParam;
          const material = materialParam.value;
          const glGeomItem = this.renderer.glGeomItemLibrary.getGLGeomItem(geomItem);
          const gl = this.__gl;
          if (gl.multiDrawElementsInstanced && glGeomItem.supportInstancing && !material.isTextured()) {
              this.addGeomItemToMultiDraw(geomItem, glGeomItem);
          }
          else {
              this.addGeomItemToConventionalDraw(geomItem, glGeomItem);
          }
      }
      addGeomItemToMultiDraw(geomItem, glGeomItem) {
          const materialParam = geomItem.materialParam;
          const material = materialParam.value;
          const shaderName = material.getShaderName();
          const shader = this.__renderer.getOrCreateShader(shaderName);
          let glShaderGeomSets = this.glShaderGeomSets.get(shader);
          if (!glShaderGeomSets) {
              glShaderGeomSets = new GLShaderGeomSets(this.__renderer, this.__gl, shader);
              glShaderGeomSets.on('updated', () => {
                  this.__renderer.requestRedraw();
              });
              this.glShaderGeomSets.set(shader, glShaderGeomSets);
          }
          glShaderGeomSets.addGLGeomItem(glGeomItem);
          glGeomItem.GLShaderGeomSets = glShaderGeomSets;
          this.emit('updated');
      }
      addGeomItemToConventionalDraw(geomItem, glGeomItem) {
          const materialParam = geomItem.materialParam;
          const material = materialParam.value;
          const glGeomLibrary = this.renderer.glGeomLibrary;
          const glGeom = glGeomLibrary.constructGLGeom(geomItem.geomParam.value);
          // ////////////////////////////////////
          // Shaders
          const shaderName = material.getShaderName();
          const glMaterial = this.renderer.glMaterialLibrary.getGLMaterial(material);
          const glShader = glMaterial.glShader;
          let glShaderMaterials = this.glShaderMaterials.get(glShader);
          if (!glShaderMaterials) {
              const shader = this.constructShader(shaderName);
              glShaderMaterials = new GLShaderMaterials(this.__gl, this, shader);
              this.glShaderMaterials.set(glShader, glShaderMaterials);
              glShaderMaterials.on('updated', () => {
                  this.__renderer.requestRedraw();
              });
          }
          glShaderMaterials.addGLGeomItem(glGeomItem, glGeom, glMaterial);
          return;
      }
      /**
       * The removeGeomItem method.
       * @param geomItem - The geomItem value.
       * @return - The return value.
       */
      removeGeomItem(geomItem) {
          super.removeGeomItem(geomItem);
          const glGeomItem = this.renderer.glGeomItemLibrary.getGLGeomItem(geomItem);
          if (glGeomItem.GLShaderGeomSets) {
              const glShaderGeomSets = glGeomItem.GLShaderGeomSets;
              glShaderGeomSets.removeGLGeomItem(glGeomItem);
              glGeomItem.GLShaderGeomSets = null;
              return;
          }
          if (glGeomItem.GLGeomItemSet) {
              const glGeomItemSet = glGeomItem.GLGeomItemSet;
              glGeomItemSet.removeGLGeomItem(glGeomItem);
              glGeomItem.GLGeomItemSet = null;
              return;
          }
          return;
      }
      /**
       * The removeMaterial method.
       * @param material - The material value.
       */
      removeMaterial(material) {
          const glMaterial = this.renderer.glMaterialLibrary.getGLMaterial(material);
          const glShader = glMaterial.glShader;
          const glShaderMaterials = this.glShaderMaterials.get(glShader);
          glShaderMaterials.removeMaterialGeomItemSets(glMaterial);
      }
      /**
       * The traverseTreeAndDraw method.
       * @param renderstate - The renderstate value.
       * @private
       */
      traverseTreeAndDraw(renderstate) {
          // eslint-disable-next-line guard-for-in
          this.glShaderGeomSets.forEach((glShaderGeomSet) => {
              glShaderGeomSet.draw(renderstate);
          });
          this.glShaderMaterials.forEach((glShaderMaterials) => {
              glShaderMaterials.draw(renderstate);
          });
          if (renderstate.glGeom) {
              renderstate.glGeom.unbind(renderstate);
          }
      }
      /**
       * The draw method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          const gl = this.__gl;
          renderstate.pushGLStack('GLOpaqueGeomsPass.drawGeomData');
          renderstate.glDisable(gl.BLEND);
          renderstate.glEnable(gl.DEPTH_TEST);
          // gl.disable(gl.BLEND)
          // Note: our zcad files can contain surfaces with flipped normals.
          // This is due to re-using geoms on various sides of a mesh, while applying
          // a -1 scale on one of the axes to flip. We need 2-sided rendering enabled
          // by default.
          {
              // 2-sided rendering.
              // gl.disable(gl.CULL_FACE)
              renderstate.glDisable(gl.CULL_FACE);
          }
          // gl.enable(gl.DEPTH_TEST)
          gl.depthFunc(gl.LEQUAL);
          gl.depthMask(true);
          this.traverseTreeAndDraw(renderstate);
          const renderer = this.renderer;
          if (renderer.outlineThickness > 0 && renderer.outlineMethod == 'image') {
              renderstate.viewport.drawSilhouettes(renderstate);
          }
          renderstate.popGLStack();
      }
      /**
       * The drawHighlightedGeoms method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawHighlightedGeoms(renderstate) {
          const gl = this.__gl;
          gl.disable(gl.CULL_FACE); // 2-sided rendering.
          this.glShaderGeomSets.forEach((glShaderGeomSet) => {
              glShaderGeomSet.drawHighlightedGeoms(renderstate);
          });
          this.glShaderMaterials.forEach((glShaderMaterials) => {
              glShaderMaterials.drawHighlightedGeoms(renderstate);
          });
          if (renderstate.glGeom) {
              renderstate.glGeom.unbind(renderstate);
          }
      }
      /**
       * The drawGeomData method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawGeomData(renderstate) {
          renderstate.passIndex = this.passIndex;
          const gl = this.__gl;
          gl.disable(gl.BLEND);
          gl.disable(gl.CULL_FACE);
          gl.enable(gl.DEPTH_TEST);
          gl.depthFunc(gl.LEQUAL);
          gl.depthMask(true);
          this.glShaderGeomSets.forEach((glShaderGeomSet) => {
              glShaderGeomSet.drawGeomData(renderstate);
          });
          this.glShaderMaterials.forEach((glShaderMaterials) => {
              glShaderMaterials.drawGeomData(renderstate);
          });
          if (renderstate.glGeom) {
              renderstate.glGeom.unbind(renderstate);
          }
      }
  }
  GLRenderer.registerPass(GLOpaqueGeomsPass, PassType.OPAQUE);

  /** Class representing a GL opaque geoms pass.
   * @extends GLOpaqueGeomsPass
   * @private
   */
  class GLLinesPass extends GLOpaqueGeomsPass {
      linesGeomDataBuffer = null;
      fattenLinesShader = null;
      quad = null;
      fbo = null;
      /**
       * Create a GL opaque geoms pass.
       */
      constructor() {
          super();
      }
      /**
       * The init method.
       * @param renderer - The renderer value.
       * @param passIndex - The index of the pass in the GLBAseRenderer
       */
      init(renderer, passIndex) {
          super.init(renderer, passIndex);
      }
      /**
       * The filterGeomItem method.
       * @param geomItem - The geomItem value.
       * @return - The return value.
       */
      filterGeomItem(geomItem) {
          const geom = geomItem.geomParam.value;
          if (geom instanceof Lines || geom instanceof LinesProxy || geom instanceof Points || geom instanceof PointsProxy) {
              return true;
          }
          return false;
      }
      /**
       * The draw method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          const gl = this.__gl;
          renderstate.pushGLStack('GLLinesPass.draw');
          renderstate.glEnable(gl.BLEND);
          renderstate.glEnable(gl.DEPTH_TEST);
          // gl.enable(gl.BLEND)
          // gl.enable(gl.DEPTH_TEST)
          gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);
          gl.depthFunc(gl.LEQUAL);
          gl.depthMask(true);
          this.traverseTreeAndDraw(renderstate);
          // gl.disable(gl.BLEND)
          renderstate.popGLStack();
      }
      /**
       * The drawGeomData method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawGeomData(renderstate) {
          const gl = this.__gl;
          //  Note: lines in VR are not fattened...
          if (renderstate.geomDataFbo && !renderstate.occlusionCulling) {
              renderstate.pushGLStack('GLLinesPass.drawGeomData');
              if (!this.linesGeomDataBuffer) {
                  this.linesGeomDataBuffer = new GLTexture2D(gl, {
                      type: this.__renderer.floatGeomBuffer ? 'FLOAT' : 'UNSIGNED_BYTE',
                      format: 'RGBA',
                      filter: 'NEAREST',
                      width: 1,
                      height: 2,
                  });
                  this.fattenLinesShader = new FattenLinesShader(gl);
                  this.quad = new GLMesh(gl, new Plane(1, 1));
              }
              const geomDataFbo = renderstate.geomDataFbo;
              const width = geomDataFbo.width;
              const height = geomDataFbo.height;
              if (this.linesGeomDataBuffer.width != width || this.linesGeomDataBuffer.height != height) {
                  if (this.fbo) {
                      gl.deleteFramebuffer(this.fbo);
                      this.fbo = null;
                  }
                  this.linesGeomDataBuffer.resize(width, height);
                  this.fbo = gl.createFramebuffer();
                  const colorTex = this.linesGeomDataBuffer.glTex;
                  const depthBuffer = geomDataFbo.depthTexture; // Share the existing depth buffer.
                  if (gl.name == 'webgl2') {
                      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.fbo);
                      gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, colorTex, 0);
                      gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthBuffer, 0);
                  }
                  else {
                      gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);
                      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, colorTex, 0);
                      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthBuffer, 0);
                  }
                  checkFramebuffer(gl, width, height);
              }
              else {
                  if (gl.name == 'webgl2')
                      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.fbo);
                  else
                      gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);
              }
              gl.colorMask(true, true, true, true);
              gl.clearColor(0, 0, 0, 0);
              gl.clear(gl.COLOR_BUFFER_BIT);
          }
          super.drawGeomData(renderstate);
          if (renderstate.geomDataFbo && !renderstate.occlusionCulling) {
              renderstate.popGLStack();
              // Re-bind the FBo.
              // Note: bindForWriting tries to cache the previously bound Fbo, which is actually
              // the geomDataFbo. So we need to null here to avoid that.
              // I did work on making the renderstate track the bound Fbo, so it would do it more
              // elegantly than this, but it was a big change.
              renderstate.boundRendertarget = null;
              renderstate.geomDataFbo.bindForWriting(renderstate);
              this.fattenLinesShader.bind(renderstate);
              const { colorTexture, screenSize } = renderstate.unifs;
              this.linesGeomDataBuffer.bindToUniform(renderstate, colorTexture);
              const geomDataFbo = renderstate.geomDataFbo;
              gl.uniform2f(screenSize.location, geomDataFbo.width, geomDataFbo.height);
              this.quad.bindAndDraw(renderstate);
          }
      }
  }
  GLRenderer.registerPass(GLLinesPass, PassType.OPAQUE);

  /** Class representing a GL transparent geoms pass.
   * @extends GLStandardGeomsPass
   * @private
   */
  class GLTransparentGeomsPass extends GLStandardGeomsPass {
      itemCount = 0;
      glShaderGeomSets = {}; // GLShaderGeomSets
      transparentItems = [];
      transparentItemIndices = new Map();
      freeList = [];
      visibleItems = [];
      prevSortCameraPos = new Vec3(999, 999, 999);
      sortCameraMovementDistance = 0.25; // meters
      reSort = false;
      /**
       * Create GL transparent geoms pass.
       */
      constructor() {
          super();
      }
      /**
       * The init method.
       * @param renderer - The renderer value.
       * @param passIndex - The index of the pass in the GLBAseRenderer
       */
      init(renderer, passIndex) {
          super.init(renderer, passIndex);
      }
      /**
       * Returns the pass type. OPAQUE passes are always rendered first, followed by TRANSPARENT passes, and finally OVERLAY.
       * @return - The pass type value.
       */
      getPassType() {
          return PassType.TRANSPARENT;
      }
      /**
       * The init method.
       * @param geomItem - The geomItem value.
       * @return - The return value.
       */
      filterGeomItem(geomItem) {
          const geom = geomItem.geomParam.value;
          if (geom instanceof Lines || geom instanceof Points || geom instanceof PointsProxy || geom instanceof LinesProxy)
              return false;
          const material = geomItem.materialParam.value;
          return !geomItem.isOpaque() || !material.isOpaque();
      }
      /**
       * When an item visibility changes, we trigger this method, as new items become visible
       */
      resortNeeded() {
          this.reSort = true;
      }
      /**
       * The addGeomItem method.
       * @param geomItem - The geomItem value.
       */
      addGeomItem(geomItem) {
          super.addGeomItem(geomItem);
          this.itemCount++;
          const listenerIDs = this.listenerIDs.get(geomItem);
          const material = geomItem.materialParam.value;
          const shaderName = material.getShaderName();
          const glShader = this.constructShader(shaderName);
          if (!material.isTextured()) {
              if (material.getShaderClass().supportsInstancing()) {
                  let glShaderGeomSets = this.glShaderGeomSets[shaderName];
                  if (!glShaderGeomSets) {
                      glShaderGeomSets = new GLShaderGeomSets(this.__renderer, this.__gl, glShader);
                      glShaderGeomSets.on('updated', () => {
                          this.renderer.requestRedraw();
                      });
                      this.glShaderGeomSets[shaderName] = glShaderGeomSets;
                  }
                  const glGeomItem = this.renderer.glGeomItemLibrary.getGLGeomItem(geomItem);
                  glShaderGeomSets.addGLGeomItem(glGeomItem);
                  listenerIDs['glGeomItem.visibilityChanged'] = glGeomItem.on('visibilityChanged', () => {
                      this.resortNeeded();
                  });
                  this.emit('updated');
                  glGeomItem.GLShaderGeomSets = glShaderGeomSets;
                  // force a reSort.
                  this.reSort = true;
                  return;
              }
          }
          const glGeom = this.renderer.glGeomLibrary.constructGLGeom(geomItem.geomParam.value);
          // const glGeomItem = this.constructGLGeomItem(geomItem)
          const glGeomItem = this.renderer.glGeomItemLibrary.getGLGeomItem(geomItem);
          if (!glGeomItem)
              throw new Error('glGeomItem not found for geomItem:' + geomItem.getName());
          // @todo - make sure we remove materials and GeomItems from the base pass.
          // This code will leak memory for these classes as we are not cleaning them up.
          const glMaterial = this.renderer.glMaterialLibrary.getGLMaterial(material);
          // ////////////////////////////////////
          // Tracking visibility changes.
          const visibilityChanged = (event) => {
              if (event.visible) {
                  this.visibleItems.push(item);
              }
              else {
                  const index = this.visibleItems.indexOf(item);
                  this.visibleItems.splice(index, 1);
              }
              this.reSort = true;
          };
          listenerIDs['glGeomItem.visibilityChanged'] = glGeomItem.on('visibilityChanged', visibilityChanged);
          // ////////////////////////////////////
          // Tracking GeomMat changes.
          listenerIDs['GeomMat.valueChanged'] = geomItem.geomMatParam.on('valueChanged', () => {
              this.reSort = true;
          });
          const item = {
              geomItem,
              glShader,
              glGeom,
              glMaterial,
              glGeomItem,
              material,
              dist: 0,
          };
          let itemindex;
          if (this.freeList.length > 0)
              itemindex = this.freeList.pop();
          else
              itemindex = this.transparentItems.length;
          this.transparentItems[itemindex] = item;
          this.transparentItemIndices.set(geomItem, itemindex);
          if (geomItem.isVisible()) {
              this.visibleItems.push(item);
          }
          // force a reSort.
          this.reSort = true;
      }
      /**
       * The removeGeomItem method.
       * @param geomItem - The geomItem value.
       */
      removeGeomItem(geomItem) {
          this.itemCount--;
          const listenerIDs = this.listenerIDs.get(geomItem);
          super.removeGeomItem(geomItem);
          const glGeomItem = this.renderer.glGeomItemLibrary.getGLGeomItem(geomItem);
          if (!glGeomItem)
              throw new Error('glGeomItem not found for geomItem:' + geomItem.getName());
          glGeomItem.off('visibilityChanged', listenerIDs['glGeomItem.visibilityChanged']);
          if (glGeomItem.GLShaderGeomSets) {
              const glShaderGeomSets = glGeomItem.GLShaderGeomSets;
              glShaderGeomSets.removeGLGeomItem(glGeomItem);
              glGeomItem.GLShaderGeomSets = null;
          }
          else {
              const itemindex = this.transparentItemIndices.get(geomItem);
              const item = this.transparentItems[itemindex];
              this.transparentItemIndices.delete(geomItem);
              this.transparentItems[itemindex] = null;
              this.freeList.push(itemindex);
              const visibleindex = this.visibleItems.indexOf(item);
              if (visibleindex != -1)
                  this.visibleItems.splice(visibleindex, 1);
          }
          this.emit('updated');
          return true;
      }
      /**
       * Sorts the drawn items in order furthest to nearest when rendering transparent objects.
       * @param viewPos - The position of the camera that we are sorting relative to.
       */
      sortItems(viewPos) {
          // eslint-disable-next-line guard-for-in
          for (const shaderName in this.glShaderGeomSets) {
              this.glShaderGeomSets[shaderName].sortItems(viewPos);
          }
          for (const transparentItem of this.visibleItems) {
              const mat4 = transparentItem.glGeomItem.geomItem.geomMatParam.value;
              transparentItem.dist = mat4.translation.distanceTo(viewPos);
          }
          this.visibleItems.sort((a, b) => (a.dist > b.dist ? -1 : a.dist < b.dist ? 1 : 0));
          this.reSort = false;
      }
      /**
       * Draw n individual item, binding the shader and material if necessary.
       * @param renderstate - current renderstad
       * @param transparentItem - current item to render
       * @param cache - cache tracking which material/shader is currently bound.
       */
      drawItem(renderstate, transparentItem, cache) {
          if (cache.currentGLMaterial != transparentItem.glMaterial) {
              cache.currentGLMaterial = transparentItem.glMaterial;
              cache.currentGLMaterial.bind(renderstate, false);
          }
          if (cache.currentGLGeom != transparentItem.glGeom) {
              cache.currentGLGeom = transparentItem.glGeom;
              cache.currentGLGeom.bind(renderstate);
          }
          const glGeomItem = transparentItem.glGeomItem;
          glGeomItem.bind(renderstate);
          renderstate.bindViewports(renderstate.unifs, () => {
              cache.currentGLGeom.draw(renderstate);
          });
      }
      /**
       * The _drawItems method.
       * @param renderstate - The object tracking the current state of the renderer
       * @private
       */
      _drawItems(renderstate) {
          // Note: sorting here will not sort geometries of different types.
          // this is a flawed solution that only sorts geomemtries of the same
          // time and same shader against each other. Given that this is the data 99% o
          // of the time, this is an acceptable tradeoff
          // eslint-disable-next-line guard-for-in
          for (const shaderName in this.glShaderGeomSets) {
              this.glShaderGeomSets[shaderName].draw(renderstate);
          }
          const cache = {
              currentglShader: null,
              currentGLMaterial: null,
              currentGLGeom: null,
          };
          for (const transparentItem of this.visibleItems) {
              const glShader = transparentItem.glShader;
              if (cache.currentglShader != glShader) {
                  // Some passes, like the depth pass, bind custom uniforms.
                  // Note: No 'unbind' here before binding the next shader.
                  // That is to support a simple hack. LinesShader enables blend
                  // each time it is bound, and then disables on unbind.
                  if (!glShader.bind(renderstate, 'color')) {
                      continue;
                  }
                  // Specify an non-instanced draw to the shader
                  const gl = this.__gl;
                  const unifs = renderstate.unifs;
                  if (unifs.instancedDraw) {
                      gl.uniform1i(unifs.instancedDraw.location, 0);
                  }
                  // Note: this disables the attribute location, which must be enabled again for
                  // the next geom, which might use a different attribute location.
                  // e.g.
                  // one shader might specify attributes ['positions', 'instancedIds]
                  // another  might specify attributes ['positions', 'texCoords' 'instancedIds]
                  // In this case, we should re-enabled location 2 and then disable 3.
                  // if (renderstate.attrs.instancedIds && renderstate.attrs.instancedIds.location != -1) {
                  //   gl.disableVertexAttribArray(renderstate.attrs.instancedIds.location)
                  // }
                  this.renderer.glGeomItemLibrary.bind(renderstate);
                  this.renderer.glGeomLibrary.bind(renderstate);
                  this.renderer.glMaterialLibrary.bind(renderstate);
                  cache.currentglShader = glShader;
              }
              this.drawItem(renderstate, transparentItem, cache);
          }
          if (cache.currentglShader)
              cache.currentglShader.unbind(renderstate);
          // if (cache.currentGLGeom) cache.currentGLGeom.unbind(renderstate)
      }
      /**
       * The draw method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          if (this.itemCount == 0)
              return;
          const gl = this.__gl;
          const viewPos = renderstate.viewXfo.tr;
          // Avoid sorting if the camera did not move more than the specified tolerance.
          if (this.reSort || viewPos.distanceTo(this.prevSortCameraPos) > this.sortCameraMovementDistance) {
              this.sortItems(viewPos);
              this.prevSortCameraPos = viewPos;
              if (renderstate.xrviewport) {
                  // Adapt the sort tolerance to the focal distance.
                  // In a tiny scene, we want to sort more frequently.
                  this.sortCameraMovementDistance = renderstate.viewScale * 0.2;
              }
              else if (renderstate.viewport) {
                  // Adapt the sort tolerance to the focal distance.
                  // In a tiny scene, we want to sort more frequently.
                  const camera = renderstate.viewport.getCamera(); // TODO: check if this cast is correct.
                  this.sortCameraMovementDistance = camera.getFocalDistance() * 0.3;
              }
          }
          renderstate.pushGLStack('GLTransparentGeomsPass.draw');
          renderstate.glEnable(gl.BLEND);
          renderstate.glEnable(gl.DEPTH_TEST);
          renderstate.glEnable(gl.CULL_FACE);
          // gl.enable(gl.DEPTH_TEST)
          // gl.enable(gl.BLEND)
          gl.depthFunc(gl.LESS);
          gl.blendEquation(gl.FUNC_ADD);
          // Complex transparent surfaces require multiple passes.
          // First the multiply pass tints the background color, simulating
          // light passing through the surface, and then the add layer
          // adds new color to the backbuffer to simulate light bouncing off
          // the surface.
          // TODO: Optimise this system.
          // After depth sorting, we should split the items into 2 groups.
          // Multiply items, and Add  items. (Many items will be in both)
          // Then we can simply check if we have any multiply items here
          // before rendering all items.
          // for Multiply pass, we can use front and back surfaces to calculate depth and how much
          // of the background layer to let through.
          // gl.disable(gl.CULL_FACE)
          // gl.blendFunc(gl.DST_COLOR, gl.ZERO) // For multiply, select this.
          // this._drawItems(renderstate)
          // for the Add
          renderstate.pass = 'ADD';
          // https://google.github.io/filament/Filament.html#lighting/transparencyandtranslucencylighting/transparency
          gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);
          // Only draw font faces. BEcause all faces are drawn, it can make a mess to see the back faces through the front faces.
          // e.g. we might see the triangles on the other side of a sphere rendered over the top of triangles on the near side.
          // gl.enable(gl.CULL_FACE)
          gl.cullFace(gl.BACK);
          this._drawItems(renderstate);
          // gl.disable(gl.BLEND)
          // gl.depthMask(true)
          renderstate.popGLStack();
      }
      /**
       * The drawHighlightedGeoms method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawHighlightedGeoms(renderstate) {
          const gl = this.__gl;
          gl.disable(gl.CULL_FACE); // 2-sided rendering.
          // eslint-disable-next-line guard-for-in
          for (const shaderName in this.glShaderGeomSets) {
              this.glShaderGeomSets[shaderName].drawHighlightedGeoms(renderstate);
          }
          const cache = {
              currentglShader: null,
              currentGLMaterial: null,
              currentGLGeom: null,
          };
          for (const transparentItem of this.visibleItems) {
              if (!transparentItem.geomItem.isHighlighted())
                  continue;
              const glShader = transparentItem.glShader;
              if (cache.currentglShader != glShader) {
                  // Some passes, like the depth pass, bind custom uniforms.
                  if (!glShader.bind(renderstate, 'highlight')) {
                      continue;
                  }
                  cache.currentglShader = glShader;
                  const { floatGeomBuffer, passId, instancedDraw } = renderstate.unifs;
                  if (floatGeomBuffer) {
                      gl.uniform1i(floatGeomBuffer.location, gl.floatGeomBuffer ? 1 : 0);
                  }
                  if (passId) {
                      gl.uniform1i(passId.location, this.passIndex);
                  }
                  if (instancedDraw) {
                      gl.uniform1i(instancedDraw.location, 0);
                  }
                  this.renderer.glGeomItemLibrary.bind(renderstate);
              }
              this.drawItem(renderstate, transparentItem, cache);
          }
          if (cache.currentglShader)
              cache.currentglShader.unbind(renderstate);
          if (cache.currentGLGeom)
              cache.currentGLGeom.unbind(renderstate);
      }
      /**
       * The drawGeomData method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawGeomData(renderstate) {
          const gl = this.__gl;
          renderstate.pushGLStack('GLTransparentGeomsPass.drawGeomData');
          renderstate.glEnable(gl.DEPTH_TEST);
          renderstate.glEnable(gl.CULL_FACE);
          // eslint-disable-next-line guard-for-in
          for (const shaderName in this.glShaderGeomSets) {
              this.glShaderGeomSets[shaderName].drawGeomData(renderstate);
          }
          const cache = {
              currentglShader: null,
              currentGLMaterial: null,
              currentGLGeom: null,
          };
          for (const transparentItem of this.visibleItems) {
              if (!transparentItem.glGeomItem.geomItem.isSelectable())
                  continue;
              const glShader = transparentItem.glShader;
              if (!glShader) {
                  continue;
              }
              if (cache.currentglShader != glShader) {
                  // Some passes, like the depth pass, bind custom uniforms.
                  if (!glShader.bind(renderstate, 'geomdata')) {
                      continue;
                  }
                  cache.currentglShader = glShader;
                  const { floatGeomBuffer, passId, instancedDraw } = renderstate.unifs;
                  if (floatGeomBuffer) {
                      gl.uniform1i(floatGeomBuffer.location, gl.floatGeomBuffer ? 1 : 0);
                  }
                  if (passId) {
                      gl.uniform1i(passId.location, this.passIndex);
                  }
                  if (instancedDraw) {
                      gl.uniform1i(instancedDraw.location, 0);
                  }
                  this.renderer.glGeomItemLibrary.bind(renderstate);
              }
              this.drawItem(renderstate, transparentItem, cache);
          }
          if (cache.currentGLGeom)
              cache.currentGLGeom.unbind(renderstate);
          if (cache.currentglShader)
              cache.currentglShader.unbind(renderstate);
          renderstate.popGLStack();
      }
  }
  GLRenderer.registerPass(GLTransparentGeomsPass, PassType.TRANSPARENT);

  const pixelsPerItem = 7; // The number of pixels per draw item.
  /** Class representing a GL billboards pass.
   * @extends GLPass
   * @private
   */
  class GLBillboardsPass extends GLPass {
      billboards;
      dirtyBillboards;
      freeIndices;
      drawCount;
      threshold;
      updateRequested;
      prevSortCameraPos;
      atlas = null;
      indexArrayUpdateNeeded = false;
      instanceIdsBuffer = null;
      indexArray = new Float32Array(0);
      glshader = null;
      shaderComp = {};
      shaderBinding = null;
      modelMatrixArray = [];
      billboardDataArray = []; // TODO: map vs array? refactor
      tintColorArray = [];
      width = 0;
      drawItemsTexture = null;
      /**
       * Create a GL billboards pass.
       */
      constructor() {
          super();
          this.billboards = [];
          this.dirtyBillboards = new Set();
          this.freeIndices = [];
          this.drawCount = 0;
          this.threshold = 0.0;
          this.updateRequested = false;
          this.prevSortCameraPos = new Vec3();
      }
      /**
       * The init method.
       * @param renderer - The renderer value.
       * @param passIndex - The index of the pass in the GLBAseRenderer
       */
      init(renderer, passIndex) {
          super.init(renderer, passIndex);
          // TODO: this.atlas = new GLImageAtlas(this.renderer.gl, 'Billboards', 'RGBA', 'UNSIGNED_BYTE', [1, 1, 1, 0]) // TODO: Check if last arg was for color
          this.atlas = new GLImageAtlas(this.renderer.gl, 'Billboards', 'RGBA', 'UNSIGNED_BYTE');
          this.atlas.clearColor = new Color(1, 1, 1, 0);
          const emitUpdated = (event) => this.emit('updated', event);
          this.atlas.on('loaded', emitUpdated);
          this.atlas.on('updated', emitUpdated);
      }
      /**
       * Returns the pass type. OPAQUE passes are always rendered first, followed by TRANSPARENT passes, and finally OVERLAY.
       * @return - The pass type value.
       */
      getPassType() {
          return PassType.TRANSPARENT;
      }
      /**
       * The itemAddedToScene method is called on each pass when a new item
       * is added to the scene, and the renderer must decide how to render it.
       * It allows Passes to select geometries to handle the drawing of.
       * @param treeItem - The treeItem value.
       * @param rargs - Extra return values are passed back in this object.
       * The object contains a parameter 'continueInSubTree', which can be set to false,
       * so the subtree of this node will not be traversed after this node is handled.
       * @return - The return value.
       */
      itemAddedToScene(treeItem, rargs) {
          if (treeItem instanceof BillboardItem) {
              this.addBillboard(treeItem);
              return true;
          }
          return false;
      }
      /**
       * The itemRemovedFromScene method is called on each pass when aa item
       * is removed to the scene, and the pass must handle cleaning up any resources.
       * @param treeItem - The treeItem value.
       * @param rargs - Extra return values are passed back in this object.
       * @return - The return value.
       */
      itemRemovedFromScene(treeItem, rargs) {
          if (treeItem instanceof BillboardItem) {
              this.removeBillboard(treeItem);
              return true;
          }
          return false;
      }
      // ///////////////////////////////////
      // Bind to Render Tree
      /**
       * The addBillboard method.
       * @param billboard - The billboard value.
       */
      addBillboard(billboard) {
          const imageParam = billboard.imageParam;
          const image = imageParam.value;
          if (!image) {
              imageParam.on('valueChanged', () => this.addBillboard(billboard));
              return;
          }
          let index;
          if (this.freeIndices.length > 0)
              index = this.freeIndices.pop();
          else
              index = this.billboards.length;
          const imageIndex = this.atlas.addSubImage(image);
          billboard.setMetadata('GLBillboardsPass_Index', index);
          const visibilityChanged = () => {
              if (billboard.isVisible()) {
                  this.drawCount++;
                  // The billboard Xfo might have changed while it was
                  // not visible. We need to update here.
                  this.dirtyBillboards.add(index);
              }
              else
                  this.drawCount--;
              this.reqUpdateIndexArray();
          };
          billboard.on('visibilityChanged', visibilityChanged);
          const updateBillboard = () => {
              if (billboard.isVisible()) {
                  this.dirtyBillboards.add(index);
                  this.emit('updated');
              }
          };
          billboard.globalXfoParam.on('valueChanged', updateBillboard);
          billboard.alphaParam.on('valueChanged', updateBillboard);
          billboard.on('highlightChanged', updateBillboard);
          if (billboard.isVisible())
              this.drawCount++;
          this.billboards[index] = {
              billboard,
              imageIndex,
              visibilityChanged,
              updateBillboard,
          };
          this.indexArrayUpdateNeeded = true;
          this.requestUpdate();
      }
      /**
       * The removeBillboard method.
       * @param billboard - The billboard value.
       */
      removeBillboard(billboard) {
          const index = billboard.getMetadata('GLBillboardsPass_Index');
          if (index == -1) {
              console.warn('Billboard already removed.');
              return;
          }
          const billboardData = this.billboards[index];
          // Currently we are getting errors when trying to re-generate the Fbo
          // after removing and then adding images back to the atlas.
          // I don't have time to figure it out, so simply adding images
          // to the atlas. (for the Zahner demo)
          // Eventually we need to clean up the atlas, so debug this using the
          // survey-point-calibration 190528_Dummy_Srvy_Data.vlexe test
          const image = billboardData.billboard.imageParam.value;
          this.atlas.removeSubImage(image);
          billboard.off('visibilityChanged', billboardData.visibilityChanged);
          billboard.off('highlightChanged', billboardData.updateBillboard);
          billboard.globalXfoParam.off('valueChanged', billboardData.updateBillboard);
          billboard.alphaParam.off('valueChanged', billboardData.updateBillboard);
          this.billboards[index] = null;
          this.freeIndices.push(index);
          if (billboard.isVisible())
              this.drawCount--;
          this.indexArrayUpdateNeeded = true;
          this.requestUpdate();
      }
      /**
       * The populateBillboardDataArray method.
       * @param billboardData - The billboardData value.
       * @param index - The index value.
       * @param dataArray - The dataArray value.
       * @private
       */
      populateBillboardDataArray(billboardData, index, dataArray) {
          const billboard = billboardData.billboard;
          const mat4 = billboard.globalXfoParam.value.toMat4();
          const ppm = billboard.pixelsPerMeterParam.value;
          const pivot = billboard.pivotParam.value;
          const scale = 1 / ppm;
          // Until webgl2 is standard, we will avoid using bit flags.
          // instead, we will use decimals.
          let flags = 0;
          if (billboard.alignedToCameraParam.value)
              flags |= 1 << 2;
          if (billboard.drawOnTopParam.value)
              flags |= 1 << 3;
          if (billboard.fixedSizeOnscreenParam.value)
              flags |= 1 << 4;
          const alpha = billboard.alphaParam.value;
          const color = billboard.colorParam.value;
          const offset = index * pixelsPerItem * 4;
          const col0 = new Float32Array(dataArray.buffer, offset * 4, 4);
          const col1 = new Float32Array(dataArray.buffer, (offset + 4) * 4, 4);
          const col2 = new Float32Array(dataArray.buffer, (offset + 8) * 4, 4);
          const col3 = new Float32Array(dataArray.buffer, (offset + 12) * 4, 4);
          col0.set([mat4.xAxis.x, mat4.yAxis.x, mat4.zAxis.x, mat4.translation.x]);
          col1.set([mat4.xAxis.y, mat4.yAxis.y, mat4.zAxis.y, mat4.translation.y]);
          col2.set([mat4.xAxis.z, mat4.yAxis.z, mat4.zAxis.z, mat4.translation.z]);
          col3.set([scale, flags, billboardData.imageIndex, alpha]);
          const col4 = new Float32Array(dataArray.buffer, (offset + 16) * 4, 4);
          col4.set([pivot.x, pivot.y, 0, 0]);
          const col5 = new Float32Array(dataArray.buffer, (offset + 20) * 4, 4);
          col5.set([color.r, color.g, color.b, color.a]);
          // /////////////////////////
          // Highlight
          if (billboard.isHighlighted()) {
              const highlight = billboard.getHighlight();
              const col6 = new Float32Array(dataArray.buffer, (offset + 24) * 4, 4);
              col6.set([highlight.r, highlight.g, highlight.b, highlight.a]);
          }
      }
      /**
       * The requestUpdate method.
       * @private
       */
      requestUpdate() {
          if (!this.updateRequested) {
              this.updateRequested = true;
              this.emit('updated');
          }
      }
      /**
       * The reqUpdateIndexArray method.
       * @private
       */
      reqUpdateIndexArray() {
          if (this.indexArrayUpdateNeeded)
              return;
          this.indexArrayUpdateNeeded = true;
          this.emit('updated');
      }
      // eslint-disable-next-line require-jsdoc
      updateIndexArray() {
          const gl = this.__gl;
          // Note: When the camera moves, this array is sorted and re-upload.
          if (this.indexArray && this.indexArray.length != this.drawCount) {
              gl.deleteBuffer(this.instanceIdsBuffer);
              this.instanceIdsBuffer = null;
          }
          this.indexArray = new Float32Array(this.drawCount);
          let offset = 0;
          for (let i = 0; i < this.billboards.length; i++) {
              if (this.billboards[i] && this.billboards[i].billboard.isVisible()) {
                  this.indexArray[offset] = i;
                  offset++;
              }
          }
          if (!this.instanceIdsBuffer)
              this.instanceIdsBuffer = gl.createBuffer();
          gl.bindBuffer(gl.ARRAY_BUFFER, this.instanceIdsBuffer);
          gl.bufferData(gl.ARRAY_BUFFER, this.indexArray, gl.STATIC_DRAW);
          this.indexArrayUpdateNeeded = false;
      }
      /**
       * The updateBillboards method.
       * @param renderstate - The object tracking the current state of the renderer
       * @private
       */
      updateBillboards(renderstate) {
          const doIt = () => {
              if (this.indexArrayUpdateNeeded)
                  this.updateIndexArray();
              const gl = this.__gl;
              if (!this.glshader) {
                  if (!gl.__quadVertexIdsBuffer) {
                      gl.setupInstancedQuad();
                  }
                  this.glshader = new BillboardShader(gl);
                  const shaderComp = this.glshader.compileForTarget('GLBillboardsPass', renderstate.directives);
                  this.shaderBinding = generateShaderGeomBinding(gl, shaderComp.attrs, gl.__quadattrbuffers, gl.__quadIndexBuffer);
              }
              // Note: Maybe the atlas is already up to date. It should
              // maintain its own coherencey by listening to the sub images.
              this.atlas.renderAtlas();
              if (!gl.floatTexturesSupported || !gl.drawElementsInstanced) {
                  this.modelMatrixArray = [];
                  this.billboardDataArray = [];
                  this.tintColorArray = [];
                  this.indexArray.forEach((index) => {
                      // if (index == -1) return;
                      const billboardData = this.billboards[index];
                      const billboard = billboardData.billboard;
                      const mat4 = billboard.globalXfoParam.value.toMat4();
                      const ppm = billboard.pixelsPerMeterParam.value;
                      const scale = 1 / ppm;
                      let flags = 0;
                      if (billboard.alignedToCameraParam.value)
                          flags |= 1 << 2;
                      if (billboard.drawOnTopParam.value)
                          flags |= 1 << 3;
                      if (billboard.fixedSizeOnscreenParam.value)
                          flags |= 1 << 4;
                      const alpha = billboard.alphaParam.value;
                      const color = billboard.colorParam.value;
                      this.modelMatrixArray[index] = mat4.asArray();
                      this.billboardDataArray[index] = [scale, flags, billboardData.imageIndex, alpha];
                      this.tintColorArray[index] = [color.r, color.g, color.b, color.a];
                  });
                  this.updateRequested = false;
                  return;
              }
              let size = Math.round(Math.sqrt((this.billboards.length - this.freeIndices.length) * pixelsPerItem) + 0.5);
              // Note: the following few lines need a cleanup.
              // We should be using power of 2 textures. The problem is that pot texture sizes don't
              // align with the 6 pixels per draw item. So we need to upload a slightly bigger texture
              // but upload the 'usable' size.
              // Only support power 2 textures. Else we get strange corruption on some GPUs
              // in some scenes.
              // Size should be a multiple of pixelsPerItem, so each geom item is always contiguous
              // in memory. (makes updating a lot easier. See __updateItemInstanceData below)
              // size = Math.nextPow2(size);
              if (size % pixelsPerItem != 0)
                  size += pixelsPerItem - (size % pixelsPerItem);
              this.width = size;
              // if((this.width % pixelsPerItem) != 0)
              //     this.width -= (this.width % pixelsPerItem);
              if (!this.drawItemsTexture) {
                  const params = {
                      format: 'RGBA',
                      type: 'FLOAT',
                      width: size,
                      height: size,
                      filter: 'NEAREST',
                      wrap: 'CLAMP_TO_EDGE',
                      mipMapped: false,
                  };
                  this.drawItemsTexture = new GLTexture2D(gl, params);
                  this.drawItemsTexture.clear();
              }
              else {
                  this.drawItemsTexture.resize(size, size);
              }
              this.indexArray.forEach((index) => {
                  if (index != -1)
                      this.updateBillboard(index);
              });
              this.updateRequested = false;
          };
          if (this.atlas.isLoaded()) {
              doIt();
          }
          else {
              this.atlas.on('loaded', doIt);
          }
      }
      /**
       * The updateBillboard method.
       * @param index - The index of the Billboard to update .
       * @private
       */
      updateBillboard(index) {
          if (this.drawCount == 0 || !this.drawItemsTexture) {
              return;
          }
          const billboardData = this.billboards[index];
          if (!billboardData.billboard.isVisible())
              return;
          const gl = this.__gl;
          const dataArray = new Float32Array(pixelsPerItem * 4);
          this.populateBillboardDataArray(billboardData, 0, dataArray);
          gl.bindTexture(gl.TEXTURE_2D, this.drawItemsTexture.glTex);
          const xoffset = (index * pixelsPerItem) % this.width;
          const yoffset = Math.floor((index * pixelsPerItem) / this.width);
          const width = pixelsPerItem;
          const height = 1;
          const type = this.drawItemsTexture.getType();
          const format = this.drawItemsTexture.getFormat();
          if (type == gl.FLOAT) {
              gl.texSubImage2D(gl.TEXTURE_2D, 0, xoffset, yoffset, width, height, format, type, dataArray);
          }
          else {
              const unit16s = MathFunctions.convertFloat32ArrayToUInt16Array(dataArray);
              gl.texSubImage2D(gl.TEXTURE_2D, 0, xoffset, yoffset, width, height, format, type, unit16s);
          }
      }
      /**
       * The sort method.
       * @param cameraPos - The cameraPos value.
       */
      sort(cameraPos) {
          for (const billboardData of this.billboards) {
              const { billboard } = billboardData;
              if (billboard && billboard.isVisible()) {
                  const xfo = billboard.globalXfoParam.value;
                  billboardData.dist = xfo.tr.distanceTo(cameraPos);
              }
          }
          this.indexArray.sort((a, b) => {
              if (a == -1)
                  return 1;
              if (b == -1)
                  return -1;
              return this.billboards[a].dist > this.billboards[b].dist
                  ? -1
                  : this.billboards[a].dist < this.billboards[b].dist
                      ? 1
                      : 0;
          });
          const gl = this.__gl;
          if (gl.floatTexturesSupported && this.instanceIdsBuffer) {
              gl.bindBuffer(gl.ARRAY_BUFFER, this.instanceIdsBuffer);
              gl.bufferData(gl.ARRAY_BUFFER, this.indexArray, gl.STATIC_DRAW);
          }
      }
      /**
       * Invoke the drawing of each item, compiling the shader using the provided key.
       * @param renderstate - The object tracking the current state of the renderer
       * @param key - The key to cache the compiler results against.
       */
      __draw(renderstate, key) {
          const gl = this.__gl;
          if (!this.glshader)
              return;
          this.glshader.bind(renderstate, key);
          this.shaderBinding.bind(renderstate);
          const unifs = renderstate.unifs;
          const { atlasBillboards, passId, floatGeomBuffer, inVR } = renderstate.unifs;
          if (atlasBillboards) {
              this.atlas.bindToUniform(renderstate, atlasBillboards);
          }
          if (floatGeomBuffer && renderstate instanceof GeomDataRenderState) {
              gl.uniform1i(floatGeomBuffer.location, renderstate.floatGeomBuffer ? 1 : 0);
          }
          if (passId) {
              gl.uniform1i(passId.location, this.passIndex);
          }
          if (inVR) {
              gl.uniform1i(inVR.location, renderstate.vrPresenting ? 1 : 0);
          }
          if (!gl.floatTexturesSupported || !gl.drawElementsInstanced) {
              const { modelMatrix, billboardData, tintColor, layoutData } = renderstate.unifs;
              const len = this.indexArray.length;
              for (let i = 0; i < len; i++) {
                  gl.uniformMatrix4fv(modelMatrix.location, false, this.modelMatrixArray[i]);
                  gl.uniform4fv(billboardData.location, this.billboardDataArray[i]);
                  gl.uniform4fv(tintColor.location, this.tintColorArray[i]);
                  gl.uniform4fv(layoutData.location, this.atlas.getLayoutData(this.billboards[i].imageIndex));
                  renderstate.bindViewports(unifs, () => {
                      gl.drawQuad();
                  });
              }
          }
          else {
              const { instancesTexture, instancesTextureSize } = renderstate.unifs;
              this.drawItemsTexture.bindToUniform(renderstate, instancesTexture);
              gl.uniform1i(instancesTextureSize.location, this.width);
              {
                  // The instance billboard ids are bound as an instanced attribute.
                  const location = renderstate.attrs.instanceIds.location;
                  gl.enableVertexAttribArray(location);
                  gl.bindBuffer(gl.ARRAY_BUFFER, this.instanceIdsBuffer);
                  gl.vertexAttribPointer(location, 1, gl.FLOAT, false, 4, 0);
                  gl.vertexAttribDivisor(location, 1); // This makes it instanced
              }
              renderstate.bindViewports(unifs, () => {
                  gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, this.drawCount);
              });
          }
      }
      /**
       * The sort method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          if (this.drawCount == 0)
              return;
          if (this.updateRequested) {
              this.updateBillboards(renderstate);
          }
          if (this.dirtyBillboards.size > 0) {
              this.dirtyBillboards.forEach((index) => {
                  this.updateBillboard(index);
              });
              this.dirtyBillboards.clear();
          }
          if (this.indexArrayUpdateNeeded)
              this.updateIndexArray();
          if (!this.glshader)
              return;
          const cameraPos = renderstate.viewXfo.tr;
          const dist = cameraPos.distanceTo(this.prevSortCameraPos);
          // Avoid sorting if the camera did not move more than 3 meters.
          if (dist > this.threshold) {
              this.sort(cameraPos);
              this.prevSortCameraPos = cameraPos.clone();
              if (this.drawCount > 1) {
                  const idx0 = this.indexArray[this.indexArray.length - 1];
                  const idx1 = this.indexArray[this.indexArray.length - 2];
                  const billboard0 = this.billboards[idx0].billboard;
                  const billboard1 = this.billboards[idx1].billboard;
                  const tr0 = billboard0.globalXfoParam.value.tr;
                  const tr1 = billboard1.globalXfoParam.value.tr;
                  this.threshold = tr0.distanceTo(tr1);
              }
              else {
                  this.threshold = 9999;
              }
          }
          const gl = this.__gl;
          gl.depthMask(false);
          gl.disable(gl.CULL_FACE);
          gl.enable(gl.BLEND);
          gl.blendEquation(gl.FUNC_ADD);
          gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);
          this.__draw(renderstate, 'DRAW_COLOR');
          gl.disable(gl.BLEND);
          gl.depthMask(true);
      }
      /**
       * The drawHighlightedGeoms method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawHighlightedGeoms(renderstate) {
          if (this.drawCount == 0)
              return;
          this.__draw(renderstate, 'DRAW_HIGHLIGHT');
      }
      /**
       * The drawGeomData method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawGeomData(renderstate) {
          if (this.drawCount == 0)
              return;
          this.__draw(renderstate, 'DRAW_GEOMDATA');
      }
      /**
       * The getGeomItemAndDist method.
       * @param geomData - The geomData value.
       * @return - The return value.
       */
      getGeomItemAndDist(geomData) {
          let itemId;
          let dist;
          if (geomData instanceof Float32Array) {
              itemId = Math.round(geomData[1]);
              dist = geomData[3];
          }
          else {
              itemId = geomData[0] + ((geomData[1] & 63) << 8);
              dist = MathFunctions.decode16BitFloatFrom2xUInt8(geomData.slice(2, 3));
          }
          if (itemId >= this.billboards.length) {
              console.warn('Invalid Draw Item id:' + itemId + ' NumBillboards:' + (this.billboards.length - 1));
              return undefined;
          }
          return {
              geomItem: this.billboards[itemId].billboard,
              componentId: 0,
              dist,
          };
      }
  }
  GLRenderer.registerPass(GLBillboardsPass, PassType.TRANSPARENT);

  /** Class representing a GL overlay pass.
   * @extends GLOpaqueGeomsPass
   */
  class GLOverlayPass extends GLOpaqueGeomsPass {
      /**
       * Create a GL overlay pass.
       * @param name - The name value.
       */
      constructor() {
          super();
      }
      /**
       * Returns the pass type. OPAQUE passes are always rendered first, followed by TRANSPARENT passes, and finally OVERLAY.
       * @return - The pass type value.
       */
      getPassType() {
          return PassType.OVERLAY;
      }
      // ///////////////////////////////////
      // Bind to Render Tree
      /**
       * The filterGeomItem method.
       * @param geomItem - The geomItem value.
       * @return - The return value.
       */
      filterGeomItem(geomItem) {
          if (geomItem.isOverlay())
              return true;
          const shaderClass = geomItem.materialParam.value.getShaderClass();
          if (shaderClass) {
              if (shaderClass.isOverlay())
                  return true;
          }
          return false;
      }
      /**
       * The draw method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          const gl = this.__gl;
          // Clear the depth buffer so handls are always drawn over the top.
          gl.clear(gl.DEPTH_BUFFER_BIT);
          {
              gl.enable(gl.CULL_FACE);
              gl.cullFace(gl.BACK);
          }
          gl.enable(gl.BLEND);
          gl.blendEquation(gl.FUNC_ADD);
          renderstate.pass = 'ADD';
          gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE); // For add
          this.traverseTreeAndDraw(renderstate);
          gl.disable(gl.BLEND);
          // gl.enable(gl.DEPTH_TEST);
      }
      /**
       * The drawGeomData method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      drawGeomData(renderstate) {
          const gl = this.__gl;
          // Clear the depth buffer so handls are always drawn over the top.
          gl.clear(gl.DEPTH_BUFFER_BIT);
          gl.enable(gl.CULL_FACE);
          gl.cullFace(gl.BACK);
          gl.enable(gl.BLEND);
          gl.blendEquation(gl.FUNC_ADD);
          renderstate.pass = 'ADD';
          gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE); // For add
          super.drawGeomData(renderstate);
          gl.disable(gl.BLEND);
          gl.enable(gl.DEPTH_TEST);
      }
  }
  GLRenderer.registerPass(GLOverlayPass, PassType.OVERLAY);
  // We register the overlay pass here so that the GLViewport can
  // find it in the GLRebderer,
  // Note: We can't simply import the class into the GLViewpoirt as that
  // is a circular import.
  Registry.register('GLOverlayPass', GLOverlayPass);

  /** Class representing a GL treeItems pass.
   * @extends GLPass
   * @private
   */
  class GLBoundingBoxPass extends GLPass {
      boxes = [];
      dirtyBoxes = new Set();
      freeIndices = [];
      idToIndex = new Map();
      drawCount = 0;
      indexArrayUpdateNeeded = false;
      __updateRequested = false;
      glgeom;
      glshader;
      __modelMatrixArray = [];
      __treeItemDataArray = [];
      __tintColorArray = [];
      __instanceIdsBuffer;
      __indexArray = new Float32Array(0);
      __drawItemsTexture;
      width = 0;
      /**
       * Create a GL treeItems pass.
       */
      constructor() {
          super();
      }
      /**
       * The getPassType method.
       * @return - The pass type value.
       */
      getPassType() {
          return PassType.OPAQUE;
      }
      /**
       * The init method.
       * @param renderer - The renderer value.
       * @param passIndex - The index of the pass in the GLBAseRenderer
       */
      init(renderer, passIndex) {
          super.init(renderer, passIndex);
          const gl = this.__renderer.gl;
          this.glgeom = new GLLines(gl, new LinesCuboid(1, 1, 1));
          this.glshader = new BoundingBoxShader(gl);
      }
      /**
       * The itemAddedToScene method is called on each pass when a new item
       * is added to the scene, and the renderer must decide how to render it.
       * It allows Passes to select geometries to handle the drawing of.
       * @param treeItem - The treeItem value.
       * @param rargs - Extra return values are passed back in this object.
       * The object contains a parameter 'continueInSubTree', which can be set to false,
       * so the subtree of this node will not be traversed after this node is handled.
       * @return - The return value.
       */
      itemAddedToScene(treeItem, rargs) {
          // if (treeItem instanceof TreeItem) {
          //   this.bindTreeItem(treeItem)
          //   return false
          // }
          return false;
      }
      /**
       * The itemRemovedFromScene method is called on each pass when aa item
       * is removed to the scene, and the pass must handle cleaning up any resources.
       * @param treeItem - The treeItem value.
       * @param rargs - Extra return values are passed back in this object.
       * @return - The return value.
       */
      itemRemovedFromScene(treeItem, rargs) {
          // if (treeItem instanceof TreeItem) {
          //   this.unbindTreeItem(treeItem)
          //   return true
          // }
          return false;
      }
      // ///////////////////////////////////
      // Bind to Render Tree
      /**
       * Adds tree items to the renderer, selecting the correct pass to delegate rendering too, and listens to future changes in the tree.
       *
       * @param treeItem - The tree item to add.
       */
      addTreeItem(treeItem, continueIntoSubTree = true) {
          // Note: we can have BaseItems in the tree now.
          if (!(treeItem instanceof TreeItem))
              return;
          this.bindTreeItem(treeItem);
          if (continueIntoSubTree) {
              // Traverse the tree adding items until we hit the leaves (which are usually GeomItems.)
              for (const childItem of treeItem.getChildren()) {
                  if (childItem)
                      this.addTreeItem(childItem);
              }
              treeItem.on('childAdded', (event) => {
                  this.addTreeItem(event.childItem);
              });
              treeItem.on('childRemoved', (event) => {
                  this.unbindTreeItem(event.childItem);
              });
          }
      }
      /**
       * The bindTreeItem method.
       * @param treeItem - The treeItem value.
       */
      bindTreeItem(treeItem) {
          let index;
          let index_check = this.freeIndices.pop();
          if (index_check)
              index = index_check;
          else
              index = this.boxes.length;
          this.idToIndex.set(treeItem, index);
          const visibilityChanged = () => {
              if (treeItem.isVisible()) {
                  this.drawCount++;
                  // The treeItem Xfo might have changed while it was
                  // not visible. We need to update here.
                  this.dirtyBoxes.add(index);
              }
              else
                  this.drawCount--;
              this.indexArrayUpdateNeeded = true;
          };
          treeItem.on('visibilityChanged', visibilityChanged);
          const xfoChanged = () => {
              if (treeItem.isVisible()) {
                  this.dirtyBoxes.add(index);
                  this.emit('updated');
              }
          };
          treeItem.globalXfoParam.on('valueChanged', xfoChanged);
          treeItem.boundingBoxParam.on('valueChanged', xfoChanged);
          if (treeItem.isVisible())
              this.drawCount++;
          // TODO: make this a type
          this.boxes[index] = {
              treeItem,
              visibilityChanged,
              xfoChanged,
          };
          this.indexArrayUpdateNeeded = true;
          this.__updateRequested = true;
          this.emit('updated');
      }
      /**
       * The unbindTreeItem method.
       * @param treeItem - The treeItem value.
       */
      unbindTreeItem(treeItem) {
          if (!this.idToIndex.has(treeItem)) {
              console.warn('Billboard already removed.');
              return;
          }
          const index = this.idToIndex.get(treeItem);
          const treeItemData = this.boxes[index];
          treeItem.off('visibilityChanged', treeItemData.visibilityChanged);
          treeItem.globalXfoParam.off('valueChanged', treeItemData.xfoChanged);
          treeItem.boundingBoxParam.off('valueChanged', treeItemData.xfoChanged);
          this.boxes[index] = null;
          this.freeIndices.push(index);
          if (treeItem.isVisible())
              this.drawCount--;
          this.indexArrayUpdateNeeded = true;
          this.__updateRequested = true;
          this.__updateBoxes();
          this.emit('updated');
      }
      /**
       * The __populateBoxesDataArray method.
       * @param treeItemData - The treeItemData value.
       * @param index - The index value.
       * @param dataArray - The dataArray value.
       * @private
       */
      __populateBoxesDataArray(treeItemData, index, dataArray) {
          const treeItem = treeItemData.treeItem;
          let color;
          let mat4;
          if (treeItem instanceof GeomItem) {
              color = new Color(1, 0, 0, 1);
              mat4 = treeItem.geomMatParam.value;
          }
          else {
              color = new Color(0, 0, 1, 1);
              mat4 = treeItem.globalXfoParam.value.toMat4();
          }
          const bbox = treeItem.boundingBoxParam.value;
          const offset = index * pixelsPerItem$1 * 4;
          const pixel0 = new Float32Array(dataArray.buffer, offset * 4, 4);
          const pixel1 = new Float32Array(dataArray.buffer, (offset + 4) * 4, 4);
          const pixel2 = new Float32Array(dataArray.buffer, (offset + 8) * 4, 4);
          const pixel3 = new Float32Array(dataArray.buffer, (offset + 12) * 4, 4);
          const pixel4 = new Float32Array(dataArray.buffer, (offset + 16) * 4, 4);
          // const pixel5 = new Float32Array(dataArray.buffer, (offset + 20) * 4, 4)
          const pixel6 = new Float32Array(dataArray.buffer, (offset + 24) * 4, 4);
          const pixel7 = new Float32Array(dataArray.buffer, (offset + 28) * 4, 4);
          let flags = 0;
          pixel0.set([flags, 0, 0, 0]);
          pixel1.set([mat4.xAxis.x, mat4.yAxis.x, mat4.zAxis.x, mat4.translation.x]);
          pixel2.set([mat4.xAxis.y, mat4.yAxis.y, mat4.zAxis.y, mat4.translation.y]);
          pixel3.set([mat4.xAxis.z, mat4.yAxis.z, mat4.zAxis.z, mat4.translation.z]);
          pixel4.set([color.r, color.g, color.b, color.a]);
          pixel6.set([bbox.p0.x, bbox.p0.y, bbox.p0.z, 0.0]);
          pixel7.set([bbox.p1.x, bbox.p1.y, bbox.p1.z, 0.0]);
      }
      // eslint-disable-next-line require-jsdoc
      __updateIndexArray() {
          const gl = this.__gl;
          // Note: When the camera moves, this array is sorted and re-upload.
          if (this.__indexArray && this.__indexArray.length != this.drawCount) {
              gl.deleteBuffer(this.__instanceIdsBuffer);
              this.__instanceIdsBuffer = undefined;
          }
          this.__indexArray = new Float32Array(this.drawCount);
          let offset = 0;
          for (let i = 0; i < this.boxes.length; i++) {
              if (this.boxes[i] && this.boxes[i].treeItem.isVisible()) {
                  this.__indexArray[offset] = i;
                  offset++;
              }
          }
          if (!this.__instanceIdsBuffer)
              this.__instanceIdsBuffer = gl.createBuffer();
          gl.bindBuffer(gl.ARRAY_BUFFER, this.__instanceIdsBuffer);
          gl.bufferData(gl.ARRAY_BUFFER, this.__indexArray, gl.STATIC_DRAW);
          this.indexArrayUpdateNeeded = false;
      }
      /**
       * The __updateBoxes method.
       * @private
       */
      __updateBoxes() {
          if (this.indexArrayUpdateNeeded)
              this.__updateIndexArray();
          const gl = this.__renderer.gl;
          let size = Math.round(Math.sqrt((this.boxes.length - this.freeIndices.length) * pixelsPerItem$1) + 0.5);
          // Note: the following few lines need a cleanup.
          // We should be using power of 2 textures. The problem is that pot texture sizes don't
          // align with the 6 pixels per draw item. So we need to upload a slightly bigger texture
          // but upload the 'usable' size.
          // Only support power 2 textures. Else we get strange corruption on some GPUs
          // in some scenes.
          // Size should be a multiple of pixelsPerItem, so each geom item is always contiguous
          // in memory. (makes updating a lot easier. See __updateItemInstanceData below)
          // size = Math.nextPow2(size);
          if (size % pixelsPerItem$1 != 0)
              size += pixelsPerItem$1 - (size % pixelsPerItem$1);
          this.width = size;
          // if((this.width % pixelsPerItem) != 0)
          //     this.width -= (this.width % pixelsPerItem);
          if (!this.__drawItemsTexture) {
              this.__drawItemsTexture = new GLTexture2D(gl, {
                  format: 'RGBA',
                  type: 'FLOAT',
                  width: size,
                  height: size,
                  filter: 'NEAREST',
                  wrap: 'CLAMP_TO_EDGE',
                  mipMapped: false,
              });
              this.__drawItemsTexture.clear();
          }
          else {
              this.__drawItemsTexture.resize(size, size);
          }
          this.__indexArray.forEach((index) => {
              if (index != -1)
                  this.__updateBox(index);
          });
          this.__updateRequested = false;
      }
      /**
       * The __updateBoxes method.
       * @param index - The index value.
       * @private
       */
      __updateBox(index) {
          if (this.drawCount == 0 || !this.__drawItemsTexture) {
              return;
          }
          const treeItemData = this.boxes[index];
          if (!treeItemData.treeItem.isVisible())
              return;
          const gl = this.__gl;
          const dataArray = new Float32Array(pixelsPerItem$1 * 4);
          this.__populateBoxesDataArray(treeItemData, 0, dataArray);
          gl.bindTexture(gl.TEXTURE_2D, this.__drawItemsTexture.glTex);
          const xoffset = (index * pixelsPerItem$1) % this.width;
          const yoffset = Math.floor((index * pixelsPerItem$1) / this.width);
          const width = pixelsPerItem$1;
          const height = 1;
          const type = this.__drawItemsTexture.getType();
          const format = this.__drawItemsTexture.getFormat();
          if (type == gl.FLOAT) {
              gl.texSubImage2D(gl.TEXTURE_2D, 0, xoffset, yoffset, width, height, format, type, dataArray);
          }
          else {
              const unit16s = MathFunctions.convertFloat32ArrayToUInt16Array(dataArray);
              gl.texSubImage2D(gl.TEXTURE_2D, 0, xoffset, yoffset, width, height, format, type, unit16s);
          }
      }
      /**
       * The sort method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          if (this.drawCount == 0) {
              return;
          }
          if (this.__updateRequested) {
              this.__updateBoxes();
          }
          if (this.dirtyBoxes.size > 0) {
              this.dirtyBoxes.forEach((index) => {
                  this.__updateBox(index);
              });
              this.dirtyBoxes.clear();
          }
          if (this.indexArrayUpdateNeeded)
              this.__updateIndexArray();
          const gl = this.__gl;
          // gl.disable(gl.CULL_FACE)
          // gl.enable(gl.BLEND)
          // gl.blendEquation(gl.FUNC_ADD)
          // gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE)
          this.glshader.bind(renderstate);
          this.glgeom.bind(renderstate);
          const unifs = renderstate.unifs;
          if (!gl.floatTexturesSupported || !gl.drawElementsInstanced) {
              const len = this.__indexArray.length;
              for (let i = 0; i < len; i++) {
                  renderstate.bindViewports(unifs, () => {
                      gl.drawQuad();
                  });
              }
          }
          else {
              this.__drawItemsTexture.bindToUniform(renderstate, unifs.instancesTexture);
              gl.uniform1i(unifs.instancesTextureSize.location, this.width);
              {
                  // The instance transform ids are bound as an instanced attribute.
                  const location = renderstate.attrs.instancedIds.location;
                  gl.enableVertexAttribArray(location);
                  gl.bindBuffer(gl.ARRAY_BUFFER, this.__instanceIdsBuffer);
                  gl.vertexAttribPointer(location, 1, gl.FLOAT, false, 4, 0);
                  gl.vertexAttribDivisor(location, 1); // This makes it instanced
              }
              gl.uniform1i(unifs.instancedDraw.location, 1);
              renderstate.bindViewports(unifs, () => {
                  this.glgeom.drawInstanced(renderstate, this.drawCount);
              });
          }
          // gl.disable(gl.BLEND)
      }
  }

  class GLMaskGeomsPass extends GLOpaqueGeomsPass {
      frontRenderTarget;
      backRenderTarget;
      itemCount = 0;
      drawMaskGeoms = false;
      init(renderer, passIndex) {
          super.init(renderer, passIndex);
          const gl = renderer.gl;
          this.frontRenderTarget = new GLRenderTarget(gl, {
              numColorChannels: 0,
              minFilter: gl.NEAREST,
              magFilter: gl.NEAREST,
              width: 4,
              height: 4,
              depthType: gl.UNSIGNED_SHORT,
              depthFormat: gl.DEPTH_COMPONENT,
              depthInternalFormat: gl.DEPTH_COMPONENT16,
          });
          this.frontRenderTarget.clearColor = new Color(0, 0, 0, 0);
          this.backRenderTarget = new GLRenderTarget(gl, {
              numColorChannels: 0,
              minFilter: gl.NEAREST,
              magFilter: gl.NEAREST,
              width: 4,
              height: 4,
              depthType: gl.UNSIGNED_SHORT,
              depthFormat: gl.DEPTH_COMPONENT,
              depthInternalFormat: gl.DEPTH_COMPONENT16,
          });
          this.backRenderTarget.clearColor = new Color(0, 0, 0, 0);
      }
      filterGeomItem(geomItem) {
          const material = geomItem.materialParam.value;
          if (material instanceof MaskMaterial) {
              return true;
          }
          return false;
      }
      /**
       * The addGeomItem method.
       * @param geomItem - The geomItem value.
       */
      addGeomItem(geomItem) {
          super.addGeomItem(geomItem);
          this.itemCount++;
      }
      /**
       * The removeGeomItem method.
       * @param geomItem - The geomItem value.
       */
      removeGeomItem(geomItem) {
          super.removeGeomItem(geomItem);
          this.itemCount--;
      }
      /**
       * The draw method.
       * @param renderstate - The object tracking the current state of the renderer
       */
      draw(renderstate) {
          if (this.itemCount == 0)
              return;
          renderstate.pushGLStack('GLMaskGeomsPass.draw');
          const gl = this.__gl;
          if (this.drawMaskGeoms) {
              renderstate.glEnable(gl.BLEND);
              gl.blendEquation(gl.FUNC_ADD);
              gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);
              this.traverseTreeAndDraw(renderstate);
              renderstate.glDisable(gl.BLEND);
              gl.clear(gl.DEPTH_BUFFER_BIT);
          }
          const width = renderstate.region[2];
          const height = renderstate.region[3];
          if (width != this.frontRenderTarget.width || height != this.frontRenderTarget.height) {
              this.frontRenderTarget.resize(width, height);
              this.backRenderTarget.resize(width, height);
          }
          gl.depthFunc(gl.LESS);
          gl.depthMask(true);
          renderstate.glEnable(gl.DEPTH_TEST);
          this.frontRenderTarget.bindForWriting(renderstate, true);
          this.traverseTreeAndDraw(renderstate);
          this.frontRenderTarget.unbindForWriting(renderstate);
          this.backRenderTarget.bindForWriting(renderstate, true);
          // Here we invert the depth range to make the front buffer
          gl.depthFunc(gl.GREATER);
          gl.clearDepth(0);
          gl.clear(gl.DEPTH_BUFFER_BIT);
          gl.cullFace(gl.FRONT);
          this.traverseTreeAndDraw(renderstate);
          this.backRenderTarget.unbindForWriting(renderstate);
          gl.clearDepth(1);
          gl.depthFunc(gl.LESS);
          gl.cullFace(gl.BACK);
          renderstate.geometryMaskTextures = [this.frontRenderTarget.depthTexture, this.backRenderTarget.depthTexture];
          renderstate.popGLStack();
      }
      drawGeomData(renderstate) {
          // We do not want to draw the masks to the GeomData buffer
          // else it will interfere with picking objects in the scene.
      }
  }
  GLRenderer.registerPass(GLMaskGeomsPass, PassType.PRE);

  //@ts-ignore
  console.log(`Zea Engine v${version}`);
  const libsRegistry = new LibsRegistry(version);

  exports.Allocation1D = Allocation1D;
  exports.Allocator1D = Allocator1D;
  exports.AngleParameter = AngleParameter;
  exports.AssetItem = AssetItem;
  exports.AssetLoadContext = AssetLoadContext;
  exports.Attribute = Attribute;
  exports.BaseClass = BaseClass;
  exports.BaseEvent = BaseEvent;
  exports.BaseGeom = BaseGeom;
  exports.BaseGeomItem = BaseGeomItem;
  exports.BaseGroup = BaseGroup;
  exports.BaseImage = BaseImage;
  exports.BaseItem = BaseItem;
  exports.BaseProxy = BaseProxy;
  exports.BaseTool = BaseTool;
  exports.BillboardItem = BillboardItem;
  exports.BillboardShader = BillboardShader;
  exports.BinReader = BinReader;
  exports.BinWriter = BinWriter;
  exports.BooleanOperatorInput = BooleanOperatorInput;
  exports.BooleanOperatorOutput = BooleanOperatorOutput;
  exports.BooleanParameter = BooleanParameter;
  exports.Box2 = Box2;
  exports.Box2Parameter = Box2Parameter;
  exports.Box3 = Box3;
  exports.Box3Parameter = Box3Parameter;
  exports.CADAssembly = CADAssembly;
  exports.CADAsset = CADAsset;
  exports.CADBody = CADBody;
  exports.CADPart = CADPart;
  exports.Camera = Camera;
  exports.CameraManipulator = CameraManipulator;
  exports.ChildAddedEvent = ChildAddedEvent;
  exports.Circle = Circle;
  exports.Color = Color;
  exports.ColorAttribute = ColorAttribute;
  exports.ColorOperatorInput = ColorOperatorInput;
  exports.ColorOperatorOutput = ColorOperatorOutput;
  exports.ColorParameter = ColorParameter;
  exports.ColorRenderState = ColorRenderState;
  exports.CompoundGeom = CompoundGeom;
  exports.Cone = Cone;
  exports.ControllerAddedEvent = ControllerAddedEvent;
  exports.CountChangedEvent = CountChangedEvent;
  exports.Cross = Cross;
  exports.Cuboid = Cuboid;
  exports.CuttingPlane = CuttingPlane;
  exports.Cylinder = Cylinder;
  exports.DataImage = DataImage;
  exports.Disc = Disc;
  exports.EnvMap = EnvMap;
  exports.EnvMapAssignedEvent = EnvMapAssignedEvent;
  exports.EnvMapShader = EnvMapShader;
  exports.EnvProjectionMaterial = EnvProjectionMaterial;
  exports.EnvProjectionShader = EnvProjectionShader;
  exports.EulerAngles = EulerAngles;
  exports.EventEmitter = EventEmitter;
  exports.FRAMEBUFFER = FRAMEBUFFER;
  exports.FatLinesMaterial = FatLinesMaterial;
  exports.FatLinesShader = FatLinesShader;
  exports.FatPoints = FatPoints;
  exports.FatPointsMaterial = FatPointsMaterial;
  exports.FatPointsShader = FatPointsShader;
  exports.FileImage = FileImage;
  exports.FileImage2D = FileImage2D;
  exports.FlatSurfaceMaterial = FlatSurfaceMaterial;
  exports.FlatSurfaceShader = FlatSurfaceShader;
  exports.Float32 = Float32;
  exports.Float32ArrayParameter = Float32ArrayParameter;
  exports.Frustum = Frustum;
  exports.GIFImage = GIFImage;
  exports.GLBaseRenderer = GLBaseRenderer;
  exports.GLBaseViewport = GLBaseViewport;
  exports.GLBillboardsPass = GLBillboardsPass;
  exports.GLBoundingBoxPass = GLBoundingBoxPass;
  exports.GLCADPass = GLCADPass;
  exports.GLFbo = GLFbo;
  exports.GLGeom = GLGeom;
  exports.GLGeomItem = GLGeomItem;
  exports.GLGeomItemChangeType = GLGeomItemChangeType;
  exports.GLGeomItemFlags = GLGeomItemFlags;
  exports.GLGeomItemSet = GLGeomItemSet;
  exports.GLGeomItemSetMultiDraw = GLGeomItemSetMultiDraw;
  exports.GLGeomItemSetMultiDrawCompoundGeom = GLGeomItemSetMultiDrawCompoundGeom;
  exports.GLLines = GLLines;
  exports.GLLinesItemSet = GLLinesItemSet;
  exports.GLLinesPass = GLLinesPass;
  exports.GLMaskGeomsPass = GLMaskGeomsPass;
  exports.GLMaterial = GLMaterial;
  exports.GLMaterialGeomItemSets = GLMaterialGeomItemSets;
  exports.GLMesh = GLMesh;
  exports.GLMeshItemSet = GLMeshItemSet;
  exports.GLOpaqueGeomsPass = GLOpaqueGeomsPass;
  exports.GLOverlayPass = GLOverlayPass;
  exports.GLPass = GLPass;
  exports.GLPoints = GLPoints;
  exports.GLPointsItemSet = GLPointsItemSet;
  exports.GLRenderTarget = GLRenderTarget;
  exports.GLRenderer = GLRenderer;
  exports.GLShader = GLShader;
  exports.GLShaderGeomSets = GLShaderGeomSets;
  exports.GLShaderMaterials = GLShaderMaterials;
  exports.GLStandardGeomsPass = GLStandardGeomsPass;
  exports.GLTexture2D = GLTexture2D;
  exports.GLTransparentGeomsPass = GLTransparentGeomsPass;
  exports.GLViewport = GLViewport;
  exports.GROUP_XFO_MODES = GROUP_XFO_MODES;
  exports.GeomDataRenderState = GeomDataRenderState;
  exports.GeomItem = GeomItem;
  exports.GeomLibrary = GeomLibrary;
  exports.GeometryParameter = GeometryParameter;
  exports.Grid = Grid;
  exports.GridTreeItem = GridTreeItem;
  exports.GrowingPacker = GrowingPacker;
  exports.HDRImage = HDRImage;
  exports.HighlightRenderState = HighlightRenderState;
  exports.IGeomShaderBinding = IGeomShaderBinding;
  exports.ImageParameter = ImageParameter;
  exports.IndexDBCache = IndexDBCache;
  exports.IndexEvent = IndexEvent;
  exports.InstanceItem = InstanceItem;
  exports.IntersectionData = IntersectionData;
  exports.ItemEvent = ItemEvent;
  exports.ItemSetParameter = ItemSetParameter;
  exports.KeyboardEvent = KeyboardEvent;
  exports.KinematicGroup = KinematicGroup;
  exports.LDRImage = LDRImage;
  exports.LDRVideo = LDRVideo;
  exports.Label = Label;
  exports.LabelManager = LabelManager;
  exports.Lines = Lines;
  exports.LinesCuboid = LinesCuboid;
  exports.LinesMaterial = LinesMaterial;
  exports.LinesProxy = LinesProxy;
  exports.LinesShader = LinesShader;
  exports.LinesSphere = LinesSphere;
  exports.ListParameter = ListParameter;
  exports.MaskMaterial = MaskMaterial;
  exports.Mat3 = Mat3;
  exports.Mat3OperatorInput = Mat3OperatorInput;
  exports.Mat3OperatorOutput = Mat3OperatorOutput;
  exports.Mat3Parameter = Mat3Parameter;
  exports.Mat4 = Mat4;
  exports.Mat4OperatorInput = Mat4OperatorInput;
  exports.Mat4OperatorOutput = Mat4OperatorOutput;
  exports.Mat4Parameter = Mat4Parameter;
  exports.Material = Material;
  exports.MaterialColorParam = MaterialColorParam;
  exports.MaterialFloatParam = MaterialFloatParam;
  exports.MaterialGroup = MaterialGroup;
  exports.MaterialLibrary = MaterialLibrary;
  exports.MaterialParameter = MaterialParameter;
  exports.MathFunctions = MathFunctions;
  exports.Mesh = Mesh;
  exports.MeshProxy = MeshProxy;
  exports.MultiChoiceParameter = MultiChoiceParameter;
  exports.NameChangedEvent = NameChangedEvent;
  exports.NumberOperatorInput = NumberOperatorInput;
  exports.NumberOperatorOutput = NumberOperatorOutput;
  exports.NumberParameter = NumberParameter;
  exports.ObjAsset = ObjAsset;
  exports.OpacityStateChangedEvent = OpacityStateChangedEvent;
  exports.Operator = Operator;
  exports.OperatorInput = OperatorInput;
  exports.OperatorOutput = OperatorOutput;
  exports.PMIItem = PMIItem;
  exports.PMIView = PMIView;
  exports.POINTER_TYPES = POINTER_TYPES;
  exports.Parameter = Parameter;
  exports.ParameterAddedEvent = ParameterAddedEvent;
  exports.ParameterOwner = ParameterOwner;
  exports.ParameterRemovedEvent = ParameterRemovedEvent;
  exports.PassType = PassType;
  exports.Plane = Plane;
  exports.PlaneType = PlaneType;
  exports.PointGrid = PointGrid;
  exports.Points = Points;
  exports.PointsMaterial = PointsMaterial;
  exports.PointsProxy = PointsProxy;
  exports.PointsShader = PointsShader;
  exports.ProceduralLines = ProceduralLines;
  exports.ProceduralMesh = ProceduralMesh;
  exports.ProceduralPoints = ProceduralPoints;
  exports.ProgressEvent = ProgressEvent;
  exports.Quat = Quat;
  exports.QuatOperatorInput = QuatOperatorInput;
  exports.QuatOperatorOutput = QuatOperatorOutput;
  exports.QuatParameter = QuatParameter;
  exports.RGBA = RGBA;
  exports.RangeLoadedEvent = RangeLoadedEvent;
  exports.Ray = Ray;
  exports.Rect = Rect;
  exports.RefCounted = RefCounted;
  exports.Registry = Registry;
  exports.RenderState = RenderState;
  exports.ResizedEvent = ResizedEvent;
  exports.ResourceLoader = ResourceLoader;
  exports.SInt16 = SInt16;
  exports.SInt32 = SInt32;
  exports.SInt8 = SInt8;
  exports.Scene = Scene;
  exports.SceneSetEvent = SceneSetEvent;
  exports.ScreenQuadShader = ScreenQuadShader;
  exports.ScreenSpaceMaterial = ScreenSpaceMaterial;
  exports.ScreenSpaceShader = ScreenSpaceShader;
  exports.SelectabilityChangedEvent = SelectabilityChangedEvent;
  exports.SelectedEvent = SelectedEvent;
  exports.SelectionSet = SelectionSet;
  exports.ShaderLibrary = ShaderLibrary;
  exports.ShaderNameChangedEvent = ShaderNameChangedEvent;
  exports.SimpleSurfaceMaterial = SimpleSurfaceMaterial;
  exports.SimpleSurfaceShader = SimpleSurfaceShader;
  exports.Sphere = Sphere;
  exports.SphereType = SphereType;
  exports.StandardSurfaceMaterial = StandardSurfaceMaterial;
  exports.StandardSurfaceShader = StandardSurfaceShader;
  exports.StateChangedEvent = StateChangedEvent;
  exports.StreamFileParsedEvent = StreamFileParsedEvent;
  exports.StringFunctions = StringFunctions;
  exports.StringListParameter = StringListParameter;
  exports.StringParameter = StringParameter;
  exports.StructParameter = StructParameter;
  exports.SystemDesc = SystemDesc;
  exports.TexturedChangedEvent = TexturedChangedEvent;
  exports.Torus = Torus;
  exports.Touch = Touch;
  exports.TreeItem = TreeItem;
  exports.TreeItemParameter = TreeItemParameter;
  exports.UInt16 = UInt16;
  exports.UInt32 = UInt32;
  exports.UInt8 = UInt8;
  exports.UnpackHDRShader = UnpackHDRShader;
  exports.VLAAsset = VLAAsset;
  exports.VRController = VRController;
  exports.VRViewport = VRViewport;
  exports.Vec2 = Vec2;
  exports.Vec2Attribute = Vec2Attribute;
  exports.Vec2OperatorInput = Vec2OperatorInput;
  exports.Vec2OperatorOutput = Vec2OperatorOutput;
  exports.Vec2Parameter = Vec2Parameter;
  exports.Vec3 = Vec3;
  exports.Vec3Attribute = Vec3Attribute;
  exports.Vec3OperatorInput = Vec3OperatorInput;
  exports.Vec3OperatorOutput = Vec3OperatorOutput;
  exports.Vec3Parameter = Vec3Parameter;
  exports.Vec4 = Vec4;
  exports.Vec4Attribute = Vec4Attribute;
  exports.Vec4OperatorInput = Vec4OperatorInput;
  exports.Vec4OperatorOutput = Vec4OperatorOutput;
  exports.Vec4Parameter = Vec4Parameter;
  exports.Version = Version;
  exports.VertexColorMaterial = VertexColorMaterial;
  exports.VertexColorShader = VertexColorShader;
  exports.VideoStreamImage2D = VideoStreamImage2D;
  exports.ViewChangedEvent = ViewChangedEvent;
  exports.VisibilityChangedEvent = VisibilityChangedEvent;
  exports.XRController = XRController;
  exports.XRControllerEvent = XRControllerEvent;
  exports.XRHead = XRHead;
  exports.XRPointerEvent = XRPointerEvent;
  exports.XRPoseEvent = XRPoseEvent;
  exports.XRViewChangedEvent = XRViewChangedEvent;
  exports.XRViewManipulator = XRViewManipulator;
  exports.XRViewport = XRViewport;
  exports.XRef = XRef;
  exports.Xfo = Xfo;
  exports.XfoOperatorInput = XfoOperatorInput;
  exports.XfoOperatorOutput = XfoOperatorOutput;
  exports.XfoParameter = XfoParameter;
  exports.XrViewportEvent = XrViewportEvent;
  exports.ZeaKeyboardEvent = ZeaKeyboardEvent;
  exports.ZeaMouseEvent = ZeaMouseEvent;
  exports.ZeaPointerEvent = ZeaPointerEvent;
  exports.ZeaTouchEvent = ZeaTouchEvent;
  exports.ZeaUIEvent = ZeaUIEvent;
  exports.ZeaWheelEvent = ZeaWheelEvent;
  exports.checkFramebuffer = checkFramebuffer;
  exports.create3DContext = create3DContext;
  exports.genDataTypeDesc = genDataTypeDesc;
  exports.generateShaderGeomBinding = generateShaderGeomBinding;
  exports.getFileFolder = getFileFolder;
  exports.labelManager = labelManager;
  exports.libsRegistry = libsRegistry;
  exports.loadBinfile = loadBinfile;
  exports.loadJSONfile = loadJSONfile;
  exports.loadTextfile = loadTextfile;
  exports.loadXMLfile = loadXMLfile;
  exports.resourceLoader = resourceLoader;
  exports.shaderLibrary = shaderLibrary;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
